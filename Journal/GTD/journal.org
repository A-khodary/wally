#+LATEX_HEADER: \usepackage[boxed, lined]{algorithm2e}
# #+LATEX_HEADER: \usepackage{minted}
# #+LATEX_HEADER: \usepackage{float}

# freemind
# .sdcv_history
# agenda
# obj

- [ ] Project: IMUtoolboox
- [ ] Progress: Deutsch
- [ ] Thesis: Gazebo sim

* Objective
** month

+ [ ] 写完大论文初稿
+ [ ] 完成一篇小论文
+ [ ] IMUtoolbox / PythonSLAM / TimBailey

** week

+ [ ] EK-SLAM & Gazebo Sim & Thesis
+ [ ] PF

** 2016/01/11

+ [X] freemind
+ [X] wally & julie
+ [X] software
+ [X] ROS opencv

** 2016/01/01
+ [X] wally gazebo 仿真实现三维建模
+ [X] 小车测试 Hector SLAM
** 2016/01/02
+ [X] 理解 Hector SLAM 中 map/odom/base_footprint 的配置（仿真中即可）
+ [X] 绪论 SLAM 部分
** 2016/01/03
+ [X] gazebo worlds
+ [X] 使用小车采集数据实现三维建模（保存数据，不用实时）
+ [ ] 使用 Raspberry 采集数据
+ [X] 理解 Hector SLAM 的 base_stablized 坐标配置
** 2016/01/04
+ [X] 采集小车本身的数据
+ [X] IMU 积分算法
+ [X] 完成论文定位部分
** 2016/01/05

+ [X] laser_filter/laser_assembler/PLC
+ [ ] Samba 配置
+ [X] 推导 PF，莫放拦路虎
+ [X] 特征地图论文

** 2016/01/06
+ [X] PCL
+ [ ] SLAM 论文部分
** 2016/01/07
+ [X] 考虑电池和电路板
+ [X] PCD
+ [X] SLAM 论文部分
** 2016/01/08
+ [X] 考虑学报
+ [X] PF SLAM
+ [X] Gazebo sim
* Journal

** ROS

- sql http://wiki.ros.org/sql_database
- arbotix_python http://wiki.ros.org/arbotix_python?distro=indigo#Services
- Q&A
  - http://answers.ros.org/question/95486/hector-slam-with-turtlebot-in-gazebo/
  - http://answers.ros.org/question/46004/turtlebothector-slam-possibile-or-not/
- http://wiki.ros.org/hector_turtlebot
- http://wiki.ros.org/hector_turtlebot
- http://www.ros.org/news/2014/12/updated-package-razor-imu-9dof.html
-
  http://answers.ros.org/question/99211/how-to-combine-a-camera-image-and-a-laser-pointcloud-to-create-a-color-pointcloud/

** PCL

#+include: ~/Wally/Project/pcl_tutorials

http://www.pointclouds.org/documentation/tutorials/

*** [[http://www.pointclouds.org/documentation/tutorials/basic_structures.php#basic-structures][Basic Structure]]

*PointCloud*

- width
- height
- points
- is_dense
- sensor_origin
- senor_orientation

To simplify development, the PointCloud class contains a number of
helper member functions. For example, users don’t have to check if
height equals 1 or not in their code in order to see if a dataset is
organized or not, but instead use *PointCloud()*:

#+BEGIN_SRC cpp
if (!cloud.isOrganized ())
#+END_SRC

**** writing point cloud data to PCD files

#+include: ~/Wally/Project/pcl_tutorials/src/pcd_write.cpp

头文件位置 =/usr/include/pcd-1.7/pc/=

#+BEGIN_SRC cpp
#include <pcl-1.7/pcl/io/pcd_io.h>
#include <pcl-1.7/pcl/point_types.h>
#+END_SRC

创建 link

#+BEGIN_EXAMPLE
 ~ $ ls -l /usr/include/pcl
lrwxrwxrwx 1 root root 24  1月  7 09:53 /usr/include/pcl -> /usr/include/pcl-1.7/pcl
#+END_EXAMPLE

**** CMakeLists.txt

#+include: ~/Wally/Project/pcl_tutorials/CMakeLists.txt

*** [[http://www.pointclouds.org/documentation/tutorials/voxel_grid.php#voxelgrid][Downsampling a PointCloud using a VoxelGrid filter]]


- *downsample*: reduce the number of points
- using a *voxelized grid* approach

#+include: ~/Wally/Project/pcl_tutorials/src/voxel_grid.cpp

*** Merging PCDs
**** concatenate the points of two points clouds

http://pointclouds.org/documentation/tutorials/concatenate_clouds.php

#+include: ~/Wally/Project/pcl_tutorials/src/concatenate_clouds.cpp

** Linux
*** [[https://mp.weixin.qq.com/mp/appmsg/show?__biz=MzA3MzAwMjAxMQ==&appmsgid=10000009&itemidx=1&sign=c926ff23def356a4a0f2ed7141c466d6&scene=1&srcid=0118jxrIABVW8XwWSGpkpoJd&pass_ticket=8B57gmAPihhXDqY3DNHOKiG9154WT42aR6KFVbb%2FAFpL7bBsnVOOoPubYSkLb3iH][当你想放弃时，看看这幅漫画！]] :责任:

[[/home/wally/Wally/Journal/Figure/scrot/32504b9n.png]]

这篇东西转自一位有思想的研究生！她看到这篇漫画，觉得很不错，我看后也觉
得值得我们思考，尤其是当我们抱怨时！

[[/home/wally/Wally/Journal/Figure/scrot/32504oHu.png]]

第一幅漫画中，每个人都背负着一个沉重的十字架，在缓慢而艰难地前行！

[[/home/wally/Wally/Journal/Figure/scrot/325041R0.png]]

途中，有一个人忽然停了下来。他在想着什么！

[[/home/wally/Wally/Journal/Figure/scrot/32504nbD.png]]

他想，上帝啊，这个十字架太沉重了，我可以把十字架砍掉一块！

[[/home/wally/Wally/Journal/Figure/scrot/325040lJ.png]]

于是他动手砍了起来！

[[/home/wally/Wally/Journal/Figure/scrot/32504BwP.png]]

砍掉之后走起来，的确是轻松了很多，他的步伐也不由得加快了。

[[/home/wally/Wally/Journal/Figure/scrot/32504oOi.png]]

就这样走啊走啊！走着走着，他觉得肩上的十字架还是很沉，很重！

[[/home/wally/Wally/Journal/Figure/scrot/325041Yo.png]]

他祈求道，上帝啊，请你让我再砍掉一截吧，我会走得更轻松！

[[/home/wally/Wally/Journal/Figure/scrot/32504Cju.png]]

于是，他又砍掉了一截！感谢上帝，这样一来，他感到轻松多了！

[[/home/wally/Wally/Journal/Figure/scrot/32504Pt0.png]]

如此，他毫不费力地就走到了队伍的最前面。当其他人在吃力地负重前行时，他
却轻松地哼起了小曲！

[[/home/wally/Wally/Journal/Figure/scrot/32504B3D.png]]

啊哈!谁料，前边忽然出现了一个又深又宽的沟壑！沟上没有桥，周围
也没有路。也没有蜘蛛侠或者超人出来解救他…

[[/home/wally/Wally/Journal/Figure/scrot/32504bLQ.png]]

后面的人都慢慢地赶上来了，他们用自己背负的十字架搭在沟上，做成桥，从容
不迫地跨越了沟壑。

[[/home/wally/Wally/Journal/Figure/scrot/32504oVW.png]]

他也想如法炮制。只可惜啊，他的十字架之前已经被砍掉了长长的一大截，根本
无法做成桥帮助他跨越沟壑！

[[/home/wally/Wally/Journal/Figure/scrot/325041fc.png]]

于是，当其他人都在朝着目标继续前进时，他却只能停在原地，垂头丧气，追悔
莫及……

每个人都背负着属于自己的十字架，的确是这样，漫画中的每个人，都是背负着
属于自己的十字架，而当沟壑出现时，他们也只能利用自己背负的十字架去跨越
沟壑，继续前进。

所以：在人生的道路上，有些黑暗，只能自己穿越；有些痛苦，只能自己体验；
有些孤独，也只能自己品尝……人生是没有捷径的！

*** [[http://daily.zhihu.com/story/4573178?utm_campaign=in_app_share&utm_medium=Android&utm_source=Weixin&from=timeline&isappinstalled=0][哪些习惯能让生活变得简洁高效？]] :知乎:习惯：极简主义:

个人现状是处在三条规则，距离一条规则完全保持简约的生活方式还要努力几年时间。

**** 让生活变得简洁而高效只需要一条规则

就是照管好自己，保持一种简约的生活方式, 控制好自己的内心，从加法生活过
度到减法生活。

**** 如果觉得这一点说的太简单，就可以扩展成三条

*第一条：应用好 80/20原则*

把这个法则用在生活的各个方向中，把时间和精力放到自己擅长事情和主要目标
上，比如工作、家庭、友情、爱好、情绪，提高生活的质量和稳定

*第二条：做好精力管理，保持稳定而规律的生活方式：*

应该根据自己的精力进行安排和调整生活，周期性地补充精力，来平衡精力消耗。
需要对你的精力进行海战略性的规划和应用，并把它当成一种习惯。

人们的精力有4种来源，身体的、情感的、思想的和精神的，这4种精力资源需要
在消耗和储备之间取得平衡才能保证不会枯竭。


*第三条、 控制过度消费和物质过剩*

最初从减少选择开始，然后是学会丢东西，最成功的一次是用几个月时间丢掉了
50种不同类型的东西，包括当时的工作和26斤体重，整个生活立刻就简单了很多，
但距离断舍离的要求还有差距：

断舍离”是指：

断 = 不买、不收取不需要的东西

舍 = 处理掉堆放在家里没用的东西

离 = 舍弃对物质的迷恋，让自己处于宽敞舒适，自由自在的空间。


选择物品时不是“能不能用”，而是“我要不要用”。

扩展阅读：

-  [[http://www.read.org.cn/html/1386-reduce-the-choice-to-let-you-save-time.html][减少选择让你节省时间]]
-  《丢掉50样东西，找回100分人生》读书笔记
   --[[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200035644&itemidx=1&sign=6f0cd694354b3f75b757e41bc93b767b][warfalcon]]
-  进阶时看《断舍离》 [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000734&itemidx=1&sign=31ac402a40a351bf6823237d2d020057][warfalcon]]


**** 觉得这三条还是太难，那继续扩展成九条

只要减少这九类时间黑洞，生活中就会简约高效


*1、减少网络黑洞时间：*

每个人都离不网络，而网络上的无效时间黑洞是最多的：

不看新闻：

-  *时间管理之新闻阅读*[[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000055&itemidx=1&uin=MjU4MjUyNzM2MA%3D%3D&key=79cf83ea5128c3e59a05178691cc0d51487d45a3b3704ccaa2340ff568d898b089e6e31cf75c6a261042289e859b66c0&devicetype=android-10&version=25000338&lang=zh_CN&pass_ticket=1V0MbhKBMhjP%2BE4eiEonppyltegkgcZRy%2F%2FCxeKJlauehqow4jLPOnbhMpyI0xCB#wechat_webview_type=1#wechat_redirect&From=test][warfalcon]]**
-  你是在掌控新闻还是被新闻所掌控？
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200791870&itemidx=1&sign=77679932e20ecb28fa3ae6c26f653caf&scene=4&uin=MjU4MjUyNzM2MA%3D%3D&key=79cf83ea5128c3e59a05178691cc0d51487d45a3b3704ccaa2340ff568d898b089e6e31cf75c6a261042289e859b66c0&devicetype=android-10&version=25000338&lang=zh_CN&pass_ticket=1V0MbhKBMhjP%2BE4eiEonppyltegkgcZRy%2F%2FCxeKJlauehqow4jLPOnbhMpyI0xCB#wechat_webview_type=1#wechat_redirect&uin=MjU4MjUyNzM2MA%3D%3D&key=79cf83ea5128c3e59a05178691cc0d51487d45a3b3704ccaa2340ff568d898b089e6e31cf75c6a261042289e859b66c0&devicetype=android-10&version=25000338&lang=zh_CN&pass_ticket=1V0MbhKBMhjP%2BE4eiEonppyltegkgcZRy%2F%2FCxeKJlauehqow4jLPOnbhMpyI0xCB#wechat_webview_type=1#wechat_redirect&uin=MjU4MjUyNzM2MA%3D%3D&key=79cf83ea5128c3e59a05178691cc0d51487d45a3b3704ccaa2340ff568d898b089e6e31cf75c6a261042289e859b66c0&devicetype=android-10&version=25000338&lang=zh_CN&pass_ticket=1V0MbhKBMhjP%2BE4eiEonppyltegkgcZRy%2F%2FCxeKJlauehqow4jLPOnbhMpyI0xCB#wechat_webview_type=1#wechat_redirect&From=test][warfalcon]]
-  为什么你不应该读新闻
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200781923&itemidx=1&sign=96c0608f4ab861aac6271cf737d334ae][warfalcon]]

微信篇：

-  除非工作需求，否则每天集中查看三到四次微信，每次10分钟集中回复。
-  关闭微信朋友圈
-  定期退出无用的微信群
-  取消和关闭所有微信通知，否则微信的通知会不断的弹出信息来干扰和打断你

QQ篇：

1. 除非工作需求，否则一、二天登陆一次QQ
2. 定期评估并退出QQ群
3. 并关闭各种广告及提示。

邮件篇：
*[[http://www.read.org.cn/html/1986-shi-jian-guan-li-zhi-jian-chu-li-1-hai-liang-jian-chu-li.html][时间管理之邮件处理（1）海量邮件处理]]
*

*2、减少请求黑洞：*

学会拒绝工作和生活中各种要求，能减少大量的时间

要根据实际情况对要求做出判断。收到一个任务之后，应该问问自己：我必须马
上处理这个要求吗？我遇到最坏的情况就是每一项任务都是紧急的，需要立刻完
成。因为紧急任务一多，就会发现一整天都在不停地从一个工作转移到另一个工
作，最终一事无成。

对于别人的紧急要求，别立刻接受，而是提出一个近期内更合理的时间，以便完
成他/她手中的工作后处理新要求。然后将这个要求同其他相同的要求合并进行
批量处理。

*扩展阅读：*

-  [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000492&itemidx=1&sign=94c0656089fbaf9a6b751a5bbab54b4b][warfalcon]]
-  [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000495&itemidx=1&sign=b1adeb2d5aac7069cce791cda2bb5726][warfalcon]]


*3、减少选择黑洞*

我们必须控制过量选择，只把精力和时间放在生活中最重要的选项上，放弃一些
不重要的选择机会。千万别过于追求完美，做选择时要考虑好时间成本和机会成
本，而且一旦选择之后，别浪费精力去为其它放弃的选择而后悔。减少跟他人的
比较。

最好建立一个自己做选择的框架，在面临一些人生中的重大问题时可以更好的选
择和权衡。

扩展阅读：

-  控制过多的选择
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000177&itemidx=1&uin=MjU4MjUyNzM2MA%3D%3D][warfalcon]]
-  针对大量选择时的最优策略
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000738&itemidx=1&sign=b1ce75ef1000a3b70e770060e32d3b99][warfalcon]]
-  [[http://www.zhihu.com/question/19591602/answer/36731615][如何做选择才不会后悔？ - warfalcon 的回答]]


*4、减少负面情绪黑洞*

能正确面对恐惧、焦虑、抱怨等负面情绪，

扩展阅读：

-  [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000759&itemidx=1&sign=27c1add809978d24c929c82738753a76][warfalcon]]
-  [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=201278840&itemidx=1&sign=a31cc5b12cf9be442ee1d07338376f3e#rd][warfalcon]]

5、减少注意力黑洞

-  如何集中自己的注意力
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000066&itemidx=1&uin=MjU4MjUyNzM2MA%3D%3D][warfalcon]]
-  观察自己的呼吸
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=203934058&itemidx=1&sign=e240a22c7e63853168c863c30c912577#rd][warfalcon]]
-  集中注意力的入门方法
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200983071&itemidx=1&sign=5ea7109a5848631609a7e0c81dc19983#rd][warfalcon]]
-  从管理时间转向管理注意力
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=201082765&itemidx=1&sign=de78e74517d821092b5cd062d42f293e][warfalcon]]
-  集中注意力的十大秘诀
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=201401194&itemidx=1&sign=9570baf0bb1fbc52c2c6ece7a4cb2add#rd][warfalcon]]
-  写给注意力严重不集中人士的生活建议
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=205820380&itemidx=1&sign=b5f6285133b0e65cea78336124a128c0#rd][warfalcon]]
-  学会在网络上控制你的注意力
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000685&itemidx=1&sign=09a1c1c940c29b1af205784d0159ce2f][warfalcon]]
-  学会在网络上控制你的注意力
   （2）[[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000688&itemidx=1&sign=be90345c551fa4c16c3aa91200e2685f&][warfalcon]]
-  用清理桌面物品来集中注意力：我常用的一种方法把笔记本关机，然后用笔
  记本清洁工具，把键盘、屏幕好好擦一下，然后看到焕然一新的笔记本心情大
  好。

6、减少交际黑洞

7、减少沟通黑洞

工作篇：

学会开会：*只去参加必要的会议*
[[http://www.zhihu.com/question/20291195/answer/15595509][开高效率的会议，有哪些好的经验？
- warfalcon 的回答]]

学会授权和培养新人：

-  [[http://www.read.org.cn/html/1563-monkey.html][《别让猴子跳回背上》读书笔记]]
-  快速培养新人的四个方法
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=202558668&itemidx=1&sign=62f0f7914474712f96af84ea8f66b269#rd][warfalcon]]

生活篇：


8、减少拖延黑洞

扩展阅读：

-  我的战拖策略
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200321752&itemidx=1&sign=e15045518f8cb1f89109961166752b6b][warfalcon]]
-  战拖小技巧
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=202225151&itemidx=1&sign=6fffbbd02142e150a56636f1f8d88a8d][warfalcon]]
-  《一分钟能做什么？》60招对抗拖延
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=202103054&itemidx=1&sign=9f9ca10919eededa948ae6395d01db77#rd][warfalcon]]
-  [[http://www.read.org.cn/html/2322-tuo-la-yi-dian-ye-wu-fang-zhong-de-jie-gou-hua-tuo-yan.html?From=test][《拖拉一点也无妨》中的结构化拖延]]
-  告别拖延症的7个信条
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=201182906&itemidx=1&sign=89d62d5852b848338ebb20cc62068595#rd][warfalcon]]
-  对抗的拖延两种方法
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=205332382&itemidx=2&sign=4880ef380f52f401332ada12fdf28a71#rd][warfalcon]]
-  《战胜拖延症》笔记
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200233145&itemidx=1&sign=f64af36f8c909993966140447c54003c][warfalcon]]
-  对抗睡前拖延
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=201089296&itemidx=1&sign=03827fccc3ecf45edb9946bca9ed239b][warfalcon]]
-  拖延处理技巧汇编
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000048&itemidx=1&uin=MjU4MjUyNzM2MA%3D%3D][warfalcon]]
-  《拖延心理学》中的12条应对技巧
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000365&itemidx=1&sign=2f8da62dc06a8be12691f8dd6a995a63][warfalcon]]


9、

**** 觉得这九条做到有些困难，那继续扩展成81条

1. 整理好办公桌 [[http://mp.weixin.qq.com/s?__biz=MjM5NjA3OTM0MA==&mid=204814936&idx=1&sn=fdc5f29e094ac9bc4b91a1c13f160296#rd][warfalcon]]

2. 每周提前做好下一周的规划和时间安排：[[http://www.zhihu.com/question/27783349/answer/38065315][如何让星期天的晚上过得更有意
   义？-warfalcon 的回答]]

3. 不整理名片，直接扫描，用名片全能王，直接扫描一下，大多数名片都能自
   动提取并识别，然后有时间的时候统一处理一下，一张名片只需要20、30秒
   就能处理完。

4. 问自己，如果我不做这件事情的话. 是否会出现极其严重的后果呢？”如果
   答案是否定的话. 我就会取消这件任务。

5. 提早1小时出门，在途中确认每天日程表

6. 多利用录音来取代手写的备忘录，用来记录各种想法和点子

7. 练就3分钟内长话短说的功夫

8. 工作日的时候，每天5点钟起床（晚上早些上床睡觉）。

9. 早上起床的时候做几个简单的体操，加上几个深呼吸，可以上大脑马上清醒

10. 午饭吃得很少，这样下午就不会感到困倦。

11. 用消噪耳机把公共场所变成书房

12. 读书的时候，我只会用很少时间，只了解书的要点内容。

13. 不要太相信记忆力，要勤做笔记，记录下来的东西要定期整理，消化。

14. 学习开会，要有重点，会后会把会议要点记录在一张A4纸上.

15. 不把日程表排满任务，每天留出三十分钟给自己，去跟自己约个会。在这段
    时间里，可以思考自己现在处于什么状态，思考将来需要一步步完成些什么，
    对未来进行长期的展望。

16. 放弃所有的“等待时间”。如果我不得不等待的时候，我将其看成是放松自
    我的机会，或者我也可以利用这段时间来做一些我平时不会做的事情。

17. 只要你多花一点心思，把自己的生活设计的更加有趣更加迷人，就能让你的
    生活丰富起来

18. 把你经常用的固定句式进行自定义加入词库中，比如搜狗输入法里面就有批
    量造词，把地址、邮箱、问候语、公文格式之类做成短语，打字速度会马上
    提高很多

19. 每天都会浏览一下自己的人生目标，并确保自己每天都会做一些事情来推进
    自己的人生目标。

20. 把目标可视化，设成手机壁纸或桌面壁纸，每天会重复提醒自己。

21. 即便是在做一些最不起眼的工作的时候，我都会想着自己的长期目标。

22. 尽量只做A级活动，少做B、C级活动。

23. 在开始一个大型项目的时候，我会首先从那些最重要的部分开始，并经常发
    现其他部分其实并不重要。

24. 首先做重要的事情。

25. 每当完成一些比较重要的任务之后，给自己放个假，或者是给自己一些特殊
    的奖励。

26. 集中精力处理那些能够带来长期收益的事情.

27. 一次只集中精力处理一件事情。

28. 坚持一件件完成'事务清单”上的工作。

29，把自己的大部分想法记录下来。

30. 用早晨的时间做一些比较有创造性的工作，然后利用下午的时间召开会议
    （如果有必要的话）。

31. 为自己和其他人设定最后期限。

32. 在每次跟人讨论的时候都会积极聆听。

33. 尽量不浪费其他人的时间（除非是一些对我真正重要的事情）。

34. 尽量把一些事情委托给他人完成。

35. 请专家来帮助我完成一些专业性的问题。

36. 请人帮助我处理所有常规性工作。

37. 尽量减少纸面工作。

39. 每份文件我只处理一次。

40. 把自己的桌面整理干净. 并把最重要的工作放到办公桌中央。

41，为所有的文件准备了专门的地方（这样我就不用再花时间到处找它们）。

42. 每个月会专门抽出三小时时间来处理琐碎事情。

43. 周末的时候尽量不考虑工作。

44. 经常让自己放松，什么都不做。

45. 我意识到迟早有一天，我会用一些时间来应付一些自己无法控制的事悄. 我
    不会为此感到厌烦。

46. 不断问自己，“我现在最应该做什么事情？”

47. 利用思维导图把握总体结构

48. 不要长时间连续学习: 每个人的精力是有限，并一定长时间学习效果就好

49. 花钱上课，强迫自己学习

50. 寻找学习伙伴，避免半途而废

51，冬天把空调设定在20℃

52. 利用腹式呼吸消除杂念

53. 马上实践学过的知识

54. 阅读中有30%～50%都是没用的

55. 给大脑0.5～9小时来处理信息，再回顾才会有新收获，不要在难点上停留

56. 倾听微弱的声音能提高注意力，每天练习3分钟

57. 每天做件不愿做的事

58. 自我讲授，像老师教学一样把资料概述出来，疑点会变得清晰

59. 大脑更喜欢图像

60. 技能不是持久的，不练习，它每天都在退步

61. 把问题用另一个角度重复一遍

62. 画效率/时间曲线表

63. 每天花10分钟写随笔，不要停顿

64. 不要压制欲望，化解它

65. 微笑释放的化学物质对紧张和愤怒极有效

66. 总是全力以赴，因为你最好的一面每段时间都不一样

67. 从别人的错误中学习，脑中犯的错越多现实中越少

68. 每天运动一刻钟

69. 区分抱怨，停止抱怨

70. 一年是很长的时间，重复就是力量

71. 每工作90~120分钟便需要休整，再全力以赴

72. 问自己，愿用2小时把事情做到80%还是4小时做到100%？它需要做到完美吗？

73. 为每页笔记作出简要总结，方便日后抓住重心

74. 整出条理可按时间、地点、连续统（难~易）、种类和字母排序

75. 觉得再难的，只要你能静下心来反复练习，就会有进步。

76. 找办法督促自己执行任务

77. 不要服用不必要的维生素和补充品。

78. 每年性生活高潮的次数越多、质量越高，你就越年轻。

79. 坚持每天吃早餐。

80. 低卡路里、高营养价值、均衡饮食。

81. 固定的睡眠时间能帮助你保持年轻。女性每晚睡眠时间7小时，男性8小时。

-------------------------------------------------------------------------------------------------------
觉得这81条也还是有问题，那继续扩展成6561条：
-------------------------------------------------------------------------------------------------------

这个版本可以直接关注我的微信、知乎、Blog和豆瓣，写了8年快完成1/3
了，还有 2/3 估计在我死之前还是很有希望的。

**** 对这么多的技巧应该如何吸收和整理？

*去“做”，但不要期待任何 “结果”。*

第一步分类。把不同的技巧，按用处或类型，从新整理一下。放上关键字，收藏
起来。

第二步删除。对你帮忙不大或暂时用不了的技巧。

*第三步挑出少数几条实践。* 选择一些能解决你当前问题的技巧，从现在开始
尝试。可以列个清单。

第四步记录。每尝试完一条之后，记录一下心得，想想是否有可以改变的地方或
者直接放弃。

第五步总结。积累5-10条实用小技巧之后，写篇文章总结一下，找机会分享出来，
你会发现在写的时间，会考虑一些以前想不到的问题，分享也能让你印象更深刻。

*** [[https://mp.weixin.qq.com/s?__biz=MzA3MjM2MzYzOQ==&mid=402437707&idx=1&sn=02c915a39a2124790476688c0bde69d9&scene=1&srcid=0115wtZqKbY2mdXhwAlhVlmz&pass_ticket=8B57gmAPihhXDqY3DNHOKiG9154WT42aR6KFVbb%2FAFpL7bBsnVOOoPubYSkLb3iH#rd][孩纸，事情不象你想的那么简单]] :行动:

文：雾满拦江

（01）

明朝时，有个叫李晟的人，他心怀大志，胸有奇谋，痴迷军事器械研究，发明了
许多先进武器，战车连弩什么的。朝廷是非常重视这类科学家的，立即传令工部，
照着李晟的图纸打造弓弩战车。

战车连弩很快打造出来了，可是怎么看都有点不对------车装配不起来，弓弩拉
不动。都是废品，根本没法儿用。

李晟以坐废钱粮之罪，贬。

好多年后，李晟再次卷土重来，给朝廷呈上他最新研究出来的战甲。朝廷仍然一
如既往的重视，立命工部铸造。

但这次，工部多了个心眼，铸造新式兵甲可以，但要求李晟本人，要先行试用。

试用就试用，等兵甲造出来，往李晟身上一扣，就听哐的一声巨响，李晟被他自
己研究出来的兵甲，死死的扣在了地下，怎么用力都爬不出来。

原来，李晟研究的兵甲，防御力量绝对没的说，刀砍不入水泼不进，就是忽略了
人体的承受重量。这兵甲一旦穿在身上，就被压得趴在地上，根本爬不动......

（02）

纪大烟袋纪晓岚，写了本《阅微草堂笔记》，书中提到一个怪人刘羽冲：

刘羽冲，沧州人。他也是个喜欢琢磨事儿的人。有一次，他无意中得到本古兵书，
潜心研读多年，终于破关而出。言称其可统兵十万众。恰逢当地闹土匪，刘羽冲
主动担纲领队，率乡勇出击土匪。一触即溃，如果不是刘羽冲逃得还算快，铁定
被土匪捉去了。

从此刘羽冲不言兵事。

又不久，他又得到了一本古水利书，再次潜心研读多年，终于破关而出，自谓可
使千里成沃壤。游说于州官。州官也是位富创新精神的冒险家，遂大胆采用刘羽
冲先生的方法，开渠治水。岂料沟渎初成，大水狂涌而入，州郡之人，几为鱼鳖。

连续的失败，让刘羽冲陷入忧伤之中。他每天独自徘徊在台阶下，不时的自言自
语：噫吁戏，古人都是王八蛋，净写假书把我骗。都怪老子太犯贱，连续上当没
咒念......

（03）

晚清年间，倡导洋务。有下有个蒋老汉，是个创新型的实干家。他在报纸上看到
洋人的火轮船，顿发宏愿，要亲手制造一艘。

制造一艘铁甲战船，那要花老钱了。蒋老汉舍得投入，他花光家产，负债累累，
凑足了材料，然后拎只小铁锤上阵了：叮哩当啷，哐哐咣咣，不眠不休的苦战了
不知几多日月，最终是功夫不负苦心人，一艘华丽的铁甲船，终于成功的制造出
来了。

铁船下水之日，三乡五里的人全都跑来看热闹，被蒋老汉的创意深深的折服：看
看人家，你看看人家，敢想敢干敢冒险，真是了不起......哎哟，那是怎么回事？

没怎么回事，就是蒋老汉研究出来的铁甲船，一碰到水，就听咕嘟咕嘟，瞬间就
沉没了。

造了这么多日子的铁甲船，刚刚见水就沉了，这未免......蒋老汉呆立水边，茫
然失措。

一个看热闹的人告诉他：老蒋呀，你的创新精神，是好的，是应该受到鼓励和支
持的。可是这世上的事儿，不是你胆肥儿就能干明白的。单说这铁甲船，在洋人
那里都是个超复杂的问题，要学好多好多的知识，才可以......

原来是这样啊，蒋老汉毅然发了狠，要送儿子去西洋，学习制造铁甲船。

蒋老汉把儿子送去了西洋，可是这个儿子学了半天，还是没弄会如何制造铁甲船。
他毕业归国，去北大当了校长，专门告诉孩子们：骚年，这个做事呢，不象你们
想的辣么简单，真的不象，就比如说咱爹......

这位校长，叫蒋梦麟。

（04）

前段时间，一位当父亲的在我微信里留言，说了这么件事：

他的儿子，大学毕业了，雄心勃勃，要开工办厂。

可是，这家人父亲没开过厂，爷爷没经过商，祖上十八代都是凡人，你个熊孩子
开口就要开厂，你懂得厂门该向哪儿开吗？

孩子才不管，在家里大吵大闹，要家里拿五十万创业基金出来。

钱是有，可五十万，足以让这家人抽筋剥皮了，毕竟是工薪阶层......可这苦情，
根本不能跟读了书的孩子讲。这孩子读书读得已经不会说人话了，开口就骂：五
十万你都拿不出来，活这辈子还不如条狗，现在赚钱这么容易，狗汪汪两声都能
赚五十万......

家里被这孩子闹得乌烟瘴气，最后老伴屈服了，瞒着他给了孩子存折。

不出所料，孩子拿到钱，立即就消失了。不久有债主找上门来，厂子没见到，据
来人说孩子还在外边欠下一百来万......此时家人心急如焚，到处找孩子，最终
在家网吧，成功的把那熊孩子找回来。那孩子回来时梗着脖子，一脸的不服不忿，
此后爹妈做牛做马还债，这孩子就呆坐在沙发上看电视，还不能问他怎么欠下人
家的钱，一问这孩子就疯起来......

那位父亲问：你说我儿子，这书他究竟是怎么读的呢？读到最后，连事情看着容
易做起来难，这么简单个道理，他都不懂了呢？

（05）

前段时间，我的几个写字吃饭的朋友，聚一起喝酒，一边喝一边愤慨：唉，什么
世道，这人都是瞎了眼吗？你看那个谁，那个谁，还有那个谁谁谁，他们写的东
西，叫什么玩艺儿呀？烂到家的文章，根本看不下去，可是他们都红了，还大红
大紫，这可真是日了狗了。

咱们也要红！

咱们几个的才华，比他们强上几百倍，想红不过是分分钟的事儿！

而且，咱们是个团队，随便扔过去一个，都把他们砸趴下的那种。咱们几个合写
一个微信公众号，大家轮流上，每天一篇原创，最多不出半个月，准保大火。火
了后咱们就那啥......那啥......

干啦！

然后他们就真的开了个公众号，联手上，一共五个人，每五天轮一圈，每天一篇
原创文章。

头两圈，大家严肃认真，克尽职守。

到了第三圈，有位老兄讨个巧，他没写文章，顺手把他早年写的诗，发上去凑个
数。

他的想法是，我就今天偷个懒，有你们四个人的原创撑着呢，整体质量也不会下
降，等我哪天灵感来了，写篇涨粉的......

不曾想，另外几个老兄，也是这种想法。只是不好意思，见这老兄先行下了手，
大家心里再无顾忌。

从此这个公众号，发的时候随便抄几句，或者干脆停发，就这样过了段时间，这
个公众号，大家就很少登录了。

团队合作，怎么想都是极完美的，但当真做起来，却发现总会有意想不到的事情
发生，让我们心中美好愿望，最终沦为空想。

------人世间的事儿，怎么用脑子想，怎么合理。只有等做起来时，才会发现，
想象中的逻辑与现实，往往不在一个频道上。

（06）

一个人，做事越少，怨愤之气就越重。

*做事少的人，会把所有的事情，想得极简单。*

做事如此简单，可证自己的智商，那可不是一般的高。自己这么高的智商，却混
不出个模样来，可证这世道是多么的昏黑阴暗。世道如此不公，让自己满腔宏愿，
无由抒展，这种情况下的人，想不悲愤，真的很难。

*但这几个故事，告诉我们，人间事儿，真的没有简单可言------如果有，那一
定是你以旁观者的角度，看别人做事。*

明朝的李晟，清朝的刘羽冲、蒋老汉，都是认真做事之人。只不过，他们所做的，
是自己不熟悉的领域，不知道一项研究，要经过无数次试错，才会稍有点眉目的。
比如爱迪生，他为了寻找最合适的电灯丝，先后试验了上万种材料。在这个过程
中，所谓做事，不过是不停的试错，把所有的错误都找出来，就知道对的方案
了------但明李晟，清刘羽种和蒋梦麟的父亲，都只有一次试错的机会，一次不
对，人生成本耗尽，就玩不下去了。

人是没有预知能力的------许多人看到这句话，会频繁点头，但当轮到他们自己，
却往往忘了这点。那个非要开工办厂的孩子，和五个合开微信公众号的老兄，就
是不知道一件事情做起来，会有无数的枝节问题需要解决。这些问题和困难，只
有做了之后才知道。

不知道事情会遇到什么问题，不清楚事情的枝节，只看到事情的头和尾，这就是
许多人，把没做过的事情，想得过于简单的原因。

（07）

人生就是这样，除非在你自己的主场，所有的因素完全可控，这时候你才敢说胜
劵在握。

余者，你必须准备支付试错成本。

台湾有个歌星，曾讲述他服兵役时，如其所愿的被安排去歌唱，他雄心勃勃，以
为自己是偶像，铁定是赢得满堂喝彩。岂料真要演出时，惊发现还需要他自己搭
舞台，可他只会唱，从未搭过舞台，顿时傻了眼。这时候他的同伴们立即取出携
带的简易工具，噼哩啪啦搭个台子，自己走上去引吭高歌，让这位大歌星看得直
眨巴眼。

没有亲手做过的事儿，之所以想得容易，就是不知道还需要自己搭台。嚷着开厂
的孩子不知道这个，生生被人骗成狗。我那几个写字的朋友，他们根本没有与人
合作过，心里想的简单，以为人人都会出工卖力，替自己搭台。但等真做起来，
才发现人性还有偷懒搭便车的一面，台子还得你自己搭。只会唱戏不会搭台，这
戏你就唱不了。

想象中的逻辑，完全构建在别人都是无生命的劳作单元、心甘情愿替自己搭台的
基础之上。想象中的别人，都是没有私欲的，对自己是绝对顺从的。就跟电视剧
里演的一样。电视剧中，所有人都是主角的奴隶，就算是对手，也是以其拙劣映
衬主角的高智商。而电视剧是典型的想象思维，符合人类的主观想象------唯独
与现实不太贴边。

（08）

许多人喜欢指点别人，却最痛恨别人指点自己。

指点他人时，个个都是高手，从未做过实事的孩子，敢怒斥辛苦的父亲笨。等轮
到他来做，才知道这世上最笨的，就是他自己。

事非经过不知难。事情也只有做，才会在一次次试错后，走向成功------这是尽
人皆知的大道理。

但，没人告诉过你，你需要为每次试错，支付多少。

哪怕最简单的事儿，流程都复杂到超出你的预期。而每个环节的支出，加起来更
是个惊人的数字。以为五十万就能开个厂的孩子，需要有人告诉他，胼手胝足用
自己的努力来开厂的人，会发现自己付出的远不止这些。以为自己能力具备只差
钱的人，多半是把事情想简单了。

*永远要记住，想象最容易，做事最艰难，想象的逻辑与现实，始终有一条不可
逾越的鸿沟。*

真要想做成事，还要避免那种一次性就把人打入失败深渊的成本付出，适当的方
法有许多，比如你可以：

------先要知道自己这事儿没做过，许多细节不知道。这话说着简单，但没做过
事儿的人，会拼死的抬杠，死活不肯承认这点。

------承认你没做过的，必有你不明白的，这就可以了。

------从学徒做起。现在没有学徒制了，没有也不要紧，你可以找个正经做事的
人，到他身边，帮忙也好求聘也好，以员工的身份，踏实的观察，学习。这世上，
老板是最苦鳖的人，做梦都盼着个懂事明理的孩子，帮自己一把。如果你是这样
的人，就会获得具体实践的机会。

------事情做起来，慢慢你就知道什么叫资源了，你会认识越来越多做事的人，
知道每一个流程细节，能正确估算一件事的成本投入。

------等到你知道如何做事，懂得如何做成事，这时候你用不着逼家里拿钱成就
你的梦想，许多人自然就来找你了。当然，在你不会做事，还蠢透天的时候，也
会有许多人来找你，但这时候来的都是骗子。除非你成为做事的人，同类型的人
才会出现在你身边。

*事情是用来做的，不是说的。*

没做过事儿的人，往往会趾高气昂指点江山。而做事之人，莫不是低调谦
和------不是做事者人品好，而是他知道做事之难，再不敢摇头晃尾胡言乱语而
已。

让我们开始吧，先把心沉下，承认自己确实没有做过这件事。学习，询问，倾听，
学习的过程中，难免因为犯错而遭到斥责羞辱，如果你是玻璃心，明明什么都不
懂，还想让人拿爷供着，那就需要认真思考一下自己了。

要记住，这世上有两种人，一类是不做事，只管趾高气昂嘲笑别人，却荒废了自
己事业的蠢人。另一类是低调隐忍，任人嘲笑但逐步成就事业的人。你选择什么，
就会得到什么。你的人生你做主，荒废或是成就，取决于你内心深处的愿望。

*** [[http://m.wufazhuce.com/question/2016-01-03?from=timeline&isappinstalled=1][什么才是真正的成长？]] :一个:成长:

毛头子问：经常看到很多人说“成长”，感觉仿佛只要懂得了某个道理，就是一
种成长，成长就是不断地明白道理的过程，是这样么？


@曲玮玮 答毛头子：

真正的成长，就是不再急于成长。

有一类问题似乎很受欢迎------“哪些道理让你相见恨晚？”“你的每日私人成
长暗器是什么？”“哪些习惯能让生活变得更好？”

大家忙着收藏，忙着把一眼扫过去瞬间读完的道理抄在小本儿上，忙着赶紧找到
填补袖口破洞的补丁，忙着大彻大悟，忙着醍醐灌顶，即刻见疗效。

这些简洁的人生道理总是高赞。因为不需大费周章就能把几行金玉良言背下来，
产生自己手持武林秘籍行走江湖畅通无阻的幻象。

可是，你以为那些道理，作者栽跟头之前从没听说过吗？它们是治病的药丸，不
是预防针。只有跌了跟头后混合苦水服下去，才能缓解跌打损伤，从此溶进血液
里内化，终身傍身。在你经历到这些之前，它们只是粘在衣服上供你摘取的小处
方纸片。

当你真的成熟，慢慢不会再把“每天进步一点点”挂在嘴边。不会只对可以量化
的努力成果情有独钟，不会执念于“少吃一顿肉必然体重掉两斤，多做两道题考
试加五分”。没必要咬牙给自己设定
KPI。生活又不是大妈坐小板凳上织毛衣，一切所见即所得。

和我一样，很多写小说出身的人做自媒体，从前的创作是“背向”读者，所谓的
“成长”更多来源于自我省察。开了公众号之后，一切数据都转向阅读量与粉丝
数。有了可量化的数据之后，旁人哪里顾得上你内在的进步呢，只会忙不迭问你，
“最近粉丝涨了多少？”

或许世俗对成长与成功都有一套冷冰冰的评价体系，你要忍受层层标尺在身上测
量的尴尬，挺直腰板儿，心中另有一套无形的标尺。

时间本身是没有标度的，是人类为了有所区分与回顾，把连贯的时间分割成块。
又到年底，以前也执念于写一年总结，这一年看了多少书和电影，输出了多少万
字，把量的积累看作成长之一。也渴望从每段经历里萃取几滴人生精华敷在脸上，
希望每次摸爬滚打都能换来可视化的成长。

今年我依然会写总结，但不再有此心态。

生活不仅不是织毛衣，甚至连“蜗牛爬金字塔”都不是。没有任何人向你拍胸脯
保证，你所做的一切努力都指向前方。

有人用了错误的健身方式，辛苦流汗，却把自己严重拉伤。一些连续创业者总是
急于标榜自己在失败中得到多少宝贵的经验，却不会勇于承认，自己消耗了多少
资源和好年华。

你只是旅人走在陌生丛林里，天高地暗，薄雾微茫。你可能离星辰大海越来越近，
可能跋涉一天依然绕回原点，甚至努力一番仍向后退。

罗曼·罗兰说，“看清这个世界，然后爱它。”真正的成长，大概是你看透一切
之后，放下“你要去相信，没有到不了的明天”这种鸡汤执念，放下自欺欺人，
依然往前奔跑，无畏无惧。

初中时看《老友记》，看他们每天坐在同一张沙发上一本正经瞎扯淡，端着咖啡
杯消磨时间，乐此不疲地制造笑料，心里都在替他们着急，这些人什么时候能长
大啊。那些闲扯淡和玩填字游戏的时间，用来报个技能班学个编程该多好。

今年又重温了一遍。第一季穿着婚纱一惊一乍、被宠坏了的姑娘
Rachel，成了某时尚公司主管。吊儿郎当玩世不恭的
Chandler，重新找到了所爱的职业，也成了充满责任感的丈夫。

电视剧里从来没有从天而降一场惊人的变故，让每个人瞬间遭受锤炼，一夜之间
沧桑得判若两人。他们也没有合上书本后一拍大腿，顿悟真理从此铠甲傍身。

我只是在陪他们傻笑，替他们尴尬之余，年复一年，发现他们慢慢成长为另一种
样子。Joey
依然行为低幼，Monica
依然强迫症，Phoebe依然鬼马。十年过去，这些点缀人性的漂亮羽毛依然在他们
头顶随风飘，但是人生已经有了更厚重的根基底座，再也不是二十出头受了惊吓
随时地动山摇世界崩塌的小孩子。

急什么呢。

我很喜欢一句话，叫“但行好事，莫问前程”。

并非要你放下功名尘土无欲无求，只是不带着强烈的结果导向去做事，不是把一
串葡萄放进榨汁机就马上求一杯饱满的果汁。

我们坚持一件事情，并非因为这样做了会有效果，而是坚信，这样做是对的。哈
维尔说。

只顾笃定往前走便是，胸中自有云月。
*** [[https://mp.weixin.qq.com/s?__biz=MzI0OTEzNzY3NA==&mid=402189489&idx=4&sn=52e6a4a3f19737ffb0f786bc26b0482b&scene=1&srcid=0118goA5DF1wmTRug9ZOpCti&pass_ticket=8B57gmAPihhXDqY3DNHOKiG9154WT42aR6KFVbb%2FAFpL7bBsnVOOoPubYSkLb3iH#rd][韩寒：长跑就是长跑，人生就是人生]]

很多人在长跑的时候喜欢思考人生，但对我来说，长跑就是长跑，人生就是人生，
我在长跑时考虑最多的时候是我的表情。

要知道我小时候一直是长跑队的，也拿了不少学校和区里的长跑比赛第一名。

其实我很早的时候是长跑的，如果我真的好好练的话，我的长跑应该可以到进国
家队的水平的。

我进高中是体育特招，长跑特招，我以前跑步是跑不快的，因为我的好朋友跑的
很慢，每次在体育课的时候我得跟他们做伴，他们跑得慢我也得跑得慢，有一次
误打误撞参加学校的800米和1500米比赛，第一次跑就两个比赛都破了校记录10
多秒，而且当中还停过，跑两圈以后，我以为到终点了，我跟同学们在欢呼拥抱
了，但是我们的跑道是250米一圈的。同学们给我欢呼完以后说哥们儿还有一圈，
然后我又追上去，还破记录，还拿的第一。

后来参加区里面长跑的比赛，8000米的也都很轻松地赢了，我自己从来都不训练。
跑8000米的时候，在街道上警察还带错路，我当时跑在第一，后来警察转身对我
说，哥们儿不好意思，我开错路了，然后又回到那条路上，等于我比人家多跑了
几百米，后来还赢了很多，体育特招进了市重点以后，学校里和松江区的、包括
跟体校在一起的只要是长距离的跑步的比赛，我都能赢，而且都能有很大的一个
领先的优势。而且我从来都不训练。

上学时别人说我是跑步天才，我觉的算不上，因为毕竟区或者是市一级的比赛还
是比较低的，但是如果我经过一些训练或者是怎么样的话，我相信我的长跑肯定
应该是挺好的。当然你不一定在世界上争得什么荣誉。

我当时穿篮球鞋在跑步，因为那个时候我爸爸一个月给我四五百块钱，我在外面
寄宿，我积攒了几个月之后终于有买球鞋的钱了，但是我想来想去，当时是灌篮
高手，爱面子，参加比赛就穿着很重的篮球鞋，如果有很轻的跑鞋的话，一定会
跑得更快。

可能是我的腿脚的形状比较适合长跑，耐力会比较好一些。我不会游泳，我很喜
欢骑自行车，当然不一定是奥运会的比赛，是好玩，参加一下。

但始终有一个问题困扰着我，那就是我的比赛照片实在是太难看了，每一张都是
面目狰狞，鼻孔放大，舌头外甩，眉头紧皱。而那些照片都被放在所有学生都能
看见的学校形象展示玻璃橱窗里，导致有一些女生看见我会说，哟，你真人没那
么丑嘛。

于是，长大以后，我选择了一个至少看起来比较酷的运动：赛车。最关键是，无
论我的表情是啥样，再也没有人能看见我的脸。我有头盔，而且选择了黑色的玻
璃镜片。

我对长跑没有眷恋，我抛弃了它整整十年。但跑步让我感触很深，因为这是唯一
一个我没能找到起点在哪里的比赛。

现在我三十多岁了，我又开始长跑。不为别的，不为思索，不为感悟，只为了自
己的身体。硬要我说出些什么，我只能说这是一个忆苦思甜的运动。

人在坐着的时候常常会想如果我能躺着那该多好；躺着的时候常常会想如果旁边
有一盘水果那该多好；吃到了水果常常会想如果有个人在边上给我按摩那该多好。
只有在长跑的时候我会想如果我能坐着那该多好。

*** [[http://www.cnblogs.com/skyseraph/archive/2010/10/30/1865280.html][完全用Linux工作-王垠]] :linux:

注：本文是清华“牛仔”王垠的“成名作”，在网上引起很大的争议。对他崇拜
地五体投地者有，对他嗤之以鼻者也有，总之成了一年多以前Linux

爱好者的圈子里的一个很有意思的现象。之后他对这篇文章进行了很大的修改，
已经没有了原来那种意气风发。现存的版本如白开水一般无味，请参见：
[[http://learn.tsinghua.edu.cn/homepage/2001315450/]]


尽管他原来的观点有所偏激，但我还是很欣赏他原来的风格。

**** “UNIX 是简单的，你不需要成为天才也能理解这种简单。”

由于GNU/Linux这个词太长，下面如果没有特别指明，“Linux”就是指“GNU/Linux”。

在这个年代，恐怕没有人需要我来介绍 Linux 是什么了吧？如果你觉得“Linux
只不过是跟 DOS
差不多的东西”，那你恐怕很久在山洞里没见天日了吧？请问问你旁边的 Linux
用户，Linux 到底是个什么地位？

那为什么我还要写一篇这样的文章？因为，我发现还有很多人不不理解 Linux 和
UNIX，虽然他们也在用它，但是他们有时会问：“为什么 Linux 不能像 Windows
那样 ......？”，“怎么Redhat Linux不能 mount NTFS
分区！”，“Linux下用什么整理硬盘？”，“什么时候OpenOffice才能完全兼容Word文件啊？”，“现在还有什么Windows能干的事情Linux干不了的？”......

他们有40G的硬盘，却只为 Linux
分配了2G空间，有时还抱怨“这个东西怎么占这么多硬盘！” 似乎
Windows该占用大部分硬盘。他们把重要的数据装在Windows的分区，似乎信不过
Linux。他们总是到处寻找新奇的，好看的GUI程序，对命令行的东西一概不屑一顾。他们对Drag&Drop，菜单配置，自动升级非常感兴趣。他们如果找到一个很像
Windows 程序的 Linux 程序，一定会很高兴的说：“哈哈！Linux
也能......了！”
如果Linux在某种测试中胜过Windows，他们会高兴得跳起来。他们没有办法用Linux解决问题的时候，甚至用Wine来运行Windows程序。有时实在没办法，只好重起到
Windows，或者干脆省得麻烦，在 Windows 下装一个 VMWare 虚拟一个 Linux
玩。

你支持 Linux，你喜欢
Linux，你能从中感觉到快乐，这非常好。你现在只需要明白的是：Linux
从来就不是一个玩具，它是天才UNIX的后代。UNIX
是自晶体管发明以来最伟大的发明，它从诞生那一天开始就比 Windows
的设计出色。Linux 并不需要追赶
Windows，不需要打垮微软，它的最终目标是改变整个计算机世界，还人们自由，给人们乐趣和方便。其它UNIX很多都已经败在Linux脚下，更何况
Windows！

你如果出现了以上的情况，说明你的思想受到了 Windows
的某种潜移默化的影响和误导。你没有能够从本质上理解存在于 Linux 身上的
UNIX 思想。UNIX的设计者 Dennis Ritchie 说：“Unix is simple. It just
takes a genius to understand its simplicity.”
但是我不这么认为，因为我不是一个天才，但是我却勇敢的把Windows完全删除掉，半年之后我体会到了
UNIX 的思想和好处。因为我相信这样的信念：“Windows 能办到的事 Linux
一定能办到，而且办的更好。”

这小节开头的话应该改成：“Unix 是简单的，但是在这个冲斥着 Windows
错误观念的世界，你需要信念和勇气才能理解它的简单！”
我下面就告诉你一些我理解到的东西。

**** 微软的地位

微软的名声在欧洲和美国的大学里，特别是在计算机系里之坏，大家可能有所耳闻。我认识的
MIT，Stanford
的教授，贝尔实验室的专家，甚至一个欧洲小国的高中计算机老师都绝口不提微软的名字。在他们眼里，微软只是一个没有真技术，专靠在落后国家商业宣传和垄断经营的小公司。这个“小”并不是说它人少，钱少，而是说它先进技术少。

我上次和王益合作写了一个算法演示程序，那个算法是贝尔实验室一位科学家Steven
Fortune很天才的发明，为了程序能够被身边大多数人使用，我们选择了 VC+MFC
作为平台。我在分析算法时还得到 Fortune
很热情的鼓励，寄给我一份资料，还多次回信耐心的给我讲解了很多细节。但是程序完成之后，我把样品发给
Fortune，他回信说：“对不起。我机器上没有 MFC。”
话说的很客气，但是我已经感觉到了他对 Windows 的不屑。然后我把 MFC
静态编译进程序再发给他，他就没有再回信了。他显然不是瞧不起我，而是确实有难处。

你能感觉到这位科学家对微软和 Windows
是什么态度了吧？不是反感，而是他心里根本没有 Windows
这个东西！微软在高科技领域没有发展，那么它怎么生存呢？到发展中国家去发展一下，他们的人民还对电脑一无所知，我说不定甚至可以打入大学的计算机系呢。我送他们软件，我捐钱盖大楼，我出钱找图灵奖获得者来演讲，让他们觉得我们都是科学家！

好了，现在全国的大学包括清华，几乎所有人机器必装盗版 Win2000，Office
XP，学校的选课系统是非IE不能正确浏览，论文用 Word
编辑，演示用ppt做，email 的通知附件是 doc 文件，你不用 Word 打不开，连
863 项目都用 VC
写程序了。我很久以前就看到一份报纸说，“微软为什么不严厉打击盗版？”
这篇文章说，微软非但不打击中国的盗版行为，而且有放任之趋势。放长线吊大鱼，“以后我要你们加倍的来还我！”
确实如此，它的目的快实现了。

**** Windows 笼罩下的中国计算机教育

说句丢脸的话，比尔盖茨很久以前是我的偶像...... //blush

在中国，比尔盖茨被很多人奉为神圣，“少年电脑天才”，甚至有的人提到他的名字就做出“抱拳对天”的姿势。很多人谈到微软的“新技术”，“高科技”
都是眉飞色舞。各种“VC编程圣经”，“深入了解 Visual
C++”之类的书，在开头几页都会出现非常肉麻的字眼，“在那团团的混沌中，一个开天辟地的精灵，Windows
1.0，诞生了......”

微软的软件被这么多人盗用，那么人们是怎样使用这些盗版程序的呢？先看看电脑培训班，教的都是一些
DOS 命令，打字，Windows 基本操作，Word
文档处理，PowerPoint，高级班可能有 Excel，Access......
参加各种微软认证考试，MCSE，MSDE
的人络绎不绝。考试辅导班都贴出了“280元，考过为止”之类的字样。考试参考资料更是昂贵，有些电脑书店整整两书架都是“Microsoft
Press”的东西。我有个同学参加认证考试，每门考试都要200多元。而且你一次考不过可以再考，又要交钱。他后来还津津乐道跟我说，看我，花了XXXX(一个四位数)元考过了微软认证，得到一张比尔盖茨亲笔签名的证书和价值6000元的
Windows XP 内部发行版。

“电脑要从娃娃抓起”，我们再来看看娃娃们学的是什么。大部分家长给孩子买了电脑之后，他们首先就会装一个盗版的
Windows，然后买来盗版的游戏开始玩。如果哪个孩子会用 Delphi
编程序，那可不得了。报社记者，电视台争相报导，说，某某学校的初中生某某，在别人都还在玩电脑游戏这种“初级阶段”的时候就已经用
Delphi 写程序了。镜头还瞄准了他显示器上面的像框中的比尔盖茨头像！

我刚进入大学计算机系时还不懂得什么是操作系统，因为我以前只用过“中华学习机”。看到新入学的同学们各个谈论的都是
“Windows 95”，“VC”......
我简直觉得我落后了好几十年一样，整个一土人，根本跟他们答不上话。好不容易找到一个比较熟的同学问了一下：“你们天天谈论的瘟95是什么啊？”答：“win95就是一个操作系统，跟DOS是一类。”“朵死是什么？”
“你连DOS都不知道是什么？别在计算机系混了。”
学校上课当然不讲VC编程之类的东西，但是上 Pascal
的老师有一次就说：“嗨，我们学校真是落后。现在别人都用 C, C++，甚至 VC
了，我们还在讲
Pascal。不知道什么时候才能有VC课啊。你们出去也是要用VC的，只好自学了。”
于是，有些同学很多时候上课都捧着一本很重的“Windows
编程大全”之类的书，根本没有听课。吃饭时就念念有词的跟我说，“代码的优化是无止境的”，“匈牙利命名法真是伟大的发明”
...... 这就是中国很多大学计算机系的情况。

感觉到无知了？这不是偶然的，而是微软长久以来埋下的伏笔。它要让无知的大家都把它奉为神圣，它要让支持UNIX，Xwindow的人一旦说
UNIX 好，Xwindow 好的时候，都被一群人围着说教：“这个 Windows
也能做到”，“你对 Windows 有偏见”，“微软才是主流啊”，“你敢瞧不起
win2k？”，“.NET
就是世界潮流”，“微软的毕竟是新技术”，“有钱就是有技术”......
甚至在一番论战比较后败下来还是要说：“Windows
性能差点，但是易用性强”，“Windows
是老百姓用的，要求别那么高”，“微软那么有钱，以后想超过 UNIX
还不容易吗？”......

**** 发达国家的计算机教育

我前段时间在 USENET 发文问有关 Scheme
语言的问题时，认识了一位丹麦人。他解决了我所有的问题，并且建议我阅读一些很“深奥”的有关程序语言语法，文法的书，他告诉我很多网站可以学习
LISP，Scheme，人工智能，算法。他叫我看 Jonathan Rees 的论文 "Syntactic
Closures"。他还打包给我寄过来一份 MIT 的 "How to Design
Programs"。他说他在自己的 PC 机上装的是 Linux，他用 Emacs 编辑，运行
Scheme 程序。他对 Emacs
的了解和爱好真是使人惊讶。他大学本科毕业时做的毕业设计是一个 Scheme
解释器。这对于我来说是望尘末及了。

他是那么的不厌其烦，我的每一个问题他都详细的回答。我有时都觉得过于详细了，怎么这么耐心啊？我觉得他似乎是我的高中老师。他是什么样的人呢？我好奇的打听了他的情况。原来，她是丹麦一所普通高中的计算机老师，而且是个女老师！

她说她在高中里讲授程序设计和算法，计算机语言文法。她说用
Scheme，她的学生不用再为内存泄漏等程序语言本身的问题而烦恼，而专注于问题和算法本身。有利于培养学生解决问题的能力，特别是用计算机解决数学问题的能力。

天哪！为什么欧洲出现那么多数学家，几何学家？你看看别人重视的是什么！我们的计算机教育如果继续这样下去，只会沿着弯路越走越远！

**** 微软和它的朋友们的如意算盘

下面来看看微软的收入是怎么来的。首先，Windows 98系列操作系统，一个就是
100 多美元，每次升级又是几乎同样的价钱。Windows NT
还要贵几倍，而且有用户数目限制，5个用户的，10个用户的......
以后如果要增加用户数目还要按比例付钱。这个奇怪的现象被通用汽车公司的总裁比喻为：“你买的微软牌汽车最开头只有一个座位，每加一个座位你得向汽车公司付钱，每开100英里要大修一次，每过一年要换一次引擎。”

花了如此多钱买来的操作系统就能用了吗？它竟然连压缩程序都没有提供！你装上
Windows 之后一般第一件事就是去下载一个 WinZip 吧，“只要 29
美元”。Windows 会中病毒啊，马上花 70 美元买一个 Norton AntiVirus
吧。还有黑客呢？再买一个 Norton Internet Security 好了，100
美元。系统需要优化，磁盘需要整理，买一个 Norton System Works
是你最佳的解决方案，100美元。

可是你现在还是不能干正事啊！你想要一个 Word, PowerPoint？那就买一套
Office XP 吧，一起买便宜些，9.90。

那些程序不会用啊！那些菜单怎么设置，到底有什么功能啊？看“帮助”也学不会。买本书看看吧，我推荐“Special
Edition Using Microsoft Office
XP”，不贵，.99。这本书里面大部分是屏幕抓图，还是买一本旧的比较划算，.85。

你如果只是当个秘书，上面的差不多还凑合了。可是你有更高的追求，你想成为
Windows 程序员。首先买一个 Visual Studio.NET
吧，要不然怎么编译程序。4.95。

为了紧跟微软动向，世界潮流，不能不注册个 MSDN
什么的吧？这个贵一点，不过物有所值啊，,799。

嗯，你现在已经是上层阶级，白领人士了。你现在可以像这样“自由”的，“安全”的生活了：

**** 什么是 Windows 能干而 Linux 干不了的事情？

“Windows 能干而 Linux 干不了的事情，那就是不需要干的事情。”

有个朋友看我半年没有用 Windows，有时就会问我：“你只用
Linux，有没有发现有些 Windows 能处理的事情 Linux 干不了？”

我回答说：“Windows 能干而 Linux 干不了的事情，那就是不需要干的事情。”

Windows 能做的有益的事情 Linux 都能做

Windows 下的某些功能确实是我们需要的，那么 Linux
的开发者们和用户也需要这种功能，他们就会去实现这种功能，而且比Windows
的方式好得多。由于大多数科学家，工程师用的都是 Linux 或者某种商业 UNIX,
所以几乎所有商业的科学工程程序，比如Matlab, Mathematica, AutoCAD,
Candence的，Synopsys的，Avant! 的......全都是先有 UNIX
的版本(包括Linux)，然后再考虑移植给 Windows，甚至根本不移植给
Windows，因为 Windows
的机器一般没有足够的能力运行这样的程序。你不要以为只有 Windows 才有
PSpice, UNIX 的 HSpice
要好得多，而且可以运行在大型主机上。当然它们不是免费的，但是它们值那个价钱。

但是 Windows 下有些东西在 Linux
下没有很相似的，或者你找到很多类似的，但是它们每一个比起 Windows
的那个程序都要差很多，那么原因有两种可能性：

1. 有一个完全类似的程序，但是由于它乍一看不漂亮，被你忽略了。

而其它程序虽然看起来很漂亮，但是它们是一些初学编程的人写的。现在由于
Gtk+, Qt 的诞生，Linux
下开发图形界面程序极其简单，很多初中生甚至小学生都可以随手编出一些漂亮不中用的程序。如果你整天寻找这样的程序挑来挑去，永远也找不到你满意的。

我曾经也犯过这样的错误，优秀的 FVWM, lftp, Mutt, wget
都被我忽略过！当我找回它们的时候，我是那么的羞愧不已，它们现在都是我的朋友
:) 用这些程序你可以改变它们的一切，我第一次看到 FVWM
觉得它只不过是一个有很厚很难看边框的东西。可是现在，我的同学看到 FVWM
都说：“哇！真漂亮。”

2. 有另一种完全不同的方式可以达到相同的目的，甚至更好。

很多人很关心 Open Office, Star Office, AbiWord, ...
他们多么盼望有一天某一个 Linux 程序能够完全兼容的打开一个复杂的 doc
文档。但是你永远也不可能有那一天。为什么呢？因为微软为了占有市场，必定不会让其它系统的程序能够完全兼容它的文档格式！它一定会不断变化
doc 文档的内部结构，隐藏一些秘密，让其它公司的程序打开 doc
文档时总是有某种问题，从而你必需购买 Microsoft Office 和Windows。

你应该想一下，那么多的高智商的大学教授，科学家，学生，他们用的都是
Linux 或者其它类型的 UNIX，他们没有 Word
可用，怎么处理文档呢？这么多年没有一个像 Open Office
的程序出现，难道大家没有办法写文档吗？

显然不是这样。你看看那些高水平的学术杂志，论文，那些大学教授的网页，那些漂亮的PDF幻灯片，它们是什么做的？原来
UNIX 用户早就有非常方便的 troff, LaTeX, SGML
等东西可以处理文档，而且它们比起 Word 都要高明的多。Word
显然被这些大拿忽略了，以至于很久以来没有人想在 Linux 下开发一个类似 Word
的程序，除非某些公司想抢微软的饭碗。

很多人留着 Windows 在硬盘上的原因无非是为了用 Word 和
PowerPoint。你待会儿可以看看我的TeX网页，你就会知道为什么我可以完全离开
Windows.

**** Windows 能做的那些没用的事情 Linux 永远做不好

1. 电脑游戏

有些人说 Linux 下不能玩 Windows 下所能得到的所有游戏。的确，Linux
下虽然也有少量的游戏，比如 Quake。但是它没有 Counter Strike, 没有 Star
Craft, ......

并不是说电脑游戏不该玩，但是应该适可而止。电脑是用来处理事务，帮助你学习，解决问题的工具，而不是一个玩具！整天沉迷于电脑游戏中，而不出去感觉外面的世界，你会变得越来越冷酷，越来越缺乏人情味。你与真实的世界越来越远。

你可以在 CS 里杀人，你可以在 Tomb Raider 里探险，你甚至可以在 Tony
Hawk's Pro Skaters 里滑板...... 但是 It's not
real！你虽然有很高的“反恐技巧”，但是遇到歹徒的时候，你是那么的怯懦；你虽然控制
Laura 伸手敏捷，但是你打篮球的时候怎么总是被人断球？你虽然可以轻易的在
THPS 里作出一个 "360 kickflip to hangten grind to
fakie"，但是你踩在自己的滑板上的时候还不会 ollie！

说回来，如果你偶尔玩一下电脑游戏未尝不可。但是世界上有远比 Windows
+ PC 更好的游戏方式。Sony 的 PlayStation2, SEGA 的 DreamCast, Nintendo
的 N64，Namco 的街机......每一个都比 Windows
游戏精彩，每一个都有如此高的3D性能，以至于 Pentium4, Itanium + GForce4
都无法与它们比美！

Linux
的用户们都是关心解决世界的关键问题的份子，他们哪里有时间用自己的机器来玩游戏啊？他们每天用Linux高效的做完自己的工作就到阳光下享受自然去了。要玩游戏也是玩一些类似推箱子，贪吃蛇之类的智力小游戏。所以，你知道为什么
Linux 几乎没有游戏了吧？:)

2. “整理硬盘，优化系统”

这是一个非常有意思的话题，仅次于有关“病毒”的话题。相信很多 Windows
用户都有整理硬盘的经历。在很多 Windows
用户眼里，“硬盘用久了，会出现碎片，速度会减慢，需要一个程序来整理，整理硬盘的时候不要做其它工作”，这好像是天经地义的事情。

我也曾经津津有味的看着 Norton Defrag
一点一点的把我的硬盘排序，调整，用图形的方式显示出来，然后报告：“100%
没有碎片。你的硬盘现在已经达到最佳状态。”
我现在才发觉我那时是多么的幼稚。

Linux 和 UNIX
用户似乎从来没有“整理硬盘”这种说法呢？你觉得很奇怪吗？如果你觉得很奇怪，那说明你的思想在某种程度上被微软的垃圾程序禁锢了。你需要明白，UNIX
的大型主机很多必须是一天24小时，一年365又1/4天不停运转的，要是每个星期都要整理一次硬盘，在整理的时候几乎不能干任何事情，那是绝对行不通的！

Linux 机器根本不用整理硬盘，这就是为什么没有看到过 Linux
用户整理硬盘。Linux 的文件系统是比 Windows 的 FAT, FAT32, NTFS
高明得多的文件系统，它们不但可以对文件设置权限，实施完全的保护，而且可以“越用越整齐”，“越用碎片越少”！你应该把文件大部分放在
Linux 的分区，而不是 Windows 分区，因为它比 Windows 分区可靠得多。

还有更滑稽的事情就是有很多“Norton System Doctor”，“Windows
优化大师”，“超级兔仔注册表魔法”
之类的程序存在，而且价格昂贵。似乎一个操作系统本来应该有很多问题，需要别的厂商做程序来“优化”它，而且为了得到优化，你需要付钱！这些问题
Linux 根本就没有，所以不需要什么优化。Linux 内核本身就是高度优化的。

3. IDE

有些人在抱怨为什么 Linux 没有一个良好的 IDE 开发环境。Linux
现在已经有一些 IDE 了，但是总是有很多问题。你是不是正在寻找，正在期望
Linux
某一天可以有一个VC那样的开发环境？你有没有发现你正在进入微软给你设下的怪圈？你为什么一定要用
IDE？你说：“IDE 开发迅速，调试方便，适合大型程序......”
那说明微软的程序在你脑子里已经比较根深蒂固，你需要好好清醒一下了，看看我来告诉你。

高明的 UNIX 程序员不用 IDE，IDE 从来就是给初级 Windows 程序员用的。

你看看大型的 UNIX 程序，包括 Linux 内核，各种网络服务程序，Xwindow
程序在内，哪一个是 IDE 搞出来的？我们实验室的 EDA 程序也没有一个是 IDE
弄的，我还知道 Candence, Synopsys，Mentor 的高性能的图形界面 EDA
程序也都不是 IDE 写的。你信不信，微软的人在写 Windows
本身的时候也根本不用 IDE！

有一次某杂志采访一些出名的 Linux 内核程序员，包括 Linus
在内，没有一个人用 IDE，有的人用 VIM，有的用 Emacs，只有 Linus 说“GNU
Emacs is evil”，但是其实他用的是一种跟 Emacs 有同样键绑定功能的
MicroEmacs。大家都是用编辑器编辑了程序文件，然后用 make
这样的自动工具调用 gcc 编译器完成编译工作的。

我以前也编过 Windows 程序：应用程序，驱动程序。但是我没有用 VC 的
IDE。Linux 教育了我，我会在命令行调用 CL，我知道 CL 才是 VC
的编译器。我可以在 cygwin 的 Makefile 里使用 CL。我还知道 CL
的参数都有什么用处。但是这些不是一个从一开头就用 IDE
的人能很快理解到的。

我相信: IDE is evil。我有一些用 Windows 的 IDE
写程序的朋友，他们对那套东西已经很精通了。但是我却惊奇的发现，他们竟然把编译器和汇编器的概念都分不清楚，甚至有的人连“编辑器”和“编译器”都搞混淆了！他们只知道在一个窗口里输入了代码，点击一个按钮就可以编译程序，但是这里面到底是怎么工作的，他们不知道！他们被盖在上面的窗口挡住了视线，甚至会以为那个按钮就是编译器！

他们对那些 IDE
的热键背的滚瓜烂熟，但是我却看到他们在一个函数一个函数的把别人的 ANSI
风格的代码变成 VC 的风格。想想这件事在 VIM
里有多么简单，一瞬间就可以搞定。

为什么 UNIX 程序员不用 IDE？明白了这个道理你就能体会到 UNIX
的设计思想了。首先，一个 IDE
集成了编辑器，编译器，汇编器，调试器，跟踪器......
这个编辑器功能肯定比不上 VIM 或 Emacs，编译器比不上 GCC，汇编器比不上
as，调试器比不上 gdb, ddd, 跟踪器比不上 strace, ltrace,
truss。你得到的是一套整合的低能的程序。如果你对调试器的功能不满意，你只好换用另外一套
IDE，但是这套 IDE 的热键，菜单，编辑器功能，按钮......
跟原来那个有很大不同。你不得不花很多时间来熟悉新的环境，而不能保持原来的某些东西。

而在 UNIX 下就不一样了。你可以用你最喜欢的 VIM 编辑程序，你在 VIM
里可以调用 GNU make，make 可以调用 gcc, ld, ... 实际上 make
能帮你很多忙。make 的出错信息可以被 VIM 捕获，VIM
能帮你在源程序里定位。你如果喜欢 icc, 你可以让 make 用 icc 而不是
gcc。你如果觉得 gdb 跟踪变量时比较麻烦，你可以用 ddd
来显示各种数据结构之间的关系。你还可以在 Emacs 里调用
gdb，那样就可以同步显示源代码了。而且 VIM 和 Emacs
还可以编辑很多其它东西，比如信件，LaTeX 文档，HTML，配置文件......
你不用另外找一个什么编辑器来干这些杂活了。很多程序比如 Mutt, tin
都可以在内部使用 VIM，这样就更方便了。

4. 释放内存

我在 Windows
下做过的一件最傻的事情莫过于“释放内存”了。有一天我看到一个 Windows
程序说：“这个程序可以帮你把大量内存释放出来给一个很大的程序用。”我试了一下，居然一下把我的
64M 内存释放出来
48M！我高兴极了。现在想一想，那是多么傻的事情，那么多的内存留着干什么？不用白不用啊！一个操作系统，居然还需要别人写的程序来释放内存，那是什么样的操作系统？

在 Linux 下用 free
命令，你会发现你的内存几乎每时每刻都快要被用完。那是因为 Linux
把大部分内存用来作为磁盘缓冲了。Linux 有比 Windows
先进的磁盘缓冲技术。你有没有发现你往硬盘写数据的时候，很快就完成了？那是因为
Linux
在内存里有很多磁盘缓冲区，你要写到硬盘上的数据先被写到了这些内存里，然后
Linux 就告诉你“拷贝完成”，当你马上又想删除刚才写入的某些数据时，Linux
只是把数据从内存里移除，然后报告“删除完成”。在一定的间隔时间后，Linux
才把数据写回硬盘，这样不但高效，避免了多次硬盘操作，而且减少了文件的不连续，也就是减少了“碎片”。Windows
当然也有磁盘缓冲，但是由于它内存管理的低效率，它不敢把大量内存都用来作为磁盘缓冲，因为它没有能力在用的时候随时把内存收回来。

**** Linux 能干的高级的事情 Windows 都干不了

当然有很多事情是Linux/UNIX的专利了。因为 Windows 只能装在 PC
机上，好像以前也有 Alpha 可以使用 Windows NT，但是就是没见到有人用。PC
机的能力是很低的，像我们编程序处理 NP-Hard 问题的人，用 Windows
的机器显然速度不够，而且有时一个问题算上几天甚至几个星期，Windows
机器是以“死机”著称的，我们怎么能放心？

所以几乎所有科学计算程序，EDA 程序，高性能图像处理程序都不是 Windows
的。他们有时也会移植一些给 Windows，但是常常降低那些程序的能力。你比较过
Windows 版本的 Mathematica 和 Linux 的有什么区别吗？

IBM 制造的最大的并行计算机有 8000 多个处理器，Windows
不可能有能力管理这么多处理器，它用的是什么操作系统？答案是 Linux。

《[[http://fifid.com/site_search?cx=003017831450918707819%3Ae2pgfm8nybw&cof=FORID%3A10&ie=UTF-8&q=%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7][泰坦尼克号]]》电影里的三维动画，那么细腻逼真，Windows机器能做出来吗？不行。那也是
Linux 机器做的。

民航总局用来训练地情人员的虚拟现实训练设备，Windows
当然无能为力。那都是商业的 IRIX 机器。

UNIX 是最早支持 TCP/IP
网络协议的系统。它上面有很多可以互相协作的网络服务程序，它们经过多年的使用和修订，已经达到比较完善的程度。而就在1997年，微软的比尔盖茨还在扬言：“Internet
是没有前途的。”
微软的这个“远见卓识”大家应该都已见识，它后来加上的网络服务程序IIS漏洞之多，让公安部都频频发出警报，大家也是见识了的。

其实你知道了，Windows 没有一样有用的事情能比 UNIX 干的更好。

**** Linux 干不了的有用的事情 Windows 照样干不了

当然 Linux 不是万能的。它也有不能干的事情，电脑也有干不了的事情。但是
Linux 干不了的事情，Windows
肯定也干不了。这些事情就是我们需要探索，需要努力的事情了。在你探索的过程中，Linux
必定是你的好伙伴。

Windows 的流毒

不要用 Windows 的方式来思考问题

什么？你早就知道 Windows
是垃圾？噢！你怎么不早说呢！害我废话这么多。嘿嘿。

“好了。你知道 Windows 是垃圾，你现在用什么？”

“Linux + Xwindow”

“那我问你，Xwindow 是什么样的？”

“不就是跟 Windows 差不多吗？只不过 'Start' 按钮比较方，而且上面不是一个
Windows
标志，而是一个脚丫子。点击一下居然还有很漂亮的中文菜单。我喜欢！”

“你知道什么是‘根窗口'吗？”

“不知道。从来没听说过呢？”

“根窗口就是遮盖整个屏幕的那个最大的窗口。”

“哪儿有什么窗口啊！我没有看到呢？”

你发现了问题吗？这些 Linux 用户说是在用 Linux 和 Xwindow，但是他们对
Linux 和 Xwindow 几乎完全不了解。很多人用了那么久 Xwindow
都不知道根窗口是什么东西，不知道其实按钮也是窗口，不知道窗口管理器和
Gnome，KDE
有什么关系，大家都以为窗口上面的按钮是程序自己放上去的，不知道窗口的“class
name”，“resource name”是什么东西。他们被遮在 Linux
之上的一层一层的包装迷惑了！

当我告诉一个既能用 Windows 又能用 Linux Qt 编程的朋友 Xwindow
的“中键粘贴”是怎么回事时，他大吃一惊，说：“Xwindow
怎么这么落后啊！居然请求剪贴板的东西时还要联系剪贴内容的所有者自己来转换格式！你看看
Windows 的剪贴板......” 经过一顿饭的友好的讨论之后，他不得不称认，这个
Xwindow 用了几十年的方法比 Windows 的剪贴板要合理的多。

后来又有一次，我告诉他每个 Xwindow 的按钮都是一个窗口。他说：“不会吧～
这样效率一定很低。你看看 Windows 的按钮 ......”
又是一顿饭之后，他说：“哎呀。不得不承认 Xwindow 的方式是良好的设计。”

现在很多人已经把能够利用别人的库写出一个好看的程序作为自己编程水平的象征。在这个“图形化”，“可视化”
的年代，你如果还在用 troff, LaTeX 写文档，你还在用 VIM 自己编辑 HTML，用
Mutt 处理邮件，你还在用文本模式的 gdb 调试程序，你还在用 Xlib 写程序,
你还在用 tin 上 USENET，你还在自己写 Makefile，写机器代码，你还在玩
Clossal Cave 这样的字符模式冒险游戏，那你就是老古董，不合时宜，变态。

其实这种思想是错误的。虽然你是一个坚决的 Linux 支持者，但是你的思想是
Windows
的思想。你认为图形界面，菜单，按钮就可以解决一切问题，就可以给你高效方便。你要做坚决的
GUI 派而不是 CLI 派 ......
你还是没能摆脱微软给你的潜移默化的东西。你其实离不开 Windows
那样的环境，你害怕符号，你迟早会删掉自己的 Linux。

**** GUI vs. CLI

UNIX 和 Xwindow 是一家

大家看到这个标题是不是热血沸腾？两派大虾都可以围攻我了：

GUI派用户：“哇！我一看你这小子就是 CLI 的。要不然自己写什么
Makefile？用什么 Mutt？”

CLI派用户：“切～ 你还用 X！高手都不用 X。你是 GUI 那边的。”

可怜的我：“555～～你们都不要我～～ GUI 和 CLI 就那么水火不容吗？”

计算机界这样的门派之分还很多。很有特点的就是 CLI 和 GUI 了。CLI (Command
LIne) 的狂热份子声称永远不用 X。我上次在实验室看到一个同学用一个
SecureCRT 登录到 Sun 机器，然后用一个 vanilla vi
编辑程序，我建议他启动一个 GVIM 过来显示在 Exceed
上可以有语法加亮。但是他坚决反对，说：“高手不用X。你想想，要是我在一个很慢的网络连接怎么用
X？而且好多服务器没有装 X 程序。”

但是我们实验室的网速可够快，Windows 机器都有 Exceed 啊，而且 Sun
机器有全套 X 客户程序包括 GVIM。他说他是 CLI 的坚决拥护者，但是他却在用
Windows，他后来打开了好几个
SecureCRT，每次从文本框输入地址，用户名和密码，从下拉菜单选择
"SSH2"，然后点击“Connnect”。他还不断的夸SecureCRT是“网络管理员投票选出的最受欢迎的登录方式”。老天，SecureCRT
本身就是个 GUI 啊，他其实是一个 GUI。

你说我是 GUI 的？我虽然很少在 console 下工作。但是我对 bash, VIM
很熟悉，我可以让 bash 按照我的键绑定方式来工作。我可以在 rxvt 里使用
Mutt 来收发 email。我的每个桌面上都常常堆放着一打不同大小的 rxvt。我用
VIM 编辑 LaTeX。我自己写 Makefile 来维护 LaTeX 文档。我有时用 mpg321
来放 mp3。我上BBS用的我自己写的 expect 脚本，定义了很多热键，我只要
Ctrl-H 就可以随机变化我的签名档和说明档。我的 expect
脚本有高级的自动回复功能，甚至可以以假乱真，让你看不出其实我不在，你有可能跟我的机器人聊上10分种才发现那不是我
:p 好了，CLI 派的朋友可以收我做盟友了 :)

你说我是 CLI 的老古董？我的 FVWM
被我配置为可以“手写操作”，我只要画一个"r"就可以启动 rxvt，我只要画一个
"U" 就可以启动 GVIM，...... 我用 GVIM 语法加亮模式编辑程序，我用 Mozilla
浏览网页，...... GUI 派的现在好像认我做朋友了 :)

好了。CLI
派的朋友，虽然我很喜欢命令行，但是我有时在屏幕上左右画一下就可以执行:

Module FvwmConsole -terminal rxvt -geometry 45x5-0+0 \

-bg gold -fg midnightblue \

-fn "-adobe-courier-medium-r-*-*-14-*-*-*-*-*-*-*"

你是不是现在又想把我逐出师门？

GUI 派的朋友，虽然我很喜欢窗口。但是我可以在 FvwmConsole 里输入：

All (rxvt) MoveToDesk

把我所有的 rxvt 移动到我现在工作的桌面。“这家伙，怎么这么快就叛变了！”

其实何必分什么 GUI 和 CLI，UNIX 和 Xwindow
都是工业标准，它们从设计那天开始就有非常灵活的用法，各个程序，不管是 GUI
还是命令行的都可以互相协作。UNIX 和 X
是一家，何必搞的那么偏激，非此即彼？你从我上面的行为可以看出 GUI 和 CLI
的模糊界线吗？你说我是“花心大萝卜”？花心就花心。hengheng :P

UNIX 的真谛何在？

**** 让聪明人干任何他们想干的事情。

UNIX 的一个特点就是非常高的灵活性，Xwindow
也具有这种灵活性。这种灵活性体现在哪里呢？

UNIX
的程序一般都有很多参数，不管你现在用的着用不着，总有人需要某些参数。它们的行为很多都可以用配置文件来改变。比如
GNU bash, 通常缺省的命令行输入方式是 Emacs 方式，但是只要我编辑一个
.inputrc 文件，就可以把它变成 vi
的输入方式，而且我还可以自己绑定键序列到某些操作。我可以用 shopt
来设置它的很多特点，比如是否进行通配符扩展，是否可以把一个变量当作一个目录来cd，是否可以自动纠正某些明显的目录名打字错误
......

UNIX
程序设计的思想是提供给用户“机制”，而不限制用户制定“政策”。这是一个重要的尊重用户的作法。

我们再来看看 Xwindow。Xwindow
是一个出色的设计，它把显示服务器和客户程序分开。一个显示上既可以显示本机上的程序，也可以显示别的机器上的
X
程序，而它们都遵守你的窗口管理器的统一指挥，它们之间可以方便的传送剪贴版数据，各种事件
...... 比如有时我的 XFree86 上会出现四个不同机器上的
XTerm，两个不同机器上的 GVIM，...... 它们统一受本机上的 FVWM 指挥。

Xwindow 程序都具有很多很多命令行参数和 resource
参数。你可以随意的在命令行或者 .Xdefaults
文件设置所有的颜色，字体，尺寸...... 而且如果你用 xrdb 把 .Xdefaults
导入到根窗口，那么其它机器上没有经过配置的同样的程序，显示到你的机器上的时候也会遵守同样的外观规定。

Xwindow 的窗口具有 Property,
也就是一些可以自己定义的共享数据(原子)。正是因为这些 Property
的存在，使得 Xwindow 具有无比强大的生命力。X
的窗口管理器和其它客户程序之间并没有统一的协议，但是后来出现了
ICCCM(客户程序间通信规范)，这个规范就是通过 property
定义的。现在又有人定义了一套“扩展的窗口协议(EWM Hints)”，使得 Xwindow
可以具有某些 Windows
的特征，比如一个工具条程序可以告诉窗口管理器：“这个屏幕下面被我占据了24个像素的空间，你最大化程序的时候不要越过这个界线。”

一个强大的窗口管理程序比如
FVWM，它收到这样的提示时，可以答应工具条程序的这个要求，也可以不答应。一切选择的权力在于谁？当然是用户了！一切窗口乖乖听话，FVWM
给予用户最大的尊重。

你想想，是不是有些 Windows 程序常常弹出一个窗口要你选择 "Yes or
No"？你不点击它它就不下去。你觉不觉得你的程序在侵犯你的尊严？你是一个人，一个智慧的生物，怎能受到一个程序如此的待遇？

还有就是很多 Windows
程序把人当成傻瓜，而它是“智能程序”。比如，有一个程序就是喜欢把你的每句话第一个字母都变成大写，我不说它是谁了，你遇到的时候就知道了。如果连“一句话开头一个字母要大写”这么明显的问题都需要程序帮你纠正的话，人脑还用来干什么？况且如果你故意想要不大写的话，那就更麻烦了，我楞是没有从它那一大堆菜单里找到怎么关闭这个愚蠢的选项。

**** 只有符号才能完全操纵计算机。

我们来说说很多初学 Linux 的用户。虽然他们在用
Linux，但是他们打心眼儿里是觉得 Windows 的工作方式好，他们希望 Linux
有一天能“像Windows那样”。你说：“我鼠标一点，我菜单一拉，......
就可以完成我的操作。” 但是我要告诉你：“Linux 从来没有摹仿
Windows，将来也不会。Linux 从诞生之日起，它的工作方式就比 Windows
的先进。Linux 属于能勇敢面对符号的人。只有符号才能完全操纵计算机。”

看看优秀的 UNIX 程序，XFree86, FVWM, VIM, Emacs, proftpd, Mutt, wget,
tin, ...
没有一个不是用配置文件来设置选项的。为什么这些程序没有方便的菜单可以用来配置？难道它们的设计者就那么低能，连个图形配置界面也写不出来？

当然不是。因为图形界面配置方式的能力是极其有限的，而配置文件和程序语言的表达能力却是无限的。用图形界面配置这些程序的话，如果你想达到配置文件的效果，你需要成百上千的菜单，checkbox,
radio button, ...
到时候你根本没办法找到你需要修改的地方了！而各个程序的配置文件的语法都有很多相似之处，一般就是一些命令，设置一些变量，参数，......
一旦用会了一个，其它的也就容易理解了。如果你用惯了 awk, sed,
Perl，你会觉得那才是真正的自动化啊。

鼠标虽然是很好的工具，但是它的表达能力是有限的。你不可能光用鼠标就让电脑完全明白你的意思，它毕竟只有3个按钮。看看我的MetaPost页你就能体会到鼠标的这一弱点。所以我们虽然很喜欢鼠标，但是却不能完全依赖它。

**** 各个小程序的完美配合

这就是UNIX最重要的特点了，它就是UNIX设计的思想。让每个程序只具有一项专门的能力，然后让它们合作。Xwindow也继承了这种好传统。

这恐怕就是Windows和其它操作系统望尘末及的地方了。UNIX
程序设计之统一，配合之完美，真使我难以置信！shell, grep, find, awk, sed,
make, Perl, Emacs, vi, tin, Mutt, ...
它们是那么的具有一致性！你一旦学会了 sed
的正则表达式，其它程序基本上都能用了。你一旦学会了 vi 和 VIM,
你会发现它的操作是那么的有规律性，似乎vi的设计者在几十年前就已经设计好了
VIM 在今天的完美而统一的操作方式！而且vi的操作还体现在 Mutt, tin
等很多程序中。你甚至可以把 bash 设置为 vi
的输入方式来输入命令行，我就是这么做的。一个程序可以调用另外一个程序来得到数据，可以把数据交给它处理后返回来，可以在自己的窗口里“嵌入”另外一个程序。

在 Windows 和其它非 UNIX 操作系统中，这种合作是非常困难的。我曾经在
Windows 下使用 Perl来进行一些自动工作。但是 Windows
的文件操作，管道是如此的不稳定，程序之间基本不能合作。你别想在 Visual
Studio 窗口里面嵌入 UltraEdit 编辑器，你别想用一个 expect 脚本来控制
telnet 到水木清华BBS，这就是为什么 helloooo 诞生在 Linux 而不是
Windows。我曾经试图从 Windows + Exceed + SecureCRT ssh 登录到 Sun
机器，然后通过 ssh 的隧道(X11 tunnel)把 X 程序传到 Exceed
上运行，但是搞了两天都没有成功！而在 Linux
下这个事情根本就是不用怎么配置的，OpenSSH 和 XFree86
本来就是完美结合，只要打开 ssh 的 "forward X11" 选项就什么都搞定了。

Windows
的程序都是大而全，大而杂，所有的电子邮件程序都需要自己提供编辑器，自己发送和收取邮件，自己显示邮件的附件。每一个BBS程序都提供自己的Virtual
Terminal, 自己的通讯代码。每一个 IDE
都自己提供编辑器，编译器，汇编器，调试器。人们为了使用一种新的程序，需要适应所有这些它提供的界面，而不能使用自己喜欢的编辑器的键绑定，菜单组织......
不能 DIY！

你要知道，最高级的电脑是定做的，自己想要什么什么CPU，什么主板，多少内存，什么硬盘，键盘，鼠标，显示器都是自己选择的。最高级的滑板，自己想要什么牌子的版面，什么牌子的沙，什么桥，什么轮子，什么轴承，也都是自己选的。最高级的乒乓球拍，木板，胶皮，海绵，胶水都是可以自己选择......
而用 Windows
程序，你得到的是大杂烩，就像你去买“品牌机”，只有那么几种配置，而且附带很多你不需要的软件和服务；就像你去买组装好的滑板，你想要大一点的轮子和窄一点的板子，但是你没有这种选择余地！Windows
程序就相当于最廉价，最次的滑板。但是它却会花你更多的钱，因为一旦一个部件坏了，或者你不喜欢了，你不能另外找一个好的换掉它，你必需重新买全套配件！

而 UNIX 和 Xwindow 就是高档的“组装货”。比如我用 Mutt 的时候，我可以用
VIM 也可以用 pico 来编辑邮件，我可以用 ImageMagick 也可以用 xv
来显示附件里的图片，我可以用 lynx 把 HTML
附件转成文本嵌入窗口中，我也可以把 HTML 附件交给 Mozilla
图形显示。我可以让 GnuPG 帮我把邮件进行数字签名和加密，我也可以用其它
PGP 程序。我想让 Postfix 而不是 sendmail 帮我发出邮件，我想让 fetchmail
帮我收邮件，转发给 postfix，然后被我自己写的Perl过滤器处理......
这一切我都可以办到！我可以选择我最喜欢的专门的程序来完成专门的工作，然后把它们结合在一起，我也可以分别得到它们的好处。

**** 结论

我写这么多的目的是什么？我希望喜欢 Linux 的朋友，完全清除微软和 Windows
灌输在你脑子里的谬论，别再相信它们所谓的“新技术”，别再追赶
Windows，因为追赶 Windows
＝倒退。马克思有一个思想很重要，“新生事物并不一定是在最近出现的。”
UNIX，Xwindow, TeX 虽然都比 Windows
先出现，但是它们才是先进生产力的代表。我们要清楚的认识到什么才是真正的现代化，什么才是真正的自动化。

勇敢的拿起像 bash, FVWM, TeX, VIM, Emacs, Mutt, lftp ......
这样强大的程序，勇敢的面对符号。不要再埋怨“Linux 为什么不能像 Windows
那样”，不要再浪费时间试用这样那样的程序，不要再忙着升级。需要改变的是你自己，而不是
Linux 和 Xwindow，Linux
现在就可以成为你的好朋友。你需要认识它，了解它，信任它，才能完全的靠它来高效的工作，省出时间来处理世界上更加值得处理的事情。

**** 附录: 我用来处理日常事务的 Linux 程序

好了好了。我知道你发现自己应该转向
Linux，你很后悔当初为什么中了微软的邪。但是不要着急。因为这些东西本来只是工具，它们是用来完成你的主要任务的辅助而已。你以前选错了工具，这不要紧。你还是拥有你自己原来的专业技能，那才是最重要的。工具的东西只有慢慢适应转换，不能一蹴而就，否则你会感到非常没意思，甚至放弃。

这里给出一些推荐使用的可以处理一般事情的程序。至于你的专业上要用到的科学和工程软件比如
Matlab, Mathematica, Maple, HSpice, Design Compiler, ......
还有其它物理上的，化学上的，生物上的 ...... 都必然有 Linux 和 UNIX
的版本。当然他们很多不是免费的，不要总是觉得什么都应该免费，它们是经过很多人辛勤劳动的产物，是可靠的程序，他们物有所值。

下面列出我常用的一些 Linux
程序。一个列表里可能有很多，那是为了方便你来选择，我列出了比较信得过的。但其实很多只有第一个是我真正在用的。我不喜欢试用程序。


- Shell: bash。我使用 bash 的 vi 命令行方式。

- 编辑器： VIM, Emacs

- 程序开发： GCC, make, ld, Scheme48, j2sdk, Perl, Python, Tcl/Tk ...

- 论文，幻灯工具：LaTeX, ConTeXt

- 绘图工具：MetaPost。这个语言太强了，以至于我只用它了。你不熟悉的话可
  以用dia 来画一些流程图之类的图片。

- 图像处理：ImageMagick。其中的 import 程序可以屏幕抓图，convert程序可
  以转换图像格式，display可以显示图片和简单编辑(缩放，换质量，转格式，
  简单绘图，简单虑镜)。通常我就这么点需要。如果你要更强大的图像工具可
  以用Gimp, 它几乎和 Photoshop 差不多。

- 自动管理工具：make。我可以用make来自动编译程序，自动编译文档，自动更
  新插图......全自动，而且不会重复劳动。

- 加密程序：GnuPG。我的 PGP 密钥就是它搞出来的，我用了 2048 位加密。

- 打包，压缩程序。什么都有: tar, gzip, bzip2, zip, rar, ...

- 虚拟光驱程序。Linux 不需要虚拟光驱程序，直接 mount 就行了。

- ftp 服务器：proftpd, vsftpd

- WWW 服务器：apache。(我一般没有开)

- ftp 客户程序：lftp

- 自动下载工具：wget

- 虚拟终端：rxvt, xterm, gnome-terminal, mlterm, ...

- X server: XFree86

- 窗口管理器：FVWM。编译加入了 libstroke。

- 中文输入：XSIM。被我修改过以适应 FVWM 的需要。另外推荐你还可以用SCIM。

- email 处理：Mutt + Postfix + fetchmail

- 看 PDF, PS, DJVU 文件：Acrobat Reader, xpdf, GhostScript, gv,djvu工
  具包和 netscape 插件。

- 看CAJ文档。我从来不看CAJ之类的文档，如果找不到PDF或PS，直接去图书馆借最好。

- 看网页：Mozilla, Phoenix, lynx。Mozilla-Xft 的显示效果比 IE好很多。

- 英汉字典：IBM智能词典，星际译王。

- 编辑网页：我用 VIM 直接写HTML。你如果想要图形方式的可以用其它的比如
  screem, BlueFish。

- 登录其它 UNIX, Linux 机器：openSSH, telnet。 openSSH 还可以把其它机
  器的 X 程序通过 ssh 加密的隧道传到我机器上显示。

- 上BBS：rxvt(或任何一种终端) + telnet + chatbot(helloooo机器人的程序)

- QQ, ICQ: 我没有 QQ 或 ICQ。不过你可以用 Gaim, 它同时支持 QQ, ICQ 和
  很多其它的即时通信方式。ICQ 用户也可以用 Licq。

- 放录像：MPlayer, RealPlayer。MPlayer 太好了，直接就可以放 VCD,
  DVD,divx, wma, wmv ... 用 Windows 的同学都很羡慕我，说 Windows要放这
  个需要大堆插件。rm 最好还是用 realplayer 放，它也是免费的。

- 放音乐： xmms(mp3,ogg都可以), mpg321(放mp3), ogg123(放ogg).

- 看 Word 文档。请 Word 用户把文档全部转为 PDF 或 PS 再给我，文档里没
  有特殊的格式就用文本文件，要不我就不看 :P

- 其它程序：还有很多我需要用而你不一定用得着的。比如，Doctor
  Scheme,Scheme48, Scsh, ...这些程序只有 Doctor Scheme有Windows版本。
  还有很多幕后工作但是你一般不察觉的：xinetd, telnetd,sshd, crond,
  atd, lpd, ... 他们都比 Windows 的对应者强的多。
*** 心灵鸡汤

有只黄鼠狼，在养鸡场的山崖顶上立了块碑，上面写着：“摆脱禁锢，不勇敢跳
下去，你怎么知道自己不是一只老鹰？”于是，它每天就在崖底等着吃摔死的鸡。
——这个故事告诉我们，阅读心灵鸡汤时需要智商，大多鸡汤都是黄鼠狼写的。

原来鸡汤是这样熬成的！

** metapost

http://www.ctex.org/documents/shredder/metapost.html

http://www.ctex.org/documents/shredder/metapostexample.html

** [[http://lanbing510.info/2015/12/01/Arm-Environment-Problems.html][使用 wget 下载整个网站]]                    :trick:blog_冰蓝:

发现一个Linux Shell命令总结的很不错的小[[http://www.lampweb.org/linux/][网站]]， 于是用Wget做了本地备份，
方便离线查看。

#+BEGIN_EXAMPLE
wget --recursive --no-clobber --page-requisites --html-extension
--convert-links --restrict-file-names=windows --domains lampweb.org
--no-parent www.lampweb.org/linux/
#+END_EXAMPLE

命令解释：

+ --recursive 递归下载整个站点

+ --no-clobber 不要覆盖已有文件(以防下载被中断而重新开始)

+ --domains lampweb.org 不要下载lampweb.org以外的链接地址

+ --no-parent 不要下载org/linux/目录之外的内容

+ --page-requisites 下载所有页面需要的元素(图像、CSS等等)

+ --html-extention 只下载html相关的文件

+ --convert-links 转换链接地址，从而本地离线可以正常访问

+ --restrict-file-names=windows 修改文件名以使文件也可以在windows下访
  问(某些情况文件名在Linux下合法而在windows下非法)。

** TODO +-- 是什么高亮

+-- what's this？

** TODO VirturalBox Evernote

why? wget可以保存整个网站，但 HTML 文件不能编辑。试试可不可以导为 Evernote。

** [[http://lanbing510.info/2015/12/01/Arm-Environment-Problems.html][通过tftp下载文件到开发板]]               :ftp:tftp:blog_冰蓝:


上位机上编译好可执行文件后需要下载到Arm开发版进行运行，可以通过U盘直接
拷贝（太繁琐），可以使用串口通过rz等下载（串口传输速度太慢，不适用于大
文件），还可以使用网络进行传输。下面介绍如何搭建tftp环境进行开发板和上
位机（Ubuntu）之间的文件传输。

*一、Ubuntu上搭建tftp服务器*

1 安装tftp服务

#+BEGIN_EXAMPLE
    sudo apt-get install tftpd tftp openbsd-inetd
#+END_EXAMPLE

2 配置工作目录

#+BEGIN_EXAMPLE
    sudo gedit /etc/inetd.conf
#+END_EXAMPLE

找到文件里以下部分

#+BEGIN_EXAMPLE
    #:BOOT: TFTP service is provided primarily for booting. Most sites
    # run this only on machines acting as "boot servers."
    #tftp dgram udp wait nobody /usr/sbin/tcpd /usr/sbin/in.tftpd /srv/tftp
#+END_EXAMPLE

将tftp dgram udp wait nobody /usr/sbin/tcpd /usr/sbin/in.tftpd
/srv/tftp这一行解除注释（如果没有此行则进行添加）。

创建tftp服务器的文件目录

#+BEGIN_EXAMPLE
    cd /srv
    sudo mkdir tftp
    sudo chmod 777 /srv/tftp
#+END_EXAMPLE

3 重启xinetd服务

#+BEGIN_EXAMPLE
    sudo /etc/init.d/openbsd-inetd restart
#+END_EXAMPLE

4 本机测试

首先在tftp中新建一个文件

#+BEGIN_EXAMPLE
    cd /srv/tftp
    echo helloworld > helloworld.txt
    cat helloworld.txt #查看helloworld.txt内容，看是否成功创建
#+END_EXAMPLE

然后进入到其他目录，例如home

#+BEGIN_EXAMPLE
    cd ~
    sudo tftp 你的PC机ip #进入tftp
    tftp> get helloworld.txt #取helloworld.txt文件
    tftp> quit
    cat helloworld.txt #查看是否传输成功
#+END_EXAMPLE

*二、Arm开发板上使用tftp下载*

将远程主机上的/srv/tftp/helloworld.txt下载到开发板/opt/下：

#+BEGIN_EXAMPLE
    tftp -l /opt/helloworld.txt -r /srv/tftp/helloworld.txt -g 你的PC机ip
#+END_EXAMPLE

注：tftp命令，-l后跟local file， -r后跟remote
file，-g表示下载，-p表示上传。

如果下载不下来，用ping先检查网络的连通性，如果ping不通，将开发板的ip网段设到Ubuntu同一网段中去。

可使用命令：

#+BEGIN_EXAMPLE
    ifconfig eth0 192.168.1.120 netmask 255.255.255.0 broadcast 192.168.1.255 up
#+END_EXAMPLE

上述命令中ip，netmask，broadcast根据自己Ubuntu上的进行相应更改。

也可编辑interfaces文件，vi /etc/network/interfaces：

#+BEGIN_EXAMPLE
    auto lo
    iface lo inet loopback

    auto eth0
    iface eth0 inet static

    #以下按自己的实际情况改
    address 192.168.1.120
    netmask 255.255.255.0
    gateway 192.168.1.255
#+END_EXAMPLE

编辑完毕重启网络服务即可。

#+BEGIN_EXAMPLE
    service networking restart
#+END_EXAMPLE

** 安装YouTube视频下载工具                 :youtube:blog_冰蓝:

[[http://lanbing510.info/2015/11/28/Ubuntu-Softwares.html][冰蓝记录思考的地方：Ubuntu下常用软件的安装使用及常见问题汇总]]

很多实验数据会从YouTube上下载，可以使用 *youtube-dl* 工具。

一、安装

#+BEGIN_EXAMPLE
    sudo apt-get install youtube.dl
#+END_EXAMPLE

二、配置使用

如果你已经翻墙，直接youbute-dl 视频网址 即可。例：

#+BEGIN_EXAMPLE
    youtube-dl http://www.youtube.com/watch?v=ksjfsjfslkjfskfjs
#+END_EXAMPLE

如果没有翻墙，可以使用代理，在~/.bashrc中添加

#+BEGIN_EXAMPLE
    http_proxy=http://xxx.xxx.xxx.xxx:yyyy #xxx yyy分别是代理的IP和端口
    export http_proxy
#+END_EXAMPLE

** 强大的视频处理工具---ffmpeg                     :blog_冰蓝:

[[http://lanbing510.info/2015/11/28/Ubuntu-Softwares.html][冰蓝记录思考的地方：Ubuntu下常用软件的安装使用及常见问题汇总]]

*** 安装                                                          :install:

需要提前安装yasm，从网上下载yasm的下载包，解压后进入到目录下安装：

#+BEGIN_EXAMPLE
    ./configure
    sudo make
    sudo make install
#+END_EXAMPLE

安装好yasm后，下载ffpeg安装包，解压，同样的方式进行安装。

*** usage

1. 分离视频音频流

   #+BEGIN_EXAMPLE
       ffmpeg -i input_file -vcodec copy -an output_file_video　　#分离视频流
       ffmpeg -i input_file -acodec copy -vn output_file_audio　　#分离音频流
   #+END_EXAMPLE

2. 视频解复用

   #+BEGIN_EXAMPLE
       ffmpeg –i test.mp4 –vcodec copy –an –f m4v test.264
       ffmpeg –i test.avi –vcodec copy –an –f m4v test.264
   #+END_EXAMPLE

3. 视频转码

   #+BEGIN_EXAMPLE
       ffmpeg –i test.mp4 –vcodec h264 –s 352*278 –an –f m4v test.264  #转码为码流原始文件
       ffmpeg –i test.mp4 –vcodec h264 –bf 0 –g 25 –s 352*278 –an –f m4v test.264 #转码为码流原始文件
       ffmpeg –i test.avi -vcodec mpeg4 –vtag xvid –qsame test_xvid.avi #转码为封装文件 -bf B帧数目控制，-g 关键帧间隔控制，-s 分辨率控制
   #+END_EXAMPLE

4. 视频封装

   #+BEGIN_EXAMPLE
       ffmpeg –i video_file –i audio_file –vcodec copy –acodec copy output_file
   #+END_EXAMPLE

5. 视音频剪切

   #+BEGIN_EXAMPLE
       ffmpeg –i test.avi –r 1 –f image2 image-%3d.jpeg  #提取图片
       ffmpeg -ss 0:1:30 -t 0:0:20 -i input.avi -vcodec copy -acodec copy output.avi #剪切视频 -r 提取图像的频率，-ss 开始时间，-t 持续时间
       ffmpeg -ss 0:1:30 -t 0:0:20 -i inout.mp3 -acodec copy output.mp3 #截取音频的中指定时间的一段
   #+END_EXAMPLE

6. 视频合并

   #+BEGIN_EXAMPLE
       ffmpeg -i "concat:input1.avi|input2.avi|input3.avi" -c copy output.avi
   #+END_EXAMPLE

7. 视频录制

   #+BEGIN_EXAMPLE
       ffmpeg -f vfwcap -r 15 -i 0 output.avi #通过摄像头录制视频
   #+END_EXAMPLE

8. 播放视频

   #+BEGIN_EXAMPLE
       ffplay input.avi
       ffplay -f rawvideo -video_size 1920x1080 input.yuv #YUV序列播放
   #+END_EXAMPLE

9. YUV序列转AVI

   #+BEGIN_EXAMPLE
       ffmpeg –s w*h –pix_fmt yuv420p –i input.yuv –vcodec mpeg4 output.avi
   #+END_EXAMPLE

10. 将图像序列转换为视频

   #+BEGIN_EXAMPLE
       ffmpeg  -f image2 -i prefix%d.jpg output.xxx
   #+END_EXAMPLE

11. 将视频转换为图像序列

   #+BEGIN_EXAMPLE
       ffmpeg -i input.xxx prefix%d.jpg
   #+END_EXAMPLE

更详细的使用命令推荐查看[[https://www.ffmpeg.org/ffmpeg.html][官方文档]]。

** TODO [[http://lanbing510.info/2015/10/31/Self-Wrote-Tools.html][自己造的轮子们 开源]]                            :blog_冰蓝:

[[https://github.com/lanbing510/DouBanSpider][爬豆瓣找好书工具]]

[[https://github.com/lanbing510/GTDWeb][晨间日记Web应用版]]

[[https://github.com/lanbing510/GTDWeb][每日成长习惯Web应用版]]

[[https://github.com/lanbing510/Collect][阅读摘录工具]]

[[https://github.com/lanbing510/EnglishBooksEasilyReadLearn][英语书籍辅助阅读工具]]

[[https://github.com/lanbing510/ImageLabel][图像标注工具]]

[[https://github.com/lanbing510/CVPapersTool][论文筛选工具]]

[[https://github.com/lanbing510/SleepHook][定时锁屏改变熬夜作死小工具]]

[[http://lanbing510.github.io/2015/09/21/ClassifyPictures.html][照片整理工具]]

[[https://github.com/lanbing510/CSDNBlogBackup][CSDN博客完整备份工具]]
** [[http://lanbing510.info/2015/09/21/ClassifyPictures.html][按拍摄日期一键归类照片 Python]]                       :blog_冰蓝:

冰蓝思考的地方

*** 出发点

--------------

手机里的照片好久没整理，最近提示没空间，自己一般都是按年月将照片保存，看到铺天盖地的照片，整个心都醉了。

于是写了下面这个脚本，一键归类所有的照片，按照拍摄日期归类到年月相应的文件夹。再也不用担心整理照片了！

*** 干货

#+BEGIN_SRC python
    # -*- coding: gbk -*-

    """
    功能：对照片按照拍摄时间进行归类
    使用方法：将脚本和照片放于同一目录，双击运行脚本即可
    作者：冰蓝
    """

    import shutil
    import os
    import time
    import exifread


    class ReadFailException(Exception):
        pass

    def getOriginalDate(filename):
        try:
            fd = open(filename, 'rb')
        except:
            raise ReadFailException, "unopen file[%s]\n" % filename
        data = exifread.process_file( fd )
        if data:
            try:
                t = data['EXIF DateTimeOriginal']
                return str(t).replace(":",".")[:7]
            except:
                pass
        state = os.stat(filename)
        return time.strftime("%Y.%m", time.localtime(state[-2]))


    def classifyPictures(path):
        for root,dirs,files in os.walk(path,True):
            dirs[:] = []
            for filename in files:
                filename = os.path.join(root, filename)
                f,e = os.path.splitext(filename)
                if e.lower() not in ('.jpg','.png','.mp4'):
                    continue
                info = "文件名: " + filename + " "
                t=""
                try:
                    t = getOriginalDate( filename )
                except Exception,e:
                    print e
                    continue
                info = info + "拍摄时间：" + t + " "
                pwd = root +'\\'+ t
                dst = pwd + '\\' + filename
                if not os.path.exists(pwd ):
                    os.mkdir(pwd)
                print info, dst
                shutil.copy2( filename, dst )
                os.remove( filename )

    if __name__ == "__main__":
        path = "."
        classifyPictures(path)
#+END_SRC

 以上。

** TODO 车牌识别                                                    :github:


https://github.com/openalpr/openalpr

** [[http://lanbing510.info/2014/12/18/License-Plate-Detection-Recognition.html][车牌检测及识别 OpenALPR]]                         :blog_冰蓝:

冰蓝思考的地方

*** 写在前面

最近项目需要，搞起了车牌检测及识别，进行了理论方法的调研和代码的实践，最终检测识别的效果还是很不错的。下面是相应的一些记录。

*** 车牌检测及识别的理论方法


一、检测的基本方法

1. 用边缘检测+轮廓提取+车牌特征进行车牌的检测；

2. 用Harr-like特征或者LBP特征+Adaboost来训练模板用于车牌的检测；还有用
   神经网络训练的；

3. 两者结合。

二、识别的基本方法

1. 用Tesseract.来进行训练；

2. 用车牌上的字符直接训练识别器。

*** 车牌检测的代码实践

自己网上搜到了一个非常不错的车牌自己识别的开源项目：[[https://github.com/openalpr/openalpr][OpenALPR]]，在其基础上进行的实践。

配置时的一些注意事项：

一、最好用在Ubuntu14.04下进行配置

自己最早是在自己Ubuntu12.04的系统下进行的编译，出现两个错误：一个是有
关string赋值为null的；另外一个是头文件少包含的（ocr.h里面进行了添加）。
进行修复后，编译完发现效果和作者网上的demo相差很远，看作者的论坛，说肯
能是软件版本不一致（想不通版本不一致能差这么远）。于是对系统进行了升级，
升到了和作者一致的Ubuntu14.04环境，解决了问题。

二、Windows下配置的时候注意需要修改CMakeList和匹配相应的Opencv版本。

编译安装完成后，就可以阅读源码，修改代码，进行各种应用了。

*** 小注

阅读和修改源码时强烈推荐Sublime Text，各种爽歪歪。

** [[http://lanbing510.info/2014/12/03/Linux-Opencv.html][Linux下Opencv的安装及配置使用]]    :opencv:install:blog_冰蓝:

冰蓝思考的地方

*** 安装


安装cmake及一些依赖库

#+BEGIN_EXAMPLE
    sudo apt-get install cmake
    sudo apt-get install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg.dev libtiff4.dev libswscale-dev libjasper-dev
#+END_EXAMPLE

安装opencv

从官网下载opencv并解压，cd命令进入opencv的目录

#+BEGIN_EXAMPLE
    cmake .
    sudo make
    sudo makeinstall
#+END_EXAMPLE

*** 配置

将opencv的库加入到路径，从而让系统可以找到

#+BEGIN_EXAMPLE
    sudo gedit /etc/ld.so.conf.d/opencv.conf
#+END_EXAMPLE

末尾加入/usr/local/lib，保存退出

#+BEGIN_EXAMPLE
    sudo ldconfig #使配置生效
#+END_EXAMPLE

编辑bash.bashrc

#+BEGIN_EXAMPLE
    sudo gedit /etc/bash.bashrc
#+END_EXAMPLE

末尾加入

#+BEGIN_EXAMPLE
    PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig
    export PKG_CONFIG_PATH
#+END_EXAMPLE

保存退出

#+BEGIN_EXAMPLE
    sudo source /etc/bash.bashrc  #使配置生效
    sudo updatedb #更新database
#+END_EXAMPLE

*** 测试使用


打开opencv2.4.9目录下的sample/c

#+BEGIN_EXAMPLE
    ./build
    ./build_all.sh
#+END_EXAMPLE

使用里面的一个sample进行测试，例如

#+BEGIN_EXAMPLE
    ./find_obj
#+END_EXAMPLE

以上。

** [[http://lanbing510.info/2015/05/15/Cygwin.html][Windows下Cygwin的使用]]                 :cygwin:apt_cyg:blog_冰蓝:

*** 写在前面

有时候在Windows平台下很想用Linux下的一些小命令，比如diff，grep，sed等
等，打开虚拟机下的Linux太费时又占用很大的计算资源，于是这种情况下选择
了Cygwin。


*** 使用Cygwin安装软件

--------------

Cygwin安装后可用的包并不是特别多，用setup.exe安装起来很不人性话。还好，有apt-cyg，和apt-get
一样强大，有了 *apt-cyg* 安装软件变得so easy。

一、安装apt-cyg

在Cygwin下输入：

#+BEGIN_EXAMPLE
    lynx -source rawgit.com/transcode-open/apt-cyg/master/apt-cyg > apt-cyg
    install apt-cyg /bin
#+END_EXAMPLE

即完成安装。

二、使用

类似于apt-get，比如安装diff包，输入：

#+BEGIN_EXAMPLE
    apt-cyg install diffutils
#+END_EXAMPLE

即可

三、常见问题及解决

安装gcc g++直接apt-cyg install
gcc报错，于是找到setup.ini发现gcc的名字为gcc-core,于是改为apt-cyg
install gcc-core，成功安装；g++也是同样原理，找到名字为gcc-g++，apt-cyg
install gcc-g++成功。

*** 小结

安装完Cygwin及学会如何使用Cygwin安装各种软件包后，就可以尽情的在
Windows平台下享用Linux下各种神一样的工具们了。

** 关于尊重博客作者

1. 技术博客的博文不仅有质有量, 而且逻辑通顺, 值得尊重与借鉴
2. 排版良好, 因而可以使用 pandoc 将博文转换为 org-mode
3. 为了表示敬意, 使用 *blog_博客名* 作为 org 标签
   - 其中"博客名简写", 最好是单字或双字或一个英文单词

** [[http://lanbing510.info/2013/04/05/Latex-Experiences.html][Latex插入Visio绘制的流程图]]           :latex:flowchart:visio:blog_冰蓝:

都知道Visio是画流程图的利器，但插入Latex可能会变得模糊，下面是本人认为
插入最清晰的一种方式。

*一、绘制好Visio图后保存为Pdf*

文件-->页面设置-->页面尺寸选择调整大小以适应绘图，然后发布为Pdf，比如PR1\_Visio.pdf

*二、插入Pdf*

1. 如果要插入到浮动窗口，可以直接利用

   #+BEGIN_SRC latex
       \begin{figure}
       \centering
       \includegraphics[width=\textwidth]{PR1_Visio.pdf}
       \caption{fit}\label{}
       \end{figure}
   #+END_SRC

2. 如果要插入到非浮动区域，可以采用以下办法，为了可以在figure外使用
   \caption，可在导言部分加入：

   #+BEGIN_SRC latex.
       \makeatletter
       \newcommand\figcaption{\def\@captype{figure}\caption}
       \newcommand\tabcaption{\def\@captype{table}\caption}
       \makeatother
   #+END_SRC

   然后直接用下面的插入命令即可。

   #+BEGIN_SRC latex
       \begin{center}
       \includegraphics[width=4cm,height=8cm]{PR1_Visio.pdf}
       \figcaption{系统聚类算法流程图}\label{}
       \end{center}
   #+END_SRC

** 关键词 标签

出发点(why)

** TODO 高效能人士的七个习惯
* Week
** 2016/01/18
*** blender

- [[https://www.blender.org/manual/zh.cn/getting_started/index.html][Blender 官方入门教材（中文）]]
- [[https://zh.wikibooks.org/zh-cn/Blender_3D%EF%B8%B0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E7%B2%BE%E9%80%9A][Blender 3D︰从入门到精通(wikibook)]]
- [[http://wiki.blender.org/][Homepage]]

*** ROS

- sql http://wiki.ros.org/sql_database
- arbotix_python http://wiki.ros.org/arbotix_python?distro=indigo#Services
- Q&A
  - http://answers.ros.org/question/95486/hector-slam-with-turtlebot-in-gazebo/
  - http://answers.ros.org/question/46004/turtlebothector-slam-possibile-or-not/
- http://wiki.ros.org/hector_turtlebot
- http://wiki.ros.org/hector_turtlebot
- http://www.ros.org/news/2014/12/updated-package-razor-imu-9dof.html
-
  http://answers.ros.org/question/99211/how-to-combine-a-camera-image-and-a-laser-pointcloud-to-create-a-color-pointcloud/

*** PCL

#+include: ~/Wally/Project/pcl_tutorials

http://www.pointclouds.org/documentation/tutorials/

**** [[http://www.pointclouds.org/documentation/tutorials/basic_structures.php#basic-structures][Basic Structure]]

*PointCloud*

- width
- height
- points
- is_dense
- sensor_origin
- senor_orientation

To simplify development, the PointCloud class contains a number of
helper member functions. For example, users don’t have to check if
height equals 1 or not in their code in order to see if a dataset is
organized or not, but instead use *PointCloud()*:

#+BEGIN_SRC cpp
if (!cloud.isOrganized ())
#+END_SRC

***** writing point cloud data to PCD files

#+include: ~/Wally/Project/pcl_tutorials/src/pcd_write.cpp

头文件位置 =/usr/include/pcd-1.7/pc/=

#+BEGIN_SRC cpp
#include <pcl-1.7/pcl/io/pcd_io.h>
#include <pcl-1.7/pcl/point_types.h>
#+END_SRC

创建 link

#+BEGIN_EXAMPLE
 ~ $ ls -l /usr/include/pcl
lrwxrwxrwx 1 root root 24  1月  7 09:53 /usr/include/pcl -> /usr/include/pcl-1.7/pcl
#+END_EXAMPLE

***** CMakeLists.txt

#+include: ~/Wally/Project/pcl_tutorials/CMakeLists.txt

**** [[http://www.pointclouds.org/documentation/tutorials/voxel_grid.php#voxelgrid][Downsampling a PointCloud using a VoxelGrid filter]]


- *downsample*: reduce the number of points
- using a *voxelized grid* approach

#+include: ~/Wally/Project/pcl_tutorials/src/voxel_grid.cpp

**** Merging PCDs
***** concatenate the points of two points clouds

http://pointclouds.org/documentation/tutorials/concatenate_clouds.php

#+include: ~/Wally/Project/pcl_tutorials/src/concatenate_clouds.cpp

*** This shall pass

This shall pass.

昨晚睡得很早，睡眠中似乎做了许多梦，早上醒来的时候感觉完全没有精力，赖
床到将近10点。

最近几天状态再次极其糟糕，不能静下心来做重要的事情。我想这大概和中止与
竹的联系有关。我想，不论如何，我都做了一个正确的决定，无论怎样选择，都
是正确的，因为没有机会去尝试另外一种可能。

给竹发去的最后一条微信消息（好像通牒似的）是这样的。“1. 一切都会好的，
如果不是，说明还没有到最后。 2. 牛奶面包都会有的。 3. All is right. 三
句话表达了同一个意思，是我笃信的算是理念的东西。当做鸡汤，送给竹琳。要
是偶尔听到马拉松或 Eason 或看到老友记里的C，可以联想到某个爱装比的都比。
我在厚着脸皮给自己贴标签:) 然后，竹琳再见。”

与其说是给竹，倒不如说是给我自己的通牒。理性告诉我，这一切只不过是我自
己的幻想，什么都是不可能发生的。虽然渴望着再见，但内心却清楚其微乎其微
的可能性。我还不是一个成熟的人，在处理自己和他人的许多事情上总显得幼稚。
也许只有幼稚，才能走向成熟。

我现在越来越清楚自己在各方面的缺点，因而也变得更加不喜欢自己了。如果这
是成长的代价，我不逃避。

This shall pass.

**** 竹

我可以去北京的话我们在一起吧。。。。。你说呢  2015/11/24

这是最后一张图片，老友记里我最最喜欢的情节。Chandler不成熟逗比喜欢开玩
笑不会追妹子害怕承诺，这是表象，遇到成熟的Monica之后，Chandler成长为最
懂爱的人。

我像C一样，想能够遇到M。每天一集老友记我坚持得特别好，还有两集就要五刷，
我希望下次看到CM在一起的时候有人陪着。

最近总是会惦着你，这让我很怂。我很少有机会能深入了解你，但我觉得我是喜
欢你的。如果继续像现在这样在微信上可有可无地聊天的话，我迟早会逃避的。
明天是未知的，我需要一个明确的期许。能给us一个chance么？

认真想想，多久都行，但不要搪塞回避。我接着睡会，竹琳早安:)

*** 与恶龙对视久者，必成恶龙

有竹的时候，我许诺过这一点，但我没有做到;
现在无竹了，我希望可以做到，留最好的纪念。

*** scratch                                                       :scratch:

**** intro                                                         :intro:

Scratch是麻省理工大学媒体实验室终身幼稚园组开发的一套电脑程序开发平台，
旨在让程序设计语言初学者不需先学习语言语法便能设计创作产品。开发者期望
通过学习Scratch，启发和激励用户在愉快的环境下通过实验（如设计交互故事）
去学习程序设计、数学和计算知识，同时获得创造性的思考，系统推理，和协同
工作的体验。

Scratch 开发平台可安装在Mac OS X、Windows、Linux的平台上；自2.0之后，
换用Actionscript编制，Scratch运行于浏览器。Scratch源码开放给非商业性质
用途使用。


#+DOWNLOADED: https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Scratchcat.svg/180px-Scratchcat.svg.png @ 2016-01-18 11:17:22
 [[~/Wally/Journal/Figure/.org-download/Journal/180px-Scratchcat.svg_2016-01-18_11:17:21.png]]

**** keyword                                                     :keyword:

scratch, MIT, 教育软件， 跨平台， 开源

**** reference                                                  :homepage:

- [[https://zh.wikipedia.org/wiki/Scratch%E8%AF%AD%E8%A8%80][Wikipedia: scratch 语言]]
- [[https://scratch.mit.edu/][Homepage]]
- [[http://cacm.acm.org/magazines/2009/11/48421-scratch-programming-for-all/fulltext][Scratch: Programming for All]]

*** godot                                                           :godot:

**** reference                                                  :homepage:

- [[http://www.godotengine.org/projects/godot-engine][Homepage]]
- [[https://github.com/godotengine/godot][Github]]

**** intro                                                         :intro:

Godot is a fully featured, open source, MIT licensed, game engine. It
focuses on having great tools, and a visual oriented workflow that can
export to PC, Mobile and Web platforms with no hassle. The editor,
language and APIs are feature rich, yet simple to learn, allowing you
to become productive in a matter of hours.

[[/home/wally/Wally/Journal/Figure/scrot/32504Cqi.png]]


开源游戏引擎

*** ccmake intro                                             :ccmake:intro:

- [[http://blog.csdn.net/arackethis/article/details/42155589][CMake 和 CCMake 的区别]]

CCMake is the GUI for manipulating files generated by / used by the
cmake system.

- ccmake is curses (terminal handling library) interface to CMake.

- cmake is the CLI (Command Line Interface)

*** blender dae

**** solutions

http://blender.stackexchange.com/questions/160/can-blender-export-to-the-collada-format

***** ppa

https://launchpad.net/~irie/+archive/blender

#+BEGIN_EXAMPLE
  Installing from the PPA:
  Add the PPA: ppa:irie/blender (sudo add-apt-repository ppa:irie/blender)
  Update your sources (Ubuntu Software Center does this automatically, but you will need to do it manually if adding from the command line). (sudo apt-get update)
  Install blender (this package is 2.6x from git) (sudo apt-get install blender)
#+END_EXAMPLE

http://askubuntu.com/questions/169542/how-do-i-install-the-latest-blender-3d-builds-from-a-ppa

#+BEGIN_EXAMPLE
And now that Irie PPA is not updated anymore, to get the latest version (updated weekly), you can use this instead:

sudo add-apt-repository ppa:thomas-schiex/blender
sudo apt-get update
sudo apt-get install blender
#+END_EXAMPLE

***** plugin

http://sourceforge.net/projects/colladablender/

the above link points to a blender 2.49 script. it will not work with recent Blender versions!

***** compile

#+BEGIN_EXAMPLE
 WITH_OPENCOLLADA                 ON
#+END_EXAMPLE

****** git clone

https://developer.blender.org/diffusion/B/

#+BEGIN_EXAMPLE
# read-only access
git clone git://git.blender.org/blender.git

# read/write access
git clone git@git.blender.org:blender.git

cd blender
git submodule update --init --recursive
git submodule foreach git checkout master
git submodule foreach git pull --rebase origin master
#+END_EXAMPLE

****** build

http://wiki.blender.org/index.php/Dev:Doc/Building_Blender

ccmake

#+BEGIN_EXAMPLE
  home/wally/Download/blender/source/blender/imbuf/intern/openexr/openexr_api.cpp
  fatal error: ImfMultiView.h: 没有那个文件或目录
   #include <ImfMultiView.h>
#+END_EXAMPLE

- openexr :: command-line tools and docs for the OpenEXR image format
- openexr-viewers :: viewer for images in the OpenEXR format

apt-get 方式安装相应软件后依然存在错误。


https://github.com/openexr/openexr

装这个更加烦人，编译半天一堆错误。

**** test

#+BEGIN_EXAMPLE
fake_module: addon missing 'bl_info' gives bad performance!: '/usr/share/blender/scripts/addons/colladaExport14.py'
#+END_EXAMPLE

**** plugin


***** 配置数据路径[[#configuration-and-data-paths][¶]]

https://www.blender.org/manual/zh.cn/getting_started/installing_blender/directorylayout.html

Blender使用了三种不同的文件夹，它们是跟操作系统有关系的。

- 本地 :: 配置和运行时数据位置（只供自己绑定使用）

- 用户 :: 配置文件位置（通常情况下在用户的家文件夹下）

- 系统 :: 系统级安装后的运行时数据位置（可能是只读的）。

系统级安装 *系统* 和 *用户* 文件夹都是需要的。

如果是本地解压Blender的发行版，这些用户配置数据和运行时数据都在一个子
文件夹下面，允许Blender的多个版本共存而且不会有冲突，可以忽略

*用户* 和 *系统* 文件。

注解

注解：你有可能需要确保你的文件管理器中，显示隐藏文件的选项已经被勾选。

****** 基于不同平台的路径[[#platform-dependant-paths][¶]]

下面是各个系统的默认文件夹位置：

******* Linux[[#linux][¶]]

- 本地 ::
  #+BEGIN_EXAMPLE
      ./2.76/
  #+END_EXAMPLE

- 用户 ::
  #+BEGIN_EXAMPLE
      $HOME/.config/blender/2.76/
  #+END_EXAMPLE

  # $ ls .config/blender/2.72/
  # config  scripts

- 系统 ::
  #+BEGIN_EXAMPLE
      /usr/share/blender/2.76/
  #+END_EXAMPLE

注解

该路径./2.76/是相对于Blender可执行文件以及用于自包含官方blender.org构建发布软件包。

注解

The *USER* path will use =$XDG_CONFIG_HOME= if its set:

#+BEGIN_EXAMPLE
    $XDG_CONFIG_HOME/blender/2.76/
#+END_EXAMPLE

******* Mac OSX[[#mac-osx][¶]]

-  本地 :: #+BEGIN_EXAMPLE
       ./2.76/
   #+END_EXAMPLE

-  用户 :: #+BEGIN_EXAMPLE
       /Users/$USER/Library/Application Support/Blender/2.76/
   #+END_EXAMPLE

-  系统 :: #+BEGIN_EXAMPLE
       /Library/Application Support/Blender/2.76/
   #+END_EXAMPLE

注解

OSX 存储blender二进制文件，放在 ‘./blender.app/Contents/MacOS/blender
‘，所以数据及配置的本地路径是:

#+BEGIN_EXAMPLE
    ./blender.app/Contents/MacOS/2.76/
#+END_EXAMPLE

******* MS-Windows[[#ms-windows][¶]]

-  本地 :: #+BEGIN_EXAMPLE
       .\2.76\.
   #+END_EXAMPLE

-  用户 :: #+BEGIN_EXAMPLE
       C:\Documents and Settings\$USERNAME\AppData\Roaming\Blender Foundation\Blender\2.76\
   #+END_EXAMPLE

-  系统 :: #+BEGIN_EXAMPLE
       C:\Documents and Settings\All Users\AppData\Roaming\Blender Foundation\Blender\2.76\
   #+END_EXAMPLE

****** 路径布局[[#path-layout][¶]]

下面的路径布局是以上的文件夹描述规范。

‘./Config/startup.blend ‘ 可能在哪里 ~/.blender/[[#id1][|例如
BLENDER_VERSION|]]/config/startup.blend。

-  =./autosave/ ...= :: 自动保存混合文件位置。* Windows
   只，临时目录用于其他 systems.*

   搜索顺序: =LOCAL, USER=.

-  =./config/ ...= :: 默认值与会话信息。

   搜索顺序: =LOCAL, USER=.

-  =./config/startup.blend= :: 载入初始文件和用户设置

-  =./config/userpref.blend= :: 载入初始文件和用户设置

-  =./config/bookmarks.txt= :: 在文件选择器中隐藏系统书签

-  =./config/recent-files.txt= :: 在文件管理器中隐藏最近查看的路径

-  =./datafiles/ ...= :: 运行时文件

   搜索顺序: =LOCAL, USER, SYSTEM=.

-  =./datafiles/locale/{language}/= :: 用户界面翻译的静态预编译的语言文件。

-  =./datafiles/icons/*.png= :: Blender用户界面的图标主题。*
   不目前可选的主题 preferences.*

-  =./datafiles/brushicons/*.png= :: 对于每个画笔的图像。

-  =./scripts/ ...= :: Python 脚本的用户界面和工具。

   搜索顺序: =LOCAL, USER, SYSTEM=.

-  =./scripts/addons/*.py= :: Python
   加载项在用户首选项，可以使包括导入/导出格式支持、
   渲染引擎集成和许多方便实用。

-  =./scripts/addons/modules/*.py= :: 模块的加载项的使用 (添加到 Python
   的 sys.path)。

-  =./scripts/addons_contrib/*.py= :: 另一个加载项目录是用于社区维护的插件
   (必须手动创建)。

-  =./scripts/addons_contrib/modules/*.py= :: 对 addons_contrib 的模块
   (添加到 Python 的 sys.path) 的使用。

-  =./scripts/modules/*.py= :: 包含我们的核心 API 和其他脚本到效用函数的
   Python 模块导入 (添加到 Python 的 ‘sys.path ‘)。

-  =./scripts/startup/*.py= :: 在启动时将自动导入的脚本。

-  =./scripts/presets/{preset}/*.py= :: 预设用于存储用户定义设置布、
   呈现格式等。

-  =./scripts/templates/*.py= :: 可以从访问的示例脚本:
   文本空间标题-->--> 脚本模板的文本。

-  =./python/ ...= :: 捆绑的 Python 发行版，不仅是必要的系统安装的
   Python 时缺席或不兼容。

   搜索顺序: =LOCAL, SYSTEM=.


***** 插件--NGENNGT翻译[[#add-ons][¶]]

https://www.blender.org/manual/zh.cn/advanced/scripting/python/add_ons.html

/插件/ 是对扩展Blender功能的脚本的通用术语。在 /用户设置/ 窗口的 /插件/
标签页找到这些脚本，在该标签页下可以搜索、安装、启用和禁用 插件。

****** 搜索[[#searching][¶]]

Blender自带一些好用的插件，你可以自行启用。不过你也可以添加你自己的或者从网上找到的有趣插件。


#+DOWNLOADED: https://www.blender.org/manual/zh.cn/_images/user_prefs-addons_tab.png @ 2016-01-18 11:47:34
 [[~/Wally/Journal/Figure/.org-download/Journal/user_prefs-addons_tab_2016-01-18_11:47:33.png]]

用户设置窗口中的插件标签页

[[http://wiki.blender.org/index.php/Extensions:2.6/Py/Scripts][脚本目录]]
提供了Blender自带插件索引，同时也列出了许多外部插件。

****** 启用和禁用[[#enabling-and-disabling][¶]]

如图所示，勾选或取消勾选插件右侧的复选框即可启用或禁用该插件。


#+DOWNLOADED: https://www.blender.org/manual/zh.cn/_images/Extensions-Python-Addons-EnabledAddOn.jpg @ 2016-01-18 11:47:56
 [[~/Wally/Journal/Figure/.org-download/Journal/Extensions-Python-Addons-EnabledAddOn_2016-01-18_11:47:55.jpg]]

启用插件

启用插件功能可以即时生效。 如果启用后插件未激活， 可以在 [[../../../interface/window_system/console_window.html][/控制台窗口/]]
查看发生的错误。

单击插件左侧的箭头可以查看更多信息，如插件存放位置、描述和文档链接，你
还可以通过“报告Bug”按钮报告该插件的bug。


小技巧

保存插件设置

如果想要插件随Blender打开同时启用，你需要 /保存用户设置/ 。

****** 安装第三方插件[[#installation-of-a-3rd-party-add-on][¶]]

对于网络下载的或你自己的插件，需要单击 /从文件安装.../ 并选择 .zip 或
.py文件安装后，才能在插件列表中显示该插件。

或者你还可以手动安装插件，这在开发自己的插件过程中很有用。

直接将文件移动或链接至 =../scripts/addons= 文件夹(你的Blender文件夹配
置路径).

[[/home/wally/Wally/Journal/Figure/scrot/2380aff.png]]

****** 文件位置[[#file-locations][¶]]

关于Blender目录信息详见 [[../../../getting_started/installing_blender/directorylayout.html][/配置& 数据路径/]]。

你还可以新建个人插件目录，并在 /用户设置/ 中的 /文件/
面板配置该路径。新建一个个人脚本文件夹：

-  新建一个空文件夹 (如'script_addon_2-7x')

-  在该文件夹下添加一个 ‘addons'
   文件夹，只有这样命名Blender才能正确识别。

-  将你的新插件置于该 ‘addons' 文件夹。

-  打开 /用户设置/ 的 /文件/ 面板。

-  在 /脚本/ 路径中选择你的脚本文件夹路径 (如 ‘script_addon_2-7x')。

****** 开发指南[[#development-guidelines][¶]]

如果你是一个脚本开发人员，你可能对 [[http://wiki.blender.org/index.php/Dev:2.5/Py/Scripts/Guidelines/Addons][插件开发指南]] 感兴趣。

**
*** Linux
**** [[https://mp.weixin.qq.com/mp/appmsg/show?__biz=MzA3MzAwMjAxMQ==&appmsgid=10000009&itemidx=1&sign=c926ff23def356a4a0f2ed7141c466d6&scene=1&srcid=0118jxrIABVW8XwWSGpkpoJd&pass_ticket=8B57gmAPihhXDqY3DNHOKiG9154WT42aR6KFVbb%2FAFpL7bBsnVOOoPubYSkLb3iH][当你想放弃时，看看这幅漫画！]] :责任:

[[/home/wally/Wally/Journal/Figure/scrot/32504b9n.png]]

这篇东西转自一位有思想的研究生！她看到这篇漫画，觉得很不错，我看后也觉
得值得我们思考，尤其是当我们抱怨时！

[[/home/wally/Wally/Journal/Figure/scrot/32504oHu.png]]

第一幅漫画中，每个人都背负着一个沉重的十字架，在缓慢而艰难地前行！

[[/home/wally/Wally/Journal/Figure/scrot/325041R0.png]]

途中，有一个人忽然停了下来。他在想着什么！

[[/home/wally/Wally/Journal/Figure/scrot/32504nbD.png]]

他想，上帝啊，这个十字架太沉重了，我可以把十字架砍掉一块！

[[/home/wally/Wally/Journal/Figure/scrot/325040lJ.png]]

于是他动手砍了起来！

[[/home/wally/Wally/Journal/Figure/scrot/32504BwP.png]]

砍掉之后走起来，的确是轻松了很多，他的步伐也不由得加快了。

[[/home/wally/Wally/Journal/Figure/scrot/32504oOi.png]]

就这样走啊走啊！走着走着，他觉得肩上的十字架还是很沉，很重！

[[/home/wally/Wally/Journal/Figure/scrot/325041Yo.png]]

他祈求道，上帝啊，请你让我再砍掉一截吧，我会走得更轻松！

[[/home/wally/Wally/Journal/Figure/scrot/32504Cju.png]]

于是，他又砍掉了一截！感谢上帝，这样一来，他感到轻松多了！

[[/home/wally/Wally/Journal/Figure/scrot/32504Pt0.png]]

如此，他毫不费力地就走到了队伍的最前面。当其他人在吃力地负重前行时，他
却轻松地哼起了小曲！

[[/home/wally/Wally/Journal/Figure/scrot/32504B3D.png]]

啊哈!谁料，前边忽然出现了一个又深又宽的沟壑！沟上没有桥，周围
也没有路。也没有蜘蛛侠或者超人出来解救他…

[[/home/wally/Wally/Journal/Figure/scrot/32504bLQ.png]]

后面的人都慢慢地赶上来了，他们用自己背负的十字架搭在沟上，做成桥，从容
不迫地跨越了沟壑。

[[/home/wally/Wally/Journal/Figure/scrot/32504oVW.png]]

他也想如法炮制。只可惜啊，他的十字架之前已经被砍掉了长长的一大截，根本
无法做成桥帮助他跨越沟壑！

[[/home/wally/Wally/Journal/Figure/scrot/325041fc.png]]

于是，当其他人都在朝着目标继续前进时，他却只能停在原地，垂头丧气，追悔
莫及……

每个人都背负着属于自己的十字架，的确是这样，漫画中的每个人，都是背负着
属于自己的十字架，而当沟壑出现时，他们也只能利用自己背负的十字架去跨越
沟壑，继续前进。

所以：在人生的道路上，有些黑暗，只能自己穿越；有些痛苦，只能自己体验；
有些孤独，也只能自己品尝……人生是没有捷径的！

**** [[http://daily.zhihu.com/story/4573178?utm_campaign=in_app_share&utm_medium=Android&utm_source=Weixin&from=timeline&isappinstalled=0][哪些习惯能让生活变得简洁高效？]] :知乎:习惯：极简主义:

个人现状是处在三条规则，距离一条规则完全保持简约的生活方式还要努力几年时间。

***** 让生活变得简洁而高效只需要一条规则

就是照管好自己，保持一种简约的生活方式, 控制好自己的内心，从加法生活过
度到减法生活。

***** 如果觉得这一点说的太简单，就可以扩展成三条

*第一条：应用好 80/20原则*

把这个法则用在生活的各个方向中，把时间和精力放到自己擅长事情和主要目标
上，比如工作、家庭、友情、爱好、情绪，提高生活的质量和稳定

*第二条：做好精力管理，保持稳定而规律的生活方式：*

应该根据自己的精力进行安排和调整生活，周期性地补充精力，来平衡精力消耗。
需要对你的精力进行海战略性的规划和应用，并把它当成一种习惯。

人们的精力有4种来源，身体的、情感的、思想的和精神的，这4种精力资源需要
在消耗和储备之间取得平衡才能保证不会枯竭。


*第三条、 控制过度消费和物质过剩*

最初从减少选择开始，然后是学会丢东西，最成功的一次是用几个月时间丢掉了
50种不同类型的东西，包括当时的工作和26斤体重，整个生活立刻就简单了很多，
但距离断舍离的要求还有差距：

断舍离”是指：

断 = 不买、不收取不需要的东西

舍 = 处理掉堆放在家里没用的东西

离 = 舍弃对物质的迷恋，让自己处于宽敞舒适，自由自在的空间。


选择物品时不是“能不能用”，而是“我要不要用”。

扩展阅读：

-  [[http://www.read.org.cn/html/1386-reduce-the-choice-to-let-you-save-time.html][减少选择让你节省时间]]
-  《丢掉50样东西，找回100分人生》读书笔记
   --[[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200035644&itemidx=1&sign=6f0cd694354b3f75b757e41bc93b767b][warfalcon]]
-  进阶时看《断舍离》 [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000734&itemidx=1&sign=31ac402a40a351bf6823237d2d020057][warfalcon]]


***** 觉得这三条还是太难，那继续扩展成九条

只要减少这九类时间黑洞，生活中就会简约高效


*1、减少网络黑洞时间：*

每个人都离不网络，而网络上的无效时间黑洞是最多的：

不看新闻：

-  *时间管理之新闻阅读*[[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000055&itemidx=1&uin=MjU4MjUyNzM2MA%3D%3D&key=79cf83ea5128c3e59a05178691cc0d51487d45a3b3704ccaa2340ff568d898b089e6e31cf75c6a261042289e859b66c0&devicetype=android-10&version=25000338&lang=zh_CN&pass_ticket=1V0MbhKBMhjP%2BE4eiEonppyltegkgcZRy%2F%2FCxeKJlauehqow4jLPOnbhMpyI0xCB#wechat_webview_type=1#wechat_redirect&From=test][warfalcon]]**
-  你是在掌控新闻还是被新闻所掌控？
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200791870&itemidx=1&sign=77679932e20ecb28fa3ae6c26f653caf&scene=4&uin=MjU4MjUyNzM2MA%3D%3D&key=79cf83ea5128c3e59a05178691cc0d51487d45a3b3704ccaa2340ff568d898b089e6e31cf75c6a261042289e859b66c0&devicetype=android-10&version=25000338&lang=zh_CN&pass_ticket=1V0MbhKBMhjP%2BE4eiEonppyltegkgcZRy%2F%2FCxeKJlauehqow4jLPOnbhMpyI0xCB#wechat_webview_type=1#wechat_redirect&uin=MjU4MjUyNzM2MA%3D%3D&key=79cf83ea5128c3e59a05178691cc0d51487d45a3b3704ccaa2340ff568d898b089e6e31cf75c6a261042289e859b66c0&devicetype=android-10&version=25000338&lang=zh_CN&pass_ticket=1V0MbhKBMhjP%2BE4eiEonppyltegkgcZRy%2F%2FCxeKJlauehqow4jLPOnbhMpyI0xCB#wechat_webview_type=1#wechat_redirect&uin=MjU4MjUyNzM2MA%3D%3D&key=79cf83ea5128c3e59a05178691cc0d51487d45a3b3704ccaa2340ff568d898b089e6e31cf75c6a261042289e859b66c0&devicetype=android-10&version=25000338&lang=zh_CN&pass_ticket=1V0MbhKBMhjP%2BE4eiEonppyltegkgcZRy%2F%2FCxeKJlauehqow4jLPOnbhMpyI0xCB#wechat_webview_type=1#wechat_redirect&From=test][warfalcon]]
-  为什么你不应该读新闻
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200781923&itemidx=1&sign=96c0608f4ab861aac6271cf737d334ae][warfalcon]]

微信篇：

-  除非工作需求，否则每天集中查看三到四次微信，每次10分钟集中回复。
-  关闭微信朋友圈
-  定期退出无用的微信群
-  取消和关闭所有微信通知，否则微信的通知会不断的弹出信息来干扰和打断你

QQ篇：

1. 除非工作需求，否则一、二天登陆一次QQ
2. 定期评估并退出QQ群
3. 并关闭各种广告及提示。

邮件篇：
*[[http://www.read.org.cn/html/1986-shi-jian-guan-li-zhi-jian-chu-li-1-hai-liang-jian-chu-li.html][时间管理之邮件处理（1）海量邮件处理]]
*

*2、减少请求黑洞：*

学会拒绝工作和生活中各种要求，能减少大量的时间

要根据实际情况对要求做出判断。收到一个任务之后，应该问问自己：我必须马
上处理这个要求吗？我遇到最坏的情况就是每一项任务都是紧急的，需要立刻完
成。因为紧急任务一多，就会发现一整天都在不停地从一个工作转移到另一个工
作，最终一事无成。

对于别人的紧急要求，别立刻接受，而是提出一个近期内更合理的时间，以便完
成他/她手中的工作后处理新要求。然后将这个要求同其他相同的要求合并进行
批量处理。

*扩展阅读：*

-  [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000492&itemidx=1&sign=94c0656089fbaf9a6b751a5bbab54b4b][warfalcon]]
-  [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000495&itemidx=1&sign=b1adeb2d5aac7069cce791cda2bb5726][warfalcon]]


*3、减少选择黑洞*

我们必须控制过量选择，只把精力和时间放在生活中最重要的选项上，放弃一些
不重要的选择机会。千万别过于追求完美，做选择时要考虑好时间成本和机会成
本，而且一旦选择之后，别浪费精力去为其它放弃的选择而后悔。减少跟他人的
比较。

最好建立一个自己做选择的框架，在面临一些人生中的重大问题时可以更好的选
择和权衡。

扩展阅读：

-  控制过多的选择
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000177&itemidx=1&uin=MjU4MjUyNzM2MA%3D%3D][warfalcon]]
-  针对大量选择时的最优策略
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000738&itemidx=1&sign=b1ce75ef1000a3b70e770060e32d3b99][warfalcon]]
-  [[http://www.zhihu.com/question/19591602/answer/36731615][如何做选择才不会后悔？ - warfalcon 的回答]]


*4、减少负面情绪黑洞*

能正确面对恐惧、焦虑、抱怨等负面情绪，

扩展阅读：

-  [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000759&itemidx=1&sign=27c1add809978d24c929c82738753a76][warfalcon]]
-  [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=201278840&itemidx=1&sign=a31cc5b12cf9be442ee1d07338376f3e#rd][warfalcon]]

5、减少注意力黑洞

-  如何集中自己的注意力
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000066&itemidx=1&uin=MjU4MjUyNzM2MA%3D%3D][warfalcon]]
-  观察自己的呼吸
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=203934058&itemidx=1&sign=e240a22c7e63853168c863c30c912577#rd][warfalcon]]
-  集中注意力的入门方法
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200983071&itemidx=1&sign=5ea7109a5848631609a7e0c81dc19983#rd][warfalcon]]
-  从管理时间转向管理注意力
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=201082765&itemidx=1&sign=de78e74517d821092b5cd062d42f293e][warfalcon]]
-  集中注意力的十大秘诀
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=201401194&itemidx=1&sign=9570baf0bb1fbc52c2c6ece7a4cb2add#rd][warfalcon]]
-  写给注意力严重不集中人士的生活建议
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=205820380&itemidx=1&sign=b5f6285133b0e65cea78336124a128c0#rd][warfalcon]]
-  学会在网络上控制你的注意力
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000685&itemidx=1&sign=09a1c1c940c29b1af205784d0159ce2f][warfalcon]]
-  学会在网络上控制你的注意力
   （2）[[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000688&itemidx=1&sign=be90345c551fa4c16c3aa91200e2685f&][warfalcon]]
-  用清理桌面物品来集中注意力：我常用的一种方法把笔记本关机，然后用笔
  记本清洁工具，把键盘、屏幕好好擦一下，然后看到焕然一新的笔记本心情大
  好。

6、减少交际黑洞

7、减少沟通黑洞

工作篇：

学会开会：*只去参加必要的会议*
[[http://www.zhihu.com/question/20291195/answer/15595509][开高效率的会议，有哪些好的经验？
- warfalcon 的回答]]

学会授权和培养新人：

-  [[http://www.read.org.cn/html/1563-monkey.html][《别让猴子跳回背上》读书笔记]]
-  快速培养新人的四个方法
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=202558668&itemidx=1&sign=62f0f7914474712f96af84ea8f66b269#rd][warfalcon]]

生活篇：


8、减少拖延黑洞

扩展阅读：

-  我的战拖策略
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200321752&itemidx=1&sign=e15045518f8cb1f89109961166752b6b][warfalcon]]
-  战拖小技巧
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=202225151&itemidx=1&sign=6fffbbd02142e150a56636f1f8d88a8d][warfalcon]]
-  《一分钟能做什么？》60招对抗拖延
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=202103054&itemidx=1&sign=9f9ca10919eededa948ae6395d01db77#rd][warfalcon]]
-  [[http://www.read.org.cn/html/2322-tuo-la-yi-dian-ye-wu-fang-zhong-de-jie-gou-hua-tuo-yan.html?From=test][《拖拉一点也无妨》中的结构化拖延]]
-  告别拖延症的7个信条
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=201182906&itemidx=1&sign=89d62d5852b848338ebb20cc62068595#rd][warfalcon]]
-  对抗的拖延两种方法
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=205332382&itemidx=2&sign=4880ef380f52f401332ada12fdf28a71#rd][warfalcon]]
-  《战胜拖延症》笔记
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=200233145&itemidx=1&sign=f64af36f8c909993966140447c54003c][warfalcon]]
-  对抗睡前拖延
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=201089296&itemidx=1&sign=03827fccc3ecf45edb9946bca9ed239b][warfalcon]]
-  拖延处理技巧汇编
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000048&itemidx=1&uin=MjU4MjUyNzM2MA%3D%3D][warfalcon]]
-  《拖延心理学》中的12条应对技巧
   [[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NjA3OTM0MA%3D%3D&appmsgid=10000365&itemidx=1&sign=2f8da62dc06a8be12691f8dd6a995a63][warfalcon]]


9、

***** 觉得这九条做到有些困难，那继续扩展成81条

1. 整理好办公桌 [[http://mp.weixin.qq.com/s?__biz=MjM5NjA3OTM0MA==&mid=204814936&idx=1&sn=fdc5f29e094ac9bc4b91a1c13f160296#rd][warfalcon]]

2. 每周提前做好下一周的规划和时间安排：[[http://www.zhihu.com/question/27783349/answer/38065315][如何让星期天的晚上过得更有意
   义？-warfalcon 的回答]]

3. 不整理名片，直接扫描，用名片全能王，直接扫描一下，大多数名片都能自
   动提取并识别，然后有时间的时候统一处理一下，一张名片只需要20、30秒
   就能处理完。

4. 问自己，如果我不做这件事情的话. 是否会出现极其严重的后果呢？”如果
   答案是否定的话. 我就会取消这件任务。

5. 提早1小时出门，在途中确认每天日程表

6. 多利用录音来取代手写的备忘录，用来记录各种想法和点子

7. 练就3分钟内长话短说的功夫

8. 工作日的时候，每天5点钟起床（晚上早些上床睡觉）。

9. 早上起床的时候做几个简单的体操，加上几个深呼吸，可以上大脑马上清醒

10. 午饭吃得很少，这样下午就不会感到困倦。

11. 用消噪耳机把公共场所变成书房

12. 读书的时候，我只会用很少时间，只了解书的要点内容。

13. 不要太相信记忆力，要勤做笔记，记录下来的东西要定期整理，消化。

14. 学习开会，要有重点，会后会把会议要点记录在一张A4纸上.

15. 不把日程表排满任务，每天留出三十分钟给自己，去跟自己约个会。在这段
    时间里，可以思考自己现在处于什么状态，思考将来需要一步步完成些什么，
    对未来进行长期的展望。

16. 放弃所有的“等待时间”。如果我不得不等待的时候，我将其看成是放松自
    我的机会，或者我也可以利用这段时间来做一些我平时不会做的事情。

17. 只要你多花一点心思，把自己的生活设计的更加有趣更加迷人，就能让你的
    生活丰富起来

18. 把你经常用的固定句式进行自定义加入词库中，比如搜狗输入法里面就有批
    量造词，把地址、邮箱、问候语、公文格式之类做成短语，打字速度会马上
    提高很多

19. 每天都会浏览一下自己的人生目标，并确保自己每天都会做一些事情来推进
    自己的人生目标。

20. 把目标可视化，设成手机壁纸或桌面壁纸，每天会重复提醒自己。

21. 即便是在做一些最不起眼的工作的时候，我都会想着自己的长期目标。

22. 尽量只做A级活动，少做B、C级活动。

23. 在开始一个大型项目的时候，我会首先从那些最重要的部分开始，并经常发
    现其他部分其实并不重要。

24. 首先做重要的事情。

25. 每当完成一些比较重要的任务之后，给自己放个假，或者是给自己一些特殊
    的奖励。

26. 集中精力处理那些能够带来长期收益的事情.

27. 一次只集中精力处理一件事情。

28. 坚持一件件完成'事务清单”上的工作。

29，把自己的大部分想法记录下来。

30. 用早晨的时间做一些比较有创造性的工作，然后利用下午的时间召开会议
    （如果有必要的话）。

31. 为自己和其他人设定最后期限。

32. 在每次跟人讨论的时候都会积极聆听。

33. 尽量不浪费其他人的时间（除非是一些对我真正重要的事情）。

34. 尽量把一些事情委托给他人完成。

35. 请专家来帮助我完成一些专业性的问题。

36. 请人帮助我处理所有常规性工作。

37. 尽量减少纸面工作。

39. 每份文件我只处理一次。

40. 把自己的桌面整理干净. 并把最重要的工作放到办公桌中央。

41，为所有的文件准备了专门的地方（这样我就不用再花时间到处找它们）。

42. 每个月会专门抽出三小时时间来处理琐碎事情。

43. 周末的时候尽量不考虑工作。

44. 经常让自己放松，什么都不做。

45. 我意识到迟早有一天，我会用一些时间来应付一些自己无法控制的事悄. 我
    不会为此感到厌烦。

46. 不断问自己，“我现在最应该做什么事情？”

47. 利用思维导图把握总体结构

48. 不要长时间连续学习: 每个人的精力是有限，并一定长时间学习效果就好

49. 花钱上课，强迫自己学习

50. 寻找学习伙伴，避免半途而废

51，冬天把空调设定在20℃

52. 利用腹式呼吸消除杂念

53. 马上实践学过的知识

54. 阅读中有30%～50%都是没用的

55. 给大脑0.5～9小时来处理信息，再回顾才会有新收获，不要在难点上停留

56. 倾听微弱的声音能提高注意力，每天练习3分钟

57. 每天做件不愿做的事

58. 自我讲授，像老师教学一样把资料概述出来，疑点会变得清晰

59. 大脑更喜欢图像

60. 技能不是持久的，不练习，它每天都在退步

61. 把问题用另一个角度重复一遍

62. 画效率/时间曲线表

63. 每天花10分钟写随笔，不要停顿

64. 不要压制欲望，化解它

65. 微笑释放的化学物质对紧张和愤怒极有效

66. 总是全力以赴，因为你最好的一面每段时间都不一样

67. 从别人的错误中学习，脑中犯的错越多现实中越少

68. 每天运动一刻钟

69. 区分抱怨，停止抱怨

70. 一年是很长的时间，重复就是力量

71. 每工作90~120分钟便需要休整，再全力以赴

72. 问自己，愿用2小时把事情做到80%还是4小时做到100%？它需要做到完美吗？

73. 为每页笔记作出简要总结，方便日后抓住重心

74. 整出条理可按时间、地点、连续统（难~易）、种类和字母排序

75. 觉得再难的，只要你能静下心来反复练习，就会有进步。

76. 找办法督促自己执行任务

77. 不要服用不必要的维生素和补充品。

78. 每年性生活高潮的次数越多、质量越高，你就越年轻。

79. 坚持每天吃早餐。

80. 低卡路里、高营养价值、均衡饮食。

81. 固定的睡眠时间能帮助你保持年轻。女性每晚睡眠时间7小时，男性8小时。

-------------------------------------------------------------------------------------------------------
觉得这81条也还是有问题，那继续扩展成6561条：
-------------------------------------------------------------------------------------------------------

这个版本可以直接关注我的微信、知乎、Blog和豆瓣，写了8年快完成1/3
了，还有 2/3 估计在我死之前还是很有希望的。

***** 对这么多的技巧应该如何吸收和整理？

*去“做”，但不要期待任何 “结果”。*

第一步分类。把不同的技巧，按用处或类型，从新整理一下。放上关键字，收藏
起来。

第二步删除。对你帮忙不大或暂时用不了的技巧。

*第三步挑出少数几条实践。* 选择一些能解决你当前问题的技巧，从现在开始
尝试。可以列个清单。

第四步记录。每尝试完一条之后，记录一下心得，想想是否有可以改变的地方或
者直接放弃。

第五步总结。积累5-10条实用小技巧之后，写篇文章总结一下，找机会分享出来，
你会发现在写的时间，会考虑一些以前想不到的问题，分享也能让你印象更深刻。

**** [[https://mp.weixin.qq.com/s?__biz=MzA3MjM2MzYzOQ==&mid=402437707&idx=1&sn=02c915a39a2124790476688c0bde69d9&scene=1&srcid=0115wtZqKbY2mdXhwAlhVlmz&pass_ticket=8B57gmAPihhXDqY3DNHOKiG9154WT42aR6KFVbb%2FAFpL7bBsnVOOoPubYSkLb3iH#rd][孩纸，事情不象你想的那么简单]] :行动:

文：雾满拦江

（01）

明朝时，有个叫李晟的人，他心怀大志，胸有奇谋，痴迷军事器械研究，发明了
许多先进武器，战车连弩什么的。朝廷是非常重视这类科学家的，立即传令工部，
照着李晟的图纸打造弓弩战车。

战车连弩很快打造出来了，可是怎么看都有点不对------车装配不起来，弓弩拉
不动。都是废品，根本没法儿用。

李晟以坐废钱粮之罪，贬。

好多年后，李晟再次卷土重来，给朝廷呈上他最新研究出来的战甲。朝廷仍然一
如既往的重视，立命工部铸造。

但这次，工部多了个心眼，铸造新式兵甲可以，但要求李晟本人，要先行试用。

试用就试用，等兵甲造出来，往李晟身上一扣，就听哐的一声巨响，李晟被他自
己研究出来的兵甲，死死的扣在了地下，怎么用力都爬不出来。

原来，李晟研究的兵甲，防御力量绝对没的说，刀砍不入水泼不进，就是忽略了
人体的承受重量。这兵甲一旦穿在身上，就被压得趴在地上，根本爬不动......

（02）

纪大烟袋纪晓岚，写了本《阅微草堂笔记》，书中提到一个怪人刘羽冲：

刘羽冲，沧州人。他也是个喜欢琢磨事儿的人。有一次，他无意中得到本古兵书，
潜心研读多年，终于破关而出。言称其可统兵十万众。恰逢当地闹土匪，刘羽冲
主动担纲领队，率乡勇出击土匪。一触即溃，如果不是刘羽冲逃得还算快，铁定
被土匪捉去了。

从此刘羽冲不言兵事。

又不久，他又得到了一本古水利书，再次潜心研读多年，终于破关而出，自谓可
使千里成沃壤。游说于州官。州官也是位富创新精神的冒险家，遂大胆采用刘羽
冲先生的方法，开渠治水。岂料沟渎初成，大水狂涌而入，州郡之人，几为鱼鳖。

连续的失败，让刘羽冲陷入忧伤之中。他每天独自徘徊在台阶下，不时的自言自
语：噫吁戏，古人都是王八蛋，净写假书把我骗。都怪老子太犯贱，连续上当没
咒念......

（03）

晚清年间，倡导洋务。有下有个蒋老汉，是个创新型的实干家。他在报纸上看到
洋人的火轮船，顿发宏愿，要亲手制造一艘。

制造一艘铁甲战船，那要花老钱了。蒋老汉舍得投入，他花光家产，负债累累，
凑足了材料，然后拎只小铁锤上阵了：叮哩当啷，哐哐咣咣，不眠不休的苦战了
不知几多日月，最终是功夫不负苦心人，一艘华丽的铁甲船，终于成功的制造出
来了。

铁船下水之日，三乡五里的人全都跑来看热闹，被蒋老汉的创意深深的折服：看
看人家，你看看人家，敢想敢干敢冒险，真是了不起......哎哟，那是怎么回事？

没怎么回事，就是蒋老汉研究出来的铁甲船，一碰到水，就听咕嘟咕嘟，瞬间就
沉没了。

造了这么多日子的铁甲船，刚刚见水就沉了，这未免......蒋老汉呆立水边，茫
然失措。

一个看热闹的人告诉他：老蒋呀，你的创新精神，是好的，是应该受到鼓励和支
持的。可是这世上的事儿，不是你胆肥儿就能干明白的。单说这铁甲船，在洋人
那里都是个超复杂的问题，要学好多好多的知识，才可以......

原来是这样啊，蒋老汉毅然发了狠，要送儿子去西洋，学习制造铁甲船。

蒋老汉把儿子送去了西洋，可是这个儿子学了半天，还是没弄会如何制造铁甲船。
他毕业归国，去北大当了校长，专门告诉孩子们：骚年，这个做事呢，不象你们
想的辣么简单，真的不象，就比如说咱爹......

这位校长，叫蒋梦麟。

（04）

前段时间，一位当父亲的在我微信里留言，说了这么件事：

他的儿子，大学毕业了，雄心勃勃，要开工办厂。

可是，这家人父亲没开过厂，爷爷没经过商，祖上十八代都是凡人，你个熊孩子
开口就要开厂，你懂得厂门该向哪儿开吗？

孩子才不管，在家里大吵大闹，要家里拿五十万创业基金出来。

钱是有，可五十万，足以让这家人抽筋剥皮了，毕竟是工薪阶层......可这苦情，
根本不能跟读了书的孩子讲。这孩子读书读得已经不会说人话了，开口就骂：五
十万你都拿不出来，活这辈子还不如条狗，现在赚钱这么容易，狗汪汪两声都能
赚五十万......

家里被这孩子闹得乌烟瘴气，最后老伴屈服了，瞒着他给了孩子存折。

不出所料，孩子拿到钱，立即就消失了。不久有债主找上门来，厂子没见到，据
来人说孩子还在外边欠下一百来万......此时家人心急如焚，到处找孩子，最终
在家网吧，成功的把那熊孩子找回来。那孩子回来时梗着脖子，一脸的不服不忿，
此后爹妈做牛做马还债，这孩子就呆坐在沙发上看电视，还不能问他怎么欠下人
家的钱，一问这孩子就疯起来......

那位父亲问：你说我儿子，这书他究竟是怎么读的呢？读到最后，连事情看着容
易做起来难，这么简单个道理，他都不懂了呢？

（05）

前段时间，我的几个写字吃饭的朋友，聚一起喝酒，一边喝一边愤慨：唉，什么
世道，这人都是瞎了眼吗？你看那个谁，那个谁，还有那个谁谁谁，他们写的东
西，叫什么玩艺儿呀？烂到家的文章，根本看不下去，可是他们都红了，还大红
大紫，这可真是日了狗了。

咱们也要红！

咱们几个的才华，比他们强上几百倍，想红不过是分分钟的事儿！

而且，咱们是个团队，随便扔过去一个，都把他们砸趴下的那种。咱们几个合写
一个微信公众号，大家轮流上，每天一篇原创，最多不出半个月，准保大火。火
了后咱们就那啥......那啥......

干啦！

然后他们就真的开了个公众号，联手上，一共五个人，每五天轮一圈，每天一篇
原创文章。

头两圈，大家严肃认真，克尽职守。

到了第三圈，有位老兄讨个巧，他没写文章，顺手把他早年写的诗，发上去凑个
数。

他的想法是，我就今天偷个懒，有你们四个人的原创撑着呢，整体质量也不会下
降，等我哪天灵感来了，写篇涨粉的......

不曾想，另外几个老兄，也是这种想法。只是不好意思，见这老兄先行下了手，
大家心里再无顾忌。

从此这个公众号，发的时候随便抄几句，或者干脆停发，就这样过了段时间，这
个公众号，大家就很少登录了。

团队合作，怎么想都是极完美的，但当真做起来，却发现总会有意想不到的事情
发生，让我们心中美好愿望，最终沦为空想。

------人世间的事儿，怎么用脑子想，怎么合理。只有等做起来时，才会发现，
想象中的逻辑与现实，往往不在一个频道上。

（06）

一个人，做事越少，怨愤之气就越重。

*做事少的人，会把所有的事情，想得极简单。*

做事如此简单，可证自己的智商，那可不是一般的高。自己这么高的智商，却混
不出个模样来，可证这世道是多么的昏黑阴暗。世道如此不公，让自己满腔宏愿，
无由抒展，这种情况下的人，想不悲愤，真的很难。

*但这几个故事，告诉我们，人间事儿，真的没有简单可言------如果有，那一
定是你以旁观者的角度，看别人做事。*

明朝的李晟，清朝的刘羽冲、蒋老汉，都是认真做事之人。只不过，他们所做的，
是自己不熟悉的领域，不知道一项研究，要经过无数次试错，才会稍有点眉目的。
比如爱迪生，他为了寻找最合适的电灯丝，先后试验了上万种材料。在这个过程
中，所谓做事，不过是不停的试错，把所有的错误都找出来，就知道对的方案
了------但明李晟，清刘羽种和蒋梦麟的父亲，都只有一次试错的机会，一次不
对，人生成本耗尽，就玩不下去了。

人是没有预知能力的------许多人看到这句话，会频繁点头，但当轮到他们自己，
却往往忘了这点。那个非要开工办厂的孩子，和五个合开微信公众号的老兄，就
是不知道一件事情做起来，会有无数的枝节问题需要解决。这些问题和困难，只
有做了之后才知道。

不知道事情会遇到什么问题，不清楚事情的枝节，只看到事情的头和尾，这就是
许多人，把没做过的事情，想得过于简单的原因。

（07）

人生就是这样，除非在你自己的主场，所有的因素完全可控，这时候你才敢说胜
劵在握。

余者，你必须准备支付试错成本。

台湾有个歌星，曾讲述他服兵役时，如其所愿的被安排去歌唱，他雄心勃勃，以
为自己是偶像，铁定是赢得满堂喝彩。岂料真要演出时，惊发现还需要他自己搭
舞台，可他只会唱，从未搭过舞台，顿时傻了眼。这时候他的同伴们立即取出携
带的简易工具，噼哩啪啦搭个台子，自己走上去引吭高歌，让这位大歌星看得直
眨巴眼。

没有亲手做过的事儿，之所以想得容易，就是不知道还需要自己搭台。嚷着开厂
的孩子不知道这个，生生被人骗成狗。我那几个写字的朋友，他们根本没有与人
合作过，心里想的简单，以为人人都会出工卖力，替自己搭台。但等真做起来，
才发现人性还有偷懒搭便车的一面，台子还得你自己搭。只会唱戏不会搭台，这
戏你就唱不了。

想象中的逻辑，完全构建在别人都是无生命的劳作单元、心甘情愿替自己搭台的
基础之上。想象中的别人，都是没有私欲的，对自己是绝对顺从的。就跟电视剧
里演的一样。电视剧中，所有人都是主角的奴隶，就算是对手，也是以其拙劣映
衬主角的高智商。而电视剧是典型的想象思维，符合人类的主观想象------唯独
与现实不太贴边。

（08）

许多人喜欢指点别人，却最痛恨别人指点自己。

指点他人时，个个都是高手，从未做过实事的孩子，敢怒斥辛苦的父亲笨。等轮
到他来做，才知道这世上最笨的，就是他自己。

事非经过不知难。事情也只有做，才会在一次次试错后，走向成功------这是尽
人皆知的大道理。

但，没人告诉过你，你需要为每次试错，支付多少。

哪怕最简单的事儿，流程都复杂到超出你的预期。而每个环节的支出，加起来更
是个惊人的数字。以为五十万就能开个厂的孩子，需要有人告诉他，胼手胝足用
自己的努力来开厂的人，会发现自己付出的远不止这些。以为自己能力具备只差
钱的人，多半是把事情想简单了。

*永远要记住，想象最容易，做事最艰难，想象的逻辑与现实，始终有一条不可
逾越的鸿沟。*

真要想做成事，还要避免那种一次性就把人打入失败深渊的成本付出，适当的方
法有许多，比如你可以：

------先要知道自己这事儿没做过，许多细节不知道。这话说着简单，但没做过
事儿的人，会拼死的抬杠，死活不肯承认这点。

------承认你没做过的，必有你不明白的，这就可以了。

------从学徒做起。现在没有学徒制了，没有也不要紧，你可以找个正经做事的
人，到他身边，帮忙也好求聘也好，以员工的身份，踏实的观察，学习。这世上，
老板是最苦鳖的人，做梦都盼着个懂事明理的孩子，帮自己一把。如果你是这样
的人，就会获得具体实践的机会。

------事情做起来，慢慢你就知道什么叫资源了，你会认识越来越多做事的人，
知道每一个流程细节，能正确估算一件事的成本投入。

------等到你知道如何做事，懂得如何做成事，这时候你用不着逼家里拿钱成就
你的梦想，许多人自然就来找你了。当然，在你不会做事，还蠢透天的时候，也
会有许多人来找你，但这时候来的都是骗子。除非你成为做事的人，同类型的人
才会出现在你身边。

*事情是用来做的，不是说的。*

没做过事儿的人，往往会趾高气昂指点江山。而做事之人，莫不是低调谦
和------不是做事者人品好，而是他知道做事之难，再不敢摇头晃尾胡言乱语而
已。

让我们开始吧，先把心沉下，承认自己确实没有做过这件事。学习，询问，倾听，
学习的过程中，难免因为犯错而遭到斥责羞辱，如果你是玻璃心，明明什么都不
懂，还想让人拿爷供着，那就需要认真思考一下自己了。

要记住，这世上有两种人，一类是不做事，只管趾高气昂嘲笑别人，却荒废了自
己事业的蠢人。另一类是低调隐忍，任人嘲笑但逐步成就事业的人。你选择什么，
就会得到什么。你的人生你做主，荒废或是成就，取决于你内心深处的愿望。

**** [[http://m.wufazhuce.com/question/2016-01-03?from=timeline&isappinstalled=1][什么才是真正的成长？]] :一个:成长:

毛头子问：经常看到很多人说“成长”，感觉仿佛只要懂得了某个道理，就是一
种成长，成长就是不断地明白道理的过程，是这样么？


@曲玮玮 答毛头子：

真正的成长，就是不再急于成长。

有一类问题似乎很受欢迎------“哪些道理让你相见恨晚？”“你的每日私人成
长暗器是什么？”“哪些习惯能让生活变得更好？”

大家忙着收藏，忙着把一眼扫过去瞬间读完的道理抄在小本儿上，忙着赶紧找到
填补袖口破洞的补丁，忙着大彻大悟，忙着醍醐灌顶，即刻见疗效。

这些简洁的人生道理总是高赞。因为不需大费周章就能把几行金玉良言背下来，
产生自己手持武林秘籍行走江湖畅通无阻的幻象。

可是，你以为那些道理，作者栽跟头之前从没听说过吗？它们是治病的药丸，不
是预防针。只有跌了跟头后混合苦水服下去，才能缓解跌打损伤，从此溶进血液
里内化，终身傍身。在你经历到这些之前，它们只是粘在衣服上供你摘取的小处
方纸片。

当你真的成熟，慢慢不会再把“每天进步一点点”挂在嘴边。不会只对可以量化
的努力成果情有独钟，不会执念于“少吃一顿肉必然体重掉两斤，多做两道题考
试加五分”。没必要咬牙给自己设定
KPI。生活又不是大妈坐小板凳上织毛衣，一切所见即所得。

和我一样，很多写小说出身的人做自媒体，从前的创作是“背向”读者，所谓的
“成长”更多来源于自我省察。开了公众号之后，一切数据都转向阅读量与粉丝
数。有了可量化的数据之后，旁人哪里顾得上你内在的进步呢，只会忙不迭问你，
“最近粉丝涨了多少？”

或许世俗对成长与成功都有一套冷冰冰的评价体系，你要忍受层层标尺在身上测
量的尴尬，挺直腰板儿，心中另有一套无形的标尺。

时间本身是没有标度的，是人类为了有所区分与回顾，把连贯的时间分割成块。
又到年底，以前也执念于写一年总结，这一年看了多少书和电影，输出了多少万
字，把量的积累看作成长之一。也渴望从每段经历里萃取几滴人生精华敷在脸上，
希望每次摸爬滚打都能换来可视化的成长。

今年我依然会写总结，但不再有此心态。

生活不仅不是织毛衣，甚至连“蜗牛爬金字塔”都不是。没有任何人向你拍胸脯
保证，你所做的一切努力都指向前方。

有人用了错误的健身方式，辛苦流汗，却把自己严重拉伤。一些连续创业者总是
急于标榜自己在失败中得到多少宝贵的经验，却不会勇于承认，自己消耗了多少
资源和好年华。

你只是旅人走在陌生丛林里，天高地暗，薄雾微茫。你可能离星辰大海越来越近，
可能跋涉一天依然绕回原点，甚至努力一番仍向后退。

罗曼·罗兰说，“看清这个世界，然后爱它。”真正的成长，大概是你看透一切
之后，放下“你要去相信，没有到不了的明天”这种鸡汤执念，放下自欺欺人，
依然往前奔跑，无畏无惧。

初中时看《老友记》，看他们每天坐在同一张沙发上一本正经瞎扯淡，端着咖啡
杯消磨时间，乐此不疲地制造笑料，心里都在替他们着急，这些人什么时候能长
大啊。那些闲扯淡和玩填字游戏的时间，用来报个技能班学个编程该多好。

今年又重温了一遍。第一季穿着婚纱一惊一乍、被宠坏了的姑娘
Rachel，成了某时尚公司主管。吊儿郎当玩世不恭的
Chandler，重新找到了所爱的职业，也成了充满责任感的丈夫。

电视剧里从来没有从天而降一场惊人的变故，让每个人瞬间遭受锤炼，一夜之间
沧桑得判若两人。他们也没有合上书本后一拍大腿，顿悟真理从此铠甲傍身。

我只是在陪他们傻笑，替他们尴尬之余，年复一年，发现他们慢慢成长为另一种
样子。Joey
依然行为低幼，Monica
依然强迫症，Phoebe依然鬼马。十年过去，这些点缀人性的漂亮羽毛依然在他们
头顶随风飘，但是人生已经有了更厚重的根基底座，再也不是二十出头受了惊吓
随时地动山摇世界崩塌的小孩子。

急什么呢。

我很喜欢一句话，叫“但行好事，莫问前程”。

并非要你放下功名尘土无欲无求，只是不带着强烈的结果导向去做事，不是把一
串葡萄放进榨汁机就马上求一杯饱满的果汁。

我们坚持一件事情，并非因为这样做了会有效果，而是坚信，这样做是对的。哈
维尔说。

只顾笃定往前走便是，胸中自有云月。
**** [[https://mp.weixin.qq.com/s?__biz=MzI0OTEzNzY3NA==&mid=402189489&idx=4&sn=52e6a4a3f19737ffb0f786bc26b0482b&scene=1&srcid=0118goA5DF1wmTRug9ZOpCti&pass_ticket=8B57gmAPihhXDqY3DNHOKiG9154WT42aR6KFVbb%2FAFpL7bBsnVOOoPubYSkLb3iH#rd][韩寒：长跑就是长跑，人生就是人生]]

很多人在长跑的时候喜欢思考人生，但对我来说，长跑就是长跑，人生就是人生，
我在长跑时考虑最多的时候是我的表情。

要知道我小时候一直是长跑队的，也拿了不少学校和区里的长跑比赛第一名。

其实我很早的时候是长跑的，如果我真的好好练的话，我的长跑应该可以到进国
家队的水平的。

我进高中是体育特招，长跑特招，我以前跑步是跑不快的，因为我的好朋友跑的
很慢，每次在体育课的时候我得跟他们做伴，他们跑得慢我也得跑得慢，有一次
误打误撞参加学校的800米和1500米比赛，第一次跑就两个比赛都破了校记录10
多秒，而且当中还停过，跑两圈以后，我以为到终点了，我跟同学们在欢呼拥抱
了，但是我们的跑道是250米一圈的。同学们给我欢呼完以后说哥们儿还有一圈，
然后我又追上去，还破记录，还拿的第一。

后来参加区里面长跑的比赛，8000米的也都很轻松地赢了，我自己从来都不训练。
跑8000米的时候，在街道上警察还带错路，我当时跑在第一，后来警察转身对我
说，哥们儿不好意思，我开错路了，然后又回到那条路上，等于我比人家多跑了
几百米，后来还赢了很多，体育特招进了市重点以后，学校里和松江区的、包括
跟体校在一起的只要是长距离的跑步的比赛，我都能赢，而且都能有很大的一个
领先的优势。而且我从来都不训练。

上学时别人说我是跑步天才，我觉的算不上，因为毕竟区或者是市一级的比赛还
是比较低的，但是如果我经过一些训练或者是怎么样的话，我相信我的长跑肯定
应该是挺好的。当然你不一定在世界上争得什么荣誉。

我当时穿篮球鞋在跑步，因为那个时候我爸爸一个月给我四五百块钱，我在外面
寄宿，我积攒了几个月之后终于有买球鞋的钱了，但是我想来想去，当时是灌篮
高手，爱面子，参加比赛就穿着很重的篮球鞋，如果有很轻的跑鞋的话，一定会
跑得更快。

可能是我的腿脚的形状比较适合长跑，耐力会比较好一些。我不会游泳，我很喜
欢骑自行车，当然不一定是奥运会的比赛，是好玩，参加一下。

但始终有一个问题困扰着我，那就是我的比赛照片实在是太难看了，每一张都是
面目狰狞，鼻孔放大，舌头外甩，眉头紧皱。而那些照片都被放在所有学生都能
看见的学校形象展示玻璃橱窗里，导致有一些女生看见我会说，哟，你真人没那
么丑嘛。

于是，长大以后，我选择了一个至少看起来比较酷的运动：赛车。最关键是，无
论我的表情是啥样，再也没有人能看见我的脸。我有头盔，而且选择了黑色的玻
璃镜片。

我对长跑没有眷恋，我抛弃了它整整十年。但跑步让我感触很深，因为这是唯一
一个我没能找到起点在哪里的比赛。

现在我三十多岁了，我又开始长跑。不为别的，不为思索，不为感悟，只为了自
己的身体。硬要我说出些什么，我只能说这是一个忆苦思甜的运动。

人在坐着的时候常常会想如果我能躺着那该多好；躺着的时候常常会想如果旁边
有一盘水果那该多好；吃到了水果常常会想如果有个人在边上给我按摩那该多好。
只有在长跑的时候我会想如果我能坐着那该多好。

**** [[http://www.cnblogs.com/skyseraph/archive/2010/10/30/1865280.html][完全用Linux工作-王垠]] :linux:

注：本文是清华“牛仔”王垠的“成名作”，在网上引起很大的争议。对他崇拜
地五体投地者有，对他嗤之以鼻者也有，总之成了一年多以前Linux

爱好者的圈子里的一个很有意思的现象。之后他对这篇文章进行了很大的修改，
已经没有了原来那种意气风发。现存的版本如白开水一般无味，请参见：
[[http://learn.tsinghua.edu.cn/homepage/2001315450/]]


尽管他原来的观点有所偏激，但我还是很欣赏他原来的风格。

***** “UNIX 是简单的，你不需要成为天才也能理解这种简单。”

由于GNU/Linux这个词太长，下面如果没有特别指明，“Linux”就是指“GNU/Linux”。

在这个年代，恐怕没有人需要我来介绍 Linux 是什么了吧？如果你觉得“Linux
只不过是跟 DOS
差不多的东西”，那你恐怕很久在山洞里没见天日了吧？请问问你旁边的 Linux
用户，Linux 到底是个什么地位？

那为什么我还要写一篇这样的文章？因为，我发现还有很多人不不理解 Linux 和
UNIX，虽然他们也在用它，但是他们有时会问：“为什么 Linux 不能像 Windows
那样 ......？”，“怎么Redhat Linux不能 mount NTFS
分区！”，“Linux下用什么整理硬盘？”，“什么时候OpenOffice才能完全兼容Word文件啊？”，“现在还有什么Windows能干的事情Linux干不了的？”......

他们有40G的硬盘，却只为 Linux
分配了2G空间，有时还抱怨“这个东西怎么占这么多硬盘！” 似乎
Windows该占用大部分硬盘。他们把重要的数据装在Windows的分区，似乎信不过
Linux。他们总是到处寻找新奇的，好看的GUI程序，对命令行的东西一概不屑一顾。他们对Drag&Drop，菜单配置，自动升级非常感兴趣。他们如果找到一个很像
Windows 程序的 Linux 程序，一定会很高兴的说：“哈哈！Linux
也能......了！”
如果Linux在某种测试中胜过Windows，他们会高兴得跳起来。他们没有办法用Linux解决问题的时候，甚至用Wine来运行Windows程序。有时实在没办法，只好重起到
Windows，或者干脆省得麻烦，在 Windows 下装一个 VMWare 虚拟一个 Linux
玩。

你支持 Linux，你喜欢
Linux，你能从中感觉到快乐，这非常好。你现在只需要明白的是：Linux
从来就不是一个玩具，它是天才UNIX的后代。UNIX
是自晶体管发明以来最伟大的发明，它从诞生那一天开始就比 Windows
的设计出色。Linux 并不需要追赶
Windows，不需要打垮微软，它的最终目标是改变整个计算机世界，还人们自由，给人们乐趣和方便。其它UNIX很多都已经败在Linux脚下，更何况
Windows！

你如果出现了以上的情况，说明你的思想受到了 Windows
的某种潜移默化的影响和误导。你没有能够从本质上理解存在于 Linux 身上的
UNIX 思想。UNIX的设计者 Dennis Ritchie 说：“Unix is simple. It just
takes a genius to understand its simplicity.”
但是我不这么认为，因为我不是一个天才，但是我却勇敢的把Windows完全删除掉，半年之后我体会到了
UNIX 的思想和好处。因为我相信这样的信念：“Windows 能办到的事 Linux
一定能办到，而且办的更好。”

这小节开头的话应该改成：“Unix 是简单的，但是在这个冲斥着 Windows
错误观念的世界，你需要信念和勇气才能理解它的简单！”
我下面就告诉你一些我理解到的东西。

***** 微软的地位

微软的名声在欧洲和美国的大学里，特别是在计算机系里之坏，大家可能有所耳闻。我认识的
MIT，Stanford
的教授，贝尔实验室的专家，甚至一个欧洲小国的高中计算机老师都绝口不提微软的名字。在他们眼里，微软只是一个没有真技术，专靠在落后国家商业宣传和垄断经营的小公司。这个“小”并不是说它人少，钱少，而是说它先进技术少。

我上次和王益合作写了一个算法演示程序，那个算法是贝尔实验室一位科学家Steven
Fortune很天才的发明，为了程序能够被身边大多数人使用，我们选择了 VC+MFC
作为平台。我在分析算法时还得到 Fortune
很热情的鼓励，寄给我一份资料，还多次回信耐心的给我讲解了很多细节。但是程序完成之后，我把样品发给
Fortune，他回信说：“对不起。我机器上没有 MFC。”
话说的很客气，但是我已经感觉到了他对 Windows 的不屑。然后我把 MFC
静态编译进程序再发给他，他就没有再回信了。他显然不是瞧不起我，而是确实有难处。

你能感觉到这位科学家对微软和 Windows
是什么态度了吧？不是反感，而是他心里根本没有 Windows
这个东西！微软在高科技领域没有发展，那么它怎么生存呢？到发展中国家去发展一下，他们的人民还对电脑一无所知，我说不定甚至可以打入大学的计算机系呢。我送他们软件，我捐钱盖大楼，我出钱找图灵奖获得者来演讲，让他们觉得我们都是科学家！

好了，现在全国的大学包括清华，几乎所有人机器必装盗版 Win2000，Office
XP，学校的选课系统是非IE不能正确浏览，论文用 Word
编辑，演示用ppt做，email 的通知附件是 doc 文件，你不用 Word 打不开，连
863 项目都用 VC
写程序了。我很久以前就看到一份报纸说，“微软为什么不严厉打击盗版？”
这篇文章说，微软非但不打击中国的盗版行为，而且有放任之趋势。放长线吊大鱼，“以后我要你们加倍的来还我！”
确实如此，它的目的快实现了。

***** Windows 笼罩下的中国计算机教育

说句丢脸的话，比尔盖茨很久以前是我的偶像...... //blush

在中国，比尔盖茨被很多人奉为神圣，“少年电脑天才”，甚至有的人提到他的名字就做出“抱拳对天”的姿势。很多人谈到微软的“新技术”，“高科技”
都是眉飞色舞。各种“VC编程圣经”，“深入了解 Visual
C++”之类的书，在开头几页都会出现非常肉麻的字眼，“在那团团的混沌中，一个开天辟地的精灵，Windows
1.0，诞生了......”

微软的软件被这么多人盗用，那么人们是怎样使用这些盗版程序的呢？先看看电脑培训班，教的都是一些
DOS 命令，打字，Windows 基本操作，Word
文档处理，PowerPoint，高级班可能有 Excel，Access......
参加各种微软认证考试，MCSE，MSDE
的人络绎不绝。考试辅导班都贴出了“280元，考过为止”之类的字样。考试参考资料更是昂贵，有些电脑书店整整两书架都是“Microsoft
Press”的东西。我有个同学参加认证考试，每门考试都要200多元。而且你一次考不过可以再考，又要交钱。他后来还津津乐道跟我说，看我，花了XXXX(一个四位数)元考过了微软认证，得到一张比尔盖茨亲笔签名的证书和价值6000元的
Windows XP 内部发行版。

“电脑要从娃娃抓起”，我们再来看看娃娃们学的是什么。大部分家长给孩子买了电脑之后，他们首先就会装一个盗版的
Windows，然后买来盗版的游戏开始玩。如果哪个孩子会用 Delphi
编程序，那可不得了。报社记者，电视台争相报导，说，某某学校的初中生某某，在别人都还在玩电脑游戏这种“初级阶段”的时候就已经用
Delphi 写程序了。镜头还瞄准了他显示器上面的像框中的比尔盖茨头像！

我刚进入大学计算机系时还不懂得什么是操作系统，因为我以前只用过“中华学习机”。看到新入学的同学们各个谈论的都是
“Windows 95”，“VC”......
我简直觉得我落后了好几十年一样，整个一土人，根本跟他们答不上话。好不容易找到一个比较熟的同学问了一下：“你们天天谈论的瘟95是什么啊？”答：“win95就是一个操作系统，跟DOS是一类。”“朵死是什么？”
“你连DOS都不知道是什么？别在计算机系混了。”
学校上课当然不讲VC编程之类的东西，但是上 Pascal
的老师有一次就说：“嗨，我们学校真是落后。现在别人都用 C, C++，甚至 VC
了，我们还在讲
Pascal。不知道什么时候才能有VC课啊。你们出去也是要用VC的，只好自学了。”
于是，有些同学很多时候上课都捧着一本很重的“Windows
编程大全”之类的书，根本没有听课。吃饭时就念念有词的跟我说，“代码的优化是无止境的”，“匈牙利命名法真是伟大的发明”
...... 这就是中国很多大学计算机系的情况。

感觉到无知了？这不是偶然的，而是微软长久以来埋下的伏笔。它要让无知的大家都把它奉为神圣，它要让支持UNIX，Xwindow的人一旦说
UNIX 好，Xwindow 好的时候，都被一群人围着说教：“这个 Windows
也能做到”，“你对 Windows 有偏见”，“微软才是主流啊”，“你敢瞧不起
win2k？”，“.NET
就是世界潮流”，“微软的毕竟是新技术”，“有钱就是有技术”......
甚至在一番论战比较后败下来还是要说：“Windows
性能差点，但是易用性强”，“Windows
是老百姓用的，要求别那么高”，“微软那么有钱，以后想超过 UNIX
还不容易吗？”......

***** 发达国家的计算机教育

我前段时间在 USENET 发文问有关 Scheme
语言的问题时，认识了一位丹麦人。他解决了我所有的问题，并且建议我阅读一些很“深奥”的有关程序语言语法，文法的书，他告诉我很多网站可以学习
LISP，Scheme，人工智能，算法。他叫我看 Jonathan Rees 的论文 "Syntactic
Closures"。他还打包给我寄过来一份 MIT 的 "How to Design
Programs"。他说他在自己的 PC 机上装的是 Linux，他用 Emacs 编辑，运行
Scheme 程序。他对 Emacs
的了解和爱好真是使人惊讶。他大学本科毕业时做的毕业设计是一个 Scheme
解释器。这对于我来说是望尘末及了。

他是那么的不厌其烦，我的每一个问题他都详细的回答。我有时都觉得过于详细了，怎么这么耐心啊？我觉得他似乎是我的高中老师。他是什么样的人呢？我好奇的打听了他的情况。原来，她是丹麦一所普通高中的计算机老师，而且是个女老师！

她说她在高中里讲授程序设计和算法，计算机语言文法。她说用
Scheme，她的学生不用再为内存泄漏等程序语言本身的问题而烦恼，而专注于问题和算法本身。有利于培养学生解决问题的能力，特别是用计算机解决数学问题的能力。

天哪！为什么欧洲出现那么多数学家，几何学家？你看看别人重视的是什么！我们的计算机教育如果继续这样下去，只会沿着弯路越走越远！

***** 微软和它的朋友们的如意算盘

下面来看看微软的收入是怎么来的。首先，Windows 98系列操作系统，一个就是
100 多美元，每次升级又是几乎同样的价钱。Windows NT
还要贵几倍，而且有用户数目限制，5个用户的，10个用户的......
以后如果要增加用户数目还要按比例付钱。这个奇怪的现象被通用汽车公司的总裁比喻为：“你买的微软牌汽车最开头只有一个座位，每加一个座位你得向汽车公司付钱，每开100英里要大修一次，每过一年要换一次引擎。”

花了如此多钱买来的操作系统就能用了吗？它竟然连压缩程序都没有提供！你装上
Windows 之后一般第一件事就是去下载一个 WinZip 吧，“只要 29
美元”。Windows 会中病毒啊，马上花 70 美元买一个 Norton AntiVirus
吧。还有黑客呢？再买一个 Norton Internet Security 好了，100
美元。系统需要优化，磁盘需要整理，买一个 Norton System Works
是你最佳的解决方案，100美元。

可是你现在还是不能干正事啊！你想要一个 Word, PowerPoint？那就买一套
Office XP 吧，一起买便宜些，9.90。

那些程序不会用啊！那些菜单怎么设置，到底有什么功能啊？看“帮助”也学不会。买本书看看吧，我推荐“Special
Edition Using Microsoft Office
XP”，不贵，.99。这本书里面大部分是屏幕抓图，还是买一本旧的比较划算，.85。

你如果只是当个秘书，上面的差不多还凑合了。可是你有更高的追求，你想成为
Windows 程序员。首先买一个 Visual Studio.NET
吧，要不然怎么编译程序。4.95。

为了紧跟微软动向，世界潮流，不能不注册个 MSDN
什么的吧？这个贵一点，不过物有所值啊，,799。

嗯，你现在已经是上层阶级，白领人士了。你现在可以像这样“自由”的，“安全”的生活了：

***** 什么是 Windows 能干而 Linux 干不了的事情？

“Windows 能干而 Linux 干不了的事情，那就是不需要干的事情。”

有个朋友看我半年没有用 Windows，有时就会问我：“你只用
Linux，有没有发现有些 Windows 能处理的事情 Linux 干不了？”

我回答说：“Windows 能干而 Linux 干不了的事情，那就是不需要干的事情。”

Windows 能做的有益的事情 Linux 都能做

Windows 下的某些功能确实是我们需要的，那么 Linux
的开发者们和用户也需要这种功能，他们就会去实现这种功能，而且比Windows
的方式好得多。由于大多数科学家，工程师用的都是 Linux 或者某种商业 UNIX,
所以几乎所有商业的科学工程程序，比如Matlab, Mathematica, AutoCAD,
Candence的，Synopsys的，Avant! 的......全都是先有 UNIX
的版本(包括Linux)，然后再考虑移植给 Windows，甚至根本不移植给
Windows，因为 Windows
的机器一般没有足够的能力运行这样的程序。你不要以为只有 Windows 才有
PSpice, UNIX 的 HSpice
要好得多，而且可以运行在大型主机上。当然它们不是免费的，但是它们值那个价钱。

但是 Windows 下有些东西在 Linux
下没有很相似的，或者你找到很多类似的，但是它们每一个比起 Windows
的那个程序都要差很多，那么原因有两种可能性：

1. 有一个完全类似的程序，但是由于它乍一看不漂亮，被你忽略了。

而其它程序虽然看起来很漂亮，但是它们是一些初学编程的人写的。现在由于
Gtk+, Qt 的诞生，Linux
下开发图形界面程序极其简单，很多初中生甚至小学生都可以随手编出一些漂亮不中用的程序。如果你整天寻找这样的程序挑来挑去，永远也找不到你满意的。

我曾经也犯过这样的错误，优秀的 FVWM, lftp, Mutt, wget
都被我忽略过！当我找回它们的时候，我是那么的羞愧不已，它们现在都是我的朋友
:) 用这些程序你可以改变它们的一切，我第一次看到 FVWM
觉得它只不过是一个有很厚很难看边框的东西。可是现在，我的同学看到 FVWM
都说：“哇！真漂亮。”

2. 有另一种完全不同的方式可以达到相同的目的，甚至更好。

很多人很关心 Open Office, Star Office, AbiWord, ...
他们多么盼望有一天某一个 Linux 程序能够完全兼容的打开一个复杂的 doc
文档。但是你永远也不可能有那一天。为什么呢？因为微软为了占有市场，必定不会让其它系统的程序能够完全兼容它的文档格式！它一定会不断变化
doc 文档的内部结构，隐藏一些秘密，让其它公司的程序打开 doc
文档时总是有某种问题，从而你必需购买 Microsoft Office 和Windows。

你应该想一下，那么多的高智商的大学教授，科学家，学生，他们用的都是
Linux 或者其它类型的 UNIX，他们没有 Word
可用，怎么处理文档呢？这么多年没有一个像 Open Office
的程序出现，难道大家没有办法写文档吗？

显然不是这样。你看看那些高水平的学术杂志，论文，那些大学教授的网页，那些漂亮的PDF幻灯片，它们是什么做的？原来
UNIX 用户早就有非常方便的 troff, LaTeX, SGML
等东西可以处理文档，而且它们比起 Word 都要高明的多。Word
显然被这些大拿忽略了，以至于很久以来没有人想在 Linux 下开发一个类似 Word
的程序，除非某些公司想抢微软的饭碗。

很多人留着 Windows 在硬盘上的原因无非是为了用 Word 和
PowerPoint。你待会儿可以看看我的TeX网页，你就会知道为什么我可以完全离开
Windows.

***** Windows 能做的那些没用的事情 Linux 永远做不好

1. 电脑游戏

有些人说 Linux 下不能玩 Windows 下所能得到的所有游戏。的确，Linux
下虽然也有少量的游戏，比如 Quake。但是它没有 Counter Strike, 没有 Star
Craft, ......

并不是说电脑游戏不该玩，但是应该适可而止。电脑是用来处理事务，帮助你学习，解决问题的工具，而不是一个玩具！整天沉迷于电脑游戏中，而不出去感觉外面的世界，你会变得越来越冷酷，越来越缺乏人情味。你与真实的世界越来越远。

你可以在 CS 里杀人，你可以在 Tomb Raider 里探险，你甚至可以在 Tony
Hawk's Pro Skaters 里滑板...... 但是 It's not
real！你虽然有很高的“反恐技巧”，但是遇到歹徒的时候，你是那么的怯懦；你虽然控制
Laura 伸手敏捷，但是你打篮球的时候怎么总是被人断球？你虽然可以轻易的在
THPS 里作出一个 "360 kickflip to hangten grind to
fakie"，但是你踩在自己的滑板上的时候还不会 ollie！

说回来，如果你偶尔玩一下电脑游戏未尝不可。但是世界上有远比 Windows
+ PC 更好的游戏方式。Sony 的 PlayStation2, SEGA 的 DreamCast, Nintendo
的 N64，Namco 的街机......每一个都比 Windows
游戏精彩，每一个都有如此高的3D性能，以至于 Pentium4, Itanium + GForce4
都无法与它们比美！

Linux
的用户们都是关心解决世界的关键问题的份子，他们哪里有时间用自己的机器来玩游戏啊？他们每天用Linux高效的做完自己的工作就到阳光下享受自然去了。要玩游戏也是玩一些类似推箱子，贪吃蛇之类的智力小游戏。所以，你知道为什么
Linux 几乎没有游戏了吧？:)

2. “整理硬盘，优化系统”

这是一个非常有意思的话题，仅次于有关“病毒”的话题。相信很多 Windows
用户都有整理硬盘的经历。在很多 Windows
用户眼里，“硬盘用久了，会出现碎片，速度会减慢，需要一个程序来整理，整理硬盘的时候不要做其它工作”，这好像是天经地义的事情。

我也曾经津津有味的看着 Norton Defrag
一点一点的把我的硬盘排序，调整，用图形的方式显示出来，然后报告：“100%
没有碎片。你的硬盘现在已经达到最佳状态。”
我现在才发觉我那时是多么的幼稚。

Linux 和 UNIX
用户似乎从来没有“整理硬盘”这种说法呢？你觉得很奇怪吗？如果你觉得很奇怪，那说明你的思想在某种程度上被微软的垃圾程序禁锢了。你需要明白，UNIX
的大型主机很多必须是一天24小时，一年365又1/4天不停运转的，要是每个星期都要整理一次硬盘，在整理的时候几乎不能干任何事情，那是绝对行不通的！

Linux 机器根本不用整理硬盘，这就是为什么没有看到过 Linux
用户整理硬盘。Linux 的文件系统是比 Windows 的 FAT, FAT32, NTFS
高明得多的文件系统，它们不但可以对文件设置权限，实施完全的保护，而且可以“越用越整齐”，“越用碎片越少”！你应该把文件大部分放在
Linux 的分区，而不是 Windows 分区，因为它比 Windows 分区可靠得多。

还有更滑稽的事情就是有很多“Norton System Doctor”，“Windows
优化大师”，“超级兔仔注册表魔法”
之类的程序存在，而且价格昂贵。似乎一个操作系统本来应该有很多问题，需要别的厂商做程序来“优化”它，而且为了得到优化，你需要付钱！这些问题
Linux 根本就没有，所以不需要什么优化。Linux 内核本身就是高度优化的。

3. IDE

有些人在抱怨为什么 Linux 没有一个良好的 IDE 开发环境。Linux
现在已经有一些 IDE 了，但是总是有很多问题。你是不是正在寻找，正在期望
Linux
某一天可以有一个VC那样的开发环境？你有没有发现你正在进入微软给你设下的怪圈？你为什么一定要用
IDE？你说：“IDE 开发迅速，调试方便，适合大型程序......”
那说明微软的程序在你脑子里已经比较根深蒂固，你需要好好清醒一下了，看看我来告诉你。

高明的 UNIX 程序员不用 IDE，IDE 从来就是给初级 Windows 程序员用的。

你看看大型的 UNIX 程序，包括 Linux 内核，各种网络服务程序，Xwindow
程序在内，哪一个是 IDE 搞出来的？我们实验室的 EDA 程序也没有一个是 IDE
弄的，我还知道 Candence, Synopsys，Mentor 的高性能的图形界面 EDA
程序也都不是 IDE 写的。你信不信，微软的人在写 Windows
本身的时候也根本不用 IDE！

有一次某杂志采访一些出名的 Linux 内核程序员，包括 Linus
在内，没有一个人用 IDE，有的人用 VIM，有的用 Emacs，只有 Linus 说“GNU
Emacs is evil”，但是其实他用的是一种跟 Emacs 有同样键绑定功能的
MicroEmacs。大家都是用编辑器编辑了程序文件，然后用 make
这样的自动工具调用 gcc 编译器完成编译工作的。

我以前也编过 Windows 程序：应用程序，驱动程序。但是我没有用 VC 的
IDE。Linux 教育了我，我会在命令行调用 CL，我知道 CL 才是 VC
的编译器。我可以在 cygwin 的 Makefile 里使用 CL。我还知道 CL
的参数都有什么用处。但是这些不是一个从一开头就用 IDE
的人能很快理解到的。

我相信: IDE is evil。我有一些用 Windows 的 IDE
写程序的朋友，他们对那套东西已经很精通了。但是我却惊奇的发现，他们竟然把编译器和汇编器的概念都分不清楚，甚至有的人连“编辑器”和“编译器”都搞混淆了！他们只知道在一个窗口里输入了代码，点击一个按钮就可以编译程序，但是这里面到底是怎么工作的，他们不知道！他们被盖在上面的窗口挡住了视线，甚至会以为那个按钮就是编译器！

他们对那些 IDE
的热键背的滚瓜烂熟，但是我却看到他们在一个函数一个函数的把别人的 ANSI
风格的代码变成 VC 的风格。想想这件事在 VIM
里有多么简单，一瞬间就可以搞定。

为什么 UNIX 程序员不用 IDE？明白了这个道理你就能体会到 UNIX
的设计思想了。首先，一个 IDE
集成了编辑器，编译器，汇编器，调试器，跟踪器......
这个编辑器功能肯定比不上 VIM 或 Emacs，编译器比不上 GCC，汇编器比不上
as，调试器比不上 gdb, ddd, 跟踪器比不上 strace, ltrace,
truss。你得到的是一套整合的低能的程序。如果你对调试器的功能不满意，你只好换用另外一套
IDE，但是这套 IDE 的热键，菜单，编辑器功能，按钮......
跟原来那个有很大不同。你不得不花很多时间来熟悉新的环境，而不能保持原来的某些东西。

而在 UNIX 下就不一样了。你可以用你最喜欢的 VIM 编辑程序，你在 VIM
里可以调用 GNU make，make 可以调用 gcc, ld, ... 实际上 make
能帮你很多忙。make 的出错信息可以被 VIM 捕获，VIM
能帮你在源程序里定位。你如果喜欢 icc, 你可以让 make 用 icc 而不是
gcc。你如果觉得 gdb 跟踪变量时比较麻烦，你可以用 ddd
来显示各种数据结构之间的关系。你还可以在 Emacs 里调用
gdb，那样就可以同步显示源代码了。而且 VIM 和 Emacs
还可以编辑很多其它东西，比如信件，LaTeX 文档，HTML，配置文件......
你不用另外找一个什么编辑器来干这些杂活了。很多程序比如 Mutt, tin
都可以在内部使用 VIM，这样就更方便了。

4. 释放内存

我在 Windows
下做过的一件最傻的事情莫过于“释放内存”了。有一天我看到一个 Windows
程序说：“这个程序可以帮你把大量内存释放出来给一个很大的程序用。”我试了一下，居然一下把我的
64M 内存释放出来
48M！我高兴极了。现在想一想，那是多么傻的事情，那么多的内存留着干什么？不用白不用啊！一个操作系统，居然还需要别人写的程序来释放内存，那是什么样的操作系统？

在 Linux 下用 free
命令，你会发现你的内存几乎每时每刻都快要被用完。那是因为 Linux
把大部分内存用来作为磁盘缓冲了。Linux 有比 Windows
先进的磁盘缓冲技术。你有没有发现你往硬盘写数据的时候，很快就完成了？那是因为
Linux
在内存里有很多磁盘缓冲区，你要写到硬盘上的数据先被写到了这些内存里，然后
Linux 就告诉你“拷贝完成”，当你马上又想删除刚才写入的某些数据时，Linux
只是把数据从内存里移除，然后报告“删除完成”。在一定的间隔时间后，Linux
才把数据写回硬盘，这样不但高效，避免了多次硬盘操作，而且减少了文件的不连续，也就是减少了“碎片”。Windows
当然也有磁盘缓冲，但是由于它内存管理的低效率，它不敢把大量内存都用来作为磁盘缓冲，因为它没有能力在用的时候随时把内存收回来。

***** Linux 能干的高级的事情 Windows 都干不了

当然有很多事情是Linux/UNIX的专利了。因为 Windows 只能装在 PC
机上，好像以前也有 Alpha 可以使用 Windows NT，但是就是没见到有人用。PC
机的能力是很低的，像我们编程序处理 NP-Hard 问题的人，用 Windows
的机器显然速度不够，而且有时一个问题算上几天甚至几个星期，Windows
机器是以“死机”著称的，我们怎么能放心？

所以几乎所有科学计算程序，EDA 程序，高性能图像处理程序都不是 Windows
的。他们有时也会移植一些给 Windows，但是常常降低那些程序的能力。你比较过
Windows 版本的 Mathematica 和 Linux 的有什么区别吗？

IBM 制造的最大的并行计算机有 8000 多个处理器，Windows
不可能有能力管理这么多处理器，它用的是什么操作系统？答案是 Linux。

《[[http://fifid.com/site_search?cx=003017831450918707819%3Ae2pgfm8nybw&cof=FORID%3A10&ie=UTF-8&q=%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7][泰坦尼克号]]》电影里的三维动画，那么细腻逼真，Windows机器能做出来吗？不行。那也是
Linux 机器做的。

民航总局用来训练地情人员的虚拟现实训练设备，Windows
当然无能为力。那都是商业的 IRIX 机器。

UNIX 是最早支持 TCP/IP
网络协议的系统。它上面有很多可以互相协作的网络服务程序，它们经过多年的使用和修订，已经达到比较完善的程度。而就在1997年，微软的比尔盖茨还在扬言：“Internet
是没有前途的。”
微软的这个“远见卓识”大家应该都已见识，它后来加上的网络服务程序IIS漏洞之多，让公安部都频频发出警报，大家也是见识了的。

其实你知道了，Windows 没有一样有用的事情能比 UNIX 干的更好。

***** Linux 干不了的有用的事情 Windows 照样干不了

当然 Linux 不是万能的。它也有不能干的事情，电脑也有干不了的事情。但是
Linux 干不了的事情，Windows
肯定也干不了。这些事情就是我们需要探索，需要努力的事情了。在你探索的过程中，Linux
必定是你的好伙伴。

Windows 的流毒

不要用 Windows 的方式来思考问题

什么？你早就知道 Windows
是垃圾？噢！你怎么不早说呢！害我废话这么多。嘿嘿。

“好了。你知道 Windows 是垃圾，你现在用什么？”

“Linux + Xwindow”

“那我问你，Xwindow 是什么样的？”

“不就是跟 Windows 差不多吗？只不过 'Start' 按钮比较方，而且上面不是一个
Windows
标志，而是一个脚丫子。点击一下居然还有很漂亮的中文菜单。我喜欢！”

“你知道什么是‘根窗口'吗？”

“不知道。从来没听说过呢？”

“根窗口就是遮盖整个屏幕的那个最大的窗口。”

“哪儿有什么窗口啊！我没有看到呢？”

你发现了问题吗？这些 Linux 用户说是在用 Linux 和 Xwindow，但是他们对
Linux 和 Xwindow 几乎完全不了解。很多人用了那么久 Xwindow
都不知道根窗口是什么东西，不知道其实按钮也是窗口，不知道窗口管理器和
Gnome，KDE
有什么关系，大家都以为窗口上面的按钮是程序自己放上去的，不知道窗口的“class
name”，“resource name”是什么东西。他们被遮在 Linux
之上的一层一层的包装迷惑了！

当我告诉一个既能用 Windows 又能用 Linux Qt 编程的朋友 Xwindow
的“中键粘贴”是怎么回事时，他大吃一惊，说：“Xwindow
怎么这么落后啊！居然请求剪贴板的东西时还要联系剪贴内容的所有者自己来转换格式！你看看
Windows 的剪贴板......” 经过一顿饭的友好的讨论之后，他不得不称认，这个
Xwindow 用了几十年的方法比 Windows 的剪贴板要合理的多。

后来又有一次，我告诉他每个 Xwindow 的按钮都是一个窗口。他说：“不会吧～
这样效率一定很低。你看看 Windows 的按钮 ......”
又是一顿饭之后，他说：“哎呀。不得不承认 Xwindow 的方式是良好的设计。”

现在很多人已经把能够利用别人的库写出一个好看的程序作为自己编程水平的象征。在这个“图形化”，“可视化”
的年代，你如果还在用 troff, LaTeX 写文档，你还在用 VIM 自己编辑 HTML，用
Mutt 处理邮件，你还在用文本模式的 gdb 调试程序，你还在用 Xlib 写程序,
你还在用 tin 上 USENET，你还在自己写 Makefile，写机器代码，你还在玩
Clossal Cave 这样的字符模式冒险游戏，那你就是老古董，不合时宜，变态。

其实这种思想是错误的。虽然你是一个坚决的 Linux 支持者，但是你的思想是
Windows
的思想。你认为图形界面，菜单，按钮就可以解决一切问题，就可以给你高效方便。你要做坚决的
GUI 派而不是 CLI 派 ......
你还是没能摆脱微软给你的潜移默化的东西。你其实离不开 Windows
那样的环境，你害怕符号，你迟早会删掉自己的 Linux。

***** GUI vs. CLI

UNIX 和 Xwindow 是一家

大家看到这个标题是不是热血沸腾？两派大虾都可以围攻我了：

GUI派用户：“哇！我一看你这小子就是 CLI 的。要不然自己写什么
Makefile？用什么 Mutt？”

CLI派用户：“切～ 你还用 X！高手都不用 X。你是 GUI 那边的。”

可怜的我：“555～～你们都不要我～～ GUI 和 CLI 就那么水火不容吗？”

计算机界这样的门派之分还很多。很有特点的就是 CLI 和 GUI 了。CLI (Command
LIne) 的狂热份子声称永远不用 X。我上次在实验室看到一个同学用一个
SecureCRT 登录到 Sun 机器，然后用一个 vanilla vi
编辑程序，我建议他启动一个 GVIM 过来显示在 Exceed
上可以有语法加亮。但是他坚决反对，说：“高手不用X。你想想，要是我在一个很慢的网络连接怎么用
X？而且好多服务器没有装 X 程序。”

但是我们实验室的网速可够快，Windows 机器都有 Exceed 啊，而且 Sun
机器有全套 X 客户程序包括 GVIM。他说他是 CLI 的坚决拥护者，但是他却在用
Windows，他后来打开了好几个
SecureCRT，每次从文本框输入地址，用户名和密码，从下拉菜单选择
"SSH2"，然后点击“Connnect”。他还不断的夸SecureCRT是“网络管理员投票选出的最受欢迎的登录方式”。老天，SecureCRT
本身就是个 GUI 啊，他其实是一个 GUI。

你说我是 GUI 的？我虽然很少在 console 下工作。但是我对 bash, VIM
很熟悉，我可以让 bash 按照我的键绑定方式来工作。我可以在 rxvt 里使用
Mutt 来收发 email。我的每个桌面上都常常堆放着一打不同大小的 rxvt。我用
VIM 编辑 LaTeX。我自己写 Makefile 来维护 LaTeX 文档。我有时用 mpg321
来放 mp3。我上BBS用的我自己写的 expect 脚本，定义了很多热键，我只要
Ctrl-H 就可以随机变化我的签名档和说明档。我的 expect
脚本有高级的自动回复功能，甚至可以以假乱真，让你看不出其实我不在，你有可能跟我的机器人聊上10分种才发现那不是我
:p 好了，CLI 派的朋友可以收我做盟友了 :)

你说我是 CLI 的老古董？我的 FVWM
被我配置为可以“手写操作”，我只要画一个"r"就可以启动 rxvt，我只要画一个
"U" 就可以启动 GVIM，...... 我用 GVIM 语法加亮模式编辑程序，我用 Mozilla
浏览网页，...... GUI 派的现在好像认我做朋友了 :)

好了。CLI
派的朋友，虽然我很喜欢命令行，但是我有时在屏幕上左右画一下就可以执行:

Module FvwmConsole -terminal rxvt -geometry 45x5-0+0 \

-bg gold -fg midnightblue \

-fn "-adobe-courier-medium-r-*-*-14-*-*-*-*-*-*-*"

你是不是现在又想把我逐出师门？

GUI 派的朋友，虽然我很喜欢窗口。但是我可以在 FvwmConsole 里输入：

All (rxvt) MoveToDesk

把我所有的 rxvt 移动到我现在工作的桌面。“这家伙，怎么这么快就叛变了！”

其实何必分什么 GUI 和 CLI，UNIX 和 Xwindow
都是工业标准，它们从设计那天开始就有非常灵活的用法，各个程序，不管是 GUI
还是命令行的都可以互相协作。UNIX 和 X
是一家，何必搞的那么偏激，非此即彼？你从我上面的行为可以看出 GUI 和 CLI
的模糊界线吗？你说我是“花心大萝卜”？花心就花心。hengheng :P

UNIX 的真谛何在？

***** 让聪明人干任何他们想干的事情。

UNIX 的一个特点就是非常高的灵活性，Xwindow
也具有这种灵活性。这种灵活性体现在哪里呢？

UNIX
的程序一般都有很多参数，不管你现在用的着用不着，总有人需要某些参数。它们的行为很多都可以用配置文件来改变。比如
GNU bash, 通常缺省的命令行输入方式是 Emacs 方式，但是只要我编辑一个
.inputrc 文件，就可以把它变成 vi
的输入方式，而且我还可以自己绑定键序列到某些操作。我可以用 shopt
来设置它的很多特点，比如是否进行通配符扩展，是否可以把一个变量当作一个目录来cd，是否可以自动纠正某些明显的目录名打字错误
......

UNIX
程序设计的思想是提供给用户“机制”，而不限制用户制定“政策”。这是一个重要的尊重用户的作法。

我们再来看看 Xwindow。Xwindow
是一个出色的设计，它把显示服务器和客户程序分开。一个显示上既可以显示本机上的程序，也可以显示别的机器上的
X
程序，而它们都遵守你的窗口管理器的统一指挥，它们之间可以方便的传送剪贴版数据，各种事件
...... 比如有时我的 XFree86 上会出现四个不同机器上的
XTerm，两个不同机器上的 GVIM，...... 它们统一受本机上的 FVWM 指挥。

Xwindow 程序都具有很多很多命令行参数和 resource
参数。你可以随意的在命令行或者 .Xdefaults
文件设置所有的颜色，字体，尺寸...... 而且如果你用 xrdb 把 .Xdefaults
导入到根窗口，那么其它机器上没有经过配置的同样的程序，显示到你的机器上的时候也会遵守同样的外观规定。

Xwindow 的窗口具有 Property,
也就是一些可以自己定义的共享数据(原子)。正是因为这些 Property
的存在，使得 Xwindow 具有无比强大的生命力。X
的窗口管理器和其它客户程序之间并没有统一的协议，但是后来出现了
ICCCM(客户程序间通信规范)，这个规范就是通过 property
定义的。现在又有人定义了一套“扩展的窗口协议(EWM Hints)”，使得 Xwindow
可以具有某些 Windows
的特征，比如一个工具条程序可以告诉窗口管理器：“这个屏幕下面被我占据了24个像素的空间，你最大化程序的时候不要越过这个界线。”

一个强大的窗口管理程序比如
FVWM，它收到这样的提示时，可以答应工具条程序的这个要求，也可以不答应。一切选择的权力在于谁？当然是用户了！一切窗口乖乖听话，FVWM
给予用户最大的尊重。

你想想，是不是有些 Windows 程序常常弹出一个窗口要你选择 "Yes or
No"？你不点击它它就不下去。你觉不觉得你的程序在侵犯你的尊严？你是一个人，一个智慧的生物，怎能受到一个程序如此的待遇？

还有就是很多 Windows
程序把人当成傻瓜，而它是“智能程序”。比如，有一个程序就是喜欢把你的每句话第一个字母都变成大写，我不说它是谁了，你遇到的时候就知道了。如果连“一句话开头一个字母要大写”这么明显的问题都需要程序帮你纠正的话，人脑还用来干什么？况且如果你故意想要不大写的话，那就更麻烦了，我楞是没有从它那一大堆菜单里找到怎么关闭这个愚蠢的选项。

***** 只有符号才能完全操纵计算机。

我们来说说很多初学 Linux 的用户。虽然他们在用
Linux，但是他们打心眼儿里是觉得 Windows 的工作方式好，他们希望 Linux
有一天能“像Windows那样”。你说：“我鼠标一点，我菜单一拉，......
就可以完成我的操作。” 但是我要告诉你：“Linux 从来没有摹仿
Windows，将来也不会。Linux 从诞生之日起，它的工作方式就比 Windows
的先进。Linux 属于能勇敢面对符号的人。只有符号才能完全操纵计算机。”

看看优秀的 UNIX 程序，XFree86, FVWM, VIM, Emacs, proftpd, Mutt, wget,
tin, ...
没有一个不是用配置文件来设置选项的。为什么这些程序没有方便的菜单可以用来配置？难道它们的设计者就那么低能，连个图形配置界面也写不出来？

当然不是。因为图形界面配置方式的能力是极其有限的，而配置文件和程序语言的表达能力却是无限的。用图形界面配置这些程序的话，如果你想达到配置文件的效果，你需要成百上千的菜单，checkbox,
radio button, ...
到时候你根本没办法找到你需要修改的地方了！而各个程序的配置文件的语法都有很多相似之处，一般就是一些命令，设置一些变量，参数，......
一旦用会了一个，其它的也就容易理解了。如果你用惯了 awk, sed,
Perl，你会觉得那才是真正的自动化啊。

鼠标虽然是很好的工具，但是它的表达能力是有限的。你不可能光用鼠标就让电脑完全明白你的意思，它毕竟只有3个按钮。看看我的MetaPost页你就能体会到鼠标的这一弱点。所以我们虽然很喜欢鼠标，但是却不能完全依赖它。

***** 各个小程序的完美配合

这就是UNIX最重要的特点了，它就是UNIX设计的思想。让每个程序只具有一项专门的能力，然后让它们合作。Xwindow也继承了这种好传统。

这恐怕就是Windows和其它操作系统望尘末及的地方了。UNIX
程序设计之统一，配合之完美，真使我难以置信！shell, grep, find, awk, sed,
make, Perl, Emacs, vi, tin, Mutt, ...
它们是那么的具有一致性！你一旦学会了 sed
的正则表达式，其它程序基本上都能用了。你一旦学会了 vi 和 VIM,
你会发现它的操作是那么的有规律性，似乎vi的设计者在几十年前就已经设计好了
VIM 在今天的完美而统一的操作方式！而且vi的操作还体现在 Mutt, tin
等很多程序中。你甚至可以把 bash 设置为 vi
的输入方式来输入命令行，我就是这么做的。一个程序可以调用另外一个程序来得到数据，可以把数据交给它处理后返回来，可以在自己的窗口里“嵌入”另外一个程序。

在 Windows 和其它非 UNIX 操作系统中，这种合作是非常困难的。我曾经在
Windows 下使用 Perl来进行一些自动工作。但是 Windows
的文件操作，管道是如此的不稳定，程序之间基本不能合作。你别想在 Visual
Studio 窗口里面嵌入 UltraEdit 编辑器，你别想用一个 expect 脚本来控制
telnet 到水木清华BBS，这就是为什么 helloooo 诞生在 Linux 而不是
Windows。我曾经试图从 Windows + Exceed + SecureCRT ssh 登录到 Sun
机器，然后通过 ssh 的隧道(X11 tunnel)把 X 程序传到 Exceed
上运行，但是搞了两天都没有成功！而在 Linux
下这个事情根本就是不用怎么配置的，OpenSSH 和 XFree86
本来就是完美结合，只要打开 ssh 的 "forward X11" 选项就什么都搞定了。

Windows
的程序都是大而全，大而杂，所有的电子邮件程序都需要自己提供编辑器，自己发送和收取邮件，自己显示邮件的附件。每一个BBS程序都提供自己的Virtual
Terminal, 自己的通讯代码。每一个 IDE
都自己提供编辑器，编译器，汇编器，调试器。人们为了使用一种新的程序，需要适应所有这些它提供的界面，而不能使用自己喜欢的编辑器的键绑定，菜单组织......
不能 DIY！

你要知道，最高级的电脑是定做的，自己想要什么什么CPU，什么主板，多少内存，什么硬盘，键盘，鼠标，显示器都是自己选择的。最高级的滑板，自己想要什么牌子的版面，什么牌子的沙，什么桥，什么轮子，什么轴承，也都是自己选的。最高级的乒乓球拍，木板，胶皮，海绵，胶水都是可以自己选择......
而用 Windows
程序，你得到的是大杂烩，就像你去买“品牌机”，只有那么几种配置，而且附带很多你不需要的软件和服务；就像你去买组装好的滑板，你想要大一点的轮子和窄一点的板子，但是你没有这种选择余地！Windows
程序就相当于最廉价，最次的滑板。但是它却会花你更多的钱，因为一旦一个部件坏了，或者你不喜欢了，你不能另外找一个好的换掉它，你必需重新买全套配件！

而 UNIX 和 Xwindow 就是高档的“组装货”。比如我用 Mutt 的时候，我可以用
VIM 也可以用 pico 来编辑邮件，我可以用 ImageMagick 也可以用 xv
来显示附件里的图片，我可以用 lynx 把 HTML
附件转成文本嵌入窗口中，我也可以把 HTML 附件交给 Mozilla
图形显示。我可以让 GnuPG 帮我把邮件进行数字签名和加密，我也可以用其它
PGP 程序。我想让 Postfix 而不是 sendmail 帮我发出邮件，我想让 fetchmail
帮我收邮件，转发给 postfix，然后被我自己写的Perl过滤器处理......
这一切我都可以办到！我可以选择我最喜欢的专门的程序来完成专门的工作，然后把它们结合在一起，我也可以分别得到它们的好处。

***** 结论

我写这么多的目的是什么？我希望喜欢 Linux 的朋友，完全清除微软和 Windows
灌输在你脑子里的谬论，别再相信它们所谓的“新技术”，别再追赶
Windows，因为追赶 Windows
＝倒退。马克思有一个思想很重要，“新生事物并不一定是在最近出现的。”
UNIX，Xwindow, TeX 虽然都比 Windows
先出现，但是它们才是先进生产力的代表。我们要清楚的认识到什么才是真正的现代化，什么才是真正的自动化。

勇敢的拿起像 bash, FVWM, TeX, VIM, Emacs, Mutt, lftp ......
这样强大的程序，勇敢的面对符号。不要再埋怨“Linux 为什么不能像 Windows
那样”，不要再浪费时间试用这样那样的程序，不要再忙着升级。需要改变的是你自己，而不是
Linux 和 Xwindow，Linux
现在就可以成为你的好朋友。你需要认识它，了解它，信任它，才能完全的靠它来高效的工作，省出时间来处理世界上更加值得处理的事情。

***** 附录: 我用来处理日常事务的 Linux 程序

好了好了。我知道你发现自己应该转向
Linux，你很后悔当初为什么中了微软的邪。但是不要着急。因为这些东西本来只是工具，它们是用来完成你的主要任务的辅助而已。你以前选错了工具，这不要紧。你还是拥有你自己原来的专业技能，那才是最重要的。工具的东西只有慢慢适应转换，不能一蹴而就，否则你会感到非常没意思，甚至放弃。

这里给出一些推荐使用的可以处理一般事情的程序。至于你的专业上要用到的科学和工程软件比如
Matlab, Mathematica, Maple, HSpice, Design Compiler, ......
还有其它物理上的，化学上的，生物上的 ...... 都必然有 Linux 和 UNIX
的版本。当然他们很多不是免费的，不要总是觉得什么都应该免费，它们是经过很多人辛勤劳动的产物，是可靠的程序，他们物有所值。

下面列出我常用的一些 Linux
程序。一个列表里可能有很多，那是为了方便你来选择，我列出了比较信得过的。但其实很多只有第一个是我真正在用的。我不喜欢试用程序。


- Shell: bash。我使用 bash 的 vi 命令行方式。

- 编辑器： VIM, Emacs

- 程序开发： GCC, make, ld, Scheme48, j2sdk, Perl, Python, Tcl/Tk ...

- 论文，幻灯工具：LaTeX, ConTeXt

- 绘图工具：MetaPost。这个语言太强了，以至于我只用它了。你不熟悉的话可
  以用dia 来画一些流程图之类的图片。

- 图像处理：ImageMagick。其中的 import 程序可以屏幕抓图，convert程序可
  以转换图像格式，display可以显示图片和简单编辑(缩放，换质量，转格式，
  简单绘图，简单虑镜)。通常我就这么点需要。如果你要更强大的图像工具可
  以用Gimp, 它几乎和 Photoshop 差不多。

- 自动管理工具：make。我可以用make来自动编译程序，自动编译文档，自动更
  新插图......全自动，而且不会重复劳动。

- 加密程序：GnuPG。我的 PGP 密钥就是它搞出来的，我用了 2048 位加密。

- 打包，压缩程序。什么都有: tar, gzip, bzip2, zip, rar, ...

- 虚拟光驱程序。Linux 不需要虚拟光驱程序，直接 mount 就行了。

- ftp 服务器：proftpd, vsftpd

- WWW 服务器：apache。(我一般没有开)

- ftp 客户程序：lftp

- 自动下载工具：wget

- 虚拟终端：rxvt, xterm, gnome-terminal, mlterm, ...

- X server: XFree86

- 窗口管理器：FVWM。编译加入了 libstroke。

- 中文输入：XSIM。被我修改过以适应 FVWM 的需要。另外推荐你还可以用SCIM。

- email 处理：Mutt + Postfix + fetchmail

- 看 PDF, PS, DJVU 文件：Acrobat Reader, xpdf, GhostScript, gv,djvu工
  具包和 netscape 插件。

- 看CAJ文档。我从来不看CAJ之类的文档，如果找不到PDF或PS，直接去图书馆借最好。

- 看网页：Mozilla, Phoenix, lynx。Mozilla-Xft 的显示效果比 IE好很多。

- 英汉字典：IBM智能词典，星际译王。

- 编辑网页：我用 VIM 直接写HTML。你如果想要图形方式的可以用其它的比如
  screem, BlueFish。

- 登录其它 UNIX, Linux 机器：openSSH, telnet。 openSSH 还可以把其它机
  器的 X 程序通过 ssh 加密的隧道传到我机器上显示。

- 上BBS：rxvt(或任何一种终端) + telnet + chatbot(helloooo机器人的程序)

- QQ, ICQ: 我没有 QQ 或 ICQ。不过你可以用 Gaim, 它同时支持 QQ, ICQ 和
  很多其它的即时通信方式。ICQ 用户也可以用 Licq。

- 放录像：MPlayer, RealPlayer。MPlayer 太好了，直接就可以放 VCD,
  DVD,divx, wma, wmv ... 用 Windows 的同学都很羡慕我，说 Windows要放这
  个需要大堆插件。rm 最好还是用 realplayer 放，它也是免费的。

- 放音乐： xmms(mp3,ogg都可以), mpg321(放mp3), ogg123(放ogg).

- 看 Word 文档。请 Word 用户把文档全部转为 PDF 或 PS 再给我，文档里没
  有特殊的格式就用文本文件，要不我就不看 :P

- 其它程序：还有很多我需要用而你不一定用得着的。比如，Doctor
  Scheme,Scheme48, Scsh, ...这些程序只有 Doctor Scheme有Windows版本。
  还有很多幕后工作但是你一般不察觉的：xinetd, telnetd,sshd, crond,
  atd, lpd, ... 他们都比 Windows 的对应者强的多。
**** 心灵鸡汤

有只黄鼠狼，在养鸡场的山崖顶上立了块碑，上面写着：“摆脱禁锢，不勇敢跳
下去，你怎么知道自己不是一只老鹰？”于是，它每天就在崖底等着吃摔死的鸡。
——这个故事告诉我们，阅读心灵鸡汤时需要智商，大多鸡汤都是黄鼠狼写的。

原来鸡汤是这样熬成的！

*** metapost

http://www.ctex.org/documents/shredder/metapost.html

http://www.ctex.org/documents/shredder/metapostexample.html

*** emacs gif                                                         :gif:

**** record gif

- [[http://emacs.stackexchange.com/questions/798/recording-a-gif-screencast-of-emacs][stackexchange:Recording a GIF screencast of Emacs ]]
- [[https://github.com/Malabarba/camcorder.el][Github: camcorder.el]]


1. To use it, simply call *M-x camcorder-record*
2. A new smaller frame will popup and recording starts.
3. When you’re finished, hit *F12*.

View screencasts are generated in *ogv* format, and you can even pause
the recording with *F11*! You can also convert the .ogv file to a gif
by issuing the command *M-x camcorder-convert-to-gif*

后台程序

1. 录制
   - recordmydesktop
   - ffmpeg
   - mplayer & imagemagick

2. 转换
   - ffmpeg
   - mplayer & imagemagick

**** view gif

- https://github.com/Fuco1/org-inline-image

#+BEGIN_SRC emacs-lisp
  (require 'org-inline-image)
#+END_SRC

not work 没细看

* Previsous
** w2
*** 2016/01/16
**** irc                                                             :irc:

[[/home/wally/Wally/Journal/Figure/scrot/30980jYW.png]]

***** what?

- [[http://baike.baidu.com/link?url=jB5JRb4FBbjGCs8fKheTymXOqf6zMaalCSvNR7_lkkrsjRbrgKPKS3a7jLchJcJ2x2OQMt4J4TuYSkzb_kZb2sdoG0dAMnLrVcXd1Nooo7y][百度百科]]

IRC是Internet Relay Chat 的英文缩写，中文一般称为互联网中继聊天。

它是多用户、多频道的讨论系统，许多用户可以在一个频道内就某一话题进行交
谈或私谈，每个用户都有一个不同的昵称。IRC允许任意的因特网用户之间做即
时的交谈。

IRC用户使用特定的用户端聊天软件连接到IRC服务器，通过服务器中继与其他连
接到这一服务器上的用户交流，所以IRC的中文名为“因特网中继聊天”。

***** features

- [[http://www.zhihu.com/question/24851247][知乎：为什么现如今还有人使用 IRC 聊天交流？
]]


- IRC 协议简单，开源实现多，本来就备受开发者青睐；
- 因此，其第三方机器人程序非常众多，开源实现库一抓一大把，任何想做多人同用机器人的开发者，都可以轻易上手，几乎每种语言都有一个实现，不必去望洋兴叹。
- IRC 不用登录，不用注册；但如果你注册了，就可以强制把占用自己唯一ID 的人踢下线。
- IRC 也可以私聊。
- IRC 也有特殊权限。
- IRC 是开源社区会议标准；
- 因此，IRC 在开源社区用得比较多；
- 因此，许多开源世界的技术大牛混在那里。

***** 客户端

- [[http://wiki.ubuntu.org.cn/IRC%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%89%E5%93%AA%E4%BA%9B][Ubuntu Forum: IRC 客户端有哪些]]

****** 网络浏览器

Firefox插件

-  [[https://addons.mozilla.org/en-US/firefox/addon/16][火狐插件ChatZilla]]

****** 网页

-  [[http://webchat.freenode.net/]] Freenode封了Mibbit后自己搞定HTML版本
-  [[https://irc.gitter.im/]] Beta，兼容lynx
-  [[https://kiwiirc.com/client]] 神抛弃老旧Opera后的选择

****** QT

-  [[/Quassel][Quassel]] 配合KDE功能强悍
-  [[https://konversation.kde.org/][Konversation]] KDE的默认客户端
-  [[http://www.kvirc.net/][KVIrc]]

****** GTK

-  [[/IRC@Pidgin][Pidgin]]
-  [[/Xchat][xchat]]

****** CLI

-  [[http://irssi.org/][irssi]] CLI界面IRC工具
-  [[http://www.gnu.org/software/emacs/][ERC]] 神的工具，神的ERC *Emacs IRC*

**** ERC                                                         :erc:irc:

- [[~/Wally/Reference/Manual/ERCManual.pdf][ERCManual.pdf]]
- [[http://www.emacswiki.org/emacs/ERC][EmacsWiki:ERC]]


ERC is part of the GNU project. It is included with recent versions of
GNU Emacs.

ERC is included in released versions of GNU Emacs since v22.3.

使用： M-x erc

**** blender

https://zh.wikibooks.org/zh-cn/Blender_3D%EF%B8%B0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E7%B2%BE%E9%80%9A

http://wiki.blender.org/

**** matlab 启动错误

#+BEGIN_EXAMPLE
  Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar
#+END_EXAMPLE

[[http://askubuntu.com/questions/615644/after-upgrading-ubuntu-14-10-to-15-04-i-am-no-longer-able-to-open-matlab-2013a/617059#617059][Ubuntu fomula]]

This package is responsible for application menu support for Java
swing applications, and seems to be the cause for the segfault.

#+BEGIN_EXAMPLE
sudo apt-get remove jayatana
#+END_EXAMPLE

没有解决问题。

[[http://www.mathworks.com/matlabcentral/answers/50971-matlab-r2012b-java-exception-error-starting-desktop][Mathworks]]

以超级用户身份执行 matlab, 解决问题, 不明所以。

#+BEGIN_EXAMPLE
Same thing happens to me on a macbook. Same exception, exception disappears when starting matlab using sudo.
#+END_EXAMPLE

Most likely you don't have write permissions on your preferences
directory. You can determine the location of the MATLAB preferences
folder by running the PREFDIR command at the MATLAB prompt.

If for some reason you're unable to fix the permissions, you can try
changing the prefs directory location:
http://www.mathworks.com/support/solutions/en/data/1-37KDWN/

In Matlab.
#+BEGIN_EXAMPLE
>> prefdir

ans =

/home/wally/.matlab/R2014a
#+END_EXAMPLE

#+BEGIN_EXAMPLE
   ls -l .matlab/R2014a/
  总用量 1536
  -rw-r--r-- 1 root root     12  1月 15 10:58 cwdhistory.m
  -rw-r--r-- 1 root root    512  1月 15 11:04 History.xml
  -rw-r--r-- 1 root root   6070  1月 15 11:03 MATLABDesktop.xml
  -rw-r--r-- 1 root root   6092  1月 15 10:58 MATLABDesktop.xml.prev
  -rw-r--r-- 1 root root    429  1月 15 10:57 matlab.prf
  -rw-r--r-- 1 root root   8864  1月 15 11:02 matlab.settings
  -rw-r--r-- 1 root root    201  1月 10 14:03 shortcuts_2.xml
  -rw-r--r-- 1 root root 553920  1月 10 14:03 toolbox_cache-8.3.0-2211579006-glnxa64.xml
  -rw-r--r-- 1 root root 970053  1月 15 10:58 toolbox_cache-8.3.0-903067591-glnxa64.xml
#+END_EXAMPLE
所有者为 root 用户。。。


问题找到了。但是不想修改 predir ，因为麻烦。折衷使用超级用户权限运行
matlab

Note: 在终端使用 C-c 结束 Matlab，反应慢，在 GUI 上点击关闭按钮。

**** mark-ring list ?

因为经常需要转换任务，所以可能会忘记之前的任务。

org-mark-ring-push

#+BEGIN_EXAMPLE
org-mark-ring-push is an interactive Lisp function in `org.el'.

It is bound to C-c %, C-c 4.

(org-mark-ring-push &optional POS BUFFER)

Put the current position or POS into the mark ring and rotate it.
#+END_EXAMPLE

org-mark-ring-goto

#+BEGIN_EXAMPLE
org-mark-ring-goto is an interactive Lisp function in `org.el'.

It is bound to C-c 5.

(org-mark-ring-goto &optional N)

Jump to the previous position in the mark ring.
With prefix arg N, jump back that many stored positions.  When
called several times in succession, walk through the entire ring.
Org-mode commands jumping to a different position in the current file,
or to another Org-mode file, automatically push the old position
onto the ring.
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<f1>") 'org-mark-ring-push)
  (global-set-key (kbd "C-<f2>") 'org-mark-ring-goto)
#+END_SRC

**** wine 百度云

不行，别折腾

**** sdl                                                             :sdl:

***** sdl

[[https://www.libsdl.org/][Homepage]]

Simple DirectMedia Layer is a cross-platform development library
designed to provide low level access to audio, keyboard, mouse,
joystick, and graphics hardware via OpenGL and Direct3D.

****** install                                                 :install:

#+BEGIN_EXAMPLE
 $ sudo apt-get install  libsdl2-2.0-0
#+END_EXAMPLE

***** sdl_image                                               :sdl_image:

- [[http://www.libsdl.org/projects/SDL_image/][Homepage]]
- [[http://jcatki.no-ip.org:8080/SDL_image/][Document]]


SDL_image is an *image loading library* that is used with the SDL
library, and almost as portable. It allows a programmer to use
multiple image formats without having to code all the loading and
conversion algorithms themselves.

****** install                                                 :install:

#+BEGIN_EXAMPLE
 $ sudo apt-get install libsdl-image1.2
#+END_EXAMPLE

**** 学习时不要听 Eason 的歌

听 Eason 的歌太容易入神。

听一些舒缓的轻音乐。

*** 2016/01/14
**** supply

***** connector

输入： KF128-2
输出：5557 https://item.taobao.com/item.htm?id=41139630227&ali_refid=a3_430582_1006:1104098595:N:%E6%8F%92%E6%8B%94%E5%BC%8F%E6%8E%A5%E7%BA%BF%E7%AB%AF%E5%AD%90:cd6bd631faf7c8d74c8748dd98c47073&ali_trackid=1_cd6bd631faf7c8d74c8748dd98c47073&spm=a230r.1.14.3.Ozxn0o#detail

***** protector

电容：100uF/A

[[/home/wally/Wally/Journal/Figure/scrot/3098085D.png]]

二极管：


开关电源？

***** ref

[[https://app.yinxiang.com/shard/s52/nl/11551545/273c7e8c-dacd-4f22-a004-bb30aec5d710/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D152408a07ab%3AS%3Df5af2039594c32603700a7a7b6d115dc][直插式电阻电容封装与尺寸图解]]

[[https://app.yinxiang.com/shard/s52/nl/11551545/96b290e4-eb4d-4148-b51a-72fa4469c77e/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D152408b2f28%3AS%3D9a57fbc29200b7dff1aed88c48aa5ab2][Protel中Cap,Cap2，Cap Pol的区别]]

**** irc

[[/home/wally/Wally/Journal/Figure/scrot/30980jYW.png]]

*** 2016/01/13
**** cedet

使用 git 版的 cedet, 在 load 配置文件时与内置 cedet 矛盾

#+BEGIN_EXAMPLE
error:Cannot unload builtin CEDET since it is already loaded
#+END_EXAMPLE

解决： 将 cedet 的加载配置放在前面

*每次折腾 Emacs C++ IDE 都好烦人！！！*

**** emacs clang

#+BEGIN_SRC emacs-lisp
  (setq company-backends (delete 'company-semantic company-backends))
  (define-key c-mode-map (kbd "C-<tab>") 'company-complete)
  (define-key c++-mode-map (kbd "C-<tab>" 'company-complete)
#+END_SRC

**** wordpress

***** reference

- [[https://cn.wordpress.org/][Homepage]]
- [[https://github.com/wordpress/wordpress][Github]]
- [[https://github.com/punchagan/org2blog][org2blog]]

***** [[http://www.trinea.cn/other/choice-between-wordpress-and-github-page/][WordPress VS GitHub Page]]

****** WordPress和github page的选择和搭建

搭建博客时对wordpress和github page进行了简单的对比，最终选择了wp。

这里就简单对比下wp和gp的优缺点及搭建过程简介。主要比较方面包括*搭建复
杂度、对域名空间要求、写博客的便捷程度、开放性（主题、工具插件）、访问
速度、SEO优化、迁移成本

****** ps: 下面介绍中github page使用octopress博客框架

首先如果希望能以独立域名访问，域名的注册是必不可少的，可选择[[http://www.net.cn/domain/][万网]] 或 [[http://www.west263.cn/services/domain/][西部
数码]]等

*a. 搭建复杂度*

wp近乎傻瓜式；github较复杂，需要安装不少软件，而且还可能有莫名的错误，
需随时google解决结果：wp胜出，当然喜欢折腾或是对ruby相当熟悉的话可能差
别不是很明显。


*b. 对域名空间要求*

wp需要自己购买虚拟主机，低配大约在100-200RMB/Y，主机需要有lamp的环境运
行wp，不过现在的linux虚拟主机一般都提供此环境；

github page的一大优点就是不需要虚拟主机，它是可以发布到githubpage上的。

结果：github page免费优势明显

*c. 写博客的便捷程度*

wp需要打开后台，在后台撰写文章，即时写当然是需要联网的。wp的强大插件使
得博客文字样式可以很丰富
githubpage支持本地编写、本地预览，满意后再发布，并且支持markdown语法所
以对于不少程序员可能会比较方便。文本中直接编写极客的感觉*\_*

结果：对于不同人群各有优劣吧


*d. 开放性（主题、工具插件）*

wp的主题和插件是无比丰富的，这是选择wp的一大原因之一，不过插件多同时也
带来了另一个问题就是质量良莠不齐，选择相当麻烦费事，org~，之后会分享自
己装的觉得还不错的插件。

octopress相当来说发展没多久，插件方面没怎么调查，不过主题是标准的程序
员黑，自己改css相当费事

结果：wp胜出

*e、访问速度*

wp的访问速度与虚拟空间地址有关，不过我挂在朋友的购买的国外虚拟空间上速
度感觉也还不错

github的访问速度感觉与其他国外网站比还是较慢的，这几天刚好因为抢票插件
被封

结果：看具体虚拟空间的选择


*f、SEO优化*

wp不少插件提供seo优化功能，但也需要发博客时自己填写不少信息比较麻烦

githubpage搜索引擎优化就不需要自己做了，并且github在google上权重肯定相
当高，所以优势明显

结果：github page胜出

*g、迁移成本*

wp的迁移需要将网站目录迁移、数据库备份后再导入即可octopress的迁移也还
好，就算不利用githubpage的话，自己有一套ruby和nginx的环境的话也是可以
很方便重新部署的

结果：旗鼓相当

我比较在乎开放性（主题、工具插件）、写博客的便捷程度、访问速度、迁移成
本四点。尤其对第一点比较看重，所以选择了wp，不过比较插件真是差点被折腾
死||\_||，在wordpress和github

page的搭建中有自己安装的比较好的插件.

*PS：搭建过程*

wordpress搭建：下载 [[http://cn.wordpress.org/][最新wordpress包]] ，解压上传。直接访问index.php，按
照提示填写数据库信息即可（可以自己将个数据库）。

githubpage博客搭建参考[[http://www.hopes4.me/post/2012-02-29-introduce-octopress-on-github][在github上用octopress搭建博客]]， 关于ruby的安装可
参考 [[http://blog.sina.com.cn/s/blog_6b59aaa701017sff.html][Ruby在windows下的安装]]。

**** gtags

http://tuhdo.github.io/c-ide.html#orgheadline37

GNU Global has an environment variable named *GTAGSLIBPATH*. This
variable holds GTAGS database of _external libraries_ that your project
depends on but not inside your project. For example, your project may
rely on *system headers* such as stdio.h, stdlib.h… but these headers
are internal to your project.

However, remember that you can *only jump to tag definitions* of
external dependencies, and nothing else (such as files or
references).

But, again, once you are inside the external
library, you can start jumping around sicne it becomes your current
project.

#+BEGIN_EXAMPLE
export GTAGSLIBPATH=$HOME/.gtags/
#+END_EXAMPLE

**** xsel                                                           :xsel:

Manipulate the X selection

sudo apt-get install xsel

***** option

+ -b, --clipboard       Operate on the CLIPBOARD selection
+ -o, --output          Write the selection to standard output
+ -i, --input           Read standard input into the selection

***** usage

1. 复制内容到剪贴板中

   #+BEGIN_EXAMPLE
   cat file | xsel -i -b
   #+END_EXAMPLE

2. 取出剪贴板内容

   #+BEGIN_EXAMPLE
   xsel -o -b
   #+END_EXAMPLE

**** /usr/local 空间不足

/usr/local 挂载的分区大小为20G，完全不够用

移动 /usr/local/MATLAB 并建立软链接后，MATLAB 启动不了

以同样的方式处理 texlive 暂时没有问题

*** 2016/01/12
**** latex2html                                         :latex:latex2html:

***** reference

- https://www.ctan.org/pkg/latex2html?lang=en
- https://www.ctan.org/tex-archive/support/latex2html
- [[~/Wally/Reference/Manual/LaTeX2HtmlManual.pdf][LaTeX2HtmlManual.pdf]]

***** install                                                   :install:

#+BEGIN_EXAMPLE
$ ./configure & make & sudo make install
#+END_EXAMPLE

**** sdcv history                                                   :sdcv:

*$(HOME)/.sdcv_history*

**** fcitx 启动不了

#+BEGIN_EXAMPLE
  $ fcitx &


  (INFO-7419 /build/buildd/fcitx-4.2.8.5/src/lib/fcitx/addon.c:151) 加载附加组件配置文件: fcitx-vk.conf
  (WARN-7419 /build/buildd/fcitx-4.2.8.5/src/lib/fcitx/addon.c:298) 禁用插件 fcitx-ipc，依赖 fcitx-dbus 无法满足。
  (ERROR-7419 /build/buildd/fcitx-4.2.8.5/src/lib/fcitx/frontend.c:565) 无可用前端
  (ERROR-7419 /build/buildd/fcitx-4.2.8.5/src/lib/fcitx/instance.c:437) Exiting.
#+END_EXAMPLE

- 原因： 配置错误
- 解决：删除配置文件

  #+BEGIN_EXAMPLE
     mv ~/.config/fcitx ~/.config/fcitx.bak
  #+END_EXAMPLE

- 暴力解决(不推荐)

  #+BEGIN_EXAMPLE
    $ sudo dpkg -P fcitc*
    $ sudo apt-get install fcitx
  #+END_EXAMPLE

**** fcitx 切换输入法与 xmodmap 冲突

使用 gnome-tweak 解决

**** ROS

- sql http://wiki.ros.org/sql_database
- arbotix_python http://wiki.ros.org/arbotix_python?distro=indigo#Services
- Q&A
  - http://answers.ros.org/question/95486/hector-slam-with-turtlebot-in-gazebo/
  - http://answers.ros.org/question/46004/turtlebothector-slam-possibile-or-not/
- http://wiki.ros.org/hector_turtlebot
- http://wiki.ros.org/hector_turtlebot
- http://www.ros.org/news/2014/12/updated-package-razor-imu-9dof.html
-
  http://answers.ros.org/question/99211/how-to-combine-a-camera-image-and-a-laser-pointcloud-to-create-a-color-pointcloud/

**** make -jn

多线程编译

用于多cpu的系统编译，n一般是cpu个数的2倍。

*** 2016/01/11
**** bash completion

#+BEGIN_EXAMPLE
For auto-completion, do not forget to install 'ct-ng.comp' into
your bash completion directory (usually /etc/bash_completion.d)
#+END_EXAMPLE

*/etc/bash_completion.d*

**** gazebo & ros jade

- [[http://answers.ros.org/question/217970/ros-jade-and-gazebo-50-migration-problem/][Q&A: ros jade and gazebo 5.0 migration problem]]

#+BEGIN_EXAMPLE
/opt/ros/jade/lib/gazebo_ros/gzclient: 17: .: Can't open /usr/share/gazebo//setup.sh
[gazebo_gui-3] process has died [pid 2459, exit code 2, cmd /opt/ros/jade/lib/gazebo_ros/gzclient __name:=gazebo_gui __log:=/home/wally/.ros/log/4fb3d678-b80e-11e5-9dba-002186ef9d91/gazebo_gui-3.log].
log file: /home/wally/.ros/log/4fb3d678-b80e-11e5-9dba-002186ef9d91/gazebo_gui-3*.log
#+END_EXAMPLE

*installing the gazebo5 package seems to have solved the
problem*.

**** softwares
***** octave
   http://mirrors.ustc.edu.cn/gnu/octave/
   https://coderwall.com/p/wo***kw/ubuntu-installing-octave-fortran-***error

***** briss

***** latex2html
https://www.ctan.org/pkg/latex2html?lang=en

***** xmradio
vlc
sourcecode

***** foxitreader

**** Foxit Reader                                            :foxitreader:

***** Linux 版安装

1. 官网下载：https://www.foxitsoftware.com/products/pdf-reader/
2. .run 可执行文件，安装至 /opt 下
3. 界面较 Windows 版，简化过多，功能不全，体验不好

*还是使用 wine foxitreader 习惯*

**** python install                                              :install:

- https://www.python.org/downloads/

version 3.5


READEM

#+BEGIN_EXAMPLE
  On Unix, Linux, BSD, OSX, and Cygwin:

      ./configure
      make
      make test
      sudo make install
#+END_EXAMPLE

***** 修改软链

#+BEGIN_EXAMPLE
  wally@ Python-3.5.1 $ python  --version
  Python 2.7.9
  wally@ Python-3.5.1 $ sudo ln -s /usr/local/bin/py
  pydoc3             python3            python3.5-config   python3.5m-config  pyvenv
  pydoc3.5           python3.5          python3.5m         python3-config     pyvenv-3.5
  wally@ Python-3.5.1 $ sudo ln -s /usr/local/bin/py
  pydoc3             python3            python3.5-config   python3.5m-config  pyvenv
  pydoc3.5           python3.5          python3.5m         python3-config     pyvenv-3.5
  wally@ Python-3.5.1 $ sudo ln -s /usr/local/bin/python /usr/bin/python
  [sudo] password for wally:
  ln: 无法创建符号链接"/usr/bin/python": 文件已存在
  wally@ Python-3.5.1 $ ls -l /usr/bin/python
  lrwxrwxrwx 1 root root 9  1月  9 16:07 /usr/bin/python -> python2.7
  wally@ Python-3.5.1 $ sudo rm /usr/bin/python
  wally@ Python-3.5.1 $ sudo ln -s /usr/local/bin/python3 /usr/bin/python
  wally@ Python-3.5.1 $ python --version
  Python 3.5.1
#+END_EXAMPLE

**** [[http://www.cnblogs.com/yejianfei/p/3351626.html][Linux的压缩与解压]]

***** zip格式                                                       :zip:

#+BEGIN_EXAMPLE
    压缩： zip -r [目标文件名].zip [原文件/目录名]
    解压： unzip [原文件名].zip
#+END_EXAMPLE

注：-r参数代表递归

***** tar格式（该格式仅仅打包，不压缩）                             :tar:

#+BEGIN_EXAMPLE
    打包：tar -cvf [目标文件名].tar [原文件名/目录名]
    解包：tar -xvf [原文件名].tar
#+END_EXAMPLE

注：c参数代表create（创建），x参数代表extract（解包），v参数代表
verbose（详细信息），f参数代表filename（文件名），所以f后必须接文件名。

***** tar.gz格式                                                     :gz:

方式一：利用前面已经打包好的tar文件，直接用压缩命令。

#+BEGIN_EXAMPLE
    压缩：gzip [原文件名].tar
    解压：gunzip [原文件名].tar.gz
#+END_EXAMPLE

方式二：一次性打包并压缩、解压并解包

#+BEGIN_EXAMPLE
    打包并压缩： tar -zcvf [目标文件名].tar.gz [原文件名/目录名]
    解压并解包： tar -zxvf [原文件名].tar.gz
#+END_EXAMPLE

注：z代表用gzip算法来压缩/解压。

***** tar.bz2格式                                                   :bz2:

方式一：利用已经打包好的tar文件，直接执行压缩命令：

#+BEGIN_EXAMPLE
    压缩：bzip2 [原文件名].tar
    解压：bunzip2 [原文件名].tar.bz2
#+END_EXAMPLE

方式二：一次性打包并压缩、解压并解包

#+BEGIN_EXAMPLE
    打包并压缩： tar -jcvf [目标文件名].tar.bz2 [原文件名/目录名]
    解压并解包： tar -jxvf [原文件名].tar.bz2
#+END_EXAMPLE

注：小写j代表用bzip2算法来压缩/解压。

***** tar.xz格式                                                     :xz:

方式一：利用已经打包好的tar文件，直接用压缩命令：

#+BEGIN_EXAMPLE
    压缩：xz [原文件名].tar
    解压：unxz [原文件名].tar.xz
#+END_EXAMPLE

方式二：一次性打包并压缩、解压并解包

#+BEGIN_EXAMPLE
    打包并压缩： tar -Jcvf [目标文件名].tar.xz [原文件名/目录名]
    解压并解包： tar -Jxvf [原文件名].tar.xz
#+END_EXAMPLE

注：大写J代表用xz算法来压缩/解压。

***** tar.Z格式（已过时）

方式一：利用已经打包好的tar文件，直接用压缩命令：

#+BEGIN_EXAMPLE
    压缩：compress [原文件名].tar
    解压：uncompress [原文件名].tar.Z
#+END_EXAMPLE

方式二：一次性打包并压缩、解压并解包

#+BEGIN_EXAMPLE
    打包并压缩： tar -Zcvf [目标文件名].tar.Z [原文件名/目录名]
    解压并解包： tar -Zxvf [原文件名].tar.Z
#+END_EXAMPLE

注：大写Z代表用ncompress算法来压缩/解压。另，ncompress是早期Unix系统的压缩格式，但由于ncompress的压缩率太低，现已过时。

***** jar格式                                                       :jar:

#+BEGIN_EXAMPLE
    压缩：jar -cvf [目标文件名].jar [原文件名/目录名]
    解压：jar -xvf [原文件名].jar
#+END_EXAMPLE

注：如果是打包的是Java类库，并且该类库中存在主类，那么需要写一个META-INF/MANIFEST.MF配置文件，内容如下：

#+BEGIN_EXAMPLE
    Manifest-Version: 1.0
    Created-By: 1.6.0_27 (Sun Microsystems Inc.)
    Main-class: the_name_of_the_main_class_should_be_put_here
#+END_EXAMPLE

然后用如下命令打包：

#+BEGIN_EXAMPLE
    jar -cvfm [目标文件名].jar META-INF/MANIFEST.MF [原文件名/目录名]
#+END_EXAMPLE

这样以后就能用“java -jar [文件名].jar”命令直接运行主类中的public static
void main方法了。

***** 7z格式                                                         :7z:

#+BEGIN_EXAMPLE
    压缩：7z a [目标文件名].7z [原文件名/目录名]
    解压：7z x [原文件名].7z
#+END_EXAMPLE

注：这个7z解压命令支持rar格式，即：

#+BEGIN_EXAMPLE
    7z x [原文件名].rar
#+END_EXAMPLE

**** freemind                                           :freemind:mindmap:

***** [[http://www.douban.com/group/topic/19280450/][思维导图软件]]

思维导图，又叫心智图。它的创始人是”大脑先生”托尼•巴赞（Tony Buzan）。

思维导图是一种将放射性思考具体化的方法。我们知道放射性思考是人类大脑的
自然思考方式，每一种进入大脑的信息，不论是感觉、记忆或是想法——包括文字、
数字、符码、食物、香气、线条、颜色、意象、节奏、音符等，都可以成为一个
思考中心，并由此中心向外发散出成千上万的关节点，每一个关节点代表与中心
主题的一个连结，而每一个连结又可以成为另一个中心主题，再向外发散出成千
上万的关节点，而这些关节的连结可以视为您的记忆，也就是您的个人数据库。

几款高级思维导图软件

1. PersonalBrain http://personalbrain.evget.com/

   目前比较流行的思维导图软件，使用简单方便，有专业版和普通版区别，专
   业版收费，界面很漂亮，蓝色的皮肤有点像宇宙的感觉，每个元素有上级、
   下级、同级3个节点，提供注释、备注等功能。

2. MindMapper http://www.mindmapper.com/

   它严格地遵守托尼巴贡的制图法则，关键字都是放在延伸手臂上。能够提供
   xml的输出 能与微软办公软件沟通，还有最妙的时间线进度。 快捷键是最好
   用的，无需点鼠标就可以建立新节点。

3. ThinkMap SDK http://www.thinkmap.com/

   软件介面非产酷，强大的数据库功能，3d树形网络,有很好的API开发接口。
   就是价格太贵。

4. FreeMind

   FreeMind是一款跨平台的、基于GPL协议的自由软件，用Java编写，是一个用
   来绘制思维导图的软件。其产生的文件格式后缀为.mm 。可用来做笔记，脑
   图记录，脑力激汤等。　

5. Xmind http://www.xmind.net/

   XMind是一款易用性很强的软件，通过XMind可以随时开展头脑风暴，帮助人
   们快速理清思路。XMind 绘制的思维导图、鱼骨图、二维图、树形图、逻辑
   图、组织结构图等以结构化的方式来展示具 LOGO

6. mindmanager http://www.evget.com/zh-CN/product/1069/feature.aspx

   mindmanager由美国Mindjet公司开发，界面可视化，有着直观、友好的用户
   界面和丰富的功能，　可使使用者有序地组织思维、资源和项目进程，同时
   它是高效的项目管理软件，能很好提高项目组的工作效率和小组成员之间的
   协作性。它作为一个组织资源和管理项目的方法，可从思维导图的核心分枝
   派生出各种关联的想法和信息。

***** [[http://xbeta.info/xmind-freemind.htm][XMind vs FreeMind]] :xmind:

思维导图类软件中，最有影响力的开源免费软件是 FreeMind 和XMind。

FreeMind历史悠久，当属经典；XMind作为后起之秀，大有赶超之势。同作为免费、开源的思维导图解决方案，应如何选择/结合两款软件？

本文的分析基于Windows平台下的 FreeMind 0.90 RC3 和 XMind 3.03，结合笔
者的使用经验，也包括XMind开发者所提供的信息。基本结论是： *总体看，
XMind已超越 FreeMind；个别方面，FreeMind 值得 XMind 学习*

****** XMind 与 FreeMind 的相同/相通之处

- 都是免费、开源、基于 Java。
- 都满足绘制思维导图的基本甚至高级功能。
- 相通之处：XMind 可以导入/导出 FreeMind 格式；反之不能。

****** XMind 与 FreeMind 比较

1. XMind: 更丰富的结构且支持混用

   FreeMind：只支持一种逻辑图（水平）结构。

   XMind：在逻辑图之外，还支持组织结构图（竖直）、树状图（水平+竖直）、
   思维导图（辐射）、鱼骨图、二维图（表格）。不仅如此，还能在一个文档
   中组合使用多种表达形式。实用举例：整个项目管理用逻辑图，人员安排部
   分用组织结构图，风险及应对采用鱼骨图，进度部分用二维图。

2. XMind: 支持自由节点因而支持多图

   FreeMind：只能有一棵树，即：根节点唯一，其他节点必须直接或间接放在
   根节点下。

   XMind：允许在主树之外创建自由节点（应用举例：把“文档作者/创建日期”作
   为自由节点，补充思维导图信息）；由于自由节点也是可以增加子节点的，
   所以可产生第二棵、第N棵新树。

3. FreeMind: 根节点仍可以插入父节点

   需求：在绘完的导图上再加一层。比如，最初建立了“唐诗”导图，现在要
   扩展到“唐宋文学”，即“唐诗”根节点要降至二级节点。

   XMind：顶级的自由节点之间是可以互为子节点的，但原来的根节点（XMind
   称为中心主题）则不能拖到其他节点上。满足上述需求，就要新建文档，以
   “唐宋文学”为根节点，然后导入或粘贴原有内容。\\

    FreeMind：支持根节点上插入“父节点”。

   建议：XMind的“根节点”比FreeMind减少了一份特殊性，即允许其他节点独
   立于此；但仍包留了另一份特殊性，不能成为其他节点的子节点。从使用角
   度，建议取消此限制，即：任何节点本身是一样的，彼此之间为父子关
   系。------或许有技术限制，但节点/层级的平等灵活是XML的精神。

4. XMind 支持附件, FreeMind 全为链接

   FreeMind：可以有超链接到外部文档和图片，也可以显示外部的图片。但这
   些资源都只是.mm文件中的链接url，并非素材本身。即，.mm是纯文本的xml，
   包括 FreeMind的图标也是以ID数字标示。

   XMind：支持上述链接方式，也支持（默认）把该文档及图片引入XMind文件
   作为附件，形成完整的资料包。.xmind 格式与OOo文档一样，实质是 xml＋
   素材的zip包。展开后的内容举例如下：

   #+BEGIN_EXAMPLE
     attachments\
     attachments\4hm2upmpscpth85latqpd49biq.png
     attachments\179ekuhhgn9g866cg5a26b78fh.pdf
     META-INF\
     META-INF\manifest.xml
     Thumbnails\
     Thumbnails\thumbnail.jpg
     content.xml
     meta.xml
     styles.xml
   #+END_EXAMPLE

5. 发布思维导图方面，XMind 要向 FreeMind 学习

   1) 能导出哪些格式

      - XMind 免费版：FreeMind、html、图片（bmp/jpg/gif/png）、纯文本
      - XMind Pro：以上 + MindManager、pdf（普通/思维图）、ppt/doc/rtf
      - FreeMind：各种html、flash、pdf、OpenOffice文档、png/jpg、
        svg/twiki等格式

   2) 我关注的导出格式、比较、说明

      - 静态图片：思维导“图”当然要能导出静态图片，这是最低需求。实在
        不能导出，截屏亦可。只是内容太多超过一屏时，截屏就不太方便了。
        图片可用于网页发布，也可用于其他文档（pdf/office）。格式方面，
        强烈不推荐bmp/jpg，推荐png/gif格式，[[http://blog.sina.com.cn/s/blog_46dac66f010004ox.html][原因见此]]。这方面，XMind与
        FreeMind持平。

      - pdf文档发布：相比图片的优点是，放大后文字仍然清晰。如果内容太
        多，导出一页的pdf发给别人，无论用于打印还是放大查看，都比图片
        的效果好很多。对比结果：XMindPro（未用过）＞ FreeMind（够用）
        ＞ XMind（无）-- 广义html导出：FreeMind 遥遥领先，详细见下。

      - 广义html导出的详细比较

        结论：广义html/flash式导出，目的是在线发布后，仍保留折叠/展开
        动态效果，及链接功能。这方面，FreeMind遥遥领先，远胜 XMind。

        XMind：导出的html包括图片和节点文字。但图与文字无链接；文字层
        级也不能折叠；图片默认为jpg，强烈建议换为png。

        FreeMind：可采用不同技术进行导出，每种导出效果都非常好。
        FreeMind导出html的格式有：

        - html：纯文字方式，节点保留原有格式，层级关系可折叠展开，url链接有效。
        - xhtml（javascript）：效果同上，只是改用js实现。
        - xhtml（可点击map图片）：除了上述文字内容外，还附有图片，并且点击图片的节点可跳转到对应的文字。
        - java applet：功能保留最多的方式。在浏览器中的使用效果近乎在 FreeMind中打开 .mm文件。
        - flash：点击可折叠/展开，链接url有显示但无法点击。

6. FreeMind节点支持html代码

   FreeMind：节点支持html代码，实现文字格式化、换行、分段、图像链接、
   表格。（此外，还支持LaTex代码）

    XMind：不能对部分文字分别设定格式，可以shift+enter换行。

7. XMind 具有更好的可持续性

   FreeMind作为经典开源软件，虽在持续更新中，但新功能进展并不多。而同
   作为开源软件的XMind，不仅因为后发优势拥有了更多功能。并且，作为有商
   业公司支持的开源产品，新功能的开发会更加活跃------这并非迷信商业，
   而是实际情况，包括两个开发团队的成员也有此认识。

    另外，XMind还提供了更强大的Pro版，可以满足个人和企业的更高需求，并
   能提供可靠的技术支持。

8. XMind 更美观，FreeMind 更快速省资源

   无论用户界面还是思维导图文件，XMind 都更加美观。而 FreeMind更加简约，
   占用资源更少，启动和运行速度更快。各取所需即可。

9. 其他差异

   FreeMind 可以导入目录结构，相当于变成了资源管理器；XMind不能。

   在节点输入较多文字的过程中，XMind的输入框会阶梯式不断加大，而
   FreeMind会保持同样大小（只显示最右侧部分）。

   XMind的节点可以添加标签，以进行过滤筛选；而FreeMind可以根据节点文字
   进行过滤显示。

    注意：XMind导入.mm时，无法识别包含html代码的节点。

****** 结论：软件选择建议

大多数人普通用户：XMind。理由：支持逻辑图、二维图等多种表达形式并可混
用，更加美观、支持附件。

*Geek或偏执者：FreeMind。理由：更节约资源，界面更简朴。*

自主网络发布：FreeMind。理由：强大灵活的html导出功能。

不执着于软件，仅执着于最优效果：主用 XMind 辅用FreeMind。即仅在自主网
络发布时另存为FreeMind格式，再用FreeMind导出为html。

***** freemind

+ [[http://freemind.sourceforge.net/wiki/index.php/Main_Page][Homepage]]

****** install                                                 :install:

新得立 version 0.9

beta: 1.1

http://freemind.sourceforge.net/wiki/index.php/Download

http://www.getdeb.net/app/Freemind -> 软件中心

不支持的软件源，安装过程中需要 “修复”。。。

还是源码 -> ant (java 版 make)

#+BEGIN_EXAMPLE
java.io.IOException: Cannot run program "/home/wally/Download/freemind/check_for_duplicate_resources.sh": error=13, 权限不够
#+END_EXAMPLE

sudo 和切换为 root 用户，也不行？

还是 apt-get 方式

****** usage

用起来体验不错。
**** org export to freemind                             :freemind:mindmap:

#+BEGIN_EXAMPLE
- State "DONE"       from "ABORT"      [2016-01-11 一 10:20] \\
  重新安装系统后编译Emacs，解决问题
- State "ABORT"      from "TODO"       [2015-11-23 一 19:26] \\
  不需要的东西不要瞎折腾, 放弃也是一种智慧
#+END_EXAMPLE


#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/src/org-mode/contrib/lisp"))
  (require 'ox-freemind)
  (setq org-freemind-pretty-output t)
  (setq org-freemind-section-format 'note)
#+END_SRC

(void-function libxml-parse-xml-region) 暂时解决不了。。。

-> 重新编译安装Emacs??? 不要鲁莽！！！

*org-freemind-export-to-freemind*

**** desktop重命名                                               :desktop:

- http://blog.csdn.net/manmaximus/article/details/3567919

- why: 重命名桌面文件夹，桌面所在文件夹是“桌面”，习惯了用终端进行操
  作，但是在终端打中文比较麻烦

- 配置文件: *~/.config/user-dirs.dirs*

  #+BEGIN_EXAMPLE
    # This file is written by xdg-user-dirs-update
    # If you want to change or add directories, just edit the line you're
    # interested in. All local changes will be retained on the next run
    # Format is XDG_xxx_DIR="$HOME/yyy", where yyy is a shell-escaped
    # homedir-relative path, or XDG_xxx_DIR="/yyy", where /yyy is an
    # absolute path. No other format is supported.
    #
    XDG_DESKTOP_DIR="$HOME/Desktop"
    XDG_DOWNLOAD_DIR="$HOME/Download"
    XDG_TEMPLATES_DIR="$HOME/模板"
    XDG_PUBLICSHARE_DIR="$HOME/Share"
    XDG_DOCUMENTS_DIR="$HOME/Document"
    XDG_MUSIC_DIR="$HOME/Audio"
    XDG_PICTURES_DIR="$HOME/Picture"
    XDG_VIDEOS_DIR="$HOME/Video"
  #+END_EXAMPLE

**** ROS

- sql http://wiki.ros.org/sql_database
- arbotix_python http://wiki.ros.org/arbotix_python?distro=indigo#Services
- Q&A
  - http://answers.ros.org/question/95486/hector-slam-with-turtlebot-in-gazebo/
  - http://answers.ros.org/question/46004/turtlebothector-slam-possibile-or-not/
- http://wiki.ros.org/hector_turtlebot
- http://wiki.ros.org/hector_turtlebot
- http://www.ros.org/news/2014/12/updated-package-razor-imu-9dof.html
-
  http://answers.ros.org/question/99211/how-to-combine-a-camera-image-and-a-laser-pointcloud-to-create-a-color-pointcloud/

**** emacs matlab                                                 :matlab:

***** matlab-emacs

中止的项目

#+BEGIN_SRC emacs-lisp
  (autoload 'matlab-mode "matlab" "Enter MATLAB mode." t)
  (setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
  (autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)
#+END_SRC

***** matlab-mode

https://github.com/pronobis/matlab-mode

****** configure

+ [[http://www.emacswiki.org/emacs/MatlabMode][EmacsWiki]]

#+BEGIN_SRC emacs-lisp
  (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
  (add-to-list
   'auto-mode-alist
   '("\\.m$" . matlab-mode))
  (setq matlab-indent-function t)
  (setq matlab-shell-command "matlab")
#+END_SRC

****** usage

- *matlab shell* 后台运行 matlab (Note: 不会启动 GUI，但会短暂地弹出一
  个窗口)
- 只能运行，不支持调试，调试还是使用 Matlab GUI

***** matlab IDE 支持 Emacs 基本的编辑快捷键，所以可能不需要集成在 Emacs 中

** w1
*** 2016/01/10
**** index

关于建立索引的想法

1. 索引类似书后面的 index
2. 按字母顺序排列
3. 不使用标题，因为不需要继承标签
4. 使用无序列表
5. 可以包含简要的笔记内容和链接等

**** 手机 VPN

不用下载客户端，直接使用配置中的VPN

**** 交换 CapsLock 和 Ctrl 键
***** reference

- http://tuhdo.github.io/emacs-tutor.html
- http://www.kodiva.com/post/swapping-caps-lock-and-control-keys
-
  http://askubuntu.com/questions/412576/swap-caps-lock-and-ctrl-in-ubuntu-13-10/412622#412622

***** windows: 通过修改注册表

In our opinion this is the best way to swap the control and caps lock
keys in Windows because you don't have to rely on any external program
and the registry edit works 100% perfectly (for the paranoid).

Why should one bother changing the caps lock and control keys, what's
wrong with the control key where it is? After extensive testing, our
conclusion is that - if you use the control key a lot (like in Emacs or
Vim), then you should definitely swap the control and caps lock keys as
it's extremely ergo-dynamic to have the control key in the home row.

1. Click Start -> Run

2. Type: regedit, and click OK

3. Go to: HKEY_LOCAL_MACHINE -> System -> CurrentControlSet -> Control
   -> KeyBoard Layout

   Note: *KeyBoard Layout*, and not KeyBoard Layouts

4. Right-click: Keyboard Layout, and select New -> Binary value

5. Rename: New Value #1 -> Scancode Map

6. Right click: Scancode Map -> Modify
   #+BEGIN_EXAMPLE
     0000  00 00 00 00 00 00 00 00
     0008  03 00 00 00 1d 00 3a 00
     0010  3a 00 1d 00 00 00 00 00
     0018
   #+END_EXAMPLE

7. Close regedit and restart your computer

***** Linux

1. Put this in your shell init file (.bashrc, .zshrc…):

   #+BEGIN_EXAMPLE
   /usr/bin/setxkbmap -option "ctrl:swapcaps"
   #+END_EXAMPLE

2. xmodmap

3. gnome-tweak-tool(Ubuntu)

   First, install gnome-tweak-tool using sudo apt-get install
   gnome-tweak-tool from a console.

   Then, run it using the command gnome-tweak-tool, or by typing
   "Tweak Tool" into the dash at the top-left.

   From this tool, choose the "Typing" tab on the left. Then, from the
   dropdown next to "Ctrl key position" on the right, choose "Swap
   Ctrl and Caps Lock". This should swap those two keys.
**** org-mobile

+ http://darksun.blog.51cto.com/3874064/1302920

***** 下载 MobileOrg

豌豆荚上的 MobileOrg 版本低。

google play 在手机上安装后打开无反应！！！

https://github.com/matburt/mobileorg-android  源码不会编译，android 平
台。似乎不再更新了，最后一次提交是两年前。

Google 搜索关键字 "MobileOrg apk": [[http://www.appdownloader.net/Android/App/602857/com.matburt.mobileorg/Download][Down MobileOrg Apk 0.9.13]]

***** 配置 Emacs org

org-mobile-push C-c C-x RET p

#+BEGIN_SRC emacs-lisp
  (require 'org-mobile)
  (require 'org-id)
  (setq org-mobile-directory (expand-file-name "~/Share/Dropbox/MobileOrg"))
  (setq org-directory "~/Wally/Journal/GTD")
  (setq org-mobile-files '("~/Wally/Journal/GTD/task.org"))
  (setq org-mobile-inbox-for-pull "~/Wally/Journal/GTD/mobile.org")
#+END_SRC

****** error

#+BEGIN_EXAMPLE
(void-function org-id-get)
#+END_EXAMPLE

(require 'org-id)

***** 使用小结

#+BEGIN_EXAMPLE
  C-c C-x RET p (translated from C-c C-x <return> p) runs the command
  org-mobile-push, which is an interactive Lisp function in
  `org-mobile.el'.

  It is bound to <menu-bar> <Org> <MobileOrg> <Push Files and Views>,
  C-c C-x RET p.

  (org-mobile-push)

#+END_EXAMPLE

可以更新任务状态，但是更新的内容只是同步到了 mobile.org, 而没有改变对
应的 task.org
**** software
***** 新得立
***** Ubuntu Windows 双系统，硬盘安装

****** windows 配置

1. 下载镜像文件
   - Ubuntu 64位(乌班图系统) v12.04.1 官方原版iso镜像：http://www.33lc.com/soft/18055.html
   - Ubuntu(乌班图系统) v12.04.1 官方原版iso镜像： http://www.33lc.com/soft/18053.html

2. 下载并安装easybcd。

   easybcd是一款很优秀的系统引导软件，功能强大，最关键的是傻瓜式一站式
   简易操作，极其适合新手使用!

3. 新建分区

   腾出一个空盘，点击右键格式化之后把它删除(这个盘最好是在硬盘的后面，
   因为Windows系统不能识别Linux系统分区，如果将ubuntu装在D盘，将D盘删
   除并建立Linux系统分区后，原来的E盘就会变成D盘，安装在E盘的软件会出
   现系统注册表路径不对称，要重新安装一遍软件)。网上很多说使用磁盘压缩
   功能以整理出空白分区，这个方法也可行，但这个盘要保证有10G空间以上比
   较稳妥。

4. 安装好easybcd2.1.2后，启动软件

   #+DOWNLOADED: http://www.33lc.com/article/UploadPic/2012-8/20128241427190206.jpg @ 2016-01-10 14:16:48

   [[~/Wally/Journal/Figure/.org-download/Journal/20128241427190206_2016-01-10_14:16:48.jpg]]

   按照上图的序号依次点击“Add New Entry”——“Neo Grub”——“Install”，
   点到“Install”后出面下面的界面，再点“Configure”。

   点击“Configure”按钮后，会出现一个记事本文件，将下面的代码粘贴到文
   件尾部：

   #+BEGIN_EXAMPLE
     title Install Ubuntu 12.04 LTS
     root (hd0,6)
     kernel (hd0,6)/vmlinuz boot=casper iso-scan/filename=/ubuntu-12.04-desktop-amd64.iso ro quiet splash locale=zh_CN.UTF-8
     initrd (hd0,6)/initrd.lz
   #+END_EXAMPLE

   上图代码中“ubuntu-12.04-desktop-amd64.iso”为你下载的ubuntu 12.04
   系统镜像文件名，这个文件名是可以修改的，但修改的名字一定要与写入的
   代码名字一致，否则将无法引导安装;

   (hd0,6) 表示磁盘分区，hd(0,0), hd(0,1), hd(0,2), hd(0,3)表示主分区，
   (hd0,4)以后的表示逻辑分区，现在我只有一个主分区C盘，则(hd0,0)表示C
   盘，(hd0,4)表示D盘，(hd0,5)表示E盘，(hd0,6)表示F盘，我的镜像就是放
   在F盘里，请把(hd0,6)改成自己对应的分区)

5. 将下载的镜像文件放到(hd0,N)盘的根目录下，并确保文件名与上面写入的代
   码的文件名一致为ubuntu-12.04-desktop-amd64.iso，然后用WinRAR解压缩
   软件将iso打开，将casper文件夹目录下的vmlinuz和 initrd.lz解压并复制
   到(hd0,N)盘根目录下。准备工作至此已全部完成!!!

****** Ubuntu 安装

1. sudo umount /isodevice

2. /usr/local 或 /opt 可以单独挂载一个分区

****** Windows 下删除 Ubuntu 分区导致系统无法启动（引导程序失败） :grub:

- [[http://zhidao.baidu.com/question/495728786.html?fr=ala&word=grub%20rescue%E5%88%A0%E9%99%A4ubuntu&device=mobile&ssid=0&from=2001a&uid=0&pu=usm@0][百度知道]]

装了ubuntu后，会默认从Ubuntu的Grub菜单引导系统，Win8的MBR被替换为Grub
来引导。

于是，你删除了Ubuntu，也就是删除了Grub的文件。但是，你的引导扇区的启动
参数还是指向了Grub，于是就grun rescue了。。。

*解决方法*

用PE启动，打开WinPM或者DiskGen，找到一个叫重建主引导记录（MBR）的东西，
重建一下就好了，记得把Windows分区设置为活动！

***** [[http://seisman.info/install-texlive-under-linux.html][Linux下安装TeXLive 2015]]
****** [[#id8][依赖包]]

-  安装过程中需要调用Perl的模块 =Digest::MD5= 来检测ISO文件的完整性；
-  升级过程中界面需要调用Perl的模块 =Tk= ；

CentOS:

#+BEGIN_EXAMPLE
    $ sudo yum install perl-Digest-MD5 perl-Tk
#+END_EXAMPLE

Ubuntu:

#+BEGIN_EXAMPLE
    $ sudo apt-get install libdigest-perl-md5-perl perl-tk
#+END_EXAMPLE

****** [[#id9][安装]]

******* [[#id10][下载]]

下载地址：

-  官方镜像:
   [[http://mirrors.ctan.org/systems/texlive/Images/texlive2015.iso]]
-  USTC镜像：
   [[http://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/texlive2015.iso]]

Linux下可以用wget、axel，windows下可以用迅雷，怎么快怎么来。

******* [[#id11][挂载ISO镜像]]

 #+BEGIN_EXAMPLE
     $ su
     # mount -o loop texlive2015.iso  /mnt/
     # cd /mnt
     # ./install-tl
 #+END_EXAMPLE


出现选项后，输入 =I=
直接安装（也可以更改选项）。不出意外的话，5分钟应该就OK了，然后退出root用户。

******* [[#id12][环境变量]]

在当前用户的 =~/.bashrc= 中加入如下语句：

 #+BEGIN_EXAMPLE
     # TeX Live 2015
     export MANPATH=${MANPATH}:/usr/local/texlive/2015/texmf-dist/doc/man
     export INFOPATH=${INFOPATH}:/usr/local/texlive/2015/texmf-dist/doc/info
     export PATH=${PATH}:/usr/local/texlive/2015/bin/x86_64-linux
 #+END_EXAMPLE


******* [[#id13][卸载ISO镜像]]

 #+BEGIN_EXAMPLE
     1
     2
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     $ cd
     $ sudo umount /mnt/
 #+END_EXAMPLE

****** [[#id14][更新TeXLive]]

可以使用如下命令更新TeXLive宏包：


 #+BEGIN_EXAMPLE
     $ su
     # 更新TeXLive包管理器tlmgr
     # tlmgr update --self
     # 更新TeXLive的全部包
     # tlmgr update --all
 #+END_EXAMPLE


默认情况下，会自动搜索合适的镜像来更新，也可以使用 =--repository=
选项指定了要使用哪一个CTAN镜像。

比如USTC镜像:

#+BEGIN_EXAMPLE
    # tlmgr update --self --repository http://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/
    # tlmgr update --all --repository http://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/
#+END_EXAMPLE

比如阿里云镜像:

#+BEGIN_EXAMPLE
    # tlmgr update --self --repository http://mirrors.aliyun.com/CTAN/systems/texlive/tlnet/
    # tlmgr update --all --repository http://mirrors.aliyun.com/CTAN/systems/texlive/tlnet/
#+END_EXAMPLE

如果希望在图形界面下升级，可以使用如下命令调出tlmgr的中文图形界面：

 #+BEGIN_EXAMPLE
     $ su
     # tlmgr --gui --gui-lang zh_CN
 #+END_EXAMPLE

****** [[#id15][安装额外的字体]]

TeXLive 2015在使用xeLaTeX处理中文时，有自己的默认字体。大多数Linux发行版下，都使用自带的Fandol字体。

如果想要使用Windows字体，可以将字体文件复制到 =~/.fonts=
目录下，并在tex源码中指定字体选项即可。

*.local/share/fonts 文件夹*

****** [[#id16][修订历史]]

-  2013-07-11：初稿；
-  2014-07-06：修改为TeXLive2014，并删除中文字体部分；
-  2015-03-08：新增“安装依赖”；
-  2015-03-15：使用命令行更新包；
-  2015-03-20：指定更新源以及GUI更新；
-  2015-06-13：更新至TeXLive 2015；

So what do you think? Did I miss something? Is any part unclear? Leave
your comments below.

[[http://seisman.info/install-texlive-under-linux.html#disqus_thread][Comments]]

Please enable JavaScript to view the
[[http://disqus.com/?ref_noscript][comments powered by Disqus.]]

[[http://disqus.com][comments powered by Disqus]]

--------------

****** Related Posts:

-  [[http://seisman.info/terms-about-tex.html][与TeX相关的一些名词]]
-  [[http://seisman.info/perl-plenv.html][Perl多版本共存之plenv]]
-  [[http://seisman.info/install-gmt5-under-linux.html][GMT 5.1.2在Linux下的安装]]
-  [[http://seisman.info/mini-template-for-xeCJK.html][使用xeCJK解决中文问题的最小模板]]
-  [[http://seisman.info/install-gmt5-under-windows.html][GMT 5.1.2在Windows下的安装]]

***** [[http://ergoemacs.org/emacs/building_emacs_on_linux.html][How to Build Emacs on Linux]] :install:

This page shows you how to compile/build latest version of publically
released version of emacs on Linux. It should work for building any
emacs version. I assume you are on Ubuntu Linux.

If you want to build latest development version, see:
[[building_emacs_from_git_repository.html][How to Build Emacs from git
Repository]].

****** Summary

Here's summary of what to do.

① Install essential build tools and dependency first:

#+BEGIN_EXAMPLE
    # install essential build tools
    sudo apt-get install build-essential
#+END_EXAMPLE

② Download emacs dependencies:

#+BEGIN_EXAMPLE
    # get all dependencies of a previous emacs version
    sudo apt-get build-dep emacs24
#+END_EXAMPLE

③ Download emacs source code from [[http://ftp.gnu.org/gnu/emacs/]],
then cd to the emacs source directory.

④ Compile emacs:

#+BEGIN_EXAMPLE
    cd ‹source dir name›
    ./configure
    make
    sudo make install # optional. This basically copy the binary to /usr/local/bin
#+END_EXAMPLE

Following is detailed explanation.

--------------

****** Check Prepared Emacs Packages

On Ubuntu, typically you install by =sudo apt-get install emacs24=,
where the “emacs24” may be other version.

To search for emacs, do: =apt-cache search emacs | grep emacs=.

When emacs has a new version, Ubuntu Linux typically takes half a year
to a year to have a prepared package.

Or, you build it yourself. It's easy.

****** Download Emacs Source Code

Download emacs source code here: [[http://ftp.gnu.org/gnu/emacs/]]

****** Compile Steps

To compile programs on unix, typically the steps are:

#+BEGIN_EXAMPLE
    cd ‹source dir name›
    ./configure
    make
    sudo make install # optional. This basically copy the binary to /usr/local/bin
#+END_EXAMPLE

In the source dir, there's usually a README or INSTALL file.

However, you'll probably fail in the configure step, because emacs
requires lots other libraries, also, you might be missing build tools.

Here's some sample output of failure:

#+BEGIN_EXAMPLE
    checking for libXaw... configure: error: No X toolkit could be found.
    If you are sure you want Emacs compiled without an X toolkit, pass
      --with-x-toolkit=no
    to configure.  Otherwise, install the development libraries for the toolkit
    that you want to use (⁖ Gtk+) and re-run configure.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    configure: error: The following required libraries were not found:
        libXpm libjpeg libpng libgif/libungif libtiff
    Maybe some development libraries/packages are missing?
    If you don't want to link with them give
        --with-xpm=no --with-jpeg=no --with-png=no --with-gif=no --with-tiff=no
    as options to configure
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    configure: error: The required function `tputs' was not found in any library.
    These libraries were tried: libncurses, libterminfo, libtermcap, libcurses.
    Please try installing whichever of these libraries is most appropriate
    for your system, together with its header files.
    For example, a libncurses-dev(el) or similar package.
#+END_EXAMPLE

You can type =./configure --help= to see the options it supports. See
its output here: [[linux_compile_emacs_24_config_help_output.txt]].

****** Install Basic Build Tools

#+BEGIN_EXAMPLE
    # install basic build tools
    sudo apt-get install build-essential
#+END_EXAMPLE

To see info about the package, do:

-  =apt-cache showpkg build-essential=
-  =apt-cache show build-essential=

****** Dependencies

You'll need to install some 30 dependent libraries. The trick is to know
which are they. Took me a couple hours to find out the hard way.

The easiest way is to install all dependencies of a previous version of
the package, like this:

#+BEGIN_EXAMPLE
    sudo apt-get build-dep emacs24
#+END_EXAMPLE

This will install all packages emacs24 depends on.

Here's the output on my machine for emacs23:

#+BEGIN_EXAMPLE
    The following NEW packages will be installed:
      autoconf automake autotools-dev bsd-mailx diffstat imagemagick libasound2-dev libdatrie-dev
      libdbus-1-dev libgconf2-dev libgpm-dev libgtk2.0-dev liblockfile-dev liblqr-1-0 libm17n-dev
      libmagickcore3 libmagickwand3 libncurses5-dev libotf-dev librsvg2-dev libthai-dev libtinfo-dev
      libxml2-dev postfix quilt sharutils texinfo xaw3dg xaw3dg-dev xutils-dev
    0 upgraded, 30 newly installed, 0 to remove and 4 not upgraded.
    Need to get 12.4 MB of archives.
    After this operation, 49.5 MB of additional disk space will be used.
#+END_EXAMPLE

You can see the full bash output here:
[[linux_compile_emacs_23_dependencies.txt]]

****** config, make

=make distclean= to clear files created by configure.

Once you have all the dependencies, you can now run =./configure= and
=make= again.

Here's a sample successful output:

-  [[linux_compile_emacs_24_config_success_output.txt]]
-  [[linux_compile_emacs_24_make_success_output.txt]]

After successful “make”, you should have a binary at =src/emacs= in the
current dir. You can test run it by =src/emacs &=.

Optionally, you can do =sudo make install=, which will basically copy
the binary to =/user/loca/bin/=, and copy various elisp files, info
files, man pages, etc, into various Linux default dirs.

***** steam                                                       :steam:
****** dota 全屏

http://jingyan.baidu.com/article/e75057f2dca190ebc91a893e.html

全屏问题，选项里设置视频，全屏模式

****** error

http://askubuntu.com/questions/614422/problem-with-installing-steam-on-ubuntu-15-04

#+BEGIN_EXAMPLE
$ steam
Running Steam on ubuntu 15.04 64-bit
STEAM_RUNTIME is enabled automatically
Installing breakpad exception handler for appid(steam)/version(0_client)
libGL error: unable to load driver: r600_dri.so
libGL error: driver pointer missing
libGL error: failed to load driver: r600
libGL error: unable to load driver: swrast_dri.so
libGL error: failed to load driver: swrast
#+END_EXAMPLE

***** [[http://lanbing510.info/2014/12/03/Linux-Matlab.html][Matlab 安装]] :install:

1. 从[[http://pan.baidu.com/s/1o6qKdxo#path=%252Fmatlab][这里]]下载Matlab2014的Linux版本及破解文件。

   - note: 两个 rar 文件，只需使用 unrar 解压其中一个即可，会自动解压
     另外一个。

2. 下载完成后将iso文件挂载到Linux进行安装。

   #+BEGIN_EXAMPLE
    sudo mkdir /media/matlab
    mount -o loop [path][filename].iso /media/matlab
    cd /media/matlab
    sudo ./install
   #+END_EXAMPLE

  - ./install 触发的是 GUI 方式，而不是命令行方式

3. 安装过程中使用readme.txt中的序列号。

4. 破解

   1) 安装完成后使用crack下的 license进行激活；

   2) 将crack文件夹下的libmwservices.so copy到 /usr/local/MATLAB/R2014A/bin/glnxa64。

5. 完成安装，命令行下使用sudo matlab即可启动使用。

***** git 安装                                                  :install:

https://github.com/git/git

from INSTALL(file)

#+BEGIN_EXAMPLE
Alternatively you can use autoconf generated ./configure script to
set up install paths (via config.mak.autogen), so you can write instead

        $ make configure ;# as yourself
        $ ./configure --prefix=/usr ;# as yourself
        $ make all doc ;# as yourself
        # make install install-doc install-html;# as root
#+END_EXAMPLE

顺便解决了 magit 因为 git 版本低的 bug

***** pandoc 安装                                               :install:

- https://github.com/jgm/pandoc


1. apt-get

   #+BEGIN_EXAMPLE
     :~$ apt-cache search pandoc
     doconce - document once, include anywhere
     gitit - Wiki engine backed by a git or darcs filestore
     libghc-citeproc-hs-data - Haskell support for Citation Style Language - data files
     libghc-citeproc-hs-dev - Haskell support for Citation Style Language
     libghc-citeproc-hs-doc - Haskell support for Citation Style Language; documentation
     libghc-citeproc-hs-prof - Haskell support for Citation Style Language; profiling libraries
     libghc-gitit-dev - Wiki engine backed by a git or darcs filestore
     libghc-gitit-doc - Wiki engine backed by a git or darcs filestore; documentation
     libghc-gitit-prof - Wiki engine backed by a git or darcs filestore; profiling libraries
     libghc-pandoc-citeproc-data - Pandoc support for Citation Style Language - data files
     libghc-pandoc-citeproc-dev - support for using pandoc with citeproc
     libghc-pandoc-citeproc-doc - support for using pandoc with citeproc; documentation
     libghc-pandoc-citeproc-prof - support for using pandoc with citeproc; profiling libraries
     libghc-pandoc-dev - general markup converter - libraries
     libghc-pandoc-doc - general markup converter - library documentation
     libghc-pandoc-prof - general markup converter - profiling libraries
     libghc-pandoc-types-dev - Haskell data types to represent structured documents
     libghc-pandoc-types-doc - Haskell data types to represent structured documents; documentation
     libghc-pandoc-types-prof - Haskell data types to represent structured documents; profiling libraries
     libghc-yesod-markdown-dev - tools for using Markdown in a Yesod application
     libghc-yesod-markdown-doc - tools for using Markdown in a Yesod application; documentation
     libghc-yesod-markdown-prof - tools for using Markdown in a Yesod application; profiling libraries
     pandoc - general markup converter
     pandoc-citeproc - Pandoc support for Citation Style Language - tools
     pandoc-data - general markup converter - data files
     python-pandocfilters - python bindings for Pandoc's filters
     python3-pandocfilters - python3 bindings for Pandoc's filters
     wally@wally:~$ sudo apt-get install pandoc
     [sudo] password for wally:
     正在读取软件包列表... 完成
     正在分析软件包的依赖关系树
     正在读取状态信息... 完成
     将会安装下列额外的软件包：
       liblua5.1-0 pandoc-data
     建议安装的软件包：
       texlive-latex-recommended texlive-xetex texlive-luatex pandoc-citeproc etoolbox
     下列【新】软件包将被安装：
       liblua5.1-0 pandoc pandoc-data
     升级了 0 个软件包，新安装了 3 个软件包，要卸载 0 个软件包，有 256 个软件包未被升级。
     需要下载 4,519 kB 的软件包。
     解压缩后会消耗掉 38.9 MB 的额外空间。
   #+END_EXAMPLE

2. source code

   + git clone git://github.com/jgm/pandoc
   + cd pandoc
   + git submodule update --init
   + cabal install --force --enable-tests
   + cabal test

注：
- 使用 cabal

- Make sure the `$CABALDIR/bin` directory is in your path.

  #+BEGIN_EXAMPLE
  export PATH=~/.cabal/bin:$PATH
  #+END_EXAMPLE

- *没有必要使用源码方式*

***** dropbox 安装

- 下载(64bit for Ubuntu): https://www.dropbox.com/zh_CN/install?os=lnx

- dpkg install
  #+BEGIN_EXAMPLE
    $ sudo dpkg -i dropbox_2015.10.28_amd64.deb
    正在选中未选择的软件包 dropbox。
    (正在读取数据库 ... 系统当前共安装有 241104 个文件和目录。)
    正准备解包 dropbox_2015.10.28_amd64.deb  ...
    正在解包 dropbox (2015.10.28) ...
    正在设置 dropbox (2015.10.28) ...
    Please restart all running instances of Nautilus, or you will experience problems. i.e. nautilus --quit
    Dropbox installation successfully completed! You can start Dropbox from your applications menu.
    正在处理用于 gnome-menus (3.10.1-0ubuntu5) 的触发器 ...
    正在处理用于 desktop-file-utils (0.22-1ubuntu3) 的触发器 ...
    正在处理用于 bamfdaemon (0.5.1+15.04.20150202-0ubuntu1) 的触发器 ...
    Rebuilding /usr/share/applications/bamf-2.index...
    正在处理用于 mime-support (3.58ubuntu1) 的触发器 ...
    正在处理用于 hicolor-icon-theme (0.14-0ubuntu1) 的触发器 ...
    正在处理用于 man-db (2.7.0.2-5) 的触发器 ...
  #+END_EXAMPLE

*** 2016/01/08
**** ROS

- sql http://wiki.ros.org/sql_database
- arbotix_python http://wiki.ros.org/arbotix_python?distro=indigo#Services
- Q&A
  - http://answers.ros.org/question/95486/hector-slam-with-turtlebot-in-gazebo/
  - http://answers.ros.org/question/46004/turtlebothector-slam-possibile-or-not/
- http://wiki.ros.org/hector_turtlebot
- http://wiki.ros.org/hector_turtlebot
- http://www.ros.org/news/2014/12/updated-package-razor-imu-9dof.html
-
  http://answers.ros.org/question/99211/how-to-combine-a-camera-image-and-a-laser-pointcloud-to-create-a-color-pointcloud/

**** gazebo

- ROS 建模

**** smartparens

- [[https://github.com/Fuco1/smartparens][Github]]
- [[https://github.com/Fuco1/smartparens/wiki][Wiki]]
- https://ebzzry.github.io/emacs-pairs.html

***** add pairs
1. global
  #+BEGIN_EXAMPLE
    (sp-pair "\{" "\}") ;; latex literal brackets (included by default)
    (sp-pair "<#" "#>")
    (sp-pair "$" "$")   ;; latex inline math mode. Pairs can have same opening and closing string
  #+END_EXAMPLE
2. local
   #+BEGIN_EXAMPLE
   (sp-local-pair 'LaTeX-mode "\\\\left(" "\\\\right)" :insert "C-b l" :trigger "\\\\l(")
   #+END_EXAMPLE

3. :wrap
   #+BEGIN_EXAMPLE
     (sp-pair "(" ")" :wrap "C-(")
   #+END_EXAMPLE

***** remove pairs
#+BEGIN_EXAMPLE
  ;; the second argument is the closing delimiter, so you need to skip it with nil
  (sp-pair "\{" nil :actions :rem)
  (sp-pair "'" nil :actions :rem)
#+END_EXAMPLE

***** wrapping

https://github.com/Fuco1/smartparens/wiki/Wrapping

#+BEGIN_SRC emacs-lisp
  (sp-local-pair 'org-mode "*" "*"
                 :wrap "*")
  (sp-local-pair 'org-mode "=" "="
                 :wrap "=")
  (sp-local-pair 'org-mode "/" "/"
                 :wrap "/")
  (sp-local-pair 'org-mode "\left(" "\n\\right)"
                 :trigger "\l(")
  (sp-local-pair 'org-mode "\left[" "\n\\right]"
                 :trigger "\l[")
  (sp-local-pair 'org-mode "\left{" "\n\\right}"
                 :trigger "\l{")
  (sp-local-pair 'org-mode "\\[" "\\]"
                 :trigger "\\[")
#+END_SRC

E=mc^2

**** wrap-region

+ [[https://github.com/rejeep/wrap-region.el][GitHub]]

Wrap Region is a minor mode for Emacs that wraps a region with
punctuations. For "tagged" markup modes, such as HTML and XML, it wraps
with tags.

***** Installation

I recommend installing via ELPA, but manual installation is simple as
well:

#+BEGIN_EXAMPLE
    (add-to-list 'load-path "/path/to/wrap-region")
    (require 'wrap-region)
#+END_EXAMPLE

***** Usage

Start =wrap-region-mode= using.

#+BEGIN_EXAMPLE
    (wrap-region-mode t)
#+END_EXAMPLE

or

#+BEGIN_EXAMPLE
    M-x wrap-region-mode
#+END_EXAMPLE

Now try selecting a region and press any of the following keys: ="=,
='=, =(=, ={=, =[=.

The above are the default wrappers. You can add more yourself:

#+BEGIN_EXAMPLE
    (wrap-region-add-wrapper "$" "$")
    (wrap-region-add-wrapper "{-" "-}" "#")
    (wrap-region-add-wrapper "/" "/" nil 'ruby-mode)
    (wrap-region-add-wrapper "/* " " */" "#" '(java-mode javascript-mode css-mode))
    (wrap-region-add-wrapper "`" "`" nil '(markdown-mode ruby-mode))
#+END_EXAMPLE

The same can be done with:

#+BEGIN_EXAMPLE
    (wrap-region-add-wrappers
     '(("$" "$")
       ("{-" "-}" "#")
       ("/" "/" nil ruby-mode)
       ("/* " " */" "#" (java-mode javascript-mode css-mode))
       ("`" "`" nil (markdown-mode ruby-mode))))
#+END_EXAMPLE

For more information, see comments in =wrap-region.el=.

***** Except modes

In some modes, such as =calc-mode= and =dired-mode=, you don't want to
have wrap region active since the key bindings will conflict. Wrap
region stores a list of modes (see =wrap-region-except-modes=) in which
wrap region will be inactive.

Some modes are added to the except list by default. See the list with:

#+BEGIN_EXAMPLE
    (describe-variable 'wrap-region-except-modes)
#+END_EXAMPLE

To add a new mode, do this:

#+BEGIN_EXAMPLE
    (add-to-list 'wrap-region-except-modes 'conflicting-mode)
#+END_EXAMPLE

***** customize

****** wrap-region-add-wrapper

(wrap-region-add-wrapper LEFT RIGHT &optional KEY MODE-OR-MODES)

Add new LEFT and RIGHT wrapper.

Optional KEY is the trigger key and MODE-OR-MODES is a single
mode or multiple modes that the wrapper should trigger in.

****** global minor mode

#+BEGIN_SRC emacs-lisp
  (require 'wrap-region)
  (wrap-region-global-mode t)
#+END_SRC

****** org-mode

#+BEGIN_SRC emacs-lisp
  (wrap-region-add-wrappers
   '(("*" "*" "*" org-mode)
     ("=" "=" "=" org-mode)
     ("/" "/" "/" org-mode)
     ("$" "$" "$" org-mode)))
#+END_SRC

***** smartparens 可以替代，而且似乎更强大，同类产品只择其一

**** Eason

从2015年8月16日在微信上分享《天下无双》到12月31的《七百年后》，前前后
后一共听Eason四个半月，按发布顺序以每周一张的速度认真听了不下十五张专
辑。Eason 在我的心中已经封神。

今天一如继往听Eason的专辑《上五楼的快活》，2009年的国语专，主打“台风”。
然而对我来说，真的是一种忍受，根本不想再听第二遍。接着又看了其后几张专
辑的评论，仍然不尽如人意。进一步地关注了知乎上一些关于 Eason、Jay 和王
力宏等人的对比，问答间充斥着所谓“真粉“的武断式的论点。这为单纯的喜欢
陡然增加了嘈杂的因素---我知道这是该离开一段时间了。2016年听的Eason的首
张专辑没给我带来惊艳，反而让我畏缩了：我会有一天突然不喜欢我一直热爱的
东西么？这一时期的例子还有跑步。如果是真的的，那简直太可怕了。

等我回归 Eason 的时候，我就知道我会一直热爱自己所喜爱的事物的。此刻随
机循环着收藏的Eason单曲。

**** osrf

http://www.osrfoundation.org/

Open Source Robotics Foundation

**** 软件源配置

*/etc/apt/sources.list.d*

#+BEGIN_EXAMPLE
   $ ls /etc/apt/sources.list.d
  dartsim-ppa-trusty.list              libccd-debs-ppa-trusty.list
  dartsim-ppa-trusty.list.save         libccd-debs-ppa-trusty.list.save
  dropbox.list.save                    lotem-rime-trusty.list
  fcitx-team-nightly-trusty.list       lotem-rime-trusty.list.save
  fcitx-team-nightly-trusty.list.save  mc3man-trusty-media-trusty.list
  fcl-debs-ppa-trusty.list             mc3man-trusty-media-trusty.list.save
  fcl-debs-ppa-trusty.list.save        ros-latest.list
  gazebo-latest.list                   ros-latest.list.save
  gazebo-latest.list.save              timxx-xmradio-trusty.list
  gazebo-stable.list                   timxx-xmradio-trusty.list.save
  gazebo-stable.list.save              wengxt-fcitx-nightly-trusty.list
  gophers-go-trusty.list               wengxt-fcitx-nightly-trusty.list.save
  gophers-go-trusty.list.save
#+END_EXAMPLE

**** 新得立

#+BEGIN_EXAMPLE
E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。
#+END_EXAMPLE

后台调用 apt-get 解决依赖问题。

安装 gazebo6, OK

安装 ros-jade, 删除 gazebo6, 安装了 gazebo5

用不着参考安装指导完全使用命令行方式安装。
*可以增加了 source （软件源） 之后使用新得立安装*

*抽象出做的内容，方法只是表象*

**** ros matlab

http://jp.mathworks.com/hardware-support/robot-operating-system.html?requestedDomain=www.mathworks.com

http://www.ros.org/news/2014/01/mathworks-releases-robot-operating-system-ros-support-from-matlab.html

**** openni

**** ros jade

1. xacro
   #+BEGIN_EXAMPLE
     inconsistent namespace redefinitions for xmlns:xacro:
      old: http://ros.org/wiki/xacro
      new: http://wiki.ros.org/xacro (/home/ben/Wally/Project/catkin_ws/src/wally/wally_description/urdf/mecanum.xacro)
     xacro.py is deprecated; please use xacro instead
   #+END_EXAMPLE

2. CMakeLists.txt 链接依然是 indigo

   重新 catkin_init_workspace

**** 根目录空间不足

#+BEGIN_EXAMPLE
卷文件系统根目录仅剩余856M的硬盘空间
#+END_EXAMPLE

- 增加主分区容量，可以使用U盘启动ubuntu，然后用gparted调整
- 在分一个区，挂接到/var, /opt, 然后把已有文件copy过去就行
- 系统应该有个叫baobab的图形界面程序，点开看看/分区都有哪些东西占地方咯
- apt-get autoclean看看把安装软件下载的缓存清理掉
**** Linux 建立无线局域网与如何连接

http://ubuntuhandbook.org/index.php/2014/09/3-ways-create-wifi-hotspot-ubuntu/

http://roylez.herokuapp.com/2011/08/11/hostapd.html

**** Emacs 简体繁体转换

https://groups.google.com/forum/#!topic/cn.bbs.comp.emacs/0nNRwGaN1X8


#+BEGIN_QUOTE
似乎还没人写过，我觉得意义不大，
这种转换造成的问题比起的作用更多，
很多错别字或者读不通的文章都是这种转换造成的，
比如这句话：“国”字的繁体是“國”，
转成繁体后变成了：“國”字的繁體是“國”，意思完全不对了。
其实繁体的文章又不是读不懂，转换它干嘛？多此一举。
#+END_QUOTE

1. 使用 hanconvert ，失败 https://github.com/monkey413/tongwen-emacs

2. 使用谷歌翻译(网页版)

*** 2016/01/07
**** routine

1. 表格 or 格式化文本?

   后者

2. elisp+keybinding or yasnippet

   yasnippet

   - 可以有默认值
   - 必要的时候可以使用 elisp 函数

3. snippet

   #+BEGIN_SRC snippet
     # -*- mode: snippet; require-final-newline: nil -*-
     # name: rt:RoutinesExpandingForOrg-agenda
     # key: rt
     # binding: direct-keybinding
     # --
     睡眠:${1:1:00}
     起床:${2:7:00}
     跑步:${3:5K}
     吉它:${4:0.5h}
     读书:${5:0.5h}
     Friends:${6:S01E01}
     Dota:${7:45m}
     早餐:${8:1}
     锻炼:${9:0+0}
     牛奶:${10:1}
   #+END_SRC

**** doxygen API

1. PDF vs HTML

   更喜欢 PDF，可以标注、搜索方便等

2. API vs Source Code

   更喜欢后者！

**** IDE
***** Emacs VS Vim

Emacs 更熟悉

Vim 慢慢来

***** IDE & project
***** 目标

- [ ] 头文件与源文件之间跳转
- [ ] 浏览Linux内核树
- [ ] 交互式大纲显示文件结构
- [ ] 以文件浏览器形式显示静态大纲树
- [ ] 符号引用
- [ ] 代码补全
- [ ] 头文件补全
- [ ] 在底部显示函数接口和变量定义
- [ ] 跳转到当前函数头
- [ ] 编译支持
- [ ] 编译输出
- [ ] GDB调试
- [ ] 查看手册

***** 头文件与源文件之间跳转

**** usb camera                                           :camera:web_cam:

#+BEGIN_EXAMPLE
   ~ $ fswebcam --no-banner -r 640x480 demo.jpg
  --- Opening /dev/video0...
  Trying source module v4l2...
  /dev/video0 opened.
  No input was specified, using the first.
  --- Capturing frame...
  Captured frame in 0.00 seconds.
  --- Processing captured image...
  Disabling banner.
  Writing JPEG image to 'demo.jpg'.
#+END_EXAMPLE
***** /dev/vedio*

/dev/video0

#+BEGIN_EXAMPLE
$ lsusb
Bus 001 Device 006: ID 1e4e:0102 Cubeternet GL-UPC822 UVC WebCam
#+END_EXAMPLE


***** fswebcam: Small and simple webcam software for *nix      :fswebcam:

- [[http://manpages.ubuntu.com/manpages/lucid/man1/fswebcam.1.html][Ubuntu manpages]]
- [[https://github.com/fsphil/fswebcam][github]]
- [[http://www.firestorm.cx/fswebcam/][Homepage]]
- http://www.bkjia.com/Linuxjc/992291.html

****** man                                                         :man:
******* NAME


fswebcam - Small and simple webcam for *nix.

******* SYNOPSIS


fswebcam [<options>] <filename> [[<options>] <filename> ... ]

******* DESCRIPTION


fswebcam  is  a  small  and  simple webcam app for *nix. It can capture
images  from  a  number  of  different  sources  and   perform   simple
manipulation  on  the  captured image. The image can be saved as one or
more PNG or JPEG files.

The PNG or JPEG image can be sent to stdio using the filename "-".  The
output filename is formatted by strftime.

******* CONFIGURATION

******** Configuration File

Config  files  use the long version of options without the "--" prefix.
Comments start with a # symbol at the beginning of the line.

******** General Options
-?, --help
       Show a usage summary.

-c, --config
       Load  options  from  a  file.  You can load more than one config
       file, and can mix them with command-line arguments.

       Note: This option can not be used from  within  a  configuration
       file.

-q, --quiet
       Hides all messages except errors.

-v, --verbose
       Print extra information during the capture process.

--version
       Print the version number and exit.

-l, --loop <frequency>
       Continually capture images. The time between images is specified
       in seconds.

       Default behaviour is to capture a single image and exit.

       Note: The time to capture the next image is calculated  relative
       to  the epoch, so an image will not be captured immediately when
       the program is first started.

--offset <seconds>
       Sets the offset to use when calculating when the next  image  is
       due in loop mode. Value can be positive or negative.

-b, --background
       Run  in  the background. In this mode stdout and console logging
       are unavailable.

--pid <filename>
       Saves the PID of the background process to the  specified  file.
       Ignored when not using background mode.

--log [file/syslog:]<filename>
       Redirect log messages to a file or syslog. For example

       --log output.log
       --log file:output.log
       --log syslog

--gmt  Use  GMT instead of the local timezone when formatting text with
       strftime.

******** Capture Options
-d, --device [<prefix>:]<device name>
       Set the source or device to use. The source module  is  selected
       automatically unless specified in the prefix.

       Default is /dev/video0.

       Available source modules, in order of preference:

       V4L2 - Capture images from a V4L2 compatible video device.
       V4L1 - Capture images from a V4L1 compatible video device.
       FILE - Capture an image from a JPEG or PNG image file.
       RAW - Reads images straight from a device or file.
       TEST - Draws colour bars.

-i, --input <input number or name>
       Set  the  input  to  use. You may select an input by either it’s
       number or name.

       Default is "0".

--list-inputs
       List available inputs for the selected source or device.

       fswebcam -d v4l2:/dev/video1 --list-inputs

-t, --tuner <tuner number>
       Set the tuner to use.

-f, --frequency <frequency>
       Set the frequency of the selected input or tuner. The value  may
       be read as KHz or MHz depending on the input or tuner.

-p, --palette <name>
       Try  to use the specified image format when capturing the image.

       Default is to select one automatically.

       Supported formats:

       PNG
       JPEG
       MJPEG
       RGB32
       RGB24
       BGR32
       BGR24
       YUYV
       UYVY
       YUV420P
       BAYER
       RGB565
       RGB555
       GREY

-r, --resolution <dimensions>
       Set the image resolution of the source  or  device.  The  actual
       resolution  used  may  differ  if  the  source  or device cannot
       capture at the specified resolution.

       Default is "384x288".

--list-framesizes
       Lists the supported resolutions for the selected source.

--list-framerates
       Lists the supported frame rates  for  the  selected  source  and
       resolution.

-F, --frames <number>
       Set the number of frames to capture. More frames mean less noise
       in the final image, however capture times  will  be  longer  and
       moving objects may appear blurred.

       Default is "1".

-S, --skip <number>
       Set  the number of frames to skip. These frames will be captured
       but won’t be use. Use this option if your camera sends some  bad
       or corrupt frames when it first starts capturing.

       Default is "0".

-D, --delay <delay>
       Inserts  a  delay after the source or device has been opened and
       initialised, and before the capture begins.  Some  devices  need
       this  delay to let the image settle after a setting has changed.
       The delay time is specified in seconds.

-R, --read
       Use read() to capture images. This can be slower but more stable
       with some devices.

       Default  is  to  use mmap(), falling back on read() if mmap() is
       unavailable.

-s, --set <name=value>
       Set a control. These are used by the source modules  to  control
       image or device parameters. Numeric values can be expressed as a
       percentage of there  maximum  range  or  a  literal  value,  for
       example:

       --set brightness=50% --set framerate=5

       Non-numeric controls are also supported:

       --set lights=on

       V4L2  features  a  type  of  control  called  a  ’button’. These
       controls do not take any  value,  but  trigger  an  action.  For
       example:

       --set "Restore Factory Settings"

       Control names and values are not case sensitive.

       Note:  Available  controls  will  vary  depending  in the source
       module  and  devices  used.  For  more   information   see   the
       --list-controls option.

--list-controls
       List  available  controls  and  their  current  values  for  the
       selected source module and device. For example:

       fswebcam -d v4l2:/dev/video2 --list-controls

******** Output Options
These options are performed in the order they  appear  on  the  command
line,  only  effecting  images  output  later  on the command line. For
example:

       fswebcam -r 640x480 output1.jpeg --scale 320x240 output2.jpeg

       Will  create  two  images,  "output1.jpeg"  containing  a   full
       resolution   copy  of  the  captured  image  and  "output2.jpeg"
       containing the same captured image but scaled to half the  size.

--no-banner
       Disable the banner.

--top-banner
       Position the banner at the top of the image.

--bottom-banner
       Position the banner at the bottom of the image.

       This is the default.

--banner-colour <#AARRGGBB>
       Set  the  colour  of  the banner. Uses the web-style hexadecimal
       format (#RRGGBB) to describe the  colour,  and  can  support  an
       alpha channel (#AARRGGBB). Examples:

       "#FF0000" is pure red.
       "#80000000" is semi-transparent black.
       "#FF000000" is invisible (alpha channel is at maximum).
       Default is "#40263A93".

--line-colour <#AARRGGBB>
       Set the colour of the divider line. See --banner-colour for more
       information.

       Default is "#00FF0000".

--text-colour <#AARRGGBB>
       Set the  colour  of  the  text.  See  --banner-colour  for  more
       information.

       Default is "#00FFFFFF".

--font <[file or font name]:[font size]>
       Set  the  font  used  in the banner. If no path is specified the
       path in the GDFONTPATH environment variable is searched for  the
       font.

       If no font size is specified the default of "10" will be used.

       Default is "luxisr:10".

--no-shadow
       Disable the text shadow.

--shadow
       Enable the text shadow.

       This is the default behaviour.

--title <text>
       Set the main text, located in the top left of the banner.

--no-title
       Clear the main text.

--subtitle <text>
       Set  the  sub-title  text,  located  in  the  bottom left of the
       banner.

--no-subtitle
       Clear the sub-title text.

--timestamp <text>
       Set the timestamp text, located in the top right of the  banner.
       This string is formatted by strftime.

       Default is "%Y-%m-%d %H:%M (%Z)".

--no-timestamp
       Clear the timestamp text.

--info <text>
       Set the info text, located in the bottom right of the banner.

--no-info
       Clear the info text.

--underlay <filename>
       Load  a PNG image and overlay it on the image, below the banner.
       The image is aligned to the top left.

       Note: The underlay is only applied when saving an image  and  is
       not modified by any of the image options or effects.

--no-underlay
       Clear the underlay image.

--overlay <filename>
       Load a PNG image and overlay on the image, above the banner. The
       image is aligned to the top left.

       Note: The overlay is only applied when saving an  image  and  is
       not modified by any of the image options or effects.

--no-overlay
       Remove the overlay image.

--jpeg <factor>
       Set JPEG as the output image format. The compression factor is a
       value between 0 and 95, or -1 for automatic.

       This is the default format, with a factor of "-1".

--png <factor>
       Set PNG as the output image format. The compression  factor  can
       be a value between 0 and 9, or -1 for automatic.

--save <filename>
       Saves the image to the specified filename.

       Note:  This isn’t necessary on the command-line where a filename
       alone is enough to save an image.

--revert
       Revert to the  original  captured  image  and  resolution.  This
       undoes all previous effects on the image.

       Note:  This  only reverts the image itself, and not options such
       as font, colours and overlay.

--flip <direction[,direction]>
       Flips the image. Direction can be  (h)orizontal  or  (v)ertical.
       Example:

       --flip h    Flips the image horizontally.
       --flip h,v  Flips the image both horizontally and vertically.

--crop <dimensions[,offset]>
       Crop  the  image.  With  no  offset the cropped area will be the
       center of the image. Example:

       --crop 320x240    Crops the center 320x240 area of the image.
       --crop 10x10,0x0  Crops the 10x10 area at the top left corner of
       the image.

--scale <dimensions>
       Scale the image.

       Example:  "--scale  640x480"  scales  the  image  up  or down to
       640x480.

       Note: The aspect ratio of the image is not maintained.

--rotate <angle>
       Rotate the image in right angles (90, 180 and 270 degrees).

       Note: Rotating the  image  90  or  270  degrees  will  swap  the
       dimensions.

--deinterlace
       Apply a simple deinterlacer to the image.

--invert
       Invert all the colours in the image, creating a negative.

--exec <command>
       Executes  the  specified  command  and  waits for it to complete
       before continuing. The command line is formatted by strftime.

******* SIGNALS

SIGHUP This causes fswebcam to reload it’s configuration.

SIGUSR1
       Causes fswebcam to capture an image immediately without  waiting
       on the timer in loop mode.

****** help                                                       :help:

#+BEGIN_EXAMPLE
   ~ $ fswebcam --help
  Usage: fswebcam [<options>] <filename> [[<options>] <filename> ... ]

   Options:

   -?, --help                   Display this help page and exit.
   -c, --config <filename>      Load configuration from file.
   -q, --quiet                  Hides all messages except for errors.
   -v, --verbose                Displays extra messages while capturing
       --version                Displays the version and exits.
   -l, --loop <seconds>         Run in loop mode.
   -b, --background             Run in the background.
   -o, --output <filename>      Output the log to a file.
   -d, --device <name>          Sets the source to use.
   -i, --input <number/name>    Selects the input to use.
   -t, --tuner <number>         Selects the tuner to use.
   -f, --frequency <number>     Selects the frequency use.
   -p, --palette <name>         Selects the palette format to use.
   -D, --delay <number>         Sets the pre-capture delay time. (seconds)
   -r, --resolution <size>      Sets the capture resolution.
       --fps <framerate>        Sets the capture frame rate.
   -F, --frames <number>        Sets the number of frames to capture.
   -S, --skip <number>          Sets the number of frames to skip.
       --dumpframe <filename>   Dump a raw frame to file.
   -s, --set <name>=<value>     Sets a control value.
       --revert                 Restores original captured image.
       --flip <direction>       Flips the image. (h, v)
       --crop <size>[,<offset>] Crop a part of the image.
       --scale <size>           Scales the image.
       --rotate <angle>         Rotates the image in right angles.
       --deinterlace            Reduces interlace artifacts.
       --invert                 Inverts the images colours.
       --greyscale              Removes colour from the image.
       --swapchannels <c1c2>    Swap channels c1 and c2.
       --no-banner              Hides the banner.
       --top-banner             Puts the banner at the top.
       --bottom-banner          Puts the banner at the bottom. (Default)
       --banner-colour <colour> Sets the banner colour. (#AARRGGBB)
       --line-colour <colour>   Sets the banner line colour.
       --text-colour <colour>   Sets the text colour.
       --font <[name][:size]>   Sets the font and/or size.
       --no-shadow              Disables the text shadow.
       --shadow                 Enables the text shadow.
       --title <text>           Sets the main title. (top left)
       --no-title               Clears the main title.
       --subtitle <text>        Sets the sub-title. (bottom left)
       --no-subtitle            Clears the sub-title.
       --timestamp <format>     Sets the timestamp format. (top right)
       --no-timestamp           Clears the timestamp.
       --gmt                    Use GMT instead of local timezone.
       --info <text>            Sets the info text. (bottom right)
       --no-info                Clears the info text.
       --underlay <PNG image>   Sets the underlay image.
       --no-underlay            Clears the underlay.
       --overlay <PNG image>    Sets the overlay image.
       --no-overlay             Clears the overlay.
       --jpeg <factor>          Outputs a JPEG image. (-1, 0 - 95)
       --png <factor>           Outputs a PNG image. (-1, 0 - 10)
       --save <filename>        Save image to file.
       --exec <command>         Execute a command and wait for it to complete.

#+END_EXAMPLE

***** uvc                                                           :uvc:

USB Video Class (UVC)

**** usb_cam

- http://wiki.ros.org/usb_cam

A ROS Driver for V4L USB Cameras

***** usb_cam_node

The =usb_cam_node= interfaces with standard USB cameras (e.g. the
Logitech Quickcam) using libusb_cam and publishes images as
sensor_msgs::Image. Uses the [[/image_transport][image_transport]]
library to allow compressed image transport.

****** Published Topics

=~<camera_name>/image=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The image

****** Parameters

=~video_device= (=string=, default: ="/dev/video0"=)

-  The device the camera is on.

=~image_width= (=integer=, default: =640=)

-  Image width

=~image_height= (=integer=, default: =480=)

-  Image height

=~pixel_format= (=string=, default: ="mjpeg"=)

-  Possible values are mjpeg, yuyv, uyvy

=~io_method= (=string=, default: ="mmap"=)

-  Possible values are mmap, read, userptr

=~camera_frame_id= (=string=, default: ="head_camera"=)

-  The camera's tf frame

=~framerate= (=integer=, default: =30=)

-  The required framerate

=~contrast= (=integer=, default: =32=)

-  Contrast of video image (0-255)

=~brightness= (=integer=, default: =32=)

-  Brightness of video image (0-255)

=~saturation= (=integer=, default: =32=)

-  Saturation of video image (0-255)

=~sharpness= (=integer=, default: =22=)

-  Sharpness of video image (0-255)

=~autofocus= (=boolean=, default: =false=)

-  Enable camera's autofocus

=~focus= (=integer=, default: =51=)

-  If autofocus is disabled, the focus of the camera (0=at infinity)

=~camera_info_url= (=string=, default: ==)

-  An url to the camera calibration file that will be read by the
   [[/CameraInfoManager][CameraInfoManager]] class

=~camera_name= (=string=, default: =head_camera=)

-  The camera name. This must match the name in the camera calibration

****** Related packages

[[/gencam_cu][gencam_cu]] - supports image capture from usb cameras
using OpenCV
**** 电源

- UTM

  [[/home/ben/Wally/Journal//Figure/scrot/151903Kb.png]]

- Microstrain

  [[/home/ben/Wally/Journal//Figure/scrot/15190EVh.png]]

- raspberry

  5V 1.2A
  - GPIO ： 50mA
  - HDMI : 50mA
  - Camera: 250mA
  - keyboard/mice: 100mA~1000mA

- LMS 291

  [[/home/ben/Wally/Journal//Figure/scrot/15190Rfn.png]]

Power

12*3 + 5*0.08 < 40W

https://e2e.ti.com/blogs_/b/powerhouse/archive/2015/09/16/high-density-pcb-layout-of-dc-dc-converters-part-2



***** 纹波

纹波(ripple)是由于直流稳定电源的电压波动而造成的一种现象，因为直流稳定电源一般
是由交流电源经整流稳压等环节而形成的，这就不可避免地在直流稳定量中多少
带有一些交流成份，这种叠加在直流稳定量上的交流分量就称之为纹波。纹波的
成分较为复杂，它的形态一般为频率高于工频的类似正弦波的谐波，另一种则是
宽度很窄的脉冲波。
**** latex 梯度                                                     :梯度:

\nabla

**** image_view

Released Continuous integration Documented

A simple viewer for ROS image topics. Includes a specialized viewer for
stereo + disparity images.

***** Usage

****** Viewing a single image topic

#+BEGIN_EXAMPLE
    image_view image:=<image topic> [image transport type]
#+END_EXAMPLE

For example, to view raw images on the topic =/camera/image=, use:

#+BEGIN_EXAMPLE
    image_view image:=/camera/image
#+END_EXAMPLE

You may save the current image by left-clicking on the display window.
By default, images will be saved as =frame0000.jpg=, =frame0001.jpg=,
.... }}}

If you want to view a compressed image stream (usually a good idea over
wireless!) using the capabilities of
[[/image_transport][image_transport]], specify the transport type as a
command-line argument. For example, if
[[/theora_image_transport][theora_image_transport]] is built on the
publisher's side, you can use =theora= transport:

#+BEGIN_EXAMPLE
    image_view image:=/camera/image theora
#+END_EXAMPLE

Note that this is merely shorthand equivalent to setting the
=~image_transport= parameter:

#+BEGIN_EXAMPLE
    image_view image:=/camera/image _image_transport:=theora
#+END_EXAMPLE

****** Viewing stereo images

#+BEGIN_EXAMPLE
    stereo_view stereo:=<stereo namespace> image:=<image topic identifier>
#+END_EXAMPLE

For example, to view stereo image pairs on topics
=/my_stereo_cam/left/image_rect_color= and
=/my_stereo_cam/right/image_rect_color=, use:

#+BEGIN_EXAMPLE
    stereo_view stereo:=/my_stereo_cam image:=image_rect_color
#+END_EXAMPLE

=stereo_view= also shows the disparity image computed from the stereo
pair, color-mapped for clarity.

You may save the current image pair by left-clicking on either display
window. By default, images will be saved as =left0000.jpg=,
=right0000.jpg=, =left0001.jpg=, =right0001.jpg=....

***** Nodes

****** image_view

Simple image viewer for ROS topics.
******* Subscribed Topics

=image=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The image topic. Should be remapped to the name of the real image
   topic.

******* Parameters

=~autosize= (=bool=, default: false)

-  Whether the window should autosize itself to the image or be
   resizeable by the user.

=~filename_format= (=string=, default: ="frame%04i.jpg"=)

-  printf-style format for saved image names. Use to control name,
   location and format of saved images.

=~image_transport= (=string=, default: ="raw"=)

-  Transport used for the image stream. =image_view= allows you to
   specify this as a simple command-line argument for convenience.

=~window_name= (=string=, default: name of the image topic)

-  The name of the display window.

****** stereo_view

Viewer for stereo images. Shows the left/right image pair and the
disparity image (color-mapped) computed from them.
******* Subscribed Topics

=<stereo>/left/<image>=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The left image topic. Formal parameters =stereo= and =image= should
   be remapped appropriately.

=<stereo>/right/<image>=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The right image topic. Formal parameters =stereo= and =image= should
   be remapped appropriately.

=<stereo>/disparity=
([[http://docs.ros.org/api/stereo_msgs/html/msg/DisparityImage.html][stereo_msgs/DisparityImage]])

-  The disparity image computed from the left/right stereo pair.

******* Parameters

=~autosize= (=bool=, default: true)

-  Whether the windows should autosize to the image or be resizeable by
   the user.

=~filename_format= (=string=, default: ="%s%04i.jpg"=)

-  printf-style format for saved image names. Use to control name,
   location and format of saved images. The string argument is ="left"=
   or ="right"=.

=~image_transport= (=string=, default: ="raw"=)

-  Transport used for the image streams.

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div
  class="version diamondback electric fuerte groovy hydro indigo jade">
#+END_HTML

#+BEGIN_HTML
  <div id="image_view.2BAC8-diamondback.content" dir="ltr" lang="en">
#+END_HTML

#+BEGIN_HTML
  <div class="table-of-contents">
#+END_HTML

Contents

1. [[#image_view.2BAC8-diamondback.Usage][Usage]]

   1. [[#image_view.2BAC8-diamondback.Viewing_a_single_image_topic][Viewing
      a single image topic]]
   2. [[#image_view.2BAC8-diamondback.Viewing_stereo_images][Viewing
      stereo images]]

2. [[#image_view.2BAC8-diamondback.Nodes][Nodes]]

   1. [[#image_view.2BAC8-diamondback.image_view][image_view]]
   2. [[#image_view.2BAC8-diamondback.disparity_view][disparity_view]]
   3. [[#image_view.2BAC8-diamondback.stereo_view][stereo_view]]

3. [[#image_view.2BAC8-diamondback.Nodelets][Nodelets]]

   1. [[#image_view.2BAC8-diamondback.image_view.2BAC8-image][image_view/image]]
   2. [[#image_view.2BAC8-diamondback.image_view.2BAC8-disparity][image_view/disparity]]

4. [[#image_view.2BAC8-diamondback.Tools][Tools]]

   1. [[#image_view.2BAC8-diamondback.image_saver][image_saver]]
   2. [[#image_view.2BAC8-diamondback.extract_images][extract_images]]
   3. [[#image_view.2BAC8-diamondback.video_recorder][video_recorder]]

#+BEGIN_HTML
  </div>
#+END_HTML

***** Usage

****** Viewing a single image topic

#+BEGIN_EXAMPLE
    rosrun image_view image_view image:=<image topic> [image transport type]
#+END_EXAMPLE

For example, to view raw images on the topic =/camera/image=, use:

#+BEGIN_EXAMPLE
    rosrun image_view image_view image:=/camera/image
#+END_EXAMPLE

You may save the current image by right-clicking on the display window.
By default, images will be saved as =frame0000.jpg=, =frame0001.jpg=,
....

If you want to view a compressed image stream (usually a good idea over
wireless!) using the capabilities of
[[/image_transport][image_transport]], specify the transport type as a
command-line argument. For example, if
[[/theora_image_transport][theora_image_transport]] is built on the
publisher's side, you can use =theora= transport:

#+BEGIN_EXAMPLE
    rosrun image_view image_view image:=/camera/image theora
#+END_EXAMPLE

Note that this is merely shorthand equivalent to setting the
=~image_transport= parameter:

#+BEGIN_EXAMPLE
    rosrun image_view image_view image:=/camera/image _image_transport:=theora
#+END_EXAMPLE

****** Viewing stereo images

#+BEGIN_EXAMPLE
    rosrun image_view stereo_view stereo:=<stereo namespace> image:=<image topic identifier>
#+END_EXAMPLE

For example, to view stereo image pairs on topics
=/my_stereo_cam/left/image_rect_color= and
=/my_stereo_cam/right/image_rect_color=, use:

#+BEGIN_EXAMPLE
    rosrun image_view stereo_view stereo:=/my_stereo_cam image:=image_rect_color
#+END_EXAMPLE

=stereo_view= also shows the disparity image computed from the stereo
pair, color-mapped for clarity.

You may save the current image pair by right-clicking on any display
window. By default, images will be saved as =left0000.jpg=,
=right0000.jpg=, =disp0000.jpg=, =left0001.jpg=, =right0001.jpg=,
=disp0001.jpg=.... As with =image_view=, you can specify an image
transport to use for the left and right image as an optional argument.

***** Nodes

****** image_view

Simple image viewer for ROS
[[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]]
topics.
******* Subscribed Topics

=image=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The image topic. Should be remapped to the name of the real image
   topic.

******* Parameters

=~autosize= (=bool=, default: false)

-  Whether the window should autosize itself to the image or be
   resizeable by the user.

=~filename_format= (=string=, default: ="frame%04i.jpg"=)

-  printf-style format for saved image names. Use to control name,
   location and format of saved images.

=~image_transport= (=string=, default: ="raw"=)

-  Transport used for the image stream. =image_view= allows you to
   specify this as a simple command-line argument for convenience.

=~window_name= (=string=, default: name of the image topic)

-  The name of the display window.

****** disparity_view

Simple viewer for
[[http://docs.ros.org/api/stereo_msgs/html/msg/DisparityImage.html][stereo_msgs/DisparityImage]]
topics. Color-maps the disparity image for visualization.
******* Subscribed Topics

=image=
([[http://docs.ros.org/api/stereo_msgs/html/msg/DisparityImage.html][stereo_msgs/DisparityImage]])

-  The disparity image topic. Should be remapped to the name of the real
   topic.

******* Parameters

=~autosize= (=bool=, default: false)

-  Whether the window should autosize itself to the image or be
   resizeable by the user.

=~window_name= (=string=, default: name of the image topic)

-  The name of the display window.

****** stereo_view

Viewer for stereo images. Shows the synchronized left/right image pair
and the disparity image (color-mapped) computed from them.
******* Subscribed Topics

=<stereo>/left/<image>=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The left image topic. Formal parameters =stereo= and =image= should
   be remapped appropriately.

=<stereo>/right/<image>=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The right image topic. Formal parameters =stereo= and =image= should
   be remapped appropriately.

=<stereo>/disparity=
([[http://docs.ros.org/api/stereo_msgs/html/msg/DisparityImage.html][stereo_msgs/DisparityImage]])

-  The disparity image computed from the left/right stereo pair.

******* Parameters

=~autosize= (=bool=, default: true)

-  Whether the windows should autosize to the image or be resizeable by
   the user.

=~filename_format= (=string=, default: ="%s%04i.jpg"=)

-  printf-style format for saved image names. Use to control name,
   location and format of saved images. The string argument is ="left"=
   or ="right"=.

=~image_transport= (=string=, default: ="raw"=)

-  Transport used for the image streams.

=~approximate_sync= (=bool=, default: false)

-  Whether to use approximate synchronization. Set to true if the left
   and right cameras do not produce exactly synced timestamps.

=~queue_size= (=int=, default: 5)

-  Size of message queue for each synchronized topic. You may need to
   raise this if disparity processing takes too long, or if there are
   significant network delays.

***** Nodelets

****** image_view/image

Nodelet version of image_view. Brings up a display window for a
[[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]]
topic.
******* Subscribed Topics

=image=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The image topic. Should be remapped to the name of the real image
   topic.

******* Parameters

=~autosize= (=bool=, default: false)

-  Whether the window should autosize itself to the image or be
   resizeable by the user.

=~filename_format= (=string=, default: ="frame%04i.jpg"=)

-  printf-style format for saved image names. Use to control name,
   location and format of saved images.

=~image_transport= (=string=, default: ="raw"=)

-  Transport used for the image stream. =image_view= allows you to
   specify this as a simple command-line argument for convenience.

=~window_name= (=string=, default: name of the image topic)

-  The name of the display window.

****** image_view/disparity

Nodelet version of disparity_view. Brings up a display window for a
[[http://docs.ros.org/api/stereo_msgs/html/msg/DisparityImage.html][stereo_msgs/DisparityImage]]
topic, color-mapped for visualization.
******* Subscribed Topics

=image=
([[http://docs.ros.org/api/stereo_msgs/html/msg/DisparityImage.html][stereo_msgs/DisparityImage]])

-  The disparity image topic. Should be remapped to the name of the real
   topic.

******* Parameters

=~autosize= (=bool=, default: false)

-  Whether the window should autosize itself to the image or be
   resizeable by the user.

=~window_name= (=string=, default: name of the image topic)

-  The name of the display window.

#+BEGIN_HTML
  <div class="version hydro_and_newer">
#+END_HTML

***** Tools

****** image_saver

This tool allows you to save images as jpg/png file from streaming (ROS
[[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]]
topic) to a file.
******* Subscribed Topics

=image=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The image topic. Should be remapped to the name of the real image
   topic.

******* Services

=save=
([[http://docs.ros.org/api/std_srvs/html/srv/Empty.html][std_srvs/Empty]])

-  Save images, you need to set save_all_images to false

******* Parameters

=~filename_format= (=string=, default: =left%04d.%s=)

-  File name for saved images, you can use '%04i' for sequence number,
   and '%s' for default file format, you can use 'jpg' ,'png', 'pgm' as
   filename suffixes.

=~encoding= (=string=, default: 'bgr8')

-  Encoding type of input image topic.

=~save_all_image= (=bool=, default: true)

-  If you set false, images are only saved when 'save' service is called

****** extract_images

This tool also allows you to save images as jpg/png file from streaming
(ROS
[[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]]
topic) to a file. =image_saver= node provide very similar
functionalities, such as providing service call to trigger the node to
save images, save images other than Jpeg format, etc.
******* Subscribed Topics

=image=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The image topic. Should be remapped to the name of the real image
   topic.

******* Parameters

=~filename_format= (=string=, default: =frame%04d.jpg=)

-  File name for saved images, you must add use '%04i' for sequence
   number.

=~sec_per_frame= (=double=, default: '0.1')

-  set sec per frame value.

****** video_recorder

This tool allows you to record a video stream (ROS
[[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]]
topic) to a file. It relies on
[[http://docs.opencv.org/modules/highgui/doc/reading_and_writing_images_and_video.html#videowriter][OpenCV's
VideoWriter class]]. With the default options, it encodes the video as
MPG, encapsulated in a AVI container at 15 fps, and produces a file
called =output.avi= in the current directory.
******* Subscribed Topics

=image=
([[http://docs.ros.org/api/sensor_msgs/html/msg/Image.html][sensor_msgs/Image]])

-  The image topic. Should be remapped to the name of the real image
   topic.

******* Parameters

=~filename= (=string=, default: =output.avi=)

-  Path and name of the output video.

=~fps= (=int=, default: 15)

-  Framerate of the video.

=~codec= (=string=, default: =MJPG=)

-  The [[http://www.fourcc.org/codecs.php][FOURCC]] identifier of the
   codec.

=~encoding= (=string=, default: =bgr8=)

-  The image color space of the video.
*** 2016/01/06
**** vtk: Visualization Toolkit

The *Visualization Toolkit* (VTK) is an *open-source*, freely available
software system for _3D computer graphics, image processing, and
visualization._ It consists of =a C++ class library= and several
interpreted =interface= layers including Tcl/Tk, Java, and
*Python*. Kitware, whose team created and continues to extend the
toolkit, offers professional support and consulting services for
VTK. VTK supports a wide variety of *visualization algorithms* including
scalar, vector, tensor, texture, and volumetric methods, as well as
advanced modeling techniques such as implicit modeling, polygon
reduction, mesh smoothing, cutting, contouring, and Delaunay
triangulation. VTK has an extensive information visualization
framework and a suite of 3D interaction widgets. The toolkit supports
parallel processing and integrates with various databases on GUI
toolkits such as *Qt and Tk*. VTK is *cross-platform* and runs on Linux,
Windows, Mac, and Unix platforms.

**** org-download

- https://github.com/abo-abo/org-download


#+BEGIN_SRC emacs-lisp
  (require 'org-download)
  (setq org-download-method 'directory)
  (setq-default org-download-image-dir
                (concat (getenv "JOURNAL-WS") "/Figure/.org-download")) ; org-down 文件命名有时会比较丑，所以放在隐藏文件夹下
  (setq org-download-heading-lvl nil)
  (setq org-download-timestamp "_%Y-%m-%d_%H:%M:%S")
  ;; (define-key org-mode-map "\C-c\M-s" 'org-download-screenshot)
  (define-key org-mode-map "\C-c\M-y" 'org-download-yank)
  (setq org-download-backend "wget \"%s\" -O \"%s\"")
#+END_SRC

1. 从 chrome 中拖拽不管用

   委曲求全： 右键图片，复制图片网址， *org-download-image*

   #+BEGIN_EXAMPLE
     org-download-image is an interactive compiled Lisp function in
     `org-download.el'.

     (org-download-image LINK)

     Save image at address LINK to `org-download--dir'.
   #+END_EXAMPLE

2. 从 Firefox 中拖拽起作用
3. 从系统的文件管理器中拖拽起作用

*** 2016/01/04
**** chrome 下载文件命名编码

1. why?

   百度云打包下载的压缩文件命名正确，解压后出现乱码

2. 设置 chrome 字体编码

   http://jingyan.baidu.com/article/e52e36154b3ff640c70c515f.html
   http://www.tuicool.com/articles/VjInAf

   扳手-------->Settings（设置）-------->ShowAdvance Settings（显示高
   级设置）-------->Web Content（网页内容）-------->Customizefonts（自
   定义字体）-------->Encoding（编码）

3. 不是 chrome 的问题，是百度云的问题，没解决，不重要

   http://www.zhihu.com/question/28144692

**** RS232                                                         :rs232:
***** RS-232 Wiki


*RS-232* 是美国[[/wiki/%E7%94%B5%E5%AD%90%E5%B7%A5%E4%B8%9A%E8%81%94%E7%9B%9F][电子工业联盟]]（EIA）制定的串行数据通信的接口标准。它被广
泛用于计算机串行接口外设连接。


它規定連接[[/wiki/%E9%9B%BB%E7%BA%9C][電纜]]和[[/wiki/%E6%A9%9F%E6%A2%B0][機械]]、[[/wiki/%E9%9B%BB%E6%B0%A3][電氣]]特性、信號功能及傳送過程。其他常用電氣標準還有
[[/wiki/EIA-422][EIA-RS-422-A]]、[[/w/index.php?title=EIA-423&action=edit&redlink=1][EIA-RS-423A]]、[[/wiki/RS-485][EIA-RS-485]]。

由於RS-232-C的重大影響，即使自IBM [[/wiki/PC/AT][PC/AT ]]開始改用9針連接器起，目前已幾
乎不再使用RS-232中規定的25針連接器，但大多數人仍然普遍使用RS-232C來代
表此一介面。

****** 标准的细节

在RS-232标准中，字符是以一序列的位元串来一个接一个的[[/w/index.php?title=%E4%B8%B2%E5%88%97&action=edit&redlink=1][串列]]（serial）方式
傳輸，優點是傳輸線少，配線簡單，傳送距離可以較遠。最常用的编码格式是异
步起停（asynchronous start-stop）格式，它使用一个起始位元后面紧跟7或8
个数据位元（bit），然后是可选的奇偶校验位元，最后是一或两个停止位元。
所以发送一个字符至少需要10位元，带来的一个好的效果是使全部的传输速率，
发送信号的速率以10划分。一个最平常的代替异步起停方式的是使用[[/wiki/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6][高级数据链
路控制]]协议（HDLC）。

在RS-232标准中定义了逻辑一和逻辑零电压级数，以及标准的传输速率和连接器
类型。信号大小在正的和负的3－15v之间。RS-232规定接近零的电平是无效的，
逻辑一规定为负电平，有效负电平的信号状态称为传号marking，它的功能意义
为OFF，逻辑零规定为正电平，有效正电平的信号状态称为空号spacing，它的功
能意义为ON。根据设备供电电源的不同，±5、±10、±12和±15这样的电平都
是可能的。


******* 连接器

RS-232設計之初是用來連接數據機做傳輸之用，也因此它的腳位意義通常也和數
據機傳輸有關。RS-232的设备可以分为数据终端设备（DTE，Data Terminal
Equipment, For example, PC）和数据通信设备（DCE，Data Communication
Equipment）两类，这种分类定义了不同的线路用来发送和接受信号。一般来说，
计算机和终端设备有DTE连接器，调制解调器和打印机有DCE连接器。但是这么说
并不是总是严格正确的，用配线分接器测试连接，或者用试误法来判断电缆是否
工作，常常需要参考相关的文件说明。

RS-232指定了20个不同的信号连接，由25个D-sub（微型D类）管脚构成的DB-25
连接器。

很多设备只是用了其中的一小部分管脚，出于节省资金和空间的考虑不少机器采
用较小的连接器，特别是9管脚的D-sub或者是 *DB-9* 型连接器被广泛使用绝大
多数自IBM的AT机之后的PC机和其他许多设备上。DB-25 和 DB-9 型的连接器在大部
分设备上是雌型，但不是所有的都是这样。

下表中列出的是被较多使用的RS-232中的信号和管脚分配：

#+BEGIN_EXAMPLE
               DE-9 Male（Pin Side）                   DE-9 Female (Pin Side）
                 -------------                          -------------
                 \ 1 2 3 4 5 /                          \ 5 4 3 2 1 /
                  \ 6 7 8 9 /                            \ 9 8 7 6 /
                   ---------                              ---------
#+END_EXAMPLE

| 信号                | DB-25 | DE-9 | EIA/TIA 561 | Yost |
|---------------------+-------+------+-------------+------|
| 公共接地            |     7 |    5 |           4 |  4,5 |
| 发送数据（TD、TXD） |     2 |    3 |           6 |    3 |
| 接受数据（RD、RXD） |     3 |    2 |           5 |    6 |
| 数据终端准备（DTR） |    20 |    4 |           3 |    2 |
| 数据准备好（DSR）   |     6 |    6 |           1 |    7 |
| 请求发送（RTS）     |     4 |    7 |           8 |    1 |
| 清除发送（CTS）     |     5 |    8 |           7 |    8 |
| 数据载波检测（DCD） |     8 |    1 |           2 |    7 |
| 振铃指示（RI）      |    22 |    9 |           1 |   － |

| 腳位 | 簡寫 | 意義                | 說明                           |
|------+------+---------------------+--------------------------------|
| Pin1 | CD   | Carrier Detect      | 數據機通知電腦有載波被偵測到。 |
| Pin2 | RXD  | Receiver            | 接收資料。                     |
| Pin3 | TXD  | Transmit            | 傳送資料。                     |
| Pin4 | DTR  | Data Terminal Ready | 電腦告訴數據機可以進行傳輸。   |
| Pin5 | GND  | Ground              | 地線。                         |
| Pin6 | DSR  | Data Set Ready      | 數據機告訴電腦一切準備就緒。   |
| Pin7 | RTS  | Request To Send     | 電腦要求數據機將資料送出。     |
| Pin8 | CTS  | Clear To Send       | 數據機通知電腦可以傳資料過來。 |
| Pin9 | RI   | Ring Indicator      | 數據機通知電腦有電話進來。     |

TXD DTE->DCE DTE SEND DATA

RXD DCE->DTE DTE RECEIVE DATA

RTS DTE->DCE DTE REQUEST SEND

CTS DCE->DTE ACK TO DTE'S RTS

DSR DCE->DTE DCE IS READY

GND

DCD DCE->DTE DC DETECTED

DTR DTE->DCE DTE IS READY

RI DCE->DTE RING INDICATION

信号的标注是从DTE设备的角度出发的，TD、DTR和RTS信号是由DTE产生的，RD、DSR、CTS、DCD和RI信号是由DCE产生的。接地信号是所有连接都公共的，在Yost的标准中接地信号外部有两个管脚事实上是同一个信号。如果两个通信设备的距离相差的很远或者是有两个不同的供电系统供电，那么地信号在两个设备间会不一样，从而导致通信失败，跟踪描述这样的情形是很困难的。

******* 设置

串行通信在软件设置里需要做多项设置，最常见的设置包括[[/wiki/%E6%B3%A2%E7%89%B9%E7%8E%87][波特率]]（Baud）、奇偶校验（Parity
Check）和停止位（Stop Bit）。

-  波特率（又称[[/wiki/%E9%AE%91%E7%8E%87][鮑率]]）：是指从一设备发到另一设备的波特率，即每秒钟多少符號。典型的波特率是300,
   1200, 2400, 9600, 19200,
   115200等。一般通信两端设备都要设为相同的波特率，但有些设备也可设置为自动检测波特率。

-  奇偶校验（Parity：是用来验证数据的正确性。奇偶校验一般不使用，如果使用，那么既可以做奇校验（Odd
   Parity）也可以做偶校验（Even
   Parity）。奇偶校验是通过修改每一发送字节（也可以限制发送的字节）来工作的。如果不作奇偶校验，那么数据是不会被改变的。在偶校验中，因为奇偶校验位会被相应的置1或0（一般是最高位或最低位），所以数据会被改变以使得所有传送的数位（含字符的各数位和校验位）中“1”的个数为偶数；在奇校验中，所有传送的数位（含字符的各数位和校验位）中“1”的个数为奇数。奇偶校验可以用于接受方检查传输是否发送生错误------如果某一字节中“1”的个数发生了错误，那么这个字节在传输中一定有错误发生。如果奇偶校验是正确的，那么要么没有发生错误要么发生了偶数个的错误。如果使用者選擇資料長度為8位元，則因為沒有多餘的位元可被用來作為同位元，因此就叫做「非奇偶校验（Non
   Parity）」。

-  停止位：是在每个字节传输之后发送的，它用来帮助接受信号方硬件重同步。

RS-232在傳送資料時，並不需要另外使用一條傳輸線來傳送同步訊號，就能正確
的將資料順利傳送到對方，因此叫做「非同步傳輸」，簡稱UART（Universal
Asynchronous Receiver Transmitter），不過必須在每一筆資料的前後都加上
同步訊號，把同步訊號與資料混和之後，使用同一條傳輸線來傳輸。

在串行通信软件设置中D/P/S是常规的符号表示。8/N/1（非常普遍）表明8bit数
据，没有奇偶校验，1bit停止位。数据位可以设置为5、6、7或者8位元（不可以
大於8或小於5），奇偶校验位可以设置为无（N）、奇（O）或者偶（E），奇偶
校验可以使用数据中的位元（bit），所以8/E/1就表示一共8位数据位，其中一
位用来做奇偶校验位。停止位可以是1、1.5或者2位的（1.5是用在波特率为
60wpm的电传打字机上的）。


-  流量控制：当需要发送[[/wiki/%E6%8F%A1%E6%89%8B%E4%BF%A1%E5%8F%B7][握手信号]]或数据完整性检测时需要制定其他设置。公用的组合有RTS/CTS,
   DTR/DSR或者XON/XOFF（实际中不使用连接器管脚而在数据流内插入特殊字符）。

****** 類似規範

-  [[/wiki/%E5%9B%BD%E9%99%85%E7%94%B5%E4%BF%A1%E8%81%94%E7%9B%9F%E8%BF%9C%E7%A8%8B%E9%80%9A%E4%BF%A1%E6%A0%87%E5%87%86%E5%8C%96%E7%BB%84][ITU-T]]（前CCITT）的對應規範，用語不同，但電氣規格幾乎相同

   -  ITU-T V.28

-  具有相似的通信目的，但功能與電氣規範不同

   -  [[/wiki/RS-422][RS-422]]
   -  [[/w/index.php?title=RS-423&action=edit&redlink=1][RS-423]]
   -  [[/wiki/RS-449][RS-449]]
   -  [[/wiki/RS-485][RS-485]]

****** 外部連結

-  [[http://www.zywyn.com.tw/index.php][RS-232 professional maker (ZYWYN.com）]]
-  [[http://www.camiresearch.com/Data_Com_Basics/RS232_standard.html][RS-232 tutorial]]
-  [[http://www.yost.com/Computers/RJ45-serial/][Yost Serial Device Wiring Standard]]
-  [[http://www.acumeninstruments.com/Support/documentation/SerialPortBasics/index.shtml][Serial Port Basics]]
-  [[http://www.lammertbies.nl/comm/info/RS-232.html][RS232 serial port info]]
-  [[http://www.tronisoft.com/rs232info/ASCII_serial_port_crib_sheets.pdf][Printable ASCII Serial Port Crib Sheets]]

***** RS232

- http://c.biancheng.net/cpp/html/1919.html

标准串口，在物理结构上分为 9 针的和 9 孔的，习惯上我们也称之为公头和母
头

[[/home/ben/Wally/Journal//Figure/scrot/2983mBR.png]]

RS232 接口一共有 9 个引脚，分别定义是：1、载波检测 DCD；2、接收数据
RXD；3、发送数据 TXD；4、数据终端准备好 DTR；5、信号地线 SG；6、数据准
备好 DSR；7、请求发送 RTS；8、清除发送 CTS；9、振铃提示 RI。我们要让这
个串口和我们单片机进行通信，我们只需要关心其中的 2 脚 RXD、3 脚 TXD 和
5 脚 GND 即可。

虽然这三个引脚的名字和我们单片机上的串口名字一样，但是却不能直接和单片
机对连通信，这是为什么呢？随着我们了解的内容越来越多，我们得慢慢知道，
不是所有的电路都是 5V 代表高电平而 0V 代表低电平的。对于 RS232 标准来
说，它是个反逻辑，也叫做负逻辑。为何叫负逻辑？它的 TXD 和 RXD 的电
压，-3V～-15V 电压代表是 1，+3～+15V 电压代表是 0。低电平代表的是 1，
而高电平代表的是 0，所以称之为负逻辑。因此电脑的 9 针 RS232串口是不能
和单片机直接连接的，需要用一个电平转换芯片 MAX232 来完成.

[[/home/ben/Wally/Journal//Figure/scrot/2983zLX.png]]

 RS232 串口和 UART 串口，它们的协议类型是一样的，只是电平标准不同而已，
 而 MAX232 这个芯片起到的就是中间人的作用，它把 UART 电平转换成 RS232
 电平，也把 RS232 电平转换成 UART 电平，从而实现标准 RS232接口和单片机
 UART 之间的通信连接。

***** RS485                                                       :rs485:
****** EIA-485 wiki                                               :wiki:

*EIA-485*（过去叫做*RS-485*或者*RS485*）是隶属于[[/wiki/OSI%E6%A8%A1%E5%9E%8B][OSI模型]][[/wiki/%E7%89%A9%E7%90%86%E5%B1%82][物理层]]的电气特
性规定为2线，[[/wiki/%E5%8D%8A%E9%9B%99%E5%B7%A5][半双工]]，多点通信的标准。它的电气特性和[[/wiki/RS-232][RS-232]]不大一样。用
缆线两端的[[/wiki/%E7%94%B5%E5%8E%8B][电压]]差值来表示传递信号，1极的电压标识为逻辑1，另一段标识为逻
辑0。两端的电压差最小为0.2V以上时有效，任何不大于12V或者不小于－7V的差
值对接受端都被认为是正确的。

EIA-485仅仅规定了接受端和发送端的电气特性。它没有规定或推荐任何数据协
议。EIA-485可以应用于配置便宜的[[/wiki/%E5%B9%BF%E5%9F%9F%E7%BD%91][广域网]]和采用单机发送，多机接受通信链接。
它提供高速的数据通信速率（10m时35[[/w/index.php?title=Bitrate&action=edit&redlink=1][Mbit/s]]；1200m时100[[/w/index.php?title=Bitrate&action=edit&redlink=1][kbit/s]]1200m）。

EIA-485和[[/wiki/EIA-422][EIA-422]]一样使用双绞线进行高电压差分平衡传输，它可以进行大面积
长距离传输（超过4000[[http://zh.wikipedia.org/wiki/%E8%8B%B1%E5%B0%BA][英尺]]，1200米）。

和EIA-422相对照的是，EIA-422采用不可转换的单发送端，EIA-485的发送端需
要设置为发送模式，这使得EIA-485可以使用双线模式实现真正的多点双向通信。

EIA-485推荐使用在点对点网络中，线型、总线型，不能是星型、环型网络。理
想情况下EIA-485需要2个终接电阻，其阻值要求等于传输电缆的特性阻抗。没有
特性阻抗的话，当所有的设备都静止或者没有能量的时候就会产生噪声，而且线
移需要双端的电压差。没有终接电阻的话，会使得较快速的发送端产生多个数据
信号的边缘，这其中的一些是不正确的。之所以不能使用星型或者环型的拓扑结
构是由于这些结构有不必要的反映，过低或者过高的终接电阻可以产生电磁干扰。

EIA-485在使用四线时可以和EIA-422一样实现[[/wiki/%E5%85%A8%E9%9B%99%E5%B7%A5][全双工]]。EIA-485可以实现真正的
多点通信，在许多情况下并没有什么用处。在某些限制条件下，EIA-485和
EIA-422可以实现相互的连接。

******* 比较

下面的表格列出了RS-485的一些特性和引脚的分配以及和[[/wiki/RS-232][RS-232]]的比较：

| EIA-485                    | [[/wiki/RS-232][RS-232]]                    | [[/w/index.php?title=D-subminiature&action=edit&redlink=1][DB-25]] | [[/w/index.php?title=D-subminiature&action=edit&redlink=1][DE-9]] | [[/w/index.php?title=RJ-50&action=edit&redlink=1][RJ-50]] |
|----------------------------+---------------------------+-------+------+-------|
| Common Ground              | Carrier Detect（DCD）     |     8 |    1 |    10 |
| Clear To Send +（CTS+）    | Received Data (RD)        |     3 |    2 |     9 |
| Ready To Send +（RTS+）    | Transmitted Data (TD)     |     2 |    3 |     8 |
| Received Data +（RxD+）    | Data Terminal Ready (DTR) |    20 |    4 |     7 |
| Received Data -（RxD-）    | Common Ground             |     7 |    5 |     6 |
| Clear To Send -（CTS-）    | Data Set Ready (DSR)      |     6 |    6 |     5 |
| Ready To Send -（RTS-）    | Request To Send (RTS)     |     4 |    7 |     4 |
| Transmitted Data +（TxD+） | Clear To Send (CTS)       |     5 |    8 |     3 |
| Transmitted Data -（TxD-） | Ring Indicator (RI)       |    22 |    9 |     2 |

**** Navigator

***** note

1. STM32 主控
2. 模块化： 每一个模块通过 CAN 或 UART 可以发送命令或接收数据
3. 可编程！！！
4. 有内部使用的CAN控制器
5. 使用CAN

***** 需要用它干嘛？

1. 获取编码器数据用于计算位置
2. 发送控制指令
3. 指令的封装？？ ROS how?

***** 暂时没有能力做这件事情。。。。

***** 复制到 Reference 目录下新建的 Product 文件夹下

**** auctex 按键绑定移植到 org 中

C-c C-f 前缀

#+BEGIN_EXAMPLE
  C-a                          \mathcal{ }
  C-b        \textbf{ }         \mathbf{ }
  C-c        \textsc{ }
  C-e          \emph{ }
  C-f        \textsf{ }         \mathsf{ }
  TAB        \textit{ }         \mathit{ }
  RET        \textmd{ }
  C-n    \textnormal{ }     \mathnormal{ }
  C-r        \textrm{ }         \mathrm{ }
  C-s        \textsl{ }         \mathbb{ }
  C-t        \texttt{ }         \mathtt{ }
  C-u        \textup{ }
  C-d  -- delete font
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  ;; (mapc (lambda(key-macro)
  ;;         (define-key org-mode-map (format "\C-cf%s" (car key-macro)) '(insert (cdr key-macro))))
  ;;       '(("i" "\\mathit{}")            ; note: escapte needed
  ;;         ("I" "\\textit{}")
  ;;         ("b" "\\mathbf{}")
  ;;         ("B" "\\textbf{}")))

  (define-key org-mode-map "\C-cfi" '(insert "\\mathbf{}"))
#+END_SRC

1. 不能使用 C-c C-f 作为前缀，因为已经绑定了
2. 不如使用 yasnippet

#+BEGIN_EXAMPLE
# -*- mode: snippet; require-final-newline: nil -*-
# name: mb:latex-mathbf
# key: mb
# binding: direct-keybinding
# --
\mathbf{$0}
#+END_EXAMPLE

**** IMU

project imutb simulation

*** 2016/01/03
**** BBDB: 通讯录管理
***** Reference

- [[http://savannah.nongnu.org/projects/bbdb/][Homepage]]
- [[http://bbdb.sourceforge.net/][Sourceforge(旧的项目主页)]]
- [[http://www.emacswiki.org/emacs/CategoryBbdb][EmacsWiki: Bddb category]]
- [[https://github.com/emacs-china/hello-emacs/blob/master/bbdb%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.org][Github 上的中文教程]]

***** Intro

BBDB is the Insidious =Big Brother Database= for GNU Emacs. It provides
_an address book for email and snail mail addresses, phone numbers and
the like_. It can be linked with various Emacs mail clients (Message
and Mail mode, Rmail, Gnus, MH-E, and VM). BBDB is fully customizable.

#+BEGIN_QUOTE
big brother DB, 用来管理数据的，比如mailing address book等等，和Gnus搭
配着用。Zawinski写的。

BBDB我主要是用来做通讯录管理， 它与gnus发邮件互通， 效果十分好。

BBDB里， 头像支持图片。 然后写一小段lisp代码， 它BBDB的数据转成vCard通
讯录格式， 定期同步到手机上。

#+END_QUOTE
***** 概念

- [[http://baike.baidu.com/link?url=WuKUitPM002pg1xs8GguhXm4nV8pqZcnY47opo6WmnfAz3QmGv3nMdJ3kDst5yP8_dv2pe3sBv7_dkCoopOFmK][vCard]]: 电子名片
- csv：网络交易平台商品信息数据包

***** 安装

1. 源码方式
2. Melpa

   #+BEGIN_EXAMPLE
     I bbdb               20151114.... available  melpa      The Insidious Big Brother Database for GNU Emacs
     I bbdb-android       20150705.... available  melpa      Android phone contacts import/export for BBDB
     I bbdb-china         20150615.... available  melpa      BBDB utils, which let Chinese BBDB users feel easy
     I bbdb-vcard         20150713.... available  melpa      vCard import/export for BBDB
   #+END_EXAMPLE

***** 使用

1. M-x bbdb-xxxx
2. M-x bbdb-vcard-xxx

***** bbdb简单使用教程

#  Github 上使用 org-mode 写的教程，相当不错

****** 配置

最简单的配置方法就是将下面的语句放入Emacs初始化文件中

#+BEGIN_SRC emacs-lisp
  (require 'bbdb)
  (bbdb-initialize)
#+END_SRC

这里的`bbdb-initialize'会初始化bbdb,并开启最基本的查询/维护记录功能.

除了最基本的查询/维护记录功能外,bbdb还有一些与其他package联合使用的特性,要开启这些特性,则需要在调用`bbdb-initialize'时传入其他的参数.

`bbdb-initialize'可以接收一系列的symbol作为参数,这些symbol决定了bbdb初始化时会开启与哪些package交互的特性. 这些symbol的说明如下表所示:
#+NAME: bbdb-initialize参数说明
| symbol  | meaning                                                               |
|---------+-----------------------------------------------------------------------|
| gnus    | Gnus mail/news reader. *should probably also pass the message symbol* |
| mh-e    | MH-E mail reader.                                                     |
| rmail   | Rmail mail reader.                                                    |
| vm      | VM mail reader.                                                       |
| mail    | Mail (M-x mail).                                                      |
| message | Message mode.                                                         |
| anniv   | Anniversaries in Emacs diary.                                         |
| sc      | Supercite.                                                            |
| pgp     | PGP support:                                                          |

******* 为其他package增加BBDB支持
bbdb提供了一系列的`bbdb-insinuate-xxxx'函数来为xxxx package提供BBDB的支持. 这些函数为package增加了默认的快捷键,并且配置这些package当收到新message时,通知bbdb.

例如:为了給gnus增加bbdb的支持,我们可以添加下面的语句到Emacs初始化文件中
#+BEGIN_SRC emacs-lisp
  (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
#+END_SRC
****** BBDB基础
******* BBDB数据库结构
BBDB数据库由一系列的记录组成,每条记录对应一个联系人或组织. 每条记录由多种域组成,每种域对应联系人/组织的一个属性.

BBDB内置支持一些类型的域:
| type        | Description                              | Notes                                           |
|-------------+------------------------------------------+-------------------------------------------------|
| NAME        | 联系人的名称,若该记录表示一个组织,则为空         | 一条记录只能有一个该类型的域,一个域只能有一个值 |
| orgnization | 联系人所在的组织,可以为空                     | 一条记录只能有一个该类型的域,一个域只能有一个值 |
| AKA         | 联系人的别名                                | 一个域可以有多个值,以逗号分隔                  |
| mail        | 联系人的email地址                           | 一个域可以有多个值,以逗号分隔                  |
| Phone       | 联系人的电话                                | 一条记录可以有多个该类型的域,一个域只能有一个值 |
| address     | 联系人的地址                                | 一条记录可以有多个该类型的域,一个域只能有一个值 |
| Notes       | 其他说明                                   |  一条记录可以有多个该类型的域,一个域只能有一个值 |
******** 自定义类型
除了上面BBDB内置的域类型,我们还可以自定一些域类型. BBDB处理大多数自定义类型的域时,与Notes类型域一样,但是对有一些特殊名称的域类型,BBDB会进行特殊处理:
+ aka :: 用于存储指定记录的non-primary names
+ finger-host :: Address used in place of the listed net address for fingering the entity indicated by the record
+ gnus-score :: Gnus scoring adjustment for this person.
+ mail-alias :: Value used instead of name for completion
+ mail-name ::  Used for the storage of non-default names to be used in the reporting of new mail by Reportmail.
+ mark-char :: The field containing the character to be used for marking a given poster in the Gnus Summary Buffer
+ tex-name :: The value of this field is used in place of the name field when printing the database using bbdb-print
+ www :: This field contains the URL associated with the BBDB record.
******* BBDB相关命令
******** 搜索记录
********* bbdb

执行该命令后,输入一个正则表达式,则bbdb会列出任何域中的值符合该正则表达式的记录

********* bbdb-search-name/bbdb-search-organization/bbdb-search-address/bbdb-search-mail/bbdb-search-notes/bbdb-search-phone

执行该命令后,输入一个正则表达式,则bbdb会列出指定域中的值符合该正则表达式的记录

********* bbdb-timestamp-older

执行该命令后,输入一个`yyyy-mm-dd'格式的日期,则bbdb会列出在指定日期之前修改过的记录

********* bbdb-timestamp-newer

执行该命令后,输入一个`yyyy-mm-dd'格式的日期,则bbdb会列出在指定日期之后修改过的记录

********* bbdb-creation-older

执行该命令后,输入一个`yyyy-mm-dd'格式的日期,则bbdb会列出在指定日期之前创建的记录

********* bbdb-creation-newer

执行该命令后,输入一个`yyyy-mm-dd'格式的日期,则bbdb会列出在指定日期之后创建的记录

********* bbdb-creation-no-change

执行该命令后,bbdb会列出自创建以来,从未修改过的记录

******** 增加记录
********* bbdb-create

执行该命令后,bbdb会以此提示输入各个内置域的相关信息,然后根据这些相关信息新建一条记录

********* bbdb-snarf

该命令可以根据一定规则将选中的字符串转换成bbdb格式的记录. 默认的转换规则由变量`bbdb-snarf-rule-default'决定. 详细参见`bbdb-snarf-rule-alist'

******* BBDB Mode使用说明
使用BBDB的查询命令后,会弹出一个名为`*BBDB*'的buffer,该buffer处于bbdb mode下.

bbdb mode下拥有许多维护BBDB记录的各种命令,常用的命令有:

******** e (bbdb-edit-field)

修改记录中当前域的值

******** ; (bbdb-edit-foo)

若不带前置参数执行该命令,则修改`(car bbdb-edit-foo)'所表示的域(默认为notes)

若代前置参数执行该命令,则修改`(cdr bbdb-edit-foo)'所表示的域(默认为current-fields)

******** d / C-k (bbdb-delete-field-or-record)

删除光标所在的域,若光标所处的域为bbdb记录的第一个行,则会提示删除整个记录.

This may also be applied to multiple records at once by *.

******** i (bbdb-insert-field)

为当前记录添加新域,该新域的类型可以是BBDB的内置类型,也可以是新的用户自定义类型.

******** C-x C-t (bbdb-transpose-fields)

交换光标所在的field与上一行field的位置

若带参数0执行该命令,则光标所在的域与mark标记的域进行交换

With non-zero numeric argument ARG, the previous field is moved past ARG fields.

交换的field必须在同一条记录中,且具有相同的类型

******** n (bbdb-next-record)/ p (bbdb-prev-record)

移动到下一个/上一个记录,若带前缀参数N,则下移/上移N条记录

******** t (bbdb-toggle-records-layout)


切换是否显示记录中具体域的说明.

若带参数0调用该函数,则强制光标所在记录不显示记录域说明,此时,所有的域信息都压缩到一行内显示.

当待其他参数调用该函数时,则强制光标所在记录显示记录中的域说明时,此时,当前记录使用多行样式显示.

若使用`*t'而不是`t',则buffer内所有的记录都同时切换显示样式

******** T (bbdb-display-record-completely)

谢换是否展示当前记录的所有域,这时平时隐藏不显示的`creation-date'和`timestamp'都会显示出来.

******** o (bbdb-omit-record)

隐藏当前记录,但并不会将当前记录从BBDB数据库中删除掉.

若带参数N执行该命令,则会隐藏下面N条记录,N可以为负数

******** m (bbdb-mail)

发送电子邮件給当前的联系人. 默认邮件地址为记录中的第一个email地址.

若带参数N调用该函数,则表示邮件地址使用记录周公的第N个email地址

若使用`*m'而不是`m',则表示給该buffer中的所有联系人发送电子邮件

******** s /C-x C-s (bbdb-save)

保存BBDB数据库到文件中

******** M-d (bbdb-dial)

该命令会尝试着去拨打光标所在的数字. 若光标处于一条记录的开头,则会拨打第一个phone域.

具体原理不明...

******** q (quit-window)

退出bbdb窗口,但不会kill bbdb buffer

******** ? (bbdb-help)

在minibuffer中显示简易帮助信息

******** h (bbdb-info)

显示bbdb的info文档

若bbdb的info文档没有安装在标准的info目录下,可以通过设置`bbdb-info-file'变量来明确指明bbdb info文件的路径

******** (bbdb-print)

将BBDB记录导出到Tex文件中.

******** c (bbdb-create)

创建新记录保存新的联系人信息

******** C (bbdb-copy-records-as-kill)

将当前记录拷贝到kill ring中

若使用`* C'则拷贝buffer中的所有记录到kill ring中

******** b (bbdb)

重新查询bbdb数据库

******** / m (bbdb-search-mail)

搜索mail域

******** / a (bbdb-search-address)

搜索address域

******** / c (bbdb-search-changed)

搜索至上次保存后,改变过的bbdb记录

******** / d (bbdb-search-duplicates)

搜索具有相同域的记录

******** / n (bbdb-search-name)

搜索name域

******** / o (bbdb-search-organization)

搜索organization域

******** / p (bbdb-search-phone)

搜索phone域

******** / x (bbdb-search-xfields)

搜索xfield域(该域存什么?我也不知道...)

******** * (bbdb-do-all-records)

该命令用于修改紧接之后的命令的作用域,让其作用于buffer中的所有记录.(Command prefix for operating on all records currently displayed.)

但只对某些特定的命令有效

****** 配置

******* 配置项
+ bbdb-file

  bbdb数据库的存储路径,默认为`~/.bbdb'

+ bbdb-default-area-code

  当输入新电话好吗时,使用的默认区号.

  该变量的值也会影响到拨打电话时的行为

+ bbdb-address-format-list

  用于编辑/显示BBDB地址信息时的规则列表.

+ bbdb-continental-postcode-regexp

  该正则表达式决定了BBDB的address是否为欧洲格式的地址.

  若address域的值匹配该正则表达式,则表示该address为欧洲格式的地址,否则认为是美国格式的地址

+ bbdb-case-fold-search

  当使用bbdb系列的搜索命令进行搜索时,是否大小写敏感

+ bbdb-auto-revert

  若在Emacs中没有修改bbdb buffer中的信息,而此时,bbdb-file发生了改变,则自动重新加载bbdb-file的新内容

+ bbdb-pop-up-layout

  pop-up BBDB buffer时使用的默认布局(mail,news...). 默认为'pop-up-multi-line

+ bbdb-pop-up-window-size

  pop-up BBDB buffer时的高度.

  若为整数N,则表示高度为N行

  若为一个介于0到1之间的小数N,则拆分拥有最高高度的window,并且BBDB buffer占据N倍的高度

  若为t,则表示使用 `display-buffer'/`pop-to-buffer' 创建BBDB window??(貌似会占据next-window来显示BBDB buffer)

+ bbdb-completion-list

  控制`bbdb-complete-mail'的补全方式. 该函数用于在mail buffer中补全联系人信息

  该值可以为一个symbol list,用来指明补全哪些域的值. 这些symbol可以是:

  - fl-name :: first and last name

  - lf-name :: last and first name

  - organization ::

  - aka ::

  - mail :: all email address of each record

  - primary :: first email address of each record

  该值也可以为t,表示所有上面symbol的集合

  若该值为nil,则表示不提供补全

+ bbdb-complete-mail-allow-cycling

  当调用`bbdb-complete-mail'补全email地址时,是否允许循环展示补全项

+ bbdb-user-mail-address

  该变量的值为一个正则表达式,该正则表达式用于标识某email地址是否是用户自己的email地址.

  多数BBDB的命令根据变量`bbdb-message-headers'从消息中抽取出发送方和接收方的email地址. 但若发送方的email地址匹配上了`bbdb-user-mail-address-re',则该email地址依然被认为是接收方的email地址.

  改变量的默认值为`(user-login-name)'

+ bbdb-add-mails

  该变量指明了当收到某个联系人从新的email地址发来的消息后,是否增加该新email到联系人信息中.

  可选值有:

  - t :: 自动添加该新的email地址

  - query :: 询问用户是否添加该新的email地址

  - nil :: 忽略新的email地址

  - 数字N :: 在N秒内,BBDB显示该新的email地址,但只在当前session有效

  - 函数fn :: 使用record和新email地址作为参数来调用fn,fn需要返回t,'query,nil或一个数字

  - 正则表达式re :: 若新的email地址符合该正则,则忽略该新的email地址,否则询问用户是否添加该email地址

+ bbdb-new-mails-primary

  为联系人新增email地址时,该新email地址是否作为primary mail address(即该新email地址排在其他email地址的前面).

  可选值为:

  - t :: 让该新增的email地址自动称为primary mail address

  - query :: 询问用户是否作为primary mail address

  - nil :: 不作为primary mail address,会将新email地址放到列表最后面.

  - 函数fn :: 该函数接收两个参数:record和新email地址. 该函数需要返回t,'query或nil

  - 正则表达式re :: 若新email地址匹配该re,则不作为primary mail address,否则询问用户是否作为primary mail address

+ bbdb-ignore-redundant-mails

  当增加新mail地址时,若联系人中的旧mail地址是新mail地址的更一般形式(例如,已有的mail地址为darksun@baz.com,而新mail地址为darksun@foo.baz.com)时,是否覆盖原mail地址.

  可选的值为为:

  - t :: 自动忽略新email地址

  - query :: 询问用户是否忽略新email地址

  - nil :: 使用新email地址,覆盖原email地址

  - 数字N :: 在接下来的N秒内,保留新email地址

  - 函数fn :: fn接收两个参数:record及新email地址,fn需要返回t,'query,nil或数字

  - 正则表达式re :: 符合该正则表达式的email地址会替代原email地址,否则询问用户是否忽略新email地址

+ bbdb-check-auto-save-file

  若值为t,则BBDB会检查它的auto-save file,若auto-save file比`bbdb-file'要新,则BBDB会恢复auto-save file

+ bbdb-ignore-message-alist

  描述哪些message不允许触发自动新建BBDB联系人记录.

+ bbdb-accept-message-alist

  描述哪些message允许触发自动新建BBDB联系人记录.

+ bbdb-mua-auto-update-p

  决定了`bbdb-mua-auto-update'如何自动更新BBDB记录. 可选值:

  - nil :: 什么也不做

  - search :: 搜索匹配ADDRESS的记录

  - update :: 搜索匹配ADDRESS的记录,如有必要,会更新name和mail域

  - query :: 搜索匹配ADDRESS的记录,若记录不存在,提示用户是否创建新记录

  - create :: 搜索匹配ADDRESS的记录,若记录不存在,则创建新记录

  - t :: 搜索匹配ADDRESS的记录,若记录不存在,则创建新记录

  - 函数fn :: bbdb调用该函数,该函数需要返回nil,search,update,query,create或t

******* hooks

| hook                             | 调用hook的时机                                     | 调用hook时的参数                       | 其他说明                                                          |
|----------------------------------+----------------------------------------------------+----------------------------------------+-------------------------------------------------------------------|
| bbdb-display-hook                | 展示*BBDB* buffer后                                |                                        |                                                                   |
| bbdb-create-hook                 | 在BBDB创建新联系人记录前                           | 新增的record                           | bbdb-change-hook也会被触发                                        |
| bbdb-change-hook                 | *BBDB* buffer发生改变前                            | 修改的record                           |                                                                   |
| bbdb-mode-hook                   | 进入bbdb mode后                                    |                                        |                                                                   |
| bbdb-notice-record-hook          | 当发现message中的email地址包含在某个联系人记录中后 | 包含message中email的联系人记录         | 若某message中包含同一联系人的多个email地址,该hook也只会被触发一次 |
| bbdb-notice-mail-hook            | 当发现message中的email地址包含在某个联系人记录中后 | 包含message中email的联系人记录         | 若某message中包含同一联系人的多个email地址,该hook也会被触发多次   |
| bbdb-after-read-db-hook          | 当`bbdb-file'被读取之后                            |                                        | 当BBDB buffer revert之后还会再次触发该hook                        |
| bbdb-initialize-hook             | BBDB的初始化函数`bbdb-initialize'被调用之后        |                                        |                                                                   |
| bbdb-canonicalize-mail-functioin | 当BBDB notice a message后                          | message中的corresponding email address | 该函数用于对message中的对应email地址作一次转换,转换后的结果才拿来与BBDB中的记录进行对比,或添加入BBDB. 若该函数返回nil,则BBDB认为该message中无email address |

****** 其他
******* 函数
******** (bbdb-display-records records )

在bbdb buffer中显示records中的记录

******** (bbdb-record-field RECORD FIELD)

返回记录中的指定域的值. 域的说明为:
| firstname    | Return the first name of RECORD                   |
| lastname     | Return the last name of RECORD                    |
| name         | Return the full name of RECORD (first name first) |
| name-lf      | Return the full name of RECORD (last name first)  |
| affix        | Return the list of affixes                        |
| organization | Return the list of organizations                  |
| aka          | Return the list of AKAs                           |
| aka-all      | Return the list of AKAs plus mail-akas.           |
| mail         | Return the list of email addresses                |
| mail-aka     | Return the list of name parts in mail addresses   |
| mail-canon   | Return the list of canonical mail addresses.      |
| phone        | Return the list of phone numbers                  |
| address      | Return the list of addresses                      |
| xfields      | Return the list of all xfields                    |
| 其他         | 指定label的xfields                                   |

******** (bbdb-get-records PROMPT)

若在*BBDB* buffer中,则返回光标所在的记录,若在其他buffer中,则询问用户想要返回哪个记录

******** (bbdb-update-records ADDRESS-LIST &optional UPDATE-P SORT)

返回匹配ADDRESS-LIST的BBDB记录列表

其中ADDRESS-LIST是一个由email地址组成的列表


参数UPDATE-P的可选值为:

+ nil :: 使用变量`bbdb/MUA-update-records-p'中的值, 若该值依然为nil,则`bbdb-update-records'返回nil

+ search :: 搜索匹配ADDRESS的记录

+ update :: 搜索匹配ADDRESS的记录,如有必要,会更新name和mail域

+ query :: 搜索匹配ADDRESS的记录,若记录不存在,提示用户是否创建新记录

+ create :: 搜索匹配ADDRESS的记录,若记录不存在,则创建新记录

+ t :: 搜索匹配ADDRESS的记录,若记录不存在,则创建新记录

+ 函数fn :: bbdb调用该函数,该函数需要返回search,update,query,create或t

若参数SORT为非nil,则返回的记录列表中的记录会经过`bbdb-record-lessp'排序;若SORT为nil,则记录的顺序与参数ADDRESS-LIST中的邮件地址的顺序对应.

******** (bbdb-get-mail-aliases)

返回BBDB中使用的mail aliases列表

******** (bbdb-search-read &optional FIELD)

提示用户输入一个正则表达式re,并从BBDB数据库中搜索出指定的FIELD符合该re的记录

******** (bbdb-search RECORDS &optional NAME-RE ORG-RE MAIL-RE XFIELD-RE PHONE-RE ADDRESS-RE)

从RECORDS中搜索出符合指定域的指定正则表达式的记录. 其中

+ NAME-RE匹配FIRST_LAST,LAST_FIRST和AKA域

+ XFIELD-RE匹配xfiled notes域

+ XFIELD-RE也以格式为(LABEL . RE)表示label为xfield的正则表达式,其中若LABEL为`*'则表示任一个xfield

******** (bbdb-display-records-with-layout RECORDS LAYOUT)

使用LAYOUT形式来展示RECORDS,其中LAYOUT参见`bbdb-layout-alist'中的值

******** (bbdb-pop-up-window &optional SELECT HORIZ-P)

******** (bbdb-display-records RECORDS &optional LAYOUT APPEND SELECT HORIZ-P)

使用LAYOUT形式来显示RECORDS

若参数APPEND为非nil,则会在当前已经显示的记录后,再多显示这些RECORDS;若APPEND为nil,则会用RECORDS的显示结果代替已有的显示结果

参数SELECT与参数HORIZ-P的意义参见`bbdb-pop-up-window'

******** (bbdb-display-record RECORD LAYOUT NUMBER)

在当前buffer的光标所在处,插入格式化好的RECORD表示文本.

LAYOUT是`bbdb-layout-alist'中描述的layout符号,若为nil则表示`bbdb-layout'

NUMBER is the number of RECORD among the displayed records.

******** (bbdb-read-record &optional FIRST-AND-LAST)

提示用户输入联系人信息,并创建一个新的BBDB联系人记录.

*但该函数不会将新产生的BBDB记录存入数据库,也不会更新BBDB hashtable*

*该函数会检查新输入的联系人是否和已存在的联系人记录相冲突*

******** (bbdb-read-string PROMPT &optional INIT COLLECTION REQUIRE-MATCH)

读取用户输入的字符串,会取出字符串中的空格和text properties

参数PROMPT为提示说明

参数INIT为预设值,当编辑已存在记录时常用到

参数COLLECTION与REQUIRE-MATCH的意义与`completing-read'中的意义一致

******** (bbdb-record-set-field RECORD FIELD VALUE &optional MERGE CHECK)

设置RECORD中的FIELD域的值为VALUE.

该函数的返回值为VALUE

若参数MERGE为非nil,则将参数VALUE合并到FIELD的当前值中

若参数CHECK为非nil,则会检查FIELD是否能够存储VALUE

*该函数会更新bbdb hashtable,但不会保存RECORD到bbdb数据库中*. 一般使用函数`bbdb-change-record'来保存RECORD到bbdb数据库中.

其中参数FIELD的说明,参见`bbdb-record-field'中的FIELD说明

******** (bbdb-change-record RECORD &optional NEED-TO-SORT NEW)

该函数保存RECORD到BBDB数据库中,若参数RECORD中的值与BBDB数据库中的值相比发生了变化,则该函数返回RECORD,否则该函数返回nil

当RECORD中的联系人名称发生改变,或RECORD为新建的联系人记录时,NEED-TO-SORT参数需要为t

当RECORD为新建的联系人记录时,参数NEW需要为t. 若RECORD为新建联系人记录则该RECORD会自动更新入BBDB hashtable,否则需要手工更新BBDB hashtable

******** (bbdb-current-record &optional FULL)

返回光标所处的RECORD

若参数FULL为非nil,则返回包含RECORD和显示格式(layout)的一个list
#+BEGIN_SRC emacs-lisp
  (bbdb-current-record t)
  ;; ([nil "darksun" nil nil nil (["home" "(+86)15820984397"] ["work" "(0794)6593346"]) nil nil ((creation-date . "2015-03-30 09:46:57 +0000") (timestamp . "2015-03-30 13:17:00 +0000")) ["darksun" "darksun" nil nil "darksun" #<marker at 64 in bbdb>]] multi-line #<marker at 1 in *BBDB*>)
  (bbdb-current-record)
  ;; [nil "darksun" nil nil nil (["home" "(+86)15820984397"] ["work" "(0794)6593346"]) nil nil ((creation-date . "2015-03-30 09:46:57 +0000") (timestamp . "2015-03-30 13:17:00 +0000")) ["darksun" "darksun" nil nil "darksun" #<marker at 64 in bbdb>]]

#+END_SRC

******** (bbdb-current-field)

返回光标所处的当前域
#+BEGIN_SRC emacs-lisp
  (bbdb-current-field)
  ;; (name "darksun")
#+END_SRC

******** bbdb-record-set-xxx系列函数

置record中指定field的值

******* 变量
******** bbdb-records

该变量的值为当前bbdb buffer中的record列表

******** bbdb-search-invert

若值为t,则会反转`bbdb-search'的搜索结果
****** FAQ

******* 如何修改BBDB创建联系人的流程

使用`bbdb-create'新建联系人时,会以此提示你输入一系列的联系人的信息,包括姓名,所属机构,电子邮件,地址,电话,备注. 但若想让BBDB在创建联系人时也提示你输入其他额外的信息该如何作呢?

下面是一个例子,它让`bbdb-create'新建联系人时,还会提示你输入生日信息:
#+BEGIN_SRC emacs-lisp
  (defun bbdb-read-record-advise-function(record)
    "提示存储生日,QQ,微信号"
    (bbdb-record-set-field record 'birthdate
                           (bbdb-read-string "Birthdate (YYYY.MM.DD): "))
    (bbdb-record-set-field record 'QQ
                           (bbdb-read-string "QQ:"))
    (bbdb-record-set-field record 'WeChat
                           (bbdb-read-string "WeChat:"))
    record)

  (advice-add 'bbdb-read-record :filter-return #'bbdb-read-record-advise-function)

#+END_SRC

******* 如何将bbdb中保存的联系人信息导入到手机中

最简单的方法,就是使用"bbdb-to-outlook.el"将bbdb导出为.csv文件. 然后在手机上导入该.csv文件

1. 加载"bbdb-to-outlook.el"
2. 使用`bbdb'显示bbdb联系人信息
3. 键入`O'会运行`bbdb-to-outlook'命令,输入保存的csv文件路径即可.

**** ROS
- sql http://wiki.ros.org/sql_database
- arbotix_python http://wiki.ros.org/arbotix_python?distro=indigo#Services
- Q&A
  - http://answers.ros.org/question/95486/hector-slam-with-turtlebot-in-gazebo/
  - http://answers.ros.org/question/46004/turtlebothector-slam-possibile-or-not/
- http://wiki.ros.org/hector_turtlebot
- http://wiki.ros.org/hector_turtlebot
- http://www.ros.org/news/2014/12/updated-package-razor-imu-9dof.html

**** org-preview-latex-fragment 与 minted 宏包冲突

- http://orgmode.org/worg/org-tutorials/org-latex-preview.html
- http://tex.stackexchange.com/questions/162767/can-not-preview-latex-equation-in-org-mode-dvipng-and-imagemagick-both-failed

#+BEGIN_QUOTE
But if you have set up preview to use the dvipng method, you are in
trouble: that method calls latex directly, the call is hardwired and
it does not use the -shell-escape option. LaTeX refuses to run the
external program that minted used, no DVI file is produced and dvipng
cannot produce a PNG file
#+END_QUOTE

上述问题并没有好的解决方法

*latex preview 要比 minted 使用的多，所以优先考虑前者*

dvipng 没有错误，但不会生成公式图片

imagemagick 产生错误信息，

#+BEGIN_EXAMPLE
(error "PDF file /tmp/orgtex31149_Wk.pdf wasn't produced")
#+END_EXAMPLE

查看 log =/tmp/orgtex12345abc.log=

#+BEGIN_EXAMPLE
l.4 \usepackage
               [utf8]{inputenc}
?
! Emergency stop.
 ...

l.4 \usepackage
               [utf8]{inputenc}
Pass the -shell-escape flag to LaTeX. Refer to the minted.sty documentation for
 more information.
#+END_EXAMPLE




解决方式： 注释掉 org 文件头部包含的 minted 宏包

#+BEGIN_EXAMPLE
#+LATEX_HEADER: \usepackage{minted}
#+END_EXAMPLE

Note:

1. org-toogle-latex-preview
   #+BEGIN_EXAMPLE
     `org-preview-latex-fragment' is an obsolete command (as of 24.4); use `org-toggle-latex-fragment' instead.
   #+END_EXAMPLE
2. imagemagick 产生 A4 的图片，太大了，没有 dvipng 方便

**** Using rosed to edit files in ROS

*Description:* This tutorial shows how to use [[/rosbash][rosed]] to
make editing easier.

***** Using rosed

=rosed= is part of the [[/rosbash][rosbash]] suite. It allows you to
directly edit a file within a package by using the package name rather
than having to type the entire path to the package.

Usage:

#+BEGIN_EXAMPLE
    $ rosed [package_name] [filename]
#+END_EXAMPLE

Example:

#+BEGIN_EXAMPLE
    $ rosed roscpp Logger.msg
#+END_EXAMPLE

This example demonstrates how you would edit the Logger.msg file within
the roscpp package.

If this example doesn't work is probably because you don't have the
=vim= editor installed. Please refer to
[[/ROS/Tutorials/UsingRosEd#Editor][Editor]] section. If you don't know
how to get out of vim, [[http://kb.iu.edu/data/afcz.html][click here]].

If the filename is not uniquely defined within the package, a menu will
prompt you to choose which of the possible files you want to edit.

***** Using rosed with tab completion

This way you can easily see and optionally edit all files from a package
without knowing its exact name.

Usage:

#+BEGIN_EXAMPLE
    $ rosed [package_name] <tab><tab>
#+END_EXAMPLE

Example:

#+BEGIN_EXAMPLE
    $ rosed roscpp <tab><tab>
#+END_EXAMPLE


#+BEGIN_EXAMPLE
  Empty.srv                   package.xml
  GetLoggers.srv              roscpp-msg-extras.cmake
  Logger.msg                  roscpp-msg-paths.cmake
  SetLoggerLevel.srv          roscpp.cmake
  genmsg_cpp.py               roscppConfig-version.cmake
  gensrv_cpp.py               roscppConfig.cmake
  msg_gen.py
#+END_EXAMPLE

***** Editor

The default editor for rosed is =vim=. The more beginner-friendly editor
=nano= is included with the default Ubuntu install. You can use it by
editing your ~/.bashrc file to include:

#+BEGIN_EXAMPLE
    export EDITOR='nano -w'
#+END_EXAMPLE

To set the default editor to =emacs= you can edit your ~/.bashrc file to
include:

#+BEGIN_EXAMPLE
    export EDITOR='emacs -nw'
#+END_EXAMPLE

/*NOTE:*/ /changes in .bashrc will only take effect for new terminals.
Terminals that are already open will not see the new environmental
variable./

Open a new terminal and see if =EDITOR= is defined:

#+BEGIN_EXAMPLE
    $ echo $EDITOR
#+END_EXAMPLE


#+BEGIN_EXAMPLE
    nano -w
#+END_EXAMPLE

or

#+BEGIN_EXAMPLE
    emacs -nw
#+END_EXAMPLE

**** cdlatex-math-symbol

1. cdlatex-math-symbol
   #+BEGIN_EXAMPLE
     ` runs the command cdlatex-math-symbol, which is an interactive Lisp
     function in `cdlatex.el'.

     It is bound to `, <menu-bar> <Org> <LaTeX> <Insert math symbol>.

     (cdlatex-math-symbol)

     Read a char from keyboard and insert corresponding math char.
     The combinations are defined in `cdlatex-math-symbol-alist'.  If not in a LaTeX
     math environment, you also get a pair of dollars.
   #+END_EXAMPLE

2. cdlatex-math-symbol-alist

   #+BEGIN_EXAMPLE
     cdlatex-math-symbol-alist is a variable defined in `cdlatex.el'.
     Its value is nil

     Documentation:
     Key characters and math symbols for fast access with the prefix key.
     First element is a character, followed by a number of strings attached to
     this key.  When the string contains a question mark, this is where the
     cursor will be positioned after insertion of the string into the buffer.
     See `cdlatex-math-symbol-alist-default' for an example.  Any entry defined
     here will replace the corresponding entry of the default list.  The
     defaults implement 3 levels of symbols so far: Level 1 for greek letters
     and standard symbols, level 2 for variations of level 1, and level 3 for
     functions and opperators.
   #+END_EXAMPLE

3. cdlatex-math-symbol-alist-default

   #+BEGIN_EXAMPLE
     Default for cdlatex-math-symbol-alist.

     Value: ((97
       ("\\alpha"))
      (65
       ("\\forall" "\\aleph"))
      (98
       ("\\beta"))
      (66
       (""))
      (99
       ("" "" "\\cos"))
      (67
       ("" "" "\\arccos"))
      (100
       ("\\delta" "\\partial"))
      (68
       ("\\Delta" "\\nabla"))
      (101
       ("\\epsilon" "\\varepsilon" "\\exp"))
      (69
       ("\\exists" "" "\\ln"))
      (102
       ("\\phi" "\\varphi"))
      (70
       (""))
      (103
       ("\\gamma" "" "\\lg"))
      (71
       ("\\Gamma" "" "10^{?}"))
      (104
       ("\\eta" "\\hbar"))
      (72
       (""))
      (105
       ("\\in" "\\imath"))
      (73
       ("" "\\Im"))
      (106
       ("" "\\jmath"))
      (74
       (""))
      (107
       ("\\kappa"))
      (75
       (""))
      (108
       ("\\lambda" "\\ell" "\\log"))
      (76
       ("\\Lambda"))
      (109
       ("\\mu"))
      (77
       (""))
      (110
       ("\\nu" "" "\\ln"))
      (78
       ("\\nabla" "" "\\exp"))
      (111
       ("\\omega"))
      (79
       ("\\Omega" "\\mho"))
      (112
       ("\\pi" "\\varpi"))
      (80
       ("\\Pi"))
      (113
       ("\\theta" "\\vartheta"))
      (81
       ("\\Theta"))
      (114
       ("\\rho" "\\varrho"))
      (82
       ("" "\\Re"))
      (115
       ("\\sigma" "\\varsigma" "\\sin"))
      (83
       ("\\Sigma" "" "\\arcsin"))
      (116
       ("\\tau" "" "\\tan"))
      (84
       ("" "" "\\arctan"))
      (117
       ("\\upsilon"))
      (85
       ("\\Upsilon"))
      (118
       ("\\vee"))
      (86
       ("\\Phi"))
      (119
       ("\\xi"))
      (87
       ("\\Xi"))
      (120
       ("\\chi"))
      (88
       (""))
      (121
       ("\\psi"))
      (89
       ("\\Psi"))
      (122
       ("\\zeta"))
      (90
       (""))
      (32
       (""))
      (48
       ("\\emptyset"))
      (49
       (""))
      (50
       (""))
      (51
       (""))
      (52
       (""))
      (53
       (""))
      (54
       (""))
      (55
       (""))
      (56
       ("\\infty"))
      (57
       (""))
      (33
       ("\\neg"))
      (64
       (""))
      (35
       (""))
      (36
       (""))
      (37
       (""))
      (94
       ("\\uparrow"))
      (38
       ("\\wedge"))
      (63
       (""))
      (126
       ("\\approx" "\\simeq"))
      (95
       ("\\downarrow"))
      (43
       ("\\cup"))
      (45
       ("\\leftrightarrow" "\\longleftrightarrow"))
      (42
       ("\\times"))
      (47
       ("\\not"))
      (124
       ("\\mapsto" "\\longmapsto"))
      (92
       ("\\setminus"))
      (34
       (""))
      (61
       ("\\Leftrightarrow" "\\Longleftrightarrow"))
      (40
       ("\\langle"))
      (41
       ("\\rangle"))
      (91
       ("\\Leftarrow" "\\Longleftarrow"))
      (93
       ("\\Rightarrow" "\\Longrightarrow"))
      (123
       ("\\subset"))
      (125
       ("\\supset"))
      (60
       ("\\leftarrow" "\\longleftarrow" "\\min"))
      (62
       ("\\rightarrow" "\\longrightarrow" "\\max"))
      (96
       (""))
      (39
       ("\\prime"))
      (46
       ("\\cdot")))
   #+END_EXAMPLE

4. 层次

   + 这个很好用啊

   + 在默认值的基础上修改
     #+BEGIN_EXAMPLE
     (65 ("\\forall" "\\aleph"))
     #+END_EXAMPLE

   + 层次问题
     - 第一层： 希腊字母和标准符号
     - 第二层： 第一层的变种
     - 第三层： 数学函数与操作
     - 第四层： =自定义= (太深了，还是第一层)

*** 2016/01/02
**** Emacs VCF 手机备份文件
**** 整理 Chrome 收藏夹
:LOGBOOK:
CLOCK: [2016-01-02 六 10:53]--[2016-01-02 六 13:05] =>  2:12
:END:

1. 使用 Chrome 书签保存常用网页
2. 书签栏上仅显示常用网址，即每天都需要打开的网页，以及 INBOX 和 INDEX
   两个文件夹
3. INBOX 用于保存有待处理的网页
4. INDEX 用于分类收藏网址
   - ROS： ROS 相关常用网址
   - Google: Google相关网址
   - Cloud： 云存储网址
   - BUAA：校园相关
   - Community: 社区
   - Forum: 论坛
   - Guide：教程
   - Blog：博客
   - Manual：手册
   - Homepage: 项目主页
   - Resource: 资源
   - Github： Github 上的资源
   - Course: 课程
   - Project: 课题相关

**** Can we make a love heart with LaTeX

+
  http://tex.stackexchange.com/questions/139733/can-we-make-a-love-heart-with-latex

[[/home/ben/Wally/Journal//Figure/scrot/2959ite.png]]

**** ROS

- sql http://wiki.ros.org/sql_database
- arbotix_python http://wiki.ros.org/arbotix_python?distro=indigo#Services
- Q&A
  - http://answers.ros.org/question/95486/hector-slam-with-turtlebot-in-gazebo/
  - http://answers.ros.org/question/46004/turtlebothector-slam-possibile-or-not/
- http://wiki.ros.org/hector_turtlebot
- http://wiki.ros.org/hector_turtlebot
- http://www.ros.org/news/2014/12/updated-package-razor-imu-9dof.html

**** 像ROS，图片链接不是完整路径，可以改
**** VirtualBox USB 支持

-  [[http://www.cnblogs.com/ericsun/archive/2013/06/10/3130679.html][在Ubuntu12.04 上为Virtualbox 启用USB 设备支持]]


众所周知,VirtualBox使用宿主机的USB设备需要安装扩展包。根据自己的vbox的
版本，到vbox官网下载对应的扩展包。比如我的vbox 是4.1.12的，对应扩展包
地址是：[[http://download.virtualbox.org/virtualbox/4.1.12/Oracle_VM_VirtualBox_Extension_Pack-4.1.12-77245.vbox-extpack][http://download.virtualbox.org/virtualbox-extpack]]

下载完毕后，在“管理”菜单下的“全局设定”里的“扩展”标签下，加入、启
用即可。

如图：

[[http://static.xiazhengxin.name/img/install_vbox_ext_package.png]]

之后，打开虚拟系统设置，在“USB设备”标签下，勾选上"启用USB控制器"以及
"2.0控制器"增加对USB2.0的支持。

如图：
 [[http://static.xiazhengxin.name/img/enable_USB2_controller.png]]

按说这个时候已经搞定了。可是在USB列表里面却没有任何USB设备。这是为什么
呢？谷歌了一下，找到了一篇文章(具体地址已经无法回忆起来了，囧)，解释了
一下原因。

*原来是vbox 所在的用户组比如要包括当前用户才行。*

查看当前用户名：

#+BEGIN_EXAMPLE
sharl@sharl-laptop:~$ whoami
sharl
#+END_EXAMPLE


查看vbox 所在的组：

#+BEGIN_EXAMPLE
sharl@sharl-laptop:~$ cat /etc/group | grep vbox
vboxusers:x:125:sharl
#+END_EXAMPLE

将当前用户加入vbox组：

#+BEGIN_EXAMPLE
usermod -a -G vboxusers sharl
#+END_EXAMPLE

即可。

此时，重启系统。再次打开虚拟机，果然，USB设备都已经被识别、访问到了。
这些，在“设备”菜单下就可以看到。

如图：

[[http://static.xiazhengxin.name/img/add_USB_device_to_vbox_from_list.png]]

添加后，虚拟机系统果然发现了新硬件，按照一般步骤，安装驱动即可正常使用。

**** Running 64bit Matlab on 32bit host OS

-
  http://neuro.debian.net/blog/2013/2013-05-31_matlab_64bit_on_32bit.html


Note

- Debian 下32位系统使用64位 Matlab, Ubuntu 下不一定能用。
- 不要再 Linux 下折腾 Matlab
- 装系统要装64位的

Some of you have experienced problems due the recent move of Mathworks
to drop 32-bit Linux builds of their products (i.e. Matlab R2013a and
co.). Please note that this is not the first time Mathworks values its
own costs higher than the benefits of a few scientists. In 1998
PowerPC builds for Macs were abandoned, causing a furious reaction of
the community.

Luckily, users of the fresh Debian stable release wheezy (or more
recent variants of Debian and its derivatives) who still need a 32bit
OS on 64bit-capable hardware can take advantage of the new multiarch
support. Multiarch allows for multiple architecturesi to co-exist on a
hardware/kernel that is capable of supporting both (e.g. i386 and
amd64).

Below we describe how you can use multiarch support and in few simple
steps that prepare your existing 32bit user-land for running 64bit
Matlab.

Procedure
1. [2-10 min] Install 64-bit kernel and reboot:

   #+BEGIN_EXAMPLE
   sudo apt-get install linux-image-amd64
   #+END_EXAMPLE

2. [1-3 min] Enable multi-arch support for amd64 architecture:

   #+BEGIN_EXAMPLE
   sudo dpkg --add-architecture amd64
   sudo apt-get update
   #+END_EXAMPLE

3. [1-5 min] Install 64bit libraries (and compilers) needed for
   matlab:
   #+BEGIN_EXAMPLE
     sudo apt-get install libstdc++6:amd64 zlib1g:amd64 libncurses5:amd64 \
     libxp6:amd64 libstdc++6-4.4-dev:amd64 libxt6:amd64 libxmu6:amd64 libxtst6:amd64 \
     g++:amd64 gcc:amd64 binutils:amd64
   #+END_EXAMPLE

Now your 64bit matlab (which you hopefully “registered” with
matlab-support) is ready to run.

**** [[http://lanbing510.info/2014/12/03/Linux-Matlab.html][Linux下Matlab的安装及配置使用]]

1. 从[[http://pan.baidu.com/s/1o6qKdxo#path=%252Fmatlab][这里]]下载Matlab2014的Linux版本及破解文件。

2. 下载完成后将iso文件挂载到Linux进行安装。

   #+BEGIN_EXAMPLE
    sudo mkdir /media/matlab
    mount -o loop [path][filename].iso /media/matlab
    cd /media/matlab
    sudo ./install
   #+END_EXAMPLE

3. 安装过程中使用readme.txt中的序列号。

4. 破解

   1) 安装完成后使用crack下的 license进行激活；

   2) 将crack文件夹下的libmwservices.so copy到 /usr/local/MATLAB/R2014A/bin/glnxa64。

5. 完成安装，命令行下使用sudo matlab即可启动使用。

**** yasnippet elisp code

Emacs-Lisp code can be embedded inside the template, written inside back-quotes (`). The lisp forms are evaluated when the snippet is being expanded. The evaluation is done in the same buffer as the snippet being expanded.

Here's an example for c-mode` to calculate the header file guard
dynamically:

#+BEGIN_EXAMPLE
  #ifndef ${1:_`(upcase (file-name-nondirectory (file-name-sans-extension (buffer-file-name))))`_H_}
  #define $1

  $0

  #endif /* $1 */
#+END_EXAMPLE

**** date

(insert (format-time-string "%y-%m-%d-%H-%M"))16-01-02-16-10

**** TODO org-preview-latex-fragment

$\mathbf{x}=(x, y, \theta)$
