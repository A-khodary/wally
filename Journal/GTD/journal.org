#+LATEX_HEADER: \usepackage[boxed, lined]{algorithm2e}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{float}


# 1. check inbox.org, finish instant task and arrange task
# 2. refile task from to inbox.org to task.org
# 3. check task.org, and refile to journal.org
# 4. finish task or abort(then move to trash.org)
# 5. copy journal notes and put under headline named with current date
# 6. arrange and tag journal notes then move to note files
# 7. export to PDF, and move to PDF folder
# 8. automatically email PDF to Kindle
# 9. automatically pandoc to markdown and git to blog

* Objective

** 2015/12/28

+ [X] Raspberry 远程运行 ROS node
+ [X] Raspberry 接收 IMU 和 Lidar 数据
+ [X] 论文 LaTeX org 模板，理解如何生成图片和表格索引
+ [X] 绪论 500 字

** 2015/12/29

+ [X] 结论完成自主移动机器人和地图种类
+ [X] 完成 gazebo 模型
+ [X] map 如何发布

** 2015/12/30

+ [ ] hokuyo 和 IMU 原点
+ [ ] gmapping
+ [X] 论文 ROS 部分

* Journal

** map
*** costmap_2d

- http://wiki.ros.org/costmap_2d

*** map_server

- http://wiki.ros.org/map_server

**** Package Summary

map_server provides the =map_server= ROS
[[http://www.ros.org/wiki/Nodes][Node]], which offers map data as a ROS
[[http://www.ros.org/wiki/Services][Service]]. It also provides the
=map_saver= command-line utility, which allows dynamically generated
maps to be saved to file.

**** Map format

Maps manipulated by the tools in this package are stored in a pair of
files. The YAML file describes the map meta-data, and names the image
file. The image file encodes the occupancy data.

***** Image format

The image describes the occupancy state of each cell of the world in the
color of the corresponding pixel. Whiter pixels are free, blacker pixels
are occupied, and pixels in between are unknown. Color and grayscale
images are accepted, but most maps are gray (even though they may be
stored as if in color). Thresholds in the YAML file are used to divide
the three categories; thresholding is done inside the =map_server=.

When comparing to the threshold parameters, the occupancy probability of
an image pixel is computed as follows:

#+BEGIN_EXAMPLE
  occ=(255-color_avg)/255.0
#+END_EXAMPLE

where color_avg is the 8-bit value
that results from averaging over all channels, e.g. if the image is
24-bit color, a pixel with the color =0x0a0a0a= has a probability of
0.96, which is very occupied. The color =0xeeeeee= yields 0.07, which is
very unoccupied.

When communicated via ROS messages, occupancy is represented as an
integer in the range [0,100], with 0 meaning completely free and 100
meaning completely occupied, and the special value -1 for completely
unknown.

Image data is read in via [[http://www.libsdl.org/projects/SDL_image/docs/index.html][SDL_Image]];
supported formats vary, depending on what SDL_Image provides on a
specific platform. Generally speaking, most popular image formats are
widely supported. A notable exception is that PNG is not supported on OS
X.

***** YAML format

The YAML format is best explained with a simple, complete example:

#+BEGIN_EXAMPLE
    image: testmap.png
    resolution: 0.1
    origin: [0.0, 0.0, 0.0]
    occupied_thresh: 0.65
    free_thresh: 0.196
    negate: 0
#+END_EXAMPLE

Required fields:

-  *image* : Path to the image file containing the occupancy data; can
   be absolute, or relative to the location of the YAML file
-  *resolution* : Resolution of the map, meters / pixel
-  *origin* : The 2-D pose of the lower-left pixel in the map, as (x, y,
   yaw), with yaw as counterclockwise rotation (yaw=0 means no
   rotation). Many parts of the system currently ignore yaw.
-  *occupied_thresh* : Pixels with occupancy probability greater than
   this threshold are considered completely occupied.
-  *free_thresh* : Pixels with occupancy probability less than this
   threshold are considered completely free.
-  *negate* : Whether the white/black free/occupied semantics should be
   reversed (interpretation of thresholds is unaffected)

**** Command-line Tools

***** map_server

=map_server= is a ROS node that reads a map from disk and offers it via
a ROS service.
The current implementation of the map_server converts color values in
the map image data into ternary occupancy values: free (0), occupied
(100), and unknown (-1). Future versions of this tool may use the values
between 0 and 100 to communicate finer gradations of occupancy.

****** Usage

#+BEGIN_EXAMPLE
    map_server <map.yaml>
#+END_EXAMPLE

****** Example

#+BEGIN_EXAMPLE
    rosrun map_server map_server mymap.yaml
#+END_EXAMPLE

Note that the map data may be retrieved via either latched topic
(meaning that it is sent once to each new subscriber), or via service.
The service may eventually be phased out.

****** Published Topics

=map_metadata=
([[http://docs.ros.org/api/nav_msgs/html/msg/MapMetaData.html][nav_msgs/MapMetaData]])

-  Receive the map metadata via this latched topic.

=map=
([[http://docs.ros.org/api/nav_msgs/html/msg/OccupancyGrid.html][nav_msgs/OccupancyGrid]])

-  Receive the map via this latched topic.

****** Services

=static_map=
([[http://docs.ros.org/api/nav_msgs/html/srv/GetMap.html][nav_msgs/GetMap]])

-  Retrieve the map via this service.

****** Parameters

=~frame_id= (=string=, default: ="map"=)

-  The frame to set in the header of the published map.

***** map_saver

=map_saver= saves a map to disk, e.g., from a SLAM mapping service.

****** Usage

#+BEGIN_EXAMPLE
    map_saver [-f mapname]
#+END_EXAMPLE

=map_saver= retrieves map data and writes it out to *map.pgm* and
*map.yaml*. Use the *-f* option to provide a different base name for the
output files.

****** Example

#+BEGIN_EXAMPLE
    rosrun map_server map_saver -f mymap
#+END_EXAMPLE

****** Subscribed Topics

=map=
([[http://docs.ros.org/api/nav_msgs/html/msg/OccupancyGrid.html][nav_msgs/OccupancyGrid]])

-  Map will be retrieved via this latched topic.

*** nav_msgs/OccupanyGrid

1. File: nav_msgs/OccupancyGrid.msg


1. Raw Message Definition

   #+BEGIN_EXAMPLE
     # This represents a 2-D grid map, in which each cell represents the probability of
     # occupancy.

     Header header

     #MetaData for the map
     MapMetaData info

     # The map data, in row-major order, starting with (0,0).  Occupancy
     # probabilities are in the range [0,100].  Unknown is -1.
     int8[] data
   #+END_EXAMPLE

2. Compact Message Definition

   #+BEGIN_EXAMPLE
     std_msgs/Header header
     nav_msgs/MapMetaData info
     int8[] data
   #+END_EXAMPLE

*** nav_msgs/MapMetaData

1. File: nav_msgs/MapMetaData.msg

2. Raw Message Definition

   #+BEGIN_EXAMPLE
     # This hold basic information about the characterists of the OccupancyGrid

     # The time at which the map was loaded
     time map_load_time
     # The map resolution [m/cell]
     float32 resolution
     # Map width [cells]
     uint32 width
     # Map height [cells]
     uint32 height
     # The origin of the map [m, m, rad].  This is the real-world pose of the
     # cell (0,0) in the map.
     geometry_msgs/Pose origin
   #+END_EXAMPLE

3. Compact Message Definition

   #+BEGIN_EXAMPLE
     time map_load_time
     float32 resolution
     uint32 width
     uint32 height
     geometry_msgs/Pose origin
   #+END_EXAMPLE

** nilsson1969mobilerobot
*** bib
@techreport{nilsson1969mobilerobot,
  title={A mobile automaton: An application of artificial intelligence techniques},
  author={Nilsson, Nils J},
  year={1969},
  institution={DTIC Document}
}

** gmapping
*** slam_gmapping

This package contains a ROS wrapper for OpenSlam's Gmapping. The
gmapping package provides laser-based SLAM (Simultaneous Localization
and Mapping), as a ROS node called slam_gmapping. Using slam_gmapping,
you can create a 2-D occupancy grid map (like a building floorplan) from
laser and pose data collected by a mobile robot.


**** External Documentation

This is mostly a third party package; the underlying GMapping library is
[[http://openslam.org/gmapping.html][externally documented]]. Look there
for details on many of the parameters listed below.

**** Hardware Requirements

To use =slam_gmapping=, you need a mobile robot that provides odometry
data and is equipped with a horizontally-mounted, fixed, laser
range-finder. The =slam_gmapping= node will attempt to transform each
incoming scan into the =odom= (odometry) [[/tf][tf]] frame. See the
"[[/gmapping#Required_tf_Transforms][Required tf transforms]]" for more
on required transforms.

**** Example

To make a map from a robot with a laser publishing scans on the
=base_scan= topic:

#+BEGIN_EXAMPLE
    rosrun gmapping slam_gmapping scan:=base_scan
#+END_EXAMPLE

**** Nodes
***** slam_gmapping

The =slam_gmapping= node takes in
[[http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html][sensor_msgs/LaserScan]]
messages and builds a map
([[http://docs.ros.org/api/nav_msgs/html/msg/OccupancyGrid.html][nav_msgs/OccupancyGrid]]).
The map can be retrieved via a ROS [[/Topics][topic]] or
[[/Services][service]].

****** Subscribed Topics

=tf=
([[http://docs.ros.org/api/tf/html/msg/tfMessage.html][tf/tfMessage]])

-  Transforms necessary to relate frames for laser, base, and odometry
   (see below)

=scan=
([[http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html][sensor_msgs/LaserScan]])

-  Laser scans to create the map from

****** Published Topics

=map_metadata=
([[http://docs.ros.org/api/nav_msgs/html/msg/MapMetaData.html][nav_msgs/MapMetaData]])

-  Get the map data from this topic, which is latched, and updated
   periodically.

=map=
([[http://docs.ros.org/api/nav_msgs/html/msg/OccupancyGrid.html][nav_msgs/OccupancyGrid]])

-  Get the map data from this topic, which is latched, and updated
   periodically

=~entropy=
([[http://docs.ros.org/api/std_msgs/html/msg/Float64.html][std_msgs/Float64]])

-  Estimate of the entropy of the distribution over the robot's pose (a
   higher value indicates greater uncertainty). New in 1.1.0.

****** Services

=dynamic_map=
([[http://docs.ros.org/api/nav_msgs/html/srv/GetMap.html][nav_msgs/GetMap]])

-  Call this service to get the map data

****** Parameters

=~inverted_laser= (=string=, default: ="false"=)

-  *(REMOVED in 1.1.1; transform data is used instead)* Is the laser
   right side up (scans are ordered CCW), or upside down (scans are
   ordered CW)?

=~throttle_scans= (=int=, default: 1)

-  Process 1 out of every this many scans (set it to a higher number to
   skip more scans)

=~base_frame= (=string=, default: ="base_link"=)

-  The frame attached to the mobile base.

=~map_frame= (=string=, default: ="map"=)

-  The frame attached to the map.

=~odom_frame= (=string=, default: ="odom"=)

-  The frame attached to the odometry system.

=~map_update_interval= (=float=, default: 5.0)

-  How long (in seconds) between updates to the map. Lowering this
   number updates the occupancy grid more often, at the expense of
   greater computational load.

=~maxUrange= (=float=, default: 80.0)

-  The maximum usable range of the laser. A beam is cropped to this
   value.

=~sigma= (=float=, default: 0.05)

-  The sigma used by the greedy endpoint matching

=~kernelSize= (=int=, default: 1)

-  The kernel in which to look for a correspondence

=~lstep= (=float=, default: 0.05)

-  The optimization step in translation

=~astep= (=float=, default: 0.05)

-  The optimization step in rotation

=~iterations= (=int=, default: 5)

-  The number of iterations of the scanmatcher

=~lsigma= (=float=, default: 0.075)

-  The sigma of a beam used for likelihood computation

=~ogain= (=float=, default: 3.0)

-  Gain to be used while evaluating the likelihood, for smoothing the
   resampling effects

=~lskip= (=int=, default: 0)

-  Number of beams to skip in each scan.

=~minimumScore= (=float=, default: 0.0)

-  Minimum score for considering the outcome of the scan matching good.
   Can avoid jumping pose estimates in large open spaces when using
   laser scanners with limited range (e.g. 5m). Scores go up to 600+,
   try 50 for example when experiencing jumping estimate issues.

=~srr= (=float=, default: 0.1)

-  Odometry error in translation as a function of translation (rho/rho)

=~srt= (=float=, default: 0.2)

-  Odometry error in translation as a function of rotation (rho/theta)

=~str= (=float=, default: 0.1)

-  Odometry error in rotation as a function of translation (theta/rho)

=~stt= (=float=, default: 0.2)

-  Odometry error in rotation as a function of rotation (theta/theta)

=~linearUpdate= (=float=, default: 1.0)

-  Process a scan each time the robot translates this far

=~angularUpdate= (=float=, default: 0.5)

-  Process a scan each time the robot rotates this far

=~temporalUpdate= (=float=, default: -1.0)

-  Process a scan if the last scan processed is older than the update
   time in seconds. A value less than zero will turn time based updates
   off.

=~resampleThreshold= (=float=, default: 0.5)

-  The Neff based resampling threshold

=~particles= (=int=, default: 30)

-  Number of particles in the filter

=~xmin= (=float=, default: -100.0)

-  Initial map size

=~ymin= (=float=, default: -100.0)

-  Initial map size

=~xmax= (=float=, default: 100.0)

-  Initial map size

=~ymax= (=float=, default: 100.0)

-  Initial map size

=~delta= (=float=, default: 0.05)

-  Resolution of the map

=~llsamplerange= (=float=, default: 0.01)

-  Translational sampling range for the likelihood

=~llsamplestep= (=float=, default: 0.01)

-  Translational sampling step for the likelihood

=~lasamplerange= (=float=, default: 0.005)

-  Angular sampling range for the likelihood

=~lasamplestep= (=float=, default: 0.005)

-  Angular sampling step for the likelihood

=~transform_publish_period= (=float=, default: 0.05)

-  How long (in seconds) between transform publications.

=~occ_thresh= (=float=, default: 0.25)

-  Threshold on gmapping's occupancy values. Cells with greater
   occupancy are considered occupied (i.e., set to 100 in the resulting
   [[http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html][sensor_msgs/LaserScan]]).
   New in 1.1.0.

=~maxRange= (=float=)

-  The maximum range of the sensor. If regions with no obstacles within
   the range of the sensor should appear as free space in the map, set
   maxUrange < maximum range of the real sensor <= maxRange.

****** Required tf Transforms

=<the frame attached to incoming scans>= → =base_link=

-  usually a fixed value, broadcast periodically by a
   [[/robot_state_publisher][robot_state_publisher]], or a =tf=
   [[/tf#static_transform_publisher][static_transform_publisher]].

=base_link= → =odom=

-  usually provided by the odometry system (e.g., the driver for the
   mobile base)

****** Provided tf Transforms

=map= → =odom=

-  the current estimate of the robot's pose within the map frame

*** reference

+ http://wiki.ros.org/gmapping
+ [[https://github.com/ros-perception/slam_gmapping][https://github.com/ros-perception/slam_gmapping.git]]

** CARMEN: Carnegie Mellon Robot Navigation Toolkit

*** Core Functionalities

- Carmen is a modular robot control software
- Carmen uses the inter-process communication plattform IPC
- Process monitoring
- Robot hardware support for different plattforms (see here)
- Hardware support for SICK laser range finder and GPS receiver
- Robot/sensor simulator (in 2d)
- Path planning module
- Localization module
- Scan-matching and mapping module
- Message logging and playback functionality
- Centralized parameter server
- Several useful functions when working/programming with robots
- Carmen is written in C, but provides Java support
- Carmen runs under Linux and is available under GPL

*** reference

+ [[http://carmen.sourceforge.net/home.html][Homepage]]

** 论文中如何引用网页

[[/home/ben/Wally/Journal//Figure/scrot/3769ZXh.png]]

[[/home/ben/Wally/Journal//Figure/scrot/3769mhn.png]]

http://tex.stackexchange.com/questions/3587/how-can-i-use-bibtex-to-cite-a-web-page

A simple way of doing it in BibTeX is with a @misc entry:

#+BEGIN_EXAMPLE
@misc{WinNT,
  title = {{MS Windows NT} Kernel Description},
  howpublished = {\url{http://web.archive.org/web/20080207010024/http://www.808multimedia.com/winnt/kernel.htm}},
  note = {Accessed: 2010-09-30}
}
#+END_EXAMPLE

You should also perhaps include an author if you know it. And remember to load a package such as hyperref or url.

If you are using BibLaTeX there is an @online entry type:

#+BEGIN_EXAMPLE
  @online{WinNT,
    author = {MultiMedia LLC},
    title = {{MS Windows NT} Kernel Description},
    year = 1999,
    url = {http://web.archive.org/web/20080207010024/http://www.808multimedia.com/winnt/kernel.htm},
    urldate = {2010-09-30}
  }
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  @misc{ROS,
  title={Robot Operating System},
  howpublished={\url{http://www.ros.org/wiki}},
  note={online}
  }

  @mics{Gazebo,
  title={Gazebo}
  howpublished={\url{http://http://www.gazebosim.org/}},
  note{online}}
#+END_EXAMPLE

** vim
*** vim ESC

+ http://segmentfault.com/q/1010000000405321
+ http://www.v2ex.com/t/50291


- Capslock => ESC (Caps Lock和Esc没有互换的，对Vim都不是真爱。)
- imap kj <esc>
- 右ALT => ESC
- C-c => ESC
- inoremap jj <ESC>

- imap jj <ESC>
  namp ;; <Esc>
  vmap ;; <Esc>
- C-[ 默认

*** vim GUI

vim是命令行的，Gvim会带图形界面。

*** 代码折叠

操作：za，打开或关闭当前折叠；zM，关闭所有折叠；zR，打开所有折叠。效果如下：

*** 接口和实现切换

这样，键入 ;ch 就能在实现文件和接口文件间切换，键入 ;sch 子窗口中将显示实现文件/接口文件。如下图所示：

*** 外部粘贴

http://www.cnblogs.com/xshang/p/3459179.html

ubuntu默认vim是不支持从外部文件与vim之间的粘帖复制，vim有自己的剪切版，
分别是”0-”9,”-,”8,”+,”:,”/,”%,”i,这些都是vim的寄存器，可以用
命令:reg查看。

要实现外部文件与vim之间的粘帖和复制，ubuntu需要安装vim-gnome,

 “+y表示从vim复制到系统剪切版，

“+p表示从外部文件(系统剪切版)粘帖到vim,

“+d表示剪切.

*** 代码跳转

g]

返回先前调用处，可以键入 vim 快捷键 ctrl-t 返回，如果想再次进入，可以
用前面介绍的方式，或者键入 ctrl-i。另外，注意，ctrl-o 以是一种返回快捷
键，但与 ctrl-t 的返回不同，前者是返回上次光标停留行、后者返回上个标签。



* Week
** 2015/12/29
*** map
**** costmap_2d

- http://wiki.ros.org/costmap_2d

**** map_server

- http://wiki.ros.org/map_server

***** Package Summary

map_server provides the =map_server= ROS
[[http://www.ros.org/wiki/Nodes][Node]], which offers map data as a ROS
[[http://www.ros.org/wiki/Services][Service]]. It also provides the
=map_saver= command-line utility, which allows dynamically generated
maps to be saved to file.

***** Map format

Maps manipulated by the tools in this package are stored in a pair of
files. The YAML file describes the map meta-data, and names the image
file. The image file encodes the occupancy data.

****** Image format

The image describes the occupancy state of each cell of the world in the
color of the corresponding pixel. Whiter pixels are free, blacker pixels
are occupied, and pixels in between are unknown. Color and grayscale
images are accepted, but most maps are gray (even though they may be
stored as if in color). Thresholds in the YAML file are used to divide
the three categories; thresholding is done inside the =map_server=.

When comparing to the threshold parameters, the occupancy probability of
an image pixel is computed as follows:

#+BEGIN_EXAMPLE
  occ=(255-color_avg)/255.0
#+END_EXAMPLE

where color_avg is the 8-bit value
that results from averaging over all channels, e.g. if the image is
24-bit color, a pixel with the color =0x0a0a0a= has a probability of
0.96, which is very occupied. The color =0xeeeeee= yields 0.07, which is
very unoccupied.

When communicated via ROS messages, occupancy is represented as an
integer in the range [0,100], with 0 meaning completely free and 100
meaning completely occupied, and the special value -1 for completely
unknown.

Image data is read in via [[http://www.libsdl.org/projects/SDL_image/docs/index.html][SDL_Image]];
supported formats vary, depending on what SDL_Image provides on a
specific platform. Generally speaking, most popular image formats are
widely supported. A notable exception is that PNG is not supported on OS
X.

****** YAML format

The YAML format is best explained with a simple, complete example:

#+BEGIN_EXAMPLE
    image: testmap.png
    resolution: 0.1
    origin: [0.0, 0.0, 0.0]
    occupied_thresh: 0.65
    free_thresh: 0.196
    negate: 0
#+END_EXAMPLE

Required fields:

-  *image* : Path to the image file containing the occupancy data; can
   be absolute, or relative to the location of the YAML file
-  *resolution* : Resolution of the map, meters / pixel
-  *origin* : The 2-D pose of the lower-left pixel in the map, as (x, y,
   yaw), with yaw as counterclockwise rotation (yaw=0 means no
   rotation). Many parts of the system currently ignore yaw.
-  *occupied_thresh* : Pixels with occupancy probability greater than
   this threshold are considered completely occupied.
-  *free_thresh* : Pixels with occupancy probability less than this
   threshold are considered completely free.
-  *negate* : Whether the white/black free/occupied semantics should be
   reversed (interpretation of thresholds is unaffected)

***** Command-line Tools

****** map_server

=map_server= is a ROS node that reads a map from disk and offers it via
a ROS service.
The current implementation of the map_server converts color values in
the map image data into ternary occupancy values: free (0), occupied
(100), and unknown (-1). Future versions of this tool may use the values
between 0 and 100 to communicate finer gradations of occupancy.

******* Usage

#+BEGIN_EXAMPLE
    map_server <map.yaml>
#+END_EXAMPLE

******* Example

#+BEGIN_EXAMPLE
    rosrun map_server map_server mymap.yaml
#+END_EXAMPLE

Note that the map data may be retrieved via either latched topic
(meaning that it is sent once to each new subscriber), or via service.
The service may eventually be phased out.

******* Published Topics

=map_metadata=
([[http://docs.ros.org/api/nav_msgs/html/msg/MapMetaData.html][nav_msgs/MapMetaData]])

-  Receive the map metadata via this latched topic.

=map=
([[http://docs.ros.org/api/nav_msgs/html/msg/OccupancyGrid.html][nav_msgs/OccupancyGrid]])

-  Receive the map via this latched topic.

******* Services

=static_map=
([[http://docs.ros.org/api/nav_msgs/html/srv/GetMap.html][nav_msgs/GetMap]])

-  Retrieve the map via this service.

******* Parameters

=~frame_id= (=string=, default: ="map"=)

-  The frame to set in the header of the published map.

****** map_saver

=map_saver= saves a map to disk, e.g., from a SLAM mapping service.

******* Usage

#+BEGIN_EXAMPLE
    map_saver [-f mapname]
#+END_EXAMPLE

=map_saver= retrieves map data and writes it out to *map.pgm* and
*map.yaml*. Use the *-f* option to provide a different base name for the
output files.

******* Example

#+BEGIN_EXAMPLE
    rosrun map_server map_saver -f mymap
#+END_EXAMPLE

******* Subscribed Topics

=map=
([[http://docs.ros.org/api/nav_msgs/html/msg/OccupancyGrid.html][nav_msgs/OccupancyGrid]])

-  Map will be retrieved via this latched topic.

**** nav_msgs/OccupanyGrid

1. File: nav_msgs/OccupancyGrid.msg


1. Raw Message Definition

   #+BEGIN_EXAMPLE
     # This represents a 2-D grid map, in which each cell represents the probability of
     # occupancy.

     Header header

     #MetaData for the map
     MapMetaData info

     # The map data, in row-major order, starting with (0,0).  Occupancy
     # probabilities are in the range [0,100].  Unknown is -1.
     int8[] data
   #+END_EXAMPLE

2. Compact Message Definition

   #+BEGIN_EXAMPLE
     std_msgs/Header header
     nav_msgs/MapMetaData info
     int8[] data
   #+END_EXAMPLE

**** nav_msgs/MapMetaData

1. File: nav_msgs/MapMetaData.msg

2. Raw Message Definition

   #+BEGIN_EXAMPLE
     # This hold basic information about the characterists of the OccupancyGrid

     # The time at which the map was loaded
     time map_load_time
     # The map resolution [m/cell]
     float32 resolution
     # Map width [cells]
     uint32 width
     # Map height [cells]
     uint32 height
     # The origin of the map [m, m, rad].  This is the real-world pose of the
     # cell (0,0) in the map.
     geometry_msgs/Pose origin
   #+END_EXAMPLE

3. Compact Message Definition

   #+BEGIN_EXAMPLE
     time map_load_time
     float32 resolution
     uint32 width
     uint32 height
     geometry_msgs/Pose origin
   #+END_EXAMPLE

*** color-theme vs customize-theme

**** reference

+ [[http://www.emacswiki.org/emacs/CustomThemes][Emacswiki: customize-theme]]
+ [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html][EmacsManual: customzie themes]]

**** customize-theme

Starting with version 23, vanilla GnuEmacs introduced custom them.

Custom themes are similar to color themes. Though they are newer, they
do not replace color themes –- each approach has its advantages.

#+BEGIN_EXAMPLE
hello world
#+END_EXAMPLE

#+BEGIN_SRC python
print "hello world"
#+END_SRC


fd
+fd+ [1]

_fd_ [[fd]]

/fd/

=fd=

*fd*

**** 小结

customize themes 内置，但没有 color-theme 那么多主题。

暂时使用 light blue theme. 对比度比以前的黑色背景要强一些。

*** 己所不欲，勿施于人

己所不欲，勿施于人。
己不欲，人亦不欲？何以推己及人？
譬如，我不爱热闹，别人亦喜冷清？
进而推，我欲亦人欲？
不然。
人所不欲，勿施于人。
我非人，何知人之欲与不欲？宽容的基础在于理解，理解的前提是感受。
世上不存在感同身受，但施行设身处地由己推人还是可以的。

*** nilsson1969mobilerobot
**** bib
@techreport{nilsson1969mobilerobot,
  title={A mobile automaton: An application of artificial intelligence techniques},
  author={Nilsson, Nils J},
  year={1969},
  institution={DTIC Document}
}

*** gmapping
**** slam_gmapping

This package contains a ROS wrapper for OpenSlam's Gmapping. The
gmapping package provides laser-based SLAM (Simultaneous Localization
and Mapping), as a ROS node called slam_gmapping. Using slam_gmapping,
you can create a 2-D occupancy grid map (like a building floorplan) from
laser and pose data collected by a mobile robot.


***** External Documentation

This is mostly a third party package; the underlying GMapping library is
[[http://openslam.org/gmapping.html][externally documented]]. Look there
for details on many of the parameters listed below.

***** Hardware Requirements

To use =slam_gmapping=, you need a mobile robot that provides odometry
data and is equipped with a horizontally-mounted, fixed, laser
range-finder. The =slam_gmapping= node will attempt to transform each
incoming scan into the =odom= (odometry) [[/tf][tf]] frame. See the
"[[/gmapping#Required_tf_Transforms][Required tf transforms]]" for more
on required transforms.

***** Example

To make a map from a robot with a laser publishing scans on the
=base_scan= topic:

#+BEGIN_EXAMPLE
    rosrun gmapping slam_gmapping scan:=base_scan
#+END_EXAMPLE

***** Nodes
****** slam_gmapping

The =slam_gmapping= node takes in
[[http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html][sensor_msgs/LaserScan]]
messages and builds a map
([[http://docs.ros.org/api/nav_msgs/html/msg/OccupancyGrid.html][nav_msgs/OccupancyGrid]]).
The map can be retrieved via a ROS [[/Topics][topic]] or
[[/Services][service]].

******* Subscribed Topics

=tf=
([[http://docs.ros.org/api/tf/html/msg/tfMessage.html][tf/tfMessage]])

-  Transforms necessary to relate frames for laser, base, and odometry
   (see below)

=scan=
([[http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html][sensor_msgs/LaserScan]])

-  Laser scans to create the map from

******* Published Topics

=map_metadata=
([[http://docs.ros.org/api/nav_msgs/html/msg/MapMetaData.html][nav_msgs/MapMetaData]])

-  Get the map data from this topic, which is latched, and updated
   periodically.

=map=
([[http://docs.ros.org/api/nav_msgs/html/msg/OccupancyGrid.html][nav_msgs/OccupancyGrid]])

-  Get the map data from this topic, which is latched, and updated
   periodically

=~entropy=
([[http://docs.ros.org/api/std_msgs/html/msg/Float64.html][std_msgs/Float64]])

-  Estimate of the entropy of the distribution over the robot's pose (a
   higher value indicates greater uncertainty). New in 1.1.0.

******* Services

=dynamic_map=
([[http://docs.ros.org/api/nav_msgs/html/srv/GetMap.html][nav_msgs/GetMap]])

-  Call this service to get the map data

******* Parameters

=~inverted_laser= (=string=, default: ="false"=)

-  *(REMOVED in 1.1.1; transform data is used instead)* Is the laser
   right side up (scans are ordered CCW), or upside down (scans are
   ordered CW)?

=~throttle_scans= (=int=, default: 1)

-  Process 1 out of every this many scans (set it to a higher number to
   skip more scans)

=~base_frame= (=string=, default: ="base_link"=)

-  The frame attached to the mobile base.

=~map_frame= (=string=, default: ="map"=)

-  The frame attached to the map.

=~odom_frame= (=string=, default: ="odom"=)

-  The frame attached to the odometry system.

=~map_update_interval= (=float=, default: 5.0)

-  How long (in seconds) between updates to the map. Lowering this
   number updates the occupancy grid more often, at the expense of
   greater computational load.

=~maxUrange= (=float=, default: 80.0)

-  The maximum usable range of the laser. A beam is cropped to this
   value.

=~sigma= (=float=, default: 0.05)

-  The sigma used by the greedy endpoint matching

=~kernelSize= (=int=, default: 1)

-  The kernel in which to look for a correspondence

=~lstep= (=float=, default: 0.05)

-  The optimization step in translation

=~astep= (=float=, default: 0.05)

-  The optimization step in rotation

=~iterations= (=int=, default: 5)

-  The number of iterations of the scanmatcher

=~lsigma= (=float=, default: 0.075)

-  The sigma of a beam used for likelihood computation

=~ogain= (=float=, default: 3.0)

-  Gain to be used while evaluating the likelihood, for smoothing the
   resampling effects

=~lskip= (=int=, default: 0)

-  Number of beams to skip in each scan.

=~minimumScore= (=float=, default: 0.0)

-  Minimum score for considering the outcome of the scan matching good.
   Can avoid jumping pose estimates in large open spaces when using
   laser scanners with limited range (e.g. 5m). Scores go up to 600+,
   try 50 for example when experiencing jumping estimate issues.

=~srr= (=float=, default: 0.1)

-  Odometry error in translation as a function of translation (rho/rho)

=~srt= (=float=, default: 0.2)

-  Odometry error in translation as a function of rotation (rho/theta)

=~str= (=float=, default: 0.1)

-  Odometry error in rotation as a function of translation (theta/rho)

=~stt= (=float=, default: 0.2)

-  Odometry error in rotation as a function of rotation (theta/theta)

=~linearUpdate= (=float=, default: 1.0)

-  Process a scan each time the robot translates this far

=~angularUpdate= (=float=, default: 0.5)

-  Process a scan each time the robot rotates this far

=~temporalUpdate= (=float=, default: -1.0)

-  Process a scan if the last scan processed is older than the update
   time in seconds. A value less than zero will turn time based updates
   off.

=~resampleThreshold= (=float=, default: 0.5)

-  The Neff based resampling threshold

=~particles= (=int=, default: 30)

-  Number of particles in the filter

=~xmin= (=float=, default: -100.0)

-  Initial map size

=~ymin= (=float=, default: -100.0)

-  Initial map size

=~xmax= (=float=, default: 100.0)

-  Initial map size

=~ymax= (=float=, default: 100.0)

-  Initial map size

=~delta= (=float=, default: 0.05)

-  Resolution of the map

=~llsamplerange= (=float=, default: 0.01)

-  Translational sampling range for the likelihood

=~llsamplestep= (=float=, default: 0.01)

-  Translational sampling step for the likelihood

=~lasamplerange= (=float=, default: 0.005)

-  Angular sampling range for the likelihood

=~lasamplestep= (=float=, default: 0.005)

-  Angular sampling step for the likelihood

=~transform_publish_period= (=float=, default: 0.05)

-  How long (in seconds) between transform publications.

=~occ_thresh= (=float=, default: 0.25)

-  Threshold on gmapping's occupancy values. Cells with greater
   occupancy are considered occupied (i.e., set to 100 in the resulting
   [[http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html][sensor_msgs/LaserScan]]).
   New in 1.1.0.

=~maxRange= (=float=)

-  The maximum range of the sensor. If regions with no obstacles within
   the range of the sensor should appear as free space in the map, set
   maxUrange < maximum range of the real sensor <= maxRange.

******* Required tf Transforms

=<the frame attached to incoming scans>= → =base_link=

-  usually a fixed value, broadcast periodically by a
   [[/robot_state_publisher][robot_state_publisher]], or a =tf=
   [[/tf#static_transform_publisher][static_transform_publisher]].

=base_link= → =odom=

-  usually provided by the odometry system (e.g., the driver for the
   mobile base)

******* Provided tf Transforms

=map= → =odom=

-  the current estimate of the robot's pose within the map frame

**** reference

+ http://wiki.ros.org/gmapping
+ [[https://github.com/ros-perception/slam_gmapping][https://github.com/ros-perception/slam_gmapping.git]]

*** CARMEN: Carnegie Mellon Robot Navigation Toolkit

**** Core Functionalities

- Carmen is a modular robot control software
- Carmen uses the inter-process communication plattform IPC
- Process monitoring
- Robot hardware support for different plattforms (see here)
- Hardware support for SICK laser range finder and GPS receiver
- Robot/sensor simulator (in 2d)
- Path planning module
- Localization module
- Scan-matching and mapping module
- Message logging and playback functionality
- Centralized parameter server
- Several useful functions when working/programming with robots
- Carmen is written in C, but provides Java support
- Carmen runs under Linux and is available under GPL

**** reference

+ [[http://carmen.sourceforge.net/home.html][Homepage]]

*** Linux CAD

Autocad 要用便用最经典的。实用为主。

**** alternatives

- [[http://www.qcad.org/][QCAD]]
- [[http://sourceforge.net/projects/pythoncad/][PythonCAD]]

**** reference

+ [[https://linuxtoy.org/archives/6-of-the-best-free-linux-cad-software.html][6 款高品质的免费 Linux CAD 应用程序]]
+ [[http://www.techdrivein.com/2011/08/8-best-cad-apps-for-linux.html][8 Best CAD Apps For Linux]]
+ [[http://blog.cometdocs.com/10-great-free-alternatives-to-autocad][10 Great Free Alternatives to AutoCAD]]

** 2015/12/28
*** LaTeX

**** 测试 ctex 和 winfonts 选项

#+BEGIN_SRC latex
\documentclass{article}
\usepackage[winfonts]{ctex}
\begin{document}
中文
\end{document}
#+END_SRC

编译有警告，可以生成 PDF

**** 测试 buaathesis 作为 org latex 文类

1. 配置

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-latex-classes
                  '("buaathesis" "\\documentclass{buaathesis}
       [NO-DEFAULT-PACKAGES]
       [NO-PACKAGES]"))
   #+END_SRC

2. 测试 org

   #+BEGIN_SRC org
     ,#+LaTeX_class: buaathesis

     中文
   #+END_SRC

3. 生成 latex

   #+BEGIN_SRC latex
     % Created 2015-12-28 一 10:00
     \documentclass{buaathesis}
     \usepackage[utf8]{inputenc}
     \usepackage[T1]{fontenc}
     \usepackage{fixltx2e}
     \usepackage{graphicx}
     \usepackage{longtable}
     \usepackage{float}
     \usepackage{wrapfig}
     \usepackage{rotating}
     \usepackage[normalem]{ulem}
     \usepackage{amsmath}
     \usepackage{textcomp}
     \usepackage{marvosym}
     \usepackage{wasysym}
     \usepackage{amssymb}
     \usepackage{capt-of}
     \usepackage{hyperref}
     \tolerance=1000
     \usepackage{minted}
     \author{ben}
     \date{\today}
     \title{}
     \hypersetup{
      pdfauthor={ben},
      pdftitle={},
      pdfkeywords={},
      pdfsubject={},
      pdfcreator={Emacs 24.4.1 (Org mode 8.3beta)},
      pdflang={English}}
     \begin{document}

     \tableofcontents

     中文
     \end{document}
   #+END_SRC

4. 分析

   1) 编译 LaTeX 文档，可以生成 PDF，有如下错误(error)

      #+BEGIN_EXAMPLE
        ! LaTeX Error: Option clash for package ulem.
      #+END_EXAMPLE

     原因： ulem宏包选项冲突， org导出的LaTeX文件中默认包含
      =\usepackage[normalem]{ulem}= 与 buaathesis 中设置冲突，注释后无
      错误。

   2) 如何配置 org latex 使其导出的 latex 文件零配置
      - 不默认包含使用各种宏包（OK）
      - 不默认生成目录（手动删除）
      - 不默认生成作者、日期等信息（手动删除）

   3) 导出的标题层次不对, 即 一级标题没有导出为 \chapter

**** 空格

**** 章节条

[[/home/ben/Wally/Journal//Figure/scrot/3959tpl.png]]

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("buaathesis" "\\documentclass{buaathesis}
    [NO-DEFAULT-PACKAGES]
    [NO-PACKAGES]
    [NO-EXTRA]"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ))
#+END_SRC
**** 图片
***
*** org-latex-classes 控制导出选项

 [DEFAULT-PACKAGES]      \usepackage statements for default packages
 [NO-DEFAULT-PACKAGES]   do not include any of the default packages
 [PACKAGES]              \usepackage statements for packages
 [NO-PACKAGES]           do not include the packages
 [EXTRA]                 the stuff from #+LATEX_HEADER(_EXTRA)
 [NO-EXTRA]              do not include #+LATEX_HEADER(_EXTRA) stuff
*** [[http://wiki.ros.org/ROS/Tutorials/MultipleMachines][multi-machine]]


/ROS is designed with distributed computing in mind./

_A well-written node makes no assumptions about where in the network
it runs_, allowing computation to be relocated at run-time to match
the available resources

*** 搭建 Git 服务器

**** why

搭建本地 git 服务器，将 PC 端的文件通过 git 与 Raspberry 共享

**** git server

1. 创建用户 git 并设置权限

2. 新建 git responsity, 以 .git 结尾

   #+BEGIN_EXAMPLE
   sudo git init --bare catkin_ws.git
   sudo chown -R git:git catkin_ws.git
   #+END_EXAMPLE

3. 从其它地方push

   #+BEGIN_EXAMPLE
   git remote add origin git@IP:/path/to/git-responsity.git
   git push origin -u master
   #+END_EXAMPLE

   - IP 可以是 localhost

**** reference

-
  http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000

**** raspberry

默认安装了git

*** emms

**** reference

+ [[https://www.gnu.org/software/emms/index.html][Homepage]]
+ [[http://lifegoo.pluskid.org/wiki/EMMS.html][EMMS 配置与使用]]
+ [[http://www.newsmth.net/nForum/#!article/Emacs/98415][EMMS 中文编码]]

**** intro

Emacs Multimedia System

**** 安装

Mepla

**** 中文编码

+

**** emms-cache-next/playlist

**** emms-add-file

*** 软件包依赖问题

#+BEGIN_EXAMPLE
您可能需要运行“apt-get -f install”来纠正下列错误：
下列软件包有未满足的依赖关系：
 steam-launcher : 依赖: curl 但是它将不会被安装
E: 有未能满足的依赖关系。请尝试不指明软件包的名字来运行“apt-get -f install”(也可以指定一个解决办法)。

#+END_EXAMPLE

使用 新得立软件管理进行过滤

*** convmv

文件名编码转换工具

**** man

CONVMV(1)                                                                                                                                                            CONVMV(1)



NAME
       convmv - converts filenames from one encoding to another

SYNOPSIS
       convmv [options] FILE(S) ... DIRECTORY(S)

OPTIONS
       -f ENCODING
           specify the current encoding of the filename(s) from which should be converted

       -t ENCODING
           specify the encoding to which the filename(s) should be converted

       -i  interactive mode (ask y/n for each action)

       -r  recursively go through directories

*** ps1 hostname

#+BEGIN_EXAMPLE
export PS1="\u@ \W $ "
#+END_EXAMPLE

**** ps1 shell 提示符

PS1：就是用户平时的提示符。
PS2：第一行没输完，等待第二行输入的提示符。

Linux系统提示符是用系统变量PS1来定义的。一般系统默认的形式是：

#+BEGIN_EXAMPLE
[username@host 工作目录]$
#+END_EXAMPLE

**** 特殊符号

- \d ：代表日期，格式为weekday month date，例如："Mon Aug 1"

- \H ：完整的主机名称。例如：我的机器名称为：fc4.linux，则这个名称就是fc4.linux

- \h ：仅取主机的第一个名字，如上例，则为fc4，.linux则被省略

- \t ：显示时间为24小时格式，如：HH：MM：SS

- \T ：显示时间为12小时格式

- \A ：显示时间为24小时格式：HH：MM

- \u ：当前用户的账号名称

- \v ：BASH的版本信息

- \w ：完整的工作目录名称。家目录会以 ~代替

- \W ：利用basename取得工作目录名称，所以只会列出最后一个目录

- \# ：下达的第几个命令

- \$ ：提示字符，如果是root时，提示符为：# ，普通用户则为：$

**** 颜色

我们可以通过设置PS1变量使提示符成为彩色。在PS1中设置字符序列颜色的格式
为：

#+BEGIN_EXAMPLE
\[\e[F;Bm\]
#+END_EXAMPLE

其中``F''为字体颜色，编号30~37；``B''为背景色，编号40~47。

可通过``\e[0m''关闭颜色输出；特别的，当B为1时，将显示加亮加粗的文字，
详细请看下面的颜色表与代码表。

颜色表

|------+------+--------|
| 前景 | 背景 | 颜色   |
|------+------+--------|
|   30 |   40 | 黑色   |
|   31 |   41 | 紅色   |
|   32 |   42 | 綠色   |
|   33 |   43 | 黃色   |
|   34 |   44 | 藍色   |
|   35 |   45 | 紫紅色 |
|   36 |   46 | 青藍色 |
|   37 |   47 | 白色   |
|------+------+--------|


#+BEGIN_EXAMPLE
PS1="\[\e[32m\][\u@\h \w]$\[\e[m\]"
export PS1
#+END_EXAMPLE

**** reference

+ http://www.cnblogs.com/starspace/archive/2009/02/21/1395382.html

*** algorithm

*** PDFtk: The PDF Toolkit
**** [[http://seisman.info/introduction-to-pdftk.html][PDF合并和分割工具---PDFtk]]
***** [[#id4][简介]]

PDFtk是什么？我觉得官网的一句话解释得很好。

#+BEGIN_QUOTE
  If PDF is electronic paper, then PDFtk is an electronic
  staple-remover, hole-punch, binder, secret-decoder-ring, and
  X-Ray-glasses. PDFtk is a simple tool for doing everyday things with
  PDF documents.
#+END_QUOTE

其官方网站为： [[http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit]]

PDFtk目前分为三个版本：

-  PDFtk Server：命令行工具。支持windows、Linux、Mac。
-  PDFtk Free：图形界面基础免费版；仅限windows用户；功能仅限于PDF合并和分割；
-  PDFtk Pro：图形界面专业收费版；仅限windows用户，可以对PDF文档进行合并、分割、旋转、加水印、加邮戳、加密。

对于Linux用户，唯一的选择是免费的PDFtk Server，其功能与收费PDFtk Pro完
全相同，只是没有GUI而已。作者还是很厚道的。

Linux的各个发行版的官方源中基本都有该软件，直接apt-get或者yum安装即可。

***** [[#id5][功能]]

-  合并PDF；
-  分割PDF页面；
-  旋转PDF文档或页面；
-  PDF解密；（不是破解）
-  PDF加密；
-  用X/FDF填写PDF表格；
-  从PDF表格中生成PDF Data Stencils；
-  加背景水印或前景印章；
-  报告PDF Metrics，书签和元数据；
-  增加/更新PDF书签或元数据；
-  给PDF页面或文档加附件；
-  解压PDF附件；
-  分解PDF文档为多个单页；
-  解压缩和重压缩页面流；
-  修复受损的PDF文档；

这功能完全可以与Adobe Acrobat相媲美了，更重要的是PDFtk支持Linux且完全
免费。（个人用户免费，若用于商业用途需付费）。

***** [[#id6][用法示例]]

具体选项看这里： [[http://www.pdflabs.com/docs/pdftk-man-page/]]

下面给出一些常见的例子。例子原文在：
[[http://www.pdflabs.com/docs/pdftk-cli-examples/]]

****** 合并奇偶
扫描一本书，odd.pdf为书的全部奇数页，even.pdf为书的全部偶数页，下面的
命令可以将两个pdf合并成页码正常的书:

#+BEGIN_EXAMPLE
pdftk A=odd.pdf B=even.pdf shuffle A B output collated.pdf
#+END_EXAMPLE

****** 如果odd.pdf是逆序的:

#+BEGIN_EXAMPLE
pdftk A=odd.pdf B=even.pdf shuffle Aend-1 B output collated.pdf
#+END_EXAMPLE

****** 加密PDF:

#+BEGIN_EXAMPLE
pdftk secured.pdf input_pw foopass output unsecured.pdf
#+END_EXAMPLE

****** PDF 128位加密，保留全部权限:

#+BEGIN_EXAMPLE
pdftk 1.pdf output 1.128.pdf owner_pw foopass
#+END_EXAMPLE

****** PDF 128位加密，保留全部权限，打开文档需输入密码”baz”:

#+BEGIN_EXAMPLE
pdftk 1.pdf output 1.128.pdf owner_pw foo user_pw baz
#+END_EXAMPLE

****** PDF 128位加密，打开文档需输入密码”baz”，保留打印之外的其他权限:

#+BEGIN_EXAMPLE
    pdftk 1.pdf output 1.128.pdf owner_pw foo user_pw baz allow printing
#+END_EXAMPLE

****** 合并in1.pdf和in2.pdf到新PDF中:

#+BEGIN_EXAMPLE
pdftk in1.pdf in2.pdf cat output out1.pdf
#+END_EXAMPLE

****** 或（使用句柄）:

#+BEGIN_EXAMPLE
pdftk A=in1.pdf B=in2.pdf cat A B output out1.pdf
#+END_EXAMPLE

****** 或（使用通配符）:

#+BEGIN_EXAMPLE
pdftk *.pdf cat output combined.pdf
#+END_EXAMPLE

****** 去除in1.pdf中的第13页，并创建out1.pdf:

#+BEGIN_EXAMPLE
pdftk in.pdf cat 1-12 14-end output out1.pdf
#+END_EXAMPLE

****** 或

#+BEGIN_EXAMPLE
pdftk A=in1.pdf cat A1-12 A14-end output out1.pdf
#+END_EXAMPLE

****** 对输出进行40位加密，撤销所有权限，设置owner密码为foopass:

#+BEGIN_EXAMPLE
pdftk 1.pdf 2.pdf cat output 3.pdf encrypt_40bit owner_pw foopass
#+END_EXAMPLE

****** 合并两个文件，其中一个需要被加密。对输出不加密:

#+BEGIN_EXAMPLE
pdftk A=secured.pdf 2.pdf input_pw A=foopass cat output 3.pdf
#+END_EXAMPLE

****** 解压PDF页面流，然后就可以在文本编辑器中编辑PDF文件:

#+BEGIN_EXAMPLE
pdftk doc.pdf output doc.unc.pdf uncompress
#+END_EXAMPLE

****** 压缩PDF:

#+BEGIN_EXAMPLE
pdftk mydoc.pdf output mydoc.clear.pdf compress
#+END_EXAMPLE

****** 修复破损的PDF:

#+BEGIN_EXAMPLE
pdftk broken.pdf output fixed.pdf
#+END_EXAMPLE

****** 将一个PDF文档分割成一页一个文档:

#+BEGIN_EXAMPLE
pdftk in.pdf burst
#+END_EXAMPLE

****** 将一个PDF文档分割成一页一个文档，并加密，允许低质量的打印:

#+BEGIN_EXAMPLE
pdftk in.pdf burst owner_pw foopass allow DegradedPrinting
#+END_EXAMPLE

****** 获取PDF问的元数据和书签信息:

#+BEGIN_EXAMPLE
pdftk in.pdf dump_data output report.txt
#+END_EXAMPLE

****** 将PDF第一页顺时针旋转90度:

#+BEGIN_EXAMPLE
pdftk in.pdf cat 1east 2-end output out.pdf
#+END_EXAMPLE

****** 将整个PDF文档旋转180度:

#+BEGIN_EXAMPLE
pdftk in.pdf cat 1-endsouth output out.pdf
#+END_EXAMPLE

**** 测试

#+BEGIN_EXAMPLE
  Desktop $ pdftk  ~/Wally/Reference/Guide/Doxygen使用教程.pdf shuffle 5-10 output out.pdf
#+END_EXAMPLE

效率极高，应该经常使用
**** reference

+ [[https://www.pdflabs.com/][Homepage]]

*** 整理 Audio 目录

#+BEGIN_EXAMPLE
~ $ ls Audio/Eason/
陈奕迅 - Life Continues                   陈奕迅 - Special thanks to  陈奕迅 - 打得火热  陈奕迅 - 婚礼的祝福  陈奕迅 - 新生活(新歌.精选)
陈奕迅 - Live For Today                   陈奕迅 - The Easy Ride      陈奕迅 - 反正是我  陈奕迅 - 认了吧      陈奕迅 - 幸福
陈奕迅 - Shall We Dance？Shall We Talk！  陈奕迅 - The Line-up        陈奕迅 - 黑白灰    陈奕迅 - 天佑爱人    陈奕迅 - 怎么样
#+END_EXAMPLE

1. 文件目录组织
   #+BEGIN_EXAMPLE
     +-- 歌手
        |
        |-- 时间-专辑名
            |
            |-- 时间-专辑名.ape/flac
            |-- 时间-专辑名.cue
   #+END_EXAMPLE

*** 学会去问问题

学会去问问题？问题本身也许比答案更加重要。

问什么问题？怎样表述问题？按照什么样的逻辑提出问题？问题的立足点在哪？

这在专业上比解决问题更有价值。自问自答本身便是逻辑和思考和一种形式，甚
至带有创新的因子。

- 演绎推理
- 归纳推理
- 类比推理(触类旁通)
- 横向纵向发散

* Previsous
** 2015/12/27
*** 输入特殊字符

- 特殊字符以 C-x 8 为按键前缀
- 默认定义了一些数学符号和欧洲字母
- 可以定义自己需要的，但是要注意
  - 必要而简洁的，不要增加记忆的负担
  - 遵循规范，即全局按键绑定前缀为 C-x 8

**** help C-x 8 C-h

#+BEGIN_EXAMPLE
  C-x 8 SPC        
  C-x 8 !         ¡
  C-x 8 "         Prefix Command
  C-x 8 $         ¤
  C-x 8 '         Prefix Command
  C-x 8 *         Prefix Command
  C-x 8 +         ±
  C-x 8 ,         Prefix Command
  C-x 8 -         ­
  C-x 8 .         ·
  C-x 8 /         Prefix Command
  C-x 8 1         Prefix Command
  C-x 8 3         Prefix Command
  C-x 8 <         «
  C-x 8 =         ¯
  C-x 8 >         »
  C-x 8 ?         ¿
  C-x 8 C         ©
  C-x 8 L         £
  C-x 8 P         ¶
  C-x 8 R         ®
  C-x 8 S         §
  C-x 8 Y         ¥
  C-x 8 ^         Prefix Command
  C-x 8 _         Prefix Command
  C-x 8 `         Prefix Command
  C-x 8 c         ¢
  C-x 8 m         µ
  C-x 8 o         °
  C-x 8 u         µ
  C-x 8 x         ×
  C-x 8 |         ¦
  C-x 8 ~         Prefix Command

  C-x 8 ~ SPC     ~
  C-x 8 ~ A       Ã
  C-x 8 ~ D       Ð
  C-x 8 ~ N       Ñ
  C-x 8 ~ O       Õ
  C-x 8 ~ T       Þ
  C-x 8 ~ a       ã
  C-x 8 ~ d       ð
  C-x 8 ~ n       ñ
  C-x 8 ~ o       õ
  C-x 8 ~ t       þ
  C-x 8 ~ ~       ¬

  C-x 8 ` SPC     `
  C-x 8 ` A       À
  C-x 8 ` E       È
  C-x 8 ` I       Ì
  C-x 8 ` O       Ò
  C-x 8 ` U       Ù
  C-x 8 ` a       à
  C-x 8 ` e       è
  C-x 8 ` i       ì
  C-x 8 ` o       ò
  C-x 8 ` u       ù

  C-x 8 _ a       ª
  C-x 8 _ o       º

  C-x 8 ^ SPC     ^
  C-x 8 ^ 1       ¹
  C-x 8 ^ 2       ²
  C-x 8 ^ 3       ³
  C-x 8 ^ A       Â
  C-x 8 ^ E       Ê
  C-x 8 ^ I       Î
  C-x 8 ^ O       Ô
  C-x 8 ^ U       Û
  C-x 8 ^ a       â
  C-x 8 ^ e       ê
  C-x 8 ^ i       î
  C-x 8 ^ o       ô
  C-x 8 ^ u       û

  C-x 8 3 /       Prefix Command

  C-x 8 1 /       Prefix Command

  C-x 8 / /       ÷
  C-x 8 / A       Å
  C-x 8 / E       Æ
  C-x 8 / O       Ø
  C-x 8 / a       å
  C-x 8 / e       æ
  C-x 8 / o       ø

  C-x 8 , ,       ¸
  C-x 8 , C       Ç
  C-x 8 , c       ç

  C-x 8 ' SPC     '
  C-x 8 ' '       ´
  C-x 8 ' A       Á
  C-x 8 ' E       É
  C-x 8 ' I       Í
  C-x 8 ' O       Ó
  C-x 8 ' U       Ú
  C-x 8 ' Y       Ý
  C-x 8 ' a       á
  C-x 8 ' e       é
  C-x 8 ' i       í
  C-x 8 ' o       ó
  C-x 8 ' u       ú
  C-x 8 ' y       ý

  C-x 8 " SPC     "
  C-x 8 " "       ¨
  C-x 8 " A       Ä
  C-x 8 " E       Ë
  C-x 8 " I       Ï
  C-x 8 " O       Ö
  C-x 8 " U       Ü
  C-x 8 " a       ä
  C-x 8 " e       ë
  C-x 8 " i       ï
  C-x 8 " o       ö
  C-x 8 " s       ß
  C-x 8 " u       ü
  C-x 8 " y       ÿ

  C-x 8 * SPC      
  C-x 8 * !       ¡
  C-x 8 * $       ¤
  C-x 8 * +       ±
  C-x 8 * -       ­
  C-x 8 * .       ·
  C-x 8 * <       «
  C-x 8 * =       ¯
  C-x 8 * >       »
  C-x 8 * ?       ¿
  C-x 8 * C       ©
  C-x 8 * L       £
  C-x 8 * P       ¶
  C-x 8 * R       ®
  C-x 8 * S       §
  C-x 8 * Y       ¥
  C-x 8 * c       ¢
  C-x 8 * m       µ
  C-x 8 * o       °
  C-x 8 * u       µ
  C-x 8 * x       ×
  C-x 8 * |       ¦

  C-x 8 3 / 4     ¾

  C-x 8 1 / 2     ½
  C-x 8 1 / 4     ¼
#+END_EXAMPLE

**** reference

- http://lifegoo.pluskid.org/wiki/EmacsTip.html

*** FAQ
**** 怎样才能语法加亮

将以下写到.emacs文件:

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

**** 在Windows版的Emacs下怎样使用ispell?

Win32有一个native的ispell v4，但很不好用，建议装一个cygwin的ispell-3.2.06

**** Windows版的Emacs为什么不能显示图片?

使用cvs版的ntemacs,在.emacs中加入:

#+BEGIN_SRC emacs-lisp
(auto-image-file-mode t)
#+END_SRC

**** 设置打开文件的缺省路径

#+BEGIN_SRC emacs-lisp
(setq default-directory "~")
#+END_SRC

**** ".emacs"在哪里？

+ Unix/Linux ~/.emacs 如果没有，自己创建一个。

  #+BEGIN_EXAMPLE
  touch .emacs.
  #+END_EXAMPLE

+ Windows 在根目录下创建一个名为".emacs"的文件, 如果创建不了的话也可以
  用"_emacs"作为文件名. 主目录由windows的环境变量HOME指定，如果没有设
  定HOME环境变量，一般为C:\

**** 下载的el文件怎么用？

把文件放到load-path中去，然后按照文件头上的注释说明做。
~/site-lisp 一般默认在load-path中. 增加load-path例:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/path/to/yours")
#+END_SRC

**** 怎么进行矩形区域操作？(类似UltraEdit的列模式) 怎么在每一行前插入相同文字？

x-10-3-1

**** 总有个带小尾巴~的文件出现(自动备份文件)，怎么办？

小尾巴文件是备份，可以干掉它或者按文件名分类放到指定目录中去。详细见x-8-8

**** 我想把一个命令绑定到某个按键组合上，怎么表示组合键？

x-8-6

**** 怎么转换文件格式？(DOS <--> UNIX)

C-x f (函数 set-buffer-file-coding-system )

**** 查找和替换的时候怎么输入回车之类的特殊字符？

C-q之后输入该特殊字符例如: ^M是C-q C-m，回车是C-q C-j，TAB是C-q TAB

**** M-x shell进入shell-mode出现乱码？怎么修改颜色和字体？

在.emacs中加入:

#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

更多选项请: M-x customize-group ansi-colors

**** windows下插入、浏览图片时emacs崩溃

windows版本的emacs的图片支持dll是用mingw编译的，因此如果你的emacs是用
VC编译的，则可能出现意想不到的问题。建议选择用[[http://ntmacs.sf.net][mingw编译的emacs]]

**** 如何跳到某一行?

"M-x goto-line", 推荐绑定在 "M-g" 键上, Emacs22默认把它绑定在 M-g g 上。

**** 如何插入当前时间?

一个例子:

#+BEGIN_SRC emacs-lisp
(defun my-insert-date ()
  (interactive)
  (insert (format-time-string "%Y/%m/%d %H:%M:%S" (current-time))))

(global-set-key (kbd "C-c m d") 'my-insert-date)
#+END_SRC

**** 修改 .emacs 后即时生效(不重启)?

有几种方法:

1. M-x eval-last-sexp(or C-x C-e)
2. M-x eval-region
3. M-x eval-buffer

**** 如何redo？

undo(绑定到 C-/)的过程中，进行一下其它动作，比如 C-f 移动一下光标，随
后继续undo(C-/)就是redo。或者使用redo.el

**** 如何自动换行?

设置 (toggle-truncate-lines t)

**** 为何 M-w 无效？

如果是windows系统，很可能是QQ热键拦截

**** Chinese Related

Emacs与其他程序间为什么不能拷贝、粘贴

在~/.emacs加入这句话

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

**** Emacs中新开buffer不使用默认字体怎么办

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
 '(font . "-*-SimSun-medium-r-normal-*-12-*"))
#+END_SRC

**** XEmacs怎样保存中文

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'gb2312)
#+END_SRC

**** 怎样使Emacs支持GBK和GB18030

Emacs21/22不支持GBK和GB18030。

如果你用的是Emacs21/22, 请 [[http://mule-gbk.sourceforge.net][mule-gbk]] ，按照里面的README进行安装。这样可以使
Emacs21/22支持GBK。

**** 无法使Emacs21/22支持GB18030。

Emacs23/24支持GBK和GB18030.

**** 怎样在文件中指定编码

Emacs具有自动识别文件编码的功能，不过很多编码方案都是类似的，没有什么算法能区分这些编码方案，因此，Emacs的自动识别不是万能的，有时候Emacs会
误判文件的编码。

只有文件的作者最清楚文件采用的是什么编码，因此我们提倡在文件中指定编码。在文件中指定编码的方法有两种:

1. 在文件的第一行(对于脚本文件可以是第二行)加上:

   #+BEGIN_EXAMPLE
   -*- coding: gb2312; -*-
   #+END_EXAMPLE

   对于源程序文件可以在前面加注释符号，如

   #+BEGIN_EXAMPLE
    /*     -*- coding: gb2312; -*-     */       /* C语言程序 */
    //      -*- coding: gb2312; -*-             // C++语言程序
   #+END_EXAMPLE

2. 在文件的末尾使用文件变量(Local Variables), 例如在 TeX 文件末尾，可以加上:

   #+BEGIN_EXAMPLE
    %% Local Variables:           % 是 Tex 文件的注释符号，
    %% coding: gbk                  可以根据情况换成其它注释符号，
    %% End:                         普通文本也可以不加注释符号。
   #+END_EXAMPLE

**** TeX

Windows下不能使用LaTeX-preview

使用CVS的GNU Emacs或XEmacs就可以了

**** Emacs能象vimsuite那样加载类似CJK的模板么?

可以，使用template.el扩展可以加载任何格式的模板

**** 怎样把C/C++文件重新排版

选择文本块,ESC C-\,M-X c-set-style,可以设置不同的缩进风格

c/c++, java 自动补全功能?

c/c++ - ecb java - jde

Both kind of SLOW, though.

**** 如何在Emacs中编写调试c/c++程序

M-x c-mode/ M-x cc-mode

M-x compile

M-x gdb

Gnus, Mail, Web

**** mew怎样使用SMTP验证?

#+BEGIN_SRC emacs-lisp
(setq mew-smtp-auth-list (quote ("CRAM-MD5" "LOGIN" "PLAIN")))
#+END_SRC

**** 怎样使mew在pop取信时将信件保留在服务器上?

#+BEGIN_SRC emacs-lisp
(setq mew-pop-delete nil)
#+END_SRC

**** gnus怎样使用通讯录?

可以用 bbdb

Download

**** 获取最新版本的GNU Emacs源码

最新源码可以使用cvs方式:

#+BEGIN_EXAMPLE
cvs -z3 -d:pserver:anonymous@cvs.savannah.gnu.org:/sources/emacs co emacs
#+END_EXAMPLE

**** windows用户可以用cygnus下的cvs(推荐), 也可以装一个WinCVS

bzr branch --stacked http://bzr.savannah.gnu.org/r/emacs/trunk

- 从官方 bzr 库镜像而来

  git clone git://repo.or.cz/emacs.git
  git clone http://repo.or.cz/r/emacs.git

- 从 repo.or.cz 的 git 库镜像而来

  git clone git://github.com/emacsmirror/emacs.git
  git clone http://github.com/emacsmirror/emacs.git

  git clone git://gitorious.org/emacsmirror/emacs.git
  git clone http://git.gitorious.org/emacsmirror/emacs.git

可以给 git clone 加 --depth 1 参数以加快速度，见 git help clone。

**** Windows用户如何获取GNU Emacs编译版本

+ [[http://ourcomments.org/cgi-bin/emacsw32-dl-latest.pl][一个更新较快的站点]]
+ [[http://ntemacs.sourceforge.net/][下载NTemacs的最新CVS版]]

**** Mac用户如何获取GNU Emacs编译版本

+ [[http://aquamacs.org/][AquaEmacs]]
+ [[http://emacsformacosx.com/][GNU Emacs For Mac OS X]]
+ [[https://github.com/railwaycat/emacs-mac-port][Emacs Mac Port]]

**** 推荐Emacs入门书籍

+ Sams Teach Yourself Emacs in 24 Hours
+ 《学习GNU Emacs》

**** 推荐Emacs Lisp入门书籍

+ GNU Emacs Lisp编程入门涵盖了入门需要的几乎所有知识，写给没用过Emacs，没学过lisp；但是用过编辑器，会写程序的人看的入门书。这本书最好用
  info看，一边看一边就可以试。在info里面显示为Emacs Lisp Intro。
+ GNU Emacs Manual 速查手册，info里面显示为Elisp。
+ 《Writing GNU Emacs Extensions》by Bob Glickstein, O'REILLY

**** 网络资源

+ [[http://www.dotemacs.de/][一个收集大量Emacs配置文件的网站]]
+ [[http://emacser.com][Emacs中文网]]: 含有多位Emacser的高质量的文章
+ [[http://emacser.com/dea.htm][DEA]]: ahei的Emacs配置大全
+ QQ群: 59134186 18096422. 入群最好把名字改为水木ID吧

*** 关于 FAQ

+ [[http://smacs.github.io/faq/][Emacs FAQ]]


可以为每一个大类笔记维护一个 FAQ

** 2015/12/26
*** Ubuntu 安装 dota2

1. Linux 下 dota2 仅支持 64 位，所以别折腾
2. Wine 也搞不定
3. 在 steam 或网页上搜索 Dota 2 需要 VPN，不然会屏蔽 IP

** 2015/12/25
*** define-minor-mode

#+BEGIN_SRC emacs-lisp
  (define-minor-mode wally-mode
    "Toggle wally-mode
  "
    ;; the initial value
    nil
    ;; The indicator for the mode line
    " wally"
    ;; The minor mode bindings--define-key
    :keymap '(("\C-crj" . emets-jump-to-ros-file))
    :after-hook 'wally-mode-after-hook
    :group 'wally
    )

  (wally-mode t)                          ; not work globally, only current buffer, that is, *scratch*
#+END_SRC

**** global enable minor-mode

+ [[http://stackoverflow.com/questions/12763566/how-to-permanently-enable-the-hs-minor-mode-in-emacs][stackoverflow: how to permanently enbale hs-minor-mode in emacs]]

/define-globalized-minor-mode/  a little tricky

#+BEGIN_SRC emacs-lisp
  (define-globalized-minor-mode global-wally-mode
    wally-mode wally-mode)
#+END_SRC

*** ssh
**** reference

+ [[https://app.yinxiang.com/shard/s52/nl/11551545/fbdef698-b4b3-4052-b53d-c5e3dfdec29a/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D151d87b4a97%3AS%3D7c50b1d5705c42fc4973a25be63da6f1][EN::九个 SSH 常用命令选项]]

**** ssh intro

SH（全称 /Secure Shell/)是一种 _加密的网络协议_ 。使用该协议的数据将被加密，
如果在传输中间数据泄漏，也可以确保没有人能读取出有用信息。要使用 SSH，
目标机器应该安装 SSH 服务端应用程序，因为 SSH 是基于 _客户-服务_ 模式的。
当你想安全的远程连接到主机，可中间的网络（比如因特网）并不安全，通常这
种情况下就会使用 SSH。

**** installation

1. 基于 Debian / Ubuntu 的系统

   1) 安装 ssh-client

      #+BEGIN_EXAMPLE
      $ sudo apt-get install openssh-client
      #+END_EXAMPLE

   2) 安装 ssh-server

      #+BEGIN_EXAMPLE
      $ sudo apt-get install openssh-server
      #+END_EXAMPLE

2. 基于 RedHat / CentOS 的系统

   #+BEGIN_EXAMPLE
   # yum install openssh-server openssh-clients
   #+END_EXAMPLE

3. 测试

   #+BEGIN_EXAMPLE
      $ ssh
     usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
                [-D [bind_address:]port] [-E log_file] [-e escape_char]
                [-F configfile] [-I pkcs11] [-i identity_file]
                [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]
                [-O ctl_cmd] [-o option] [-p port]
                [-Q cipher | cipher-auth | mac | kex | key]
                [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]
                [-w local_tun[:remote_tun]] [user@]hostname [command]
   #+END_EXAMPLE

**** usage

***** 无选项参数运行 SSH

通常使用 SSH 的方式就是不加任何选项参数,仅仅输入 "ssh"。

#+BEGIN_EXAMPLE
$ ssh 192.168.0.103
#+END_EXAMPLE


第一次连接目标主机时，ssh 会让你确认目标主机的真实性。如果你回答的是
NO，SSH 将不会继续连接，只有回答 Yes才会继续。

下一次再登陆此主机时，SSH 就不会提示确认消息了。对此主机的真实验证信息
已经默认保存在每个用户的 /home/user/.ssh 文件里。

***** 指定登陆用户

默认的， _ssh 会尝试用客户机的当前用户作为用户名来连接_ 。

通常，需要提供一个目标主机上存在的用户名。从一开始就要指定用户名的，可
以使用 /-l/ 选项参数。

#+BEGIN_EXAMPLE
$ ssh -l leni 192.168.0.103
#+END_EXAMPLE

也可以这样输入

#+BEGIN_EXAMPLE
$ ssh leni@192.168.0.0103
#+END_EXAMPLE

***** 指定端口

/SSH 默认使用的端口号是 22/

大多现代的 Linux 系统 22 端口都是开放的。如果你运行 ssh 程序而没有指定
端口号，它直接就是通过 22 端口发送请求的。

一些系统管理员会改变 SSH 的默认端口号。让我们试试，现在端口号是
1234.要连上那主机，就要使用 **-p* 选项，后面在加上 SSH 端口号。

#+BEGIN_EXAMPLE
$ ssh 192.168.0.103 -p 1234
#+END_EXAMPLE

要改变端口号，我们需要修改 /etc/ssh/ssh_config 文件，找到此行：

#+BEGIN_EXAMPLE
Port 22
#+END_EXAMPLE

把它换成其他的端口号，比如上面示例的 1234 端口，然后重启 SSH 服务。

***** 对所有数据请求压缩

有了这个选项，所有通过 SSH 发送或接收的数据将会被压缩，并且任然是加密
的。要使用 SSH 的压缩功能，使用 /-C/ 选项。

#+BEGIN_EXAMPLE
$ ssh -C 192.168.0.103
#+END_EXAMPLE

如果你的连网速度很慢的话，比如用 modem 上网，这个选项非常有用。但如果
你使用的是像 LAN 或其它更高级网络的话，压缩反而会降低你的传输速度。可
以使用 -o 选项加上压缩级别参数来控制压缩的级别，但这个选项仅仅只在
SSH-1 下起作用。

***** 指定一个加密算法

SSH 提供了一些可用的加密算法。可以在 */etc/ssh/ssh_config or
~/.ssh/config * 文件中看到（如果存在的话）。


让我们试试比如你想使用 blowfish 算法来加密你的 SSH 会话，那么你只要把
这一行加入你的/etc/ssh/ssh_config or ~/.ssh/config 文件就可以：

#+BEGIN_EXAMPLE
Cipher blowfish
#+END_EXAMPLE

默认的，SSH 会使用 3des 算法。

***** 打开调试模式

因为某些原因，我们想要追踪调试我们建立的 SSH 连接情况。SSH 提供的 -v
选项参数正是为此而设的。

#+BEGIN_EXAMPLE
$ ssh -v 192.168.0.103
#+END_EXAMPLE

***** 绑定源地址

如果你的客户端有多于两个以上的 IP 地址，你就不可能分得清楚在使用哪一个
IP 连接到 SSH 服务器。

为了解决这种情况，我们可以使用 -b 选项来指定一个IP 地址。这个 IP 将会
被使用做建立连接的源地址。

#+BEGIN_EXAMPLE
$ ssh -b 192.168.0.200 -l leni 192.168.0.103
#+END_EXAMPLE

服务端，我们可以使用 netstat 命令来检查到服务的连接是否建立。可以看到
IP 为 192.168.0.200 的连接已经建立。

***** 8. 使用其他配置文件

默认情况下，ssh 会使用位于 /etc/ssh/ssh_config 的配置文件。这个配置
文件作用于系统的所有用户。但你想要为特定的用户指定特殊的设置的话，可以
把配置放入 ~/.ssh/config 文件中。如果此文件不存在，可以手工创建一个。


下面是一个通用 ssh_config 文件配置的例子。这配置文件位于 /home/pungki
目录下。

#+BEGIN_EXAMPLE
  Host 192.168.0.*
  ForwardX11 yes
  PasswordAuthentication yes
  ConnectTimeout 10
  Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc
  Protocol 2
  HashKnownHosts yes
#+END_EXAMPLE

要使用指定的配置文件，可以使用 /-F/ 选项。

#+BEGIN_EXAMPLE
$ ssh -F /home/pungki/my_ssh_config 192.168.0.101
#+END_EXAMPLE

***** 使用 SSH X11 Forwarding

某些时候，你可能想把服务端的 X11 应用程序显示到客户端计算机上，SSH 提
供了 -X 选项。但要启用这功能，我们需要做些准备，下面是它的设置：

在服务器端，你需要使 /etc/ssh/ssh_config 文件中的行设置成 ForwardX11
yes 或者 X11Forwad yes，以启用 X11 Forwarding，重启 SSH 服务程序。

然后在客户端，输入 ssh -X user@host:

#+BEGIN_EXAMPLE
$ ssh -X leni@192.168.0.101
#+END_EXAMPLE

一旦登陆，可以输入：

#+BEGIN_EXAMPLE
$ echo $DISPLAY
#+END_EXAMPLE

来检查，你应该可以看到向如下所示的

#+BEGIN_EXAMPLE
localhost:10:0
#+END_EXAMPLE

随后就可以运行应用了，仅仅只能输入应用程序的命令。让我们试试，比如想运
行 xclock 程序，输入：

#+BEGIN_EXAMPLE
$ xclock
#+END_EXAMPLE

它就运行起来了，xclock 确实是运行在远端系统的，但它在你的本地系统里显
示了。

** 2015/12/24
*** matplotlib
**** Reference

+ http://old.sebug.net/paper/books/scipydoc/matplotlib_intro.html
+ http://matplotlib.org/gallery.html

*** rospy 中的注释风格                         :python:style:rospy:doxygen:

#+BEGIN_SRC python
    def __init__(self, name, data_class, callback=None, callback_args=None,
                 queue_size=None, buff_size=DEFAULT_BUFF_SIZE, tcp_nodelay=False):
        """
        Constructor.

        NOTE: for the queue_size and buff_size
        parameters, rospy does not attempt to do intelligent merging
        between multiple Subscriber instances for the same topic. As
        they share the same underlying transport, multiple Subscribers
        to the same topic can conflict with one another if they set
        these parameters differently.

        @param name: graph resource name of topic, e.g. 'laser'.
        @type  name: str
        @param data_class: data type class to use for messages,
          e.g. std_msgs.msg.String
        @type  data_class: L{Message} class
        @param callback: function to call ( fn(data)) when data is
          received. If callback_args is set, the function must accept
          the callback_args as a second argument, i.e. fn(data,
          callback_args).  NOTE: Additional callbacks can be added using
          add_callback().
        @type  callback: str
        @param callback_args: additional arguments to pass to the
          callback. This is useful when you wish to reuse the same
          callback for multiple subscriptions.
        @type  callback_args: any
        @param queue_size: maximum number of messages to receive at
          a time. This will generally be 1 or None (infinite,
          default). buff_size should be increased if this parameter
          is set as incoming data still needs to sit in the incoming
          buffer before being discarded. Setting queue_size
          buff_size to a non-default value affects all subscribers to
          this topic in this process.
        @type  queue_size: int
        @param buff_size: incoming message buffer size in bytes. If
          queue_size is set, this should be set to a number greater
          than the queue_size times the average message size. Setting
          buff_size to a non-default value affects all subscribers to
          this topic in this process.
        @type  buff_size: int
        @param tcp_nodelay: if True, request TCP_NODELAY from
          publisher.  Use of this option is not generally recommended
          in most cases as it is better to rely on timestamps in
          message data. Setting tcp_nodelay to True enables TCP_NODELAY
          for all subscribers in the same python process.
        @type  tcp_nodelay: bool
        @raise ROSException: if parameters are invalid
        """
#+END_SRC
*** vim 宏

+ http://blog.csdn.net/yangzhongxuan/article/details/7001077

**** 录制与重复

vim中的宏实质就是把一个vim指令集存到了寄存器中，然后在调用寄存器中的指
令。

使用宏命令可以重复执行你所记录下的命令。

命令模式下按 q + <register> + 一系列命令 + q

- <register> 指用户自己定义的a-z中的一个寄存器
- q+<register> 开始记录命令
- q 完成记录，退出记录


执行这个宏可以用命令： @<register>
也可以加上执行次数： 10@a 执行10次
当你执行过一次@a之后，你可以用@@来重复执行@a

**** 修改宏

当你发现存在某个寄存器的命令宏是错误的，你除了可以重新写一遍命令宏之外，
还有如下修改方式：

1. 先用G（大写）到文件末尾，然后用o（小写）新加一行，不要编辑，用ESC退
   出到普通模式，其实就是为编辑宏找了个地方。

2. 使用命令 "ap 会看到寄存器a中的命令宏像文本一样出现在这一行，然后编辑
   这一行。编辑的时候与vim编辑其他的文件一样。编辑结束后用0（零）回到
   行首。

3. 然后用 "ay$ 将正确内容写到寄存器a中，最后删除这一行即可。

4. 当你需要向命令宏寄存器中增加内容时，可以用命令qA来向a寄存器增加内容，
   之后输入你想增加的内容，再使用q结束。

**** 保存和传递宏
1. 先建立一个宏。

2. 在任意一个文件的空白位置normal状态下，命令 "ap 即可以把宏的内容显示
   出来。
   比如说我的宏是：
   #+BEGIN_EXAMPLE
   "ohello th id<80>kb<80>kb<80>kbis is a a<80>kba<80>kbmaco of vim.^["
   #+END_EXAMPLE

3. 这段内容保存或传递。

4. 使用命令：
   #+BEGIN_EXAMPLE
   let @a="ohello th id<80>kb<80>kb<80>kbis is a a<80>kba<80>kbmaco of vim.^["
   #+END_EXAMPLE

5. 其他人用@a命令就可以使用你制作的宏了。
** 2015/12/23
*** algorithm
#+include: ~/Wally/Project/algorithm/ChangeLog.txt
#+include: ~/Wally/Project/algorithm/README.md

*** frame_id

1. [[http://answers.ros.org/question/34684/header-frame_id/][header frame_id]]
   The /frame_id/ in a message specifies the point of reference for
   data contained in that message.

2. [[http://answers.ros.org/question/42632/how-to-know-the-frame-id/][get frame_id]]

   In general, the frame_id in the header of any topic (if it has a
   header) can be found by /rostopic echo/

   #+BEGIN_EXAMPLE
     $ rostopic echo -n 1 /lidar_scan  | grep frame_id
     frame_id: hokuyo_link
     $ rostopic echo -n 1 /scan_filtered  | grep frame_id
     frame_id: hokuyo_link
   #+END_EXAMPLE

3. [[http://answers.ros.org/question/198590/start-map_server-with-custom-frame_id/][customize frame_id]]

   /ros param/

   1) command line

      #+BEGIN_EXAMPLE
      rosrun map_server map_server testenvironment.yaml _frame_id:="odometry_link"
      #+END_EXAMPLE

   2) launch

      #+BEGIN_SRC xml
        <node name="map_server" pkg="map_server" type="map_server" args="testenvironment.yaml">
        <param name="frame_id" value="odometry_link" />
        </node>
      #+END_SRC

*** vim                                                            :vi:vim:

+ [[https://github.com/vim/vim][GitHub]]
+ [[http://www.vim.org/index.php][Homepage]]

**** evil                                                           :evil:

***** reference

+ [[https://bitbucket.org/lyro/evil/wiki/Home][Homepage]]
+ [[http://www.emacswiki.org/emacs/Evil][EmacsWiki]]
+ [[~/Wally/Reference/Manual/EvilMaunal.pdf][EvilMaunal.pdf]]
+ [[http://dnquark.com/blog/2012/02/emacs-evil-ecumenicalism/][emacs-evil-ecumenicalism]]
+ http://www.douban.com/group/topic/34775654/
+ [[https://github.com/edwtjo/evil-org-mode][Github: evil-org-mode]]

***** basic settings

#+BEGIN_SRC emacs-lisp
  ;; init-vi.el -- vim related setting

  (require 'evil)
  (evil-mode 1)
  (setq evil-default-state 'emacs)

  (define-key evil-insert-state-map "\C-d" 'evil-change-to-previous-state)
  (define-key evil-normal-state-map "\C-d" 'evil-force-normal-state)
  (define-key evil-replace-state-map "\C-d" 'evil-normal-state)
  (define-key evil-visual-state-map "\C-d" 'evil-exit-visual-state)

  (provide 'init-vi)
  ;; init-vi.el ends here

#+END_SRC
***** evil-org-mode

暂时不需要，仅在码代码时使用 vi。org-mode 中还是使用 Emacs 绑定。

**** installation

[[http://www.vim.org/download.php][download page]]

1. basic
   - configure
   - make
   - make install

2. Enable features

   #+BEGIN_EXAMPLE
   ./configure --enable-multibyte --enable-xim --enable-fontset --enable-gui=gtk
   #+END_EXAMPLE

3. 重新 configure 之前需要 make disclean

   #+BEGIN_EXAMPLE
   configure: error: run `make distclean' and/or `rm auto/config.cache' and start over
   #+END_EXAMPLE

**** help

$ vim  --help

#+BEGIN_EXAMPLE
  VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Dec 23 2015 15:33:20)

  用法: vim [参数] [文件 ..]       编辑指定的文件
    或: vim [参数] -               从标准输入(stdin)读取文本
    或: vim [参数] -t tag          编辑 tag 定义处的文件
    或: vim [参数] -q [errorfile]  编辑第一个出错处的文件

  参数:
     --                   在这以后只有文件名
     -v                   Vi 模式 (同 "vi")
     -e                   Ex 模式 (同 "ex")
     -E                   Improved Ex mode
     -s                   安静(批处理)模式 (只能与 "ex" 一起使用)
     -d                   Diff 模式 (同 "vimdiff")
     -y                   容易模式 (同 "evim"，无模式)
     -R                   只读模式 (同 "view")
     -Z                   限制模式 (同 "rvim")
     -m                   不可修改(写入文件)
     -M                   文本不可修改
     -b                   二进制模式
     -l                   Lisp 模式
     -C                   兼容传统的 Vi: 'compatible'
     -N                   不完全兼容传统的 Vi: 'nocompatible'
     -V[N][fname]         Be verbose [level N] [log messages to fname]
     -D                   调试模式
     -n                   不使用交换文件，只使用内存
     -r                   列出交换文件并退出
     -r (跟文件名)                恢复崩溃的会话
     -L                   同 -r
     -T <terminal>        设定终端类型为 <terminal>
     -u <vimrc>           使用 <vimrc> 替代任何 .vimrc
     --noplugin           不加载 plugin 脚本
     -P[N]                打开 N 个标签页 (默认值: 每个文件一个)
     -o[N]                打开 N 个窗口 (默认值: 每个文件一个)
     -O[N]                同 -o 但垂直分割
     +                    启动后跳到文件末尾
     +<lnum>              启动后跳到第 <lnum> 行
     --cmd <command>      加载任何 vimrc 文件前执行 <command>
     -c <command>         加载第一个文件后执行 <command>
     -S <session>         加载第一个文件后执行文件 <session>
     -s <scriptin>        从文件 <scriptin> 读入正常模式的命令
     -w <scriptout>       将所有输入的命令追加到文件 <scriptout>
     -W <scriptout>       将所有输入的命令写入到文件 <scriptout>
     -x                   编辑加密的文件
     -X                   不连接到 X Server
     --remote <files>     如有可能，在 Vim 服务器上编辑文件 <files>
     --remote-silent <files>  同上，找不到服务器时不抱怨
     --remote-wait <files>  同 --remote 但会等待文件完成编辑
     --remote-wait-silent <files>  同上，找不到服务器时不抱怨
     --remote-tab[-wait][-silent] <files>  As --remote but use tab page per file
     --remote-send <keys> 送出 <keys> 到 Vim 服务器并退出
     --remote-expr <expr> 在 Vim 服务器上求 <expr> 的值并打印结果
     --serverlist         列出可用的 Vim 服务器名称并退出
     --servername <name>  发送到或成为 Vim 服务器 <name>
     --startuptime <file> Write startup timing messages to <file>
     -i <viminfo>         使用 <viminfo> 取代 .viminfo
     -h  或  --help       打印帮助(本信息)并退出
     --version            打印版本信息并退出

#+END_EXAMPLE
**** guide
***** basic

- i → Insert 模式，按 ESC 回到 Normal 模式.
- n → 删当前光标所在的一个字符。
- :wq → 存盘 + 退出 (:w 存盘, :q 退出)   （陈皓注：:w 后可以跟文件名）
- dd → 删除当前行，并把删除的行存到剪贴板里
- p → 粘贴剪贴板
- hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。
- :help <command> → 显示相关命令的帮助。你也可以就输入 :help 而不跟命
  令。（陈皓注：退出帮助需要输入:q）

***** 插入模式

- a → 在光标后插入
- o → 在当前行后插入一个新行
- O → 在当前行前插入一个新行
- cw → 替换从光标所在位置后到一个单词结尾的字符

***** 光标移动

- 0 → 数字零，到行头
- ^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）
- $ → 到本行行尾
- g_ → 到本行最后一个不是blank字符的位置。
- /pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n
  键到下一个）
- NG → 到第 N 行
- gg → 到第一行。
- G → 到最后一行
- w → 到下一个单词的开头。
- e → 到下一个单词的结尾。
-  如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成
-  如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。
- % : 匹配括号移动，包括 (, {, [.
- * 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）
- fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。
- t, → 到逗号前的第一个字符。逗号可以变成其它字符。
- 3fa → 在当前行查找第三个出现的a。
- F 和 T → 和 f 和 t 一样，只不过是相反方向。

***** 区域选择

***** 拷贝粘贴

- P → 粘贴 (p/P都可以，p是表示在当前位置之后，P表示在当前位置之前)
- yy → 拷贝当前行当行于 ddP
- y  拷贝

***** 默认拷贝

- d (删除 )
- v (可视化的选择)
- gU (变大写)
- gu (变小写)

***** Undo/Redo

- u → undo
- <C-r> → redo

***** 打开/保存/退出/改变文件

- :e <path/to/file> → 打开一个文件
- :w → 存盘
- :saveas <path/to/file> → 另存为 <path/to/file>
- :x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)
- :q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。
- :bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。

***** 组合

<start position><command><end position>

0y$ 命令意味着：
- 0 → 先到行头
- y → 从这里开始拷贝
- $ → 拷贝到本行最后一个字符

你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。

你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。



***** 重复

- . → (小数点) 可以重复上一次的命令
- N<command> → 重复某个命令N次

*****
***** reference

- [[~/Wally/Reference/Guide/大家来学VIM简体.pdf][大家来学VIM简体.pdf]]
- [[http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/][Learning Vim Progressly]]
- [[http://coolshell.cn/articles/5426.html][酷壳： Learning Vim Progressly 翻译]]

**** Vim shell command                                            :shell:

vim中执行shell命令，有以下几种形式

***** :!cmd

不退出vim，并执行shell命令command，将命令输出显示在vim的命令区域， 不
会改变当前编辑的文件的内容.

特别的可以运行

_:!bash 来启动一个bash shell并执行命令，不需要退出vim_

***** :r !command

将shell命令command的结果插入到当前行的下一行. e.g. r !date，读取系
统时间并插入到当前行的下一行。

***** :起始行号,结束行号 !command

将起始行号和结束行号指定的范围中的内容输入到shell命令command处理，
并将处理结果替换起始行号和结束行号指定的范围中的内容

e.g.
+ :62,72 !sort  :  将62行到72行的内容进行排序
+ :62 !tr [a-z] [A-Z]  : 可以只指定起始行, 将62行的小写字母转为大写字母
+ :. !tr [a-z] [A-Z]  :  当前光标所在行，除可以指定行号外，也可以用.表示

***** :起始行号,结束行号 w !command

将起始行号和结束行号所指定的范围的内容作为命令command的输入。不会改
变当前编辑的文件的内容

e.g.
- :62,72 w !sort  : 将62行到72行的内容进行排序，但排序的结果并不会直接
  输出到当前编辑的文件中，而是显示在vim敲命令的区域

- :62 w !bash  :  将会把第62行的内容作为bash命令来执行并显示结果，而且
  不会改变当前编辑的文件的内容

同样的 :. w !bash，将当前行的内容作为bash命令来执行

***** reference

- [[http://www.educity.cn/help/510677.html][vim中执行shell命令小结]]

**** vim mark region



v：按字符选择。经常使用的模式，所以亲自尝试一下它。

V：按行选择。这在你想拷贝或者移动很多行的文本的时候特别有用。

CTRL＋v：按块选择。非常强大，只在很少的编辑器中才有这样的功能。你可以
选择一个矩形块，并且在这个矩形里面的文本会被高亮。

***** reference

- [[http://blog.csdn.net/lcj_cjfykx/article/details/9091569][VIM选择文本块/复制/粘贴]]

*** Emacs plugins recommanded

[[https://www.zhihu.com/question/21943533][有哪些是必备的emacs扩展？]]


我的另一个诀窍就是一旦发觉一个好的插件,立即调查原作者,务必把他所有开发的使用的工具调查清楚

- [X] company 取代auto-complete,更新很频繁
- [X] yasnippet 代码模板,关键是 _可内嵌lisp代码执行，太强悍了!接下来唯一的限制就是你的想象力了_
- [ ] js2-mode javascript开发神器(sublime之流和它根本不是一个数量级的)
- [ ] evil-mode 把emacs变成vim，基本vim有的它都有了比如text object，最酷的是可以写lisp自定义text object
- [ ] evil-leader 很简单的一个plugin,但是用好的话,让你效率成倍提升.
- [ ] evil-matchit 在成对的tag跳来跳去, vim的matchit移植版但更强大 (我写的)
- [ ] evil-nerd-commenter  , 按行注释代码, nerd-comment的移植版 (我写的)
- [X] helm
- [ ] web-mode, 通吃html所有相关
- [X] windows-numbering.el 子窗口跳转的终极方案,我用过所有的编辑器,没有比这个跟好的了.
- [ ] smex ,不用再记快捷键了
- [X] org-mode gtd工具,神级别的软件,和git,vim,emacs是一个档次的
- [X] winner-mode, undo窗口layout很有用
- [ ] gnus,让我又爱又恨,界面有点费解,但是有些killer feature, forward邮件,快速发邮件,添加附件不错,问题是Emacs其他插件太牛逼,比如和yasnippet结合用,和company-mode,和evil等等,所以gnus要伴我终生了.
- [X] ido, 类似于helm,和helm各有千秋我都用,五五开,不过helm有个让我爱死的设置,可以选择何时使用ido,helm或者两者都不用.开源真的不错呃,世界级高手都是惺惺相惜的.不像那些专有软件,菜鸟开发,即使是同一个公司,还要互相往死里掐.
- [ ] imenu 显示当前文件函数列表,可以直接跳转到那去,完全可配置,支持所有语言
- [X] flymake 实时语法检查,通吃所有语言
- [X] flyspell 拼写检查,爱死了,是我见过的所有拼写检查最强大,如果你知道如何配置.
- [ ] elisp 也许最好的插件就是Lisp语言本身,强大,简单易学,其语法看似诡异,于是自动过滤了菜鸟.
- [ ] keysnail - firefox模拟成Emacs,我用过的同类软件中最好的,细节无可挑剔
- [ ] percol - python开发的命令行工具,天才的作品,我现在的工作流主要就靠它,没有它我效率要大大降低.

** 2015/12/22
*** NEXT [[file:project.org::*remove%20backfile%20ended%20with%20~%20recursively][backfile ended with ~ recursively in python]]
- State "NEXT"       from ""           [2015-12-21 一 10:48] \\
  1. OS 模块判断是否为目录，及列出子文件
  2. catch exception
  3. 正则删除匹配对象

python 实现。


#+BEGIN_SRC python :tangle ~/tmp/debackup.py
  #! /usr/bin/env python
  # -*- encoding:utf-8 -*-


  # debackup.py

  """@package debackup
  remove backup files(ended with ~) recursively in given folders
  """

  # TODO
  # - [ ] Where should argument-checking be put, in function or ? ?

  import os
  import regexp
  import sys


  def debackup(path):
      for p in sys.argv:
          rmbk(p)

  def rmbk(p):
      """delete files in given path recursively.

      @param p: single path given
      """

      pass

  def main():
      pass

  if __name__ == '__main__':
      main()
#+END_SRC

**** bash find

#+BEGIN_SRC sh
  #!/usr/bin/env bash

  # input check, not implemented

  for p in $*
  do
      find $p -name "*~" -exec rm {} \;
  done

#+END_SRC

*** algorithm
#+include: ~/Wally/Project/algorithm/ChangeLog.txt
#+include: ~/Wally/Project/algorithm/README.md

*** ISO 3166-1 alpha-2

ISO 3166-1 alpha-2 codes are two-letter country codes defined in ISO
3166-1, part of the ISO 3166 standard published by the International
Organization for Standardization (ISO), to represent countries,
dependent territories, and special areas of geographical interest.

国家名称的两个字母缩写。

**** reference

+ [[https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#HK][Wiki]]

*** surfraw
- time: <2015-12-21 一 17:31>
- link: [[file:~/Wally/Journal/GTD/journal.org::*helm-surfraw%20C-c%20h%20s][helm-surfraw  C-c h s]]
- hint:

*Surfraw* (Shell Users Revolutionary Front Rage Against the Web) is a
free POSIX-compliant (i.e. meant for Linux, FreeBSD etc.)
/command-line shell program/ for _interfacing with a number of
web-based search engines_


**** usages

1. list of elvi

   #+BEGIN_EXAMPLE
   surfraw -elvi
   #+END_EXAMPLE

2. search

   #+BEGIN_EXAMPLE
   sr elviname [options] serach-items
   #+END_EXAMPLE

   会自动打开外部浏览器并跳转至搜索结果。

**** elvi

+ google
+ github
+ youtube
+ wikipedia

**** bookmarks

1. cfg files

   - /etc/surfraw.bookmarks
   - $HOME/.surfraw.bookmarks

2. format:  each bookmark is on a separate line, with the bookmark and
   URL separated by whitespace

   #+BEGIN_EXAMPLE
   ntk http://www.ntk.net/
   #+END_EXAMPLE

3. invoke

   #+BEGIN_EXAMPLE
   sr <bookmark>
   #+END_EXAMPLE

**** configures

- Environment variables
- /etc/surfraw.conf
- $HOME/.surfraw.conf

**** files

Files

- $(libdir)/surfraw  Location of the elvi.
- /etc/surfraw.conf  Default system wide configuration file.
- $HOME/.surfraw.conf  Default per-user config file
- /etc/surfraw.bookmarks  System wide bookmarks file.
- $HOME/.surfraw.bookmarks  Per-user bookmarks file.

**** google

#+BEGIN_EXAMPLE
http://ipv6.google.com/sorry/IndexRedirect?continue=http://www.google.com/search%3Fq%3Dlinux%26num%3D30&q=CGMSECQAiQAAAAAA8DyR__7IkBQYk-biswUiGQDxp4NLyvCCDIQpTbTt9O576MfPHgN86v0
#+END_EXAMPLE




**** reference

+ [[http://surfraw.alioth.debian.org/][Homepage]]
+ [[https://en.wikipedia.org/wiki/Surfraw][Wiki]]

.
*** default-directory

[[help:default-directory]]

Name of default directory of current buffer.  Should end with slash.

当前 buffer 的目录。

*** 定制 org 高亮 ？？ @@

**** org-export-with-emphasize

org-export-with-emphasize is a variable defined in `ox.el'.
Its value is t

Documentation:
Non-nil means interpret *word*, /word/, _word_ and +word+.

If the export target supports emphasizing text, the word will be
typeset in bold, italic, with an underline or strike-through,
respectively.

This option can also be set with the OPTIONS keyword,
e.g. "*:nil".

**** org-fontify-emphasized-text

Non-nil means fontify *bold*, /italic/ and _underlined_ text.
Changing this variable requires a restart of Emacs to take effect.

**** org-emphasis-alist

Alist of characters and faces to emphasize text.
Text starting and ending with a special character will be emphasized,
for example *bold*, _underlined_ and /italic/.  This variable sets the
marker characters and the face to be used by font-lock for highlighting
in Org-mode Emacs buffers.



#+BEGIN_SRC emacs-lisp
  (setq org-emphasis-alist '(("*" bold)
                             ("/" italic)
                             ("_" underline)
                             ("=" org-verbatim verbatim)
                             ("~" org-code verbatim)
                             ("+"
                              (:strike-through t))))

  (setq org-emphasis-alist '(("*" bold)
                             ("/" italic)
                             ("_" underline)
                             ("=" org-verbatim)
                             ("~" org-code)
                             ("+"
                              (:strike-through t))))
#+END_SRC

**** 似乎不能设置其它的

*** magit
**** intro

Magit is an interface to the version control system Git, implemented
as an Emacs package. Magit aspires to be a complete Git
porcelain. While we cannot (yet) claim that Magit wraps and improves
upon each and every Git command, it is complete enough to allow even
experienced Git users to perform almost all of their daily version
control tasks directly from within Emacs. While many fine Git clients
exist, only Magit and Git itself deserve to be called porcelains.

**** quick tips

+ M-x magit-status switch to the status buffer of that repository 使用这个命令查看Git的状态，在git中的命令为git status
+ s to stage files 把untracked或者unstaged文件的状态改成stage模式，
+ c to commit (type in your commit message then C-c C-c to save the message and commit)  把所有staged文件都commit到索引仓库中
+ P P to do a git push Update remote refs along with associated objects
+ F F to do a git pull Fetch from and merge with another repository or a local branch
+ TAB  Toggle hidden status of current section 用来转换显示当前文件的一些信息
+ i ignore file this will add the filename to the .gitignore file. 忽略当前文件的版本控制，如一些临时文件
+ I ignore file this will add the file to .git/infor/exclude
+ C-h m Magit的使用帮助信息

**** 用以至学

Git 并不是一个简单的工具。 Magit 也如此。

**** reference

+ [[https://github.com/magit/magit][Github]]
+ [[http://magit.vc/][Homepage]]
+ [[http://blog.csdn.net/amuseme_lu/article/details/6931908][CSDN: emacs Magit 简单介绍]]

*** xinitrc

**** why

从图标图标启动的初始化。

Emacs 安装 magit 时的版本错误提示

#+BEGIN_EXAMPLE
If this comes as a surprise to you, because you do actually have
a newer version installed, then that probably means that the
older version happens to appear earlier on the `$PATH'.  If you
always start Emacs from a shell, then that can be fixed in the
shell's init file.  If you start Emacs by clicking on an icon,
or using some sort of application launcher, then you probably
have to adjust the environment as seen by graphical interface.
For X11 something like ~/.xinitrc should work.
#+END_EXAMPLE

~/.xinitrc

**** xinitrc

~/.xinitrc 文件是 xinit 和它的前端 startx 第一次启动时会读取的脚本。通
常用在启动 X 时执行窗口管理器 和其他程序，例如启动守护进程和设置环境变
量。

#+include: ~/.xinitrc

类似 ~/.bashrc， 在登录 X，即正常情况下开机时读入的初始化文件。

**** 怎么配置暂时不用管

**** reference

+ [[https://wiki.archlinux.org/index.php/Xinitrc_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)][archlinux::xinitrc]]

*** org-mode: behavior of RETURN on headings
- time: <2015-12-21 一 10:37>
- link: [[file:~/Wally/Journal/Note/prog.org::*%5B%5Bhttp://www.stack.nl/~dimitri/doxygen/manual/docblocks.html#pythonblocks%5D%5Bdoxygen%20doc%5D%5D][doxygen doc*]]
- hint:

*** LaTeX 绘制算法流程图

**** flowchart

*flowchart* 宏包根据 IBM 提出的流程图标准，定义了流程图中最常用的五种标
准形状，包括：

1. PROCESS: 一切函数过程
2. DECESION: 条件判断
3. PREDEFINED　PROCESS：预定义过程
4. STORAGE: 数据存储
5. TERMINAL: 开始，结束


使用 flowchart 和 TikZ 绘制流程图，主要包括两个步骤：

1. _绘制流程图的具体形状_

   该过程主要是利用 flowchart 宏包的预定义形状，根据流程图具体需要实例
   化，即定义形状的大小，高度宽度等信息。定义形状时，有一点需要注意的
   是，在需要使用折线时，需要定义折线的转折点，如示例中的 point1 。

2. _将形状使用线连接，得到流程图_

   这部分比较简单，只要记住线和箭头的表示方法即可

#+BEGIN_SRC latex
   %!TEX program = xelatex

  \documentclass[UTF8]{ctexart}
  \usepackage{tikz,mathpazo}
  \usetikzlibrary{shapes.geometric, arrows}
  \usepackage{flowchart}
  \begin{document}
  \begin{tikzpicture}[font={\sf \small}]
  \def \smbwd{2cm}
  \thispagestyle{empty}

   %定义流程图的具体形状
  \node (start) at (0,0) [draw, terminal,minimum width=\smbwd, minimum height=0.5cm] {开始};      % 定义开始
  \node (getdata) at (0,-1.5) [draw, predproc, align=left,minimum width=\smbwd,minimum height=1cm] {读取数据};        %定义预处理过程，读取数据
  \node (decide) at (0,-3.5) [draw, decision, minimum width=\smbwd, minimum height=1cm] {判断条件};    %定义判断条件
  \node (storage) at (0,-5.5) [draw, storage, minimum width=\smbwd, minimum height=1cm] {数据存储};     %定义数据存储
  \node (process) at (3,-5.5) [draw, process, minimum width=\smbwd, minimum height=1cm] {处理过程};      %定义处理过程
  \coordinate (point1) at (0,-6.75);
  \node (end) at (0,-7.75) [draw, terminal,minimum width=\smbwd,minimum height=0.5cm] {结束};        %定义结束

   %连接定义的形状，绘制流程图--表示垂直线，|表示箭头方向
  \draw[->] (start) -- (getdata);
  \draw[->] (getdata) -- (decide);
  \draw[->] (decide) -| node[above]{是} (process);
  \draw[->] (decide) -- node[above]{否}(storage);
  \draw[->] (process) |- (point1);
  \draw[->] (storage) -- (point1) -- (end);
  \end{tikzpicture}
  \end{document}
#+END_SRC

[[/home/ben/Wally/Journal//Figure/scrot/30928L9H.png]]

**** tkiz

直接使用 TikZ 强大的绘图功能来实现流程图的绘制。


比较两个方法的代码可知，相比使用 flowchart 宏包，直接使用 TikZ 绘制流
程图多了定义基本形状一步。但通过 TikZ 自己定义基本形状，流程图的可定制
性更好，可以根据具体需要，定义多种流程图形状。另外一个使用 flowchart
宏包来绘制，最终还是需要用到 TikZ 语法，也不见得有多简单。

/推荐使用 TikZ 直接绘制流程图/


#+BEGIN_SRC latex
   %!TEX program = xelatex
  \documentclass[UTF8]{ctexart}
  \usepackage{tikz,mathpazo}
  \usetikzlibrary{shapes.geometric, arrows}
  \begin{document}
  \thispagestyle{empty}
   % 流程图定义基本形状
  \tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm,text centered, draw=black, fill=red!30]
  \tikzstyle{io} = [trapezium, trapezium left angle=70, trapezium right angle=110, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=blue!30]
  \tikzstyle{process} = [rectangle, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=orange!30]
  \tikzstyle{decision} = [diamond, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=green!30]
  \tikzstyle{arrow} = [thick,->,>=stealth]

  \begin{tikzpicture}[node distance=2cm]
   %定义流程图具体形状
  \node (start) [startstop] {Start};
  \node (in1) [io, below of=start] {Input};
  \node (pro1) [process, below of=in1] {Process 1};
  \node (dec1) [decision, below of=pro1, yshift=-0.5cm] {Decision 1};
  \node (pro2a) [process, below of=dec1, yshift=-0.5cm] {Process 2a};
  \node (pro2b) [process, right of=dec1, xshift=2cm] {Process 2b};
  \node (out1) [io, below of=pro2a] {Output};
  \node (stop) [startstop, below of=out1] {Stop};

   %连接具体形状
  \draw [arrow](start) -- (in1);
  \draw [arrow](in1) -- (pro1);
  \draw [arrow](pro1) -- (dec1);
  \draw [arrow](dec1) -- (pro2a);
  \draw [arrow](dec1) -- (pro2b);
  \draw [arrow](dec1) -- node[anchor=east] {yes} (pro2a);
  \draw [arrow](dec1) -- node[anchor=south] {no} (pro2b);
  \draw [arrow](pro2b) |- (pro1);
  \draw [arrow](pro2a) -- (out1);
  \draw [arrow](out1) -- (stop);
  \end{tikzpicture}
  \end{document}
#+END_SRC

[[/home/ben/Wally/Journal//Figure/scrot/30928YHO.png]]

**** reference

+ http://elegantlatex.org/2014/08/03/latex-flowchart/

*** 块设备

1. /块设备（blockdevice）/

   是一种具有一定结构的随机存取设备，对这种设备的读写是按块进行的，他
   使用缓冲区来存放暂时的数据，待条件成熟后，从缓存一次性写入设备或者
   从设备一次性读到缓冲区。

2. /字符设备（Character device）/

   是一个顺序的数据流设备，对这种设备的读写是按字符进行的，而且这些字
   符是连续地形成一个数据流。他不具备缓冲区，所以对这种设备的读写是实
   时的。

3. /扇区(Sectors)/

   任何块设备硬件对数据处理的基本单位。通常，1个扇区的大小为512byte。
   （对设备而言）

4. /块(Blocks)/

   由Linux制定对内核或文件系统等数据处理的基本单位。通常，1个块由1个或
   多个扇区组成。（对Linux操作系统而言）

5. /段(Segments)/

   由若干个相邻的块组成。是Linux内存管理机制中一个内存页或者内存页的一
   部分。

页、段、块、扇区之间的关系图如下：

[[/home/ben/Wally/Journal//Figure/scrot/30928yba.png]]

*** gdb python
- time: <2015-12-21 一 14:38>
- link: [[file:~/Wally/Journal/GTD/journal.org::*list-perspectives][list-perspectives]]
- hint:

**** why debugging python with GDB

There are types of bugs that are difficult to debug from within
Python:

- segfaults (not uncaught Python exceptions)
- hung processes (in cases where you can't get a Python traceback or
  debug with pdb)
- out of control daemon processes

In these cases, you can try gdb.

_也就是说，一般情况下使用 PDB 就足够了。只有特殊情况下才需要祭出上古神
器_

**** 简单使用

1. interactively

   #+BEGIN_EXAMPLE
     $ gdb python
     (gdb) run <program>.py <arguments>
   #+END_EXAMPLE

2. automatic:

   #+BEGIN_EXAMPLE
   $ gdb -ex r --args python <programname>.py <arguments>
   #+END_EXAMPLE

3. already running

   #+BEGIN_EXAMPLE
   $ gdb python <pid of running process>
   #+END_EXAMPLE

**** Reference

- [[https://wiki.python.org/moin/DebuggingWithGdb][PythonWiki]]
- [[http://www.cnblogs.com/dkblog/p/3806277.html][使用gdb调试Python进程]]

*** Regexp 贪婪模式

当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能
得到匹配的前提下） _匹配尽可能多的字符_ 。这被称为 /贪婪匹配/ 。

有时，我们更需要 /懒惰匹配/ ，也就是匹配尽可能少的字符。

/只要在重复限定符后面加上一个问号 ?/

- *?	重复任意次，但尽可能少重复
- +?	重复1次或更多次，但尽可能少重复
- ??	重复0次或1次，但尽可能少重复
- {n,m}?	重复n到m次，但尽可能少重复
- {n,}?	重复n次以上，但尽可能少重复

#+BEGIN_EXAMPLE
a.*?b
#+END_EXAMPLE

匹配最短的，以a开始，以b结束的字符串。

*** DONE bash expr 用法
- State "DONE"       from "TODO"       [2015-12-22 二 15:23]
- State "TODO"       from ""           [2015-12-20 日 23:21]

**** man

#+BEGIN_EXAMPLE
EXPR(1)                                                        User Commands                                                       EXPR(1)

NAME
       expr - evaluate expressions

SYNOPSIS
       expr EXPRESSION
       expr OPTION
...
#+END_EXAMPLE

**** expressions

- ARG1 | ARG2

  ARG1 if it is neither null nor 0, otherwise ARG2

- ARG1 & ARG2

  ARG1 if neither argument is null or 0, otherwise 0

- ARG1 < ARG2

  ARG1 is less than ARG2

- ARG1 <= ARG2

  ARG1 is less than or equal to ARG2

- ARG1 = ARG2

  ARG1 is equal to ARG2

- ARG1 != ARG2

  ARG1 is unequal to ARG2

- ARG1 >= ARG2

  ARG1 is greater than or equal to ARG2

- ARG1 > ARG2

  ARG1 is greater than ARG2

- ARG1 + ARG2

  arithmetic sum of ARG1 and ARG2

- ARG1 - ARG2

  arithmetic difference of ARG1 and ARG2

- ARG1 * ARG2

  arithmetic product of ARG1 and ARG2

- ARG1 / ARG2

  arithmetic quotient of ARG1 divided by ARG2

- ARG1 % ARG2

  arithmetic remainder of ARG1 divided by ARG2

- STRING : REGEXP

  anchored pattern match of REGEXP in STRING

- match STRING REGEXP

  same as STRING : REGEXP

- substr STRING POS LENGTH

  substring of STRING, POS counted from 1

- index STRING CHARS

  index in STRING where any CHARS is found, or 0

- length STRING

  length of STRING

- + TOKEN

  interpret TOKEN as a string, even if it is a keyword like 'match' or
  an operator like '/'

**** 小结

expr 命令用来 *数值运算* .

**** reference

- [[https://app.yinxiang.com/shard/s52/nl/11551545/7e9337a8-84d5-407b-b978-415e80ab18e8/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D151c0035574%3AS%3Dcc31c0c9dc82a5abcb9748dd2467a014][EN::bash expr]]
- http://ss64.com/bash/expr.html
*** DONE bash shuf file
- State "DONE"       from "TODO"       [2015-12-22 二 15:30]
- State "TODO"       from ""           [2015-12-20 日 23:24]

**** man

#+BEGIN_EXAMPLE
  NAME
         shuf - generate random permutations

  SYNOPSIS
         shuf [OPTION]... [FILE]
         shuf -e [OPTION]... [ARG]...
         shuf -i LO-HI [OPTION]...

  DESCRIPTION
         Write a random permutation of the input lines to standard output.

         Mandatory arguments to long options are mandatory for short options too.

         -e, --echo
                treat each ARG as an input line

         -i, --input-range=LO-HI
                treat each number LO through HI as an input line

         -n, --head-count=COUNT
                output at most COUNT lines

         -o, --output=FILE
                write result to FILE instead of standard output

         --random-source=FILE
                get random bytes from FILE

         -z, --zero-terminated
                end lines with 0 byte, not newline

         --help display this help and exit

         --version
                output version information and exit

         With no FILE, or when FILE is -, read standard input.
#+END_EXAMPLE

**** test

#+BEGIN_EXAMPLE
  Workspace $ cat foo
  1
  2
  3
  4
  5
  6
  7
  Workspace $ cat foo | shuf
  3
  1
  5
  4
  6
  2
  7
  Workspace $ shuf < foo
  3
  1
  5
  4
  7
  6
  2

#+END_EXAMPLE
**** Reference

+ [[https://app.yinxiang.com/shard/s52/nl/11551545/dd02e6a6-67f9-48d3-819e-784dca74c487/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D151c89d2c9a%3AS%3D5e1c044d9477e6c99541642e17d17afa][EN:: shuf 随机排序文件]]
*** Calendar

**** 配置

#+BEGIN_SRC emacs-lisp
  (setq calendar-holidays '( (holiday-fixed 1 1 "元旦")
                             (holiday-fixed 2 14 "情人节")
                             (holiday-fixed 4 1 "愚人节")
                             (holiday-fixed 12 25 "圣诞节")
                             (holiday-fixed 10 1 "国庆节")
                             (holiday-float 5 0 2 "母亲节")
                             (holiday-float 6 0 3 "父亲节")
                             ;; 农历节日
                             (holiday-lunar 1 1 "春节" 0)
                             (holiday-lunar 1 15 "元宵节" 0)
                             (holiday-solar-term "清明" "清明节")
                             (holiday-lunar 5 5 "端午节" 0)
                             (holiday-lunar 7 7 "七夕情人节" 0)
                             (holiday-lunar 8 15 "中秋节" 0)
                             ;; 生日
                             (holiday-lunar 7 12 "父亲的生日" 0)
                             (holiday-lunar 10 10 "母亲的生日" 0)
                             (holiday-lunar 8 14 "哥哥的生日" 0)
                             (holiday-lunar 6 12 "姐姐的生日" 0)
                             (holiday-lunar 11 27 "我的生日" 0)
                             ))
#+END_SRC

**** 命令

- M-x holidays	在另一个窗口列出近3个月（以今天为中心）的所有节日
- M-x list-holidays	在另一窗口列出设定的若干年内的所有节日

**** 快捷键

1. Calendar模式支持各种方式来更改当前日期

   + q 退出calendar模式
   + C-f 让当前日期向前一天
   + C-b 让当前日期向后一天
   + C-n 让当前日期向前一周
   + C-p 让当前日期向后一周
   + M-} 让当前日期向前一个月
   + M-{ 让当前日期向后一个月
   + C-x ] 让当前日期向前一年
   + C-x [ 让当前日期向后一年
   + C-a 移动到当前周的第一天
   + C-e 移动到当前周的最后一天
   + M-a 移动到当前月的第一天
   + M-e 多动到当前月的最后一天
   + M-< 移动到当前年的第一天
   + M-> 移动到当前年的最后一天

2. Calendar模式支持移动多种移动到特珠日期的方式

   + g d 移动到一个特别的日期
   + o 使某个特殊的月分作为中间的月分
   + . 移动到当天的日期
   + p d 显示某一天在一年中的位置，也显示本年度还有多少天。
   + C-c C-l 刷新Calendar窗口

3. Calendar支持生成LATEX代码。

   + t m 按月生成日历
   + t M 按月生成一个美化的日历
   + t d 按当天日期生成一个当天日历
   + t w 1 在一页上生成这个周的日历
   + t w 2 在两页上生成这个周的日历
   + t w 3 生成一个ISO-SYTLE风格的当前周日历
   + t w 4 生成一个从周一开始的当前周日历
   + t y 生成当前年的日历

4. EMACS Calendar支持配置节日：
   + h 显示当前的节日
   + x 定义当天为某个节日
   + u 取消当天已被定义的节日
   + e 显示所有这前后共三个月的节日。
   + M-x holiday 在另外的窗口的显示这前后三个月的节日。

5. 另外，还有一些特殊的，有意思的命令：

   + S 显示当天的日出日落时间(是大写的S)
   + p C 显示农历可以使用
   + g C 使用农历移动日期可以使用

6. 创建事件的命令：

   + d 显示被选中的日期的所有事件
   + s 显示所有事件，包括过期的，未到期的等等
   + i d 为当天日期添加一个事件
   + i w 为当天周创建一个周事件
   + i m 为当前月创建一个月事件
   + i y 为当前年创建一个年事件
   + i a 为当前日期创建一个周年纪念日
   + i c 创建一个循环的事件

**** Reference

+ [[http://www.cnblogs.com/FelixLee/archive/2011/10/25/2412558.html][Emacs 日历与日记设置]]
+ [[http://blog.163.com/wobutianl@126/blog/static/1335848201291810232827/][Emacs Calendar 快捷键]]

*** cal-china-x

+ [[https://github.com/xwl/cal-china-x][Github]]


This extension mainly adds the following extra features:

- Chinese localizations
- Display holiday, lunar, horoscope, zodiac, solar term info on mode line
- Define holidays using /holiday-lunar/, holiday-solar-term
- Highlight holidays based on different priorities
- Add cal-china-x-chinese-holidays, cal-china-x-japanese-holidays.
- custom week diary(like weeks in school)


#+BEGIN_SRC emacs-lisp
  (require 'cal-china-x)
#+END_SRC

*** calendar/Diary integration

http://orgmode.org/manual/Weekly_002fdaily-agenda.html

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-include-diary nil)     ; 不使用 dairy 会更快些
#+END_SRC

If you are using the diary only for sexp entries and holidays, it is
faster to not use the above setting, but instead to copy or even move
the entries into an Org file. Org mode evaluates diary-style sexp
entries, and does it faster because there is no overhead for first
creating the diary display.

#+BEGIN_SRC org
  ,* Holidays
  :PROPERTIES:
  :CATEGORY: Holiday
  :END:
  %%(org-calendar-holiday)   ; special function for holiday names

  ,* Birthdays
  :PROPERTIES:
  :CATEGORY: Ann
  :END:
  %%(org-anniversary 1956  5 14) Arthur Dent is %d years old
  %%(org-anniversary 1869 10  2) Mahatma Gandhi would be %d years old
#+END_SRC

** 2015/12/21
*** free                                                      :free:memory:
**** man                                                             :man:

1. NAME: free - _Display amount of free and used memory in the system_

2. SYNOPSIS:  *free [options]*

3. DESCRIPTION

   free  displays the total amount of free and used physical and swap
   memory in the system, as well as the buffers used by the kernel.
   The shared memory column represents either the MemShared value (2.4
   series kernels) or the Shmem value (2.6 series kernels and later)
   taken from the _/proc/meminfo_ file. The value is zero if none of the
   entries is exported by the kernel.

4. OPTIONS

   - -b, --bytes

     Display the amount of memory in bytes.

   - -k, --kilo

     Display the amount of memory in kilobytes.  This is the default.

   - -m, --mega

      Display the amount of memory in megabytes.

   - -g, --giga

     Display the amount of memory in gigabytes.

   - --tera Display the amount of memory in terabytes.

   - -h, --human

     Show all output fields automatically scaled to shortest three
     digit unit and display the units of print out.  Following units
     are used.
     - B = bytes
     - K = kilos
     - M = megas
     - G = gigas
     - T = teras

      If unit is missing, and you have petabyte of RAM or swap, the
      number is in terabytes and columns might not be aligned with
      header.

   - -c, --count count

     Display the result count times.  Requires the -s option.

   - -l, --lohi

**** example

#+BEGIN_SRC sh :results output
free -h
#+END_SRC

#+RESULTS:
:              total       used       free     shared    buffers     cached
: Mem:          3.7G       2.0G       1.6G       4.7M       377M       689M
: -/+ buffers/cache:       1.0G       2.7G
: Swap:         3.8G       1.1G       2.7G

*** pdf-view-mode-hook

想法很好，实现不对

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'pdf-view-mode-hook 'emets-pdf-frame)
  (setq pdf-view-mode-hook nil)
#+END_SRC

*** NEXT [[file:project.org::*remove%20backfile%20ended%20with%20~%20recursively][backfile ended with ~ recursively in python]]
- State "NEXT"       from ""           [2015-12-21 一 10:48] \\
  1. OS 模块判断是否为目录，及列出子文件
  2. catch exception
  3. 正则删除匹配对象

python 实现。

#+BEGIN_SRC python :tangle ~/tmp/debackup.py
  #! /usr/bin/env python
  # -*- encoding:utf-8 -*-

  # debackup.py

  """@package debackup
  remove backup files(ended with ~) recursively in given folders
  """

  # TODO
  # - [ ] Where should argument-checking be put, in function or ? ?

  import os
  import regexp
  import sys


  def debackup(path):
      for p in sys.argv:
          rmbk(p)

  def rmbk(p):
      """delete files in given path recursively.

      @param p: single path given
      """

      pass

  def main():
      pass

  if __name__ == '__main__':
      main()
#+END_SRC

**** bash find

#+BEGIN_SRC sh
  #!/usr/bin/env bash

  # input check, not implemented

  for p in $*
  do
      find $p -name "*~" -exec rm {} \;
  done

#+END_SRC

*** yasnippet python ifm

#+BEGIN_SRC python
  if __name__ == '__main__':
      main()
#+END_SRC
*** ABORT evernote to GitHub blog
- State "ABORT"      from ""           [2015-12-21 一 11:33] \\
  麻烦，没有意义


1. In evernote,  export a note to a single html
2. Upload images or other files to Qiniu with default name
3. Modidy html file

*** Music record

- 2015/12/18  陈奕迅   认了吧
- 2015/12/11  陈奕迅   What's Going On…?
- 2015/12/04  陈奕迅   怎么样
- 2015/11/27  陈奕迅   Life Continues…
- 2015/11/21  陈奕迅   U-87
- 2015/11/13  陈奕迅   Live For Today
- 2015/10/30  陈奕迅   Special Thanks To…
- 2015/10/23  陈奕迅   The Line-Up
- 2015/10/16  陈奕迅   The Easy Ride
- 2015/10/10  陈奕迅   反正是我
- 2015/10/04  陈奕迅   Get A Life 演唱会
- 2015/10/03  Soundtrack   Friends (The Ultimate Soundtrack)
- 2015/10/03  陈奕迅   Shall We Dance? Shall We Talk!
- 2015/10/01  Thomas Newman   WALL-E (An Original Walt Disney Records Soundtrack)
- 2015/09/25  陈奕迅  打得火热
- 2015/09/18  陈奕迅   Nothing Really Matters
- 2015/09/15  Soundtrack   I Am Sam (Music From and Inspired by the Motion Picture)
- 2015/09/14  City of Prague Philharmonic Orchestra   The Godfather Trilogy
- 2015/09/14  其他原声带   Three Idiots
- 2015/09/11  陈奕迅   幸福
- 2015/09/05  陈奕迅   与我常在
- 2015/09/04  陈奕迅   婚礼的祝福
- 2015/09/03  陈奕迅   DUO 陈奕迅2010演唱会
- 2015/08/28  陈奕迅   天佑爱人
- 2015/08/23  Wolfgang Amadeus Mozart   Ultimate Mozart: The Essential Masterpieces
- 2015/08/21  陈奕迅   新生活
- 2015/08/16  陈奕迅   我的快乐时代
- 2015/07/08  张国荣   一切随风
- 2015/07/08  张国荣   劲歌集
- 2015/07/08  张国荣   大热
- 2015/07/08  张国荣   Untitled
- 2015/07/03  张国荣   陪你倒数
- 2015/07/03  张国荣   这些年来
- 2015/06/26  张国荣   Printemps
- 2015/06/19  张国荣   红
- 2015/06/13  张国荣   宠爱
- 2015/06/05  张国荣   LESLIE 侧面
- 2015/05/30  张国荣   兜风心情
- 2015/05/24  张国荣   Salute
- 2015/05/22  张国荣   HOT SUMMER
- 2015/05/15  张国荣   Virgin Snow
- 2015/05/09  张国荣   Summer Romance
- 2015/05/01  张国荣   爱慕
- 2015/04/24  张国荣   张国荣
- 2015/04/19  张国荣   Stand Up
- 2015/04/17  张国荣   全赖有你 夏日精选
- 2015/04/11  Ludwig van Beethoven   Complete Beethoven Edition Vol.1: Symphonies
- 2015/04/10  张国荣   为你钟情
- 2015/04/06  张国荣   Leslie
- 2015/03/28  张国荣   张国荣的一片痴…
- 2015/03/22  张国荣   风继续吹
- 2015/03/15  万晓利 	  这一切没有想象的那么糟
- 2015/01/11  The Beatles   Please Please Me
- 2015/01/11  The Beatles   Beatles for Sale
- 2015/01/11  The Beatles   Revolver
- 2015/01/11  The Beatles   Sgt. Pepper's Lonely Hearts Club Band
- 2015/01/11  The Beatles   The Beatles
- 2015/01/11  The Beatles   Abbey Road
- 2015/01/11  The Beatles  Let It Be
- 2014/12/07  The Beatles   Help!
- 2014/12/02  The Beatles   A Hard Day's Night
- 2014/11/21  The Beatles   With the Beatles
- 2014/11/17  The Beatles   Rubber Soul
- 2014/10/27  陈绮贞   让我想一想
- 2014/10/17  孙燕姿   风筝
- 2014/10/15  孙燕姿   我要的幸福
- 2014/10/14  孙燕姿   孙燕姿 同名专辑
- 2014/09/20  五月天   知足 最真杰作选
- 2014/09/18  五月天   时光机
- 2014/09/17  五月天   神的孩子都在跳舞
- 2014/09/11  五月天   人生海海
- 2014/09/09  五月天   爱情万岁
- 2014/09/05  朴树   生如夏花
- 2014/09/05  五月天   第一张创作专辑
- 2014/08/27  朴树   我去2000年

*** DONE HELM
- State "DONE"       from ""           [2015-12-21 一 17:43] \\
  我之前使用的 helm 不过冰山一角，其功能出乎意料的强大，实现了许多常用的
  功能。
**** reference

+ [[http://tuhdo.github.io/helm-intro.html][Emacs Minor Manual: helm]]
+ [[https://github.com/emacs-helm/helm][Github]]

**** settings

Minimal config:
#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (helm-mode 1)
#+END_SRC

Extended config:

#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (require 'helm-config)

  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t)

  (helm-mode 1)
#+END_SRC

**** usage

- never use TAB to complete
- /RET/  select
- C-p/n C-v M-v M-< M->
- /C-SPC/  mark
- /M-a/  select all
- /C-c C-i/  insert into current buffer
- C-t  toggle layout

**** Why is Helm powerful?

- Simple and Consistent interface
- Interactivity
- Focus on finding what you want first, decide to do with it later
- Matching mechanism

**** operating on text at point

_If you are already in a Helm session, you can still get input from
the current editing buffer_ by the following key bindings:

- /C-w/ yanks word at point, starting from point to the end of the
  word, into the Helm prompt (the minibuffer).

- /M-n/ yanks symbol at point

**** symbol at point

- /C-h f/, which runs describe-function, automatically takes the
  symbol at point as default for searching function.

- /C-h v/, which runs describe-variable, automatically takes the
  symbol at point as default for searching variable.

- /C-h w/, which runs where-is, automatically takes the symbol at
  point as default for showing key binding for a command.

- /C-h C-h/, get help

**** helm-M-x

not used. /smex/ instead.

**** helm-show-kill-ring  M-y

**** helm-mini  C-x b

**** helm-find-file  C-x C-f

- C-j  narrow to highlighting candicates,  C-l  go back
- C-l  go up one directory level
- _To create a directory, enter a new name that does not exist in the
  current directory and append / at the end._
- ~/  home directory
- /  root directory
- ./  default-directory
- find file at point
- file and directory histories /with prefix/

**** [#A] helm-ff-do-grep  C-s

From within a helm-find-files session, you can invoke
helm-ff-run-grep with /C-s/ to search a file/directory on highlighted
entry in the Helm buffer. With prefix argument C-u, recursively grep a
selected directory.

**** helm-semantic-or-Imenu  C-c h i

find tag, i.e. definition of function or varible

**** [#A] helm-man-woman  C-c h m

With helm-man-woman, you can quickly jump to any man entry using Helm
interface,

**** helm-find  C-c h /

By default, invoking helm-find only searches current directory. With
prefix argument C-u (i.e. C-u C-c h /), a prompt asks for a directory
to find.

**** helm-locate C-c h l

locate

**** helm-occur C-c h o

As you type, matching lines are updated immediately. This is
convenient when you want to have a list of matches in the current
buffer to jump back and forth.

/TAB to temporary move point to the location of current highlighting
match./

**** helm-apropos  C-c h a

**** Command: helm-info-*

- <prefix> h g	Command: helm-info-gnus
- <prefix> h i	Command: helm-info-at-point
- <prefix> h r	Command: helm-info-emacs
- helm-info-gdb.
- helm-info-find.
- helm-info-elisp.
- ...

**** helm-lisp-completion-at-point

**** helm-resume  C-c h b

This command allows you to resume the previous Helm session, along
with your previous patterns in the prompt.

**** helm-all-mark-rings  C-c h C-c SPC

It allows you to view the content of the both the local and global
mark rings in a friendly interface, so you can always jump back to
where you were.

**** [#A] helm-regexp  C-c h r

This commands is useful when you want to test out regexp
interactively.

Following actions are available if /C-z/:

- [f1]  Kill regexp as sexp  Saves the regexp as a string in kill-ring

- [f2]  Query Replace Regexp Invoke query-replace with current regexp
  to be replaced

- [f3]  Kill regexp  Saves the regexp as is in the current Helm prompt

**** helm-register C-c h i

By simply executing helm-register, you can view what is in
registers. RET or TAB inserts content of highlighting register.

- [f1]  Insert Register  Insert register content into buffer
- [f2]  Append Region to Register  Append an active region to current content in highlighting register
- [f3]  Prepend Region to Register  Prepend an active region to current content in highlighting register

**** helm-top C-c h t

This command provides Helm interface for top program. You can interact with each process with the following actions:

- [f1]	kill (SIGTERM)
- [f2]	kill (SIGKILL)
- [f3]	kill (SIGINT)
- [f4]	kill (Choose signal)

helm-top specific commands:

- C-c C-u	Refresh helm-top
- M-C	Sort by shell commands
- M-P	Sort by CPU usage (upcase)
- M-U	Sort by user
- M-M	Sort by memory

**** helm-surfraw  C-c h s

surfraw provides a fast UNIX command line interface to a variety of
popular WWW /search engines/ and other artifacts of power. It reclaims
google, altavista, dejanews, freshmeat, research index, slashdot…

**** helm-google-suggest  C-c h g

This command allows you to interactively enter search terms and get
results from Google in a Helm buffer. Then, you can open one of the
candidates in other services, such as Google, Wikipedia, Youtube,
Imbd, Google Maps, Google News.

**** helm-color  C-c h c

If you want to quickly view and copy hexadecimal values of colors,
helm-color provides such features.

**** helm-eval-expression-with-eldoc  C-c h M-:

This command allows you to enter Emacs Lisp expressions and get
/instant/ result in a Helm buffer for every character you type.

**** helm-calcul-expression  C-c h C-,

This commands provides a Helm interface for calc command.

**** helm-eshell-history  C-c C-l(eshell-mode)

helm-eshell-history provides a easy and efficient way to work with
command history.

**** helm-comint-input-ring C-c C-l

Similar to helm-eshell-history, but is used for M-x shell.

**** shortcuts                                                  :shortcut:

|-------------+---------------------------------+-----------------------------------------------------------------------------|
| Key Binding |             Command             |                                 Description                                 |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| M-x         | helm-M-x                        | List commands                                                               |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| M-y         | helm-show-kill-ring             | Shows the content of the kill ring                                          |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-x b       | helm-mini                       | Shows open buffers, recently opened files                                   |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-x C-f     | helm-find-files                 | The helm version for find-file                                              |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-s         | helm-ff-run-grep                | Run grep from within helm-find-files                                        |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h i     | helm-semantic-or-imenu          | Helm interface to semantic/imenu                                            |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h m     | helm-man-woman                  | Jump to any man entry                                                       |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h /     | helm-find                       | Helm interface to find                                                      |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h l     | helm-locate                     | Helm interface to locate                                                    |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h o     | helm-occur                      | Similar to occur                                                            |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h a     | helm-apropos                    | Describes commands, functions, variables, …                                 |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h h g   | helm-info-gnus                  |                                                                             |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h h i   | helm-info-at-point              |                                                                             |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h h r   | helm-info-emacs                 |                                                                             |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h <tab> | helm-lisp-completion-at-point   | Provides a list of available functions                                      |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h b     | helm-resume                     | Resumes a previous helm session                                             |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-h SPC     | helm-all-mark-rings             | Views content of local and global mark rings                                |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h r     | helm-regex                      | Visualizes regex matches                                                    |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h x     | helm-register                   | Shows content of registers                                                  |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h t     | helm-top                        | Helm interface to top                                                       |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h s     | helm-surfraw                    | Command line interface to many web search engines                           |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h g     | helm-google-suggest             | Interactively enter search terms and get results from Google in helm buffer |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h c     | helm-color                      | Lists all available faces                                                   |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h M-:   | helm-eval-expression-with-eldoc | Get instant results for emacs lisp expressions in the helm buffer           |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h C-,   | helm-calcul-expression          | Helm interface to calc                                                      |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c C-l     | helm-eshell-history             | Interface to eshell history                                                 |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c C-l     | helm-comint-input-ring          | Interface to shell history                                                  |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c C-l     | helm-mini-buffer-history        | Interface to mini-buffer history                                            |
|-------------+---------------------------------+-----------------------------------------------------------------------------|

*** DONE [[http://wiki.ros.org/rqt][rqt]]
- State "DONE"       from "TODO"       [2015-12-21 一 15:27]
- State "TODO"       from ""           [2015-12-21 一 14:17] \\
  rqt 是良好的图形化开发工具，要比命令行方式更友好一些。
  不要过于推崇命令行方式，哪种方式效率更高要因情况而定。
  定制 rqt 默认布局

***** intro

*rqt* is a software framework of ROS that implements the various GUI
 tools in the form of plugins. One can run all the existing GUI tools
 as dockable windows within rqt!

The tools can still run in a *traditional standalone* method, but rqt
_makes it easier to manage all the various windows on the screen at
one moment_.

****** components

rqt consists of three (+1) metapackages:

- /rqt/ - core modules. rqt plugin developers barely needs to pay
  attention.

- /rqt_common_plugins/ - ROS backend tools suite that can be used on/off
  robot runtime.

- /rqt_robot_plugins/ - Tools for interacting robots during their
  runtime.
  - rqt_pr2_dashboard - Robot specific (PR2). Temporarily excluded
    from other metapackages due to building issue

****** usage

******* basic

#+BEGIN_EXAMPLE
rqt
#+END_EXAMPLE

#+BEGIN_EXAMPLE
rqt --standalone rqt_mypkg
#+END_EXAMPLE

******* help

#+BEGIN_EXAMPLE
  usage: rqt [-b BINDING] [--clear-config] [-f] [--force-discover] [-h] [-l]
             [-m] [-p PERSPECTIVE] [--perspective-file PERSPECTIVE_FILE]
             [--reload-import] [-s PLUGIN] [-t] [-v]
             [--args [PLUGIN_ARGS [PLUGIN_ARGS ...]]] [--list-perspectives]
             [--list-plugins] [--command-pid PID]
             [--command-start-plugin PLUGIN]
             [--command-switch-perspective PERSPECTIVE]

  Options for GUI instance:
    -b BINDING, --qt-binding BINDING
                          choose Qt bindings to be used [pyqt|pyside]
    --clear-config        clear the configuration (including all perspectives
                          and plugin settings)
    -f, --freeze-layout   freeze the layout of the GUI (prevent rearranging
                          widgets, disable undock/redock)
    --force-discover      force a rediscover of plugins
    -h, --help            show this help message and exit
    -l, --lock-perspective
                          lock the GUI to the used perspective (hide menu bar
                          and close buttons of plugins)
    -m, --multi-process   use separate processes for each plugin instance
                          (currently only supported under X11)
    -p PERSPECTIVE, --perspective PERSPECTIVE
                          start with this named perspective
    --perspective-file PERSPECTIVE_FILE
                          start with a perspective loaded from a file
    --reload-import       reload every imported module
    -s PLUGIN, --standalone PLUGIN
                          start only this plugin (implies -l). To pass arguments
                          to the plugin use --args
    -t, --on-top          set window mode to always on top
    -v, --verbose         output qDebug messages
    --args [PLUGIN_ARGS [PLUGIN_ARGS ...]]
                          arbitrary arguments which are passes to the plugin
                          (only with -s, --command-start-plugin or --embed-
                          plugin). It must be the last option since it collects
                          all following options.

  Options to query information without starting a GUI instance:
    These options can be used to query information about valid arguments for
    various options.

    --list-perspectives   list available perspectives
    --list-plugins        list available plugins

  Options to operate on a running GUI instance:
    These options can be used to perform actions on a running GUI instance.

    --command-pid PID     pid of the GUI instance to operate on, defaults to
                          oldest running GUI instance
    --command-start-plugin PLUGIN
                          start plugin
    --command-switch-perspective PERSPECTIVE
                          switch perspective

  Special options for embedding widgets from separate processes:
    These options should never be used on the CLI but only from the GUI code
    itself.
#+END_EXAMPLE

******* list-plugins

#+BEGIN_EXAMPLE
rqt --list-plugins
#+END_EXAMPLE

- create_dashboard.dashboard.CreateDashboard
- kobuki_dashboard.dashboard.KobukiDashboard
- rqt_action.action_plugin.ActionPlugin
- rqt_bag.bag.Bag
- rqt_console.console.Console
- rqt_dep.ros_pack_graph.RosPackGraph
- rqt_graph.ros_graph.RosGraph
- rqt_image_view/ImageView
- rqt_joint_trajectory_controller.joint_trajectory_controller.JointTrajectoryController
- rqt_launch.launch_plugin.LaunchPlugin
- rqt_logger_level.logger_level.LoggerLevel
- rqt_moveit.moveit_plugin.MoveitPlugin
- rqt_msg.messages.Messages
- rqt_nav_view.nav_view_plugin.NavViewPlugin
- rqt_plot.plot.Plot
- rqt_pose_view.pose_view.PoseView
- rqt_publisher.publisher.Publisher
- rqt_py_console.py_console.PyConsole
- rqt_reconfigure.param_plugin.ParamPlugin
- rqt_robot_monitor.robot_monitor_plugin.RobotMonitorPlugin
- rqt_robot_steering.robot_steering.RobotSteering
- rqt_runtime_monitor.runtime_monitor.RuntimeMonitor
- rqt_rviz/RViz
- rqt_service_caller.service_caller.ServiceCaller
- rqt_shell.shell.Shell
- rqt_srv.services.Services
- rqt_tf_tree.tf_tree.RosTfTree
- rqt_top.top_plugin.Top
- rqt_topic.topic.Topic
- rqt_web.web.Web

******* list-perspectives

#+BEGIN_EXAMPLE
rqt --list-perspectives
#+END_EXAMPLE

- @rqt_console__Console
- @rqt_dep__RosPackGraph
- @rqt_graph__RosGraph
- @rqt_reconfigure__Param
- @rqt_tf_tree__RosTfTree
- Default

******* debugging rqt_gui with debugger

#+BEGIN_EXAMPLE
% gdb python
(gdb) run $YOUR_RQT_GUI_HOMEDIR$/bin/rqt_gui
 :          (usual gdb usage)
#+END_EXAMPLE

****** [[http://wiki.ros.org/rqt/Plugins][plugin]]              :plugin:
***** [[http://wiki.ros.org/rqt_gui?distro%3Dindigo][rqt_gui]]

rqt_gui provides the main to start an instance of the ROS integrated
graphical user interface provided by qt_gui.

***** [[http://wiki.ros.org/rqt_gui_cpp?distro%3Dindigo][rqt_gui_cpp]]

rqt_gui_cpp enables GUI plugins to use the C++ client library for ROS.

***** [[http://wiki.ros.org/rqt_gui_py?distro%3Dindigo][rqt_gui_py]]

rqt_gui_py enables GUI plugins to use the Python client library for ROS.

***** [[http://wiki.ros.org/rqt_common_plugins?distro=jade][rqt_common_plugins]] :plugin:rqt_common_plugins:

rqt_common_plugins metapackage provides ROS backend graphical tools
suite that can be used on/off of robot runtime.

****** [#A] [[http://wiki.ros.org/rqt_bag?distro=fuerte][rqt_bag]] :rqt_bag:

rqt_bag is an application for recording and managing bag files.

使用 rqt_bag 需要手动 publish，默认不发布。 右键菜单。

****** [[http://wiki.ros.org/rqt_bag_plugins?distro=fuerte][rqt_bag_plugins]] :rqt_bag_plugins:
****** [[http://wiki.ros.org/rqt_console?distro=fuerte][rqt_console]] :rqt_console:
****** [[http://wiki.ros.org/rqt_dep?distro=fuerte][rqt_dep]]  :rqt_dep:
****** [#A] [[http://wiki.ros.org/rqt_graph?distro=jade][rqt_graph]] :rqt_graph:

rqt_graph provides a GUI plugin for visualizing the ROS computation
graph.

****** [[http://wiki.ros.org/rqt_gui?distro=fuerte][rqt_gui]]  :rqt_gui:
****** [[http://wiki.ros.org/rqt_gui_cpp?distro=fuerte][rqt_gui_cpp]] :rqt_gui_cpp:
****** [[http://wiki.ros.org/rqt_gui_py?distro=fuerte][rqt_gui_py]] :rqt_gui_py:
****** [[http://wiki.ros.org/rqt_image_view?distro=fuerte][rqt_image_view]] :rqt_image_view:
****** [#A] [[http://wiki.ros.org/rqt_launch?distro=jade][rqt_launch]]

This rqt plugin ROS package provides easy view of .launch files.

****** [[http://wiki.ros.org/rqt_logger_level?distro=fuerte][rqt_logger_level]] :rqt_logger_level:
****** [[http://wiki.ros.org/rqt_msg?distro=fuerte][rqt_msg]]  :rqt_msg:
****** [[http://wiki.ros.org/rqt_nav_view?distro=fuerte][rqt_nav_view]] :rqt_nav_view:
****** [[http://wiki.ros.org/rqt_param?distro=fuerte][rqt_param]] :rqt_param:
****** [[http://wiki.ros.org/rqt_plot?distro=fuerte][rqt_plot]] :rqt_plot:
****** [[http://wiki.ros.org/rqt_pose_view?distro=fuerte][rqt_pose_view]] :rqt_pose_view:
****** [[http://wiki.ros.org/rqt_pr2_dashboard?distro=fuerte][rqt_pr2_dashboard]] :rqt_pr2_dashboard:
****** [[http://wiki.ros.org/rqt_publisher?distro=fuerte][rqt_publisher]] :rqt_publisher:
****** [[http://wiki.ros.org/rqt_py_common?distro=fuerte][rqt_py_common]] :rqt_py_common:
****** [[http://wiki.ros.org/rqt_py_console?distro=fuerte][rqt_py_console]] :rqt_py_console:
****** [[http://wiki.ros.org/rqt_robot_dashboard?distro=fuerte][rqt_robot_dashboard]] :rqt_robot_dashboard:
****** [[http://wiki.ros.org/rqt_robot_monitor?distro=fuerte][rqt_robot_monitor]] :rqt_robot_monitor:
****** [[http://wiki.ros.org/rqt_robot_steering?distro=fuerte][rqt_robot_steering]] :rqt_robot_steering:
****** [[http://wiki.ros.org/rqt_runtime_monitor?distro=fuerte][rqt_runtime_monitor]] :rqt_runtime_monitor:
****** [[http://wiki.ros.org/rqt_rviz?distro=fuerte][rqt_rviz]] :rqt_rviz:
****** [[http://wiki.ros.org/rqt_service_caller?distro=fuerte][rqt_service_caller]] :rqt_service_caller:
****** [[http://wiki.ros.org/rqt_shell?distro=fuerte][rqt_shell]] :rqt_shell:
****** [[http://wiki.ros.org/rqt_srv?distro=fuerte][rqt_srv]]  :rqt_srv:
****** [[http://wiki.ros.org/rqt_tf_tree?distro=fuerte][rqt_tf_tree]] :rqt_tf_tree:
****** [[http://wiki.ros.org/rqt_topic?distro=fuerte][rqt_topic]] :rqt_topic:
****** [[http://wiki.ros.org/rqt_web?distro=fuerte][rqt_web]]  :rqt_web:

*** algorithm
#+include: ~/Wally/Project/algorithm/ChangeLog.txt
#+include: ~/Wally/Project/algorithm/README.md

** 2015/12/20
*** DONE remove backup file with "~" as suffix recursively
- State "DONE"       from "TODO"       [2015-12-20 日 22:49] \\
  调试是王道
- State "TODO"       from ""           [2015-12-20 日 19:37]

#+BEGIN_SRC sh
    #! /usr/bin/env bash

    # debackup.sh  --- remove backup files recursively in given folders


    # input check
    argc=$#
    if [ $argc -eq 0 ]              # check if any path is specified
    then
        path="."
        echo "Warning: no given path, using current workspace..."
    else
        path=$@
        for p in $path              # check if given paths are effective
        do
            if ! [ -d $p ]
            then
                echo "Wrong arguments: arguments should be a directrory"
                exit -1
            fi
        done
    fi


    # @function: debackup
    # @brief: recusively remove files ended with ~ in given dir
    # @param: path
    function debackup(){
        path=$1
        cd $path
        for f in $(ls .
  grep -E '*~$')
        do
            if rm $f
            then
                echo "$f is deleted"
            fi
        done

        for p in $(ls .)
        do
            if [ -d "$p" ]
            then
                debackup $p
            fi
        done
    }


    # main
    for p in $path
    do
        debackup $p
    done
#+END_SRC
** 2015/12/17
*** DONE [[https://app.yinxiang.com/shard/s52/nl/11551545/88a056bd-f935-41c5-8d72-b6e324579744?title=bash%E4%B9%8Bread%E5%91%BD%E4%BB%A4%20-%20xiangzi888%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD][read]]                                                        :read:
- State "DONE"       from ""           [2015-12-18 五 10:14] \\
  1. 用来学习的东西不能称之为 *项目* ， 不要以文件目录的形式进行组织，仅
     使用 ORG 笔记就可以。

  2. org-babel 不支持标准输入
read命令接收标准输入(键盘)的输入，或者其它文件描述符的输入。
得到输入后，read命令将数据放在一个标准变量中。

**** 基本读取

_Org babel 不支持标准输入_

#+NAME: read_basic
#+BEGIN_SRC sh
#!/bin/sh
echo -n "Enter your name: "
read name
echo "hello $name"
exit 0
#+END_SRC

**** -p 提示

#+NAME: read_with_promopt
#+BEGIN_SRC sh
read -p "Enter your name: " name
#+END_SRC

#+RESULTS: read_with_promopt

**** 多个变量

READ后面可以有多个变量。

**** 不指定变量

放置在环境变量 /REPLY/ 中（小写不行）

#+BEGIN_SRC sh
#!/bin/sh

read -p "Enter your name: "
echo $REPLY
#+END_SRC

**** -t 计时输入

脚本可能会停下来一直等待用户输入。
-t <n>  # 指定秒数
当计时满时， read命令返回非零值(零值为正常退出)

#+NAME: read_within_clock
#+BEGIN_SRC sh
#!/bin/sh
if read -t 5 -p "Please enter your name:" name
then
    echo "Hello $name"
else
    echo "Sorry, too slow"
fi
exit 0
#+END_SRC

**** -n<N> 设置输入字符个数

#+NAME: read_speficied_length
#+BEGIN_SRC sh
#!/bin/bash

read -n1 -p "Do you want to continue[Y/N]?" answer
case $answer in
    Y|y)
	echo "fine, contine";;
    N|n)
	echo "ok, goodbye";;
    *)
	echo "error choice"
esac
exit 0
#+END_SRC

**** -s 默读，即不显示

#+NAME： read_silently
#+BEGIN_SRC sh
  #!/bin/bash

  read -s -p "Enter your passwd: " pass
  echo "your password is $pass"
  exit 0
#+END_SRC

**** 读取文件

每次调用调用read命令都会读取文件中折一行文本。

当文件没有可读的行时，read命令将以非零状态退出。

/最常用的方法是对文件使用cat命令并通过管道将结果直接传送给包含read命令的while命令/

#+NAME: read_from_file
#+BEGIN_SRC sh
  #!/bin/sh

  touch temp
  declare -i count=5
  while [ $count -gt 0 ]
  do
      echo $count >> temp
      count=$(($count-1))
  done

  cat temp | while read line
             do
                 echo "$count: $line"
                 count=$(($count+1))
             done
  exit 0
#+END_SRC

*** reference [[http://teliute.org/linux/abs-3.9.1/index.html][高级bash脚本编程指南]]

*** [[http://www.gigamonkeys.com/book/][Practical Common Lisp]]
*** FoxitReader 标记类型                                      :foxitreader:

1. Note 表示想法
2. Underline 表示可以引用的内容
3. 高亮 表示需要查阅的文献
4. 删除线 表示不赞同的地方

*** defvar setq                                               :defvar:setq:

defvar introduces a dynamic variable while setq is used to assign a
value to a dynamic or lexical variable. The value of a dynamic
variable is looked up in the environment that calls the function,
while the value of a lexical variable is looked up in the environment
where the function was defined.

*** auto-fill-mode: Toggle automatic line breaking (Auto Fill mode).

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda()
                            (auto-fill-mode t)))
#+END_SRC

** 2015/11/01
*** 数据结构与算法分析                                          :algorithm:
**** 引论
***** 选择问题(selection problem)
****** 问题描述
有一组n个数，要确定其第k个最大者
+ 输入： 数组a
+ 输出： 第k个最大数
****** 解法一
先排序，然后返回索引为k的元素
******* 伪代码
#+begin_src latex
  \begin{algorithm}[ht]
    sort-select(a, k)
    \kwdata{a: 数组， k: integer}
    sort(a)
    return a[k]
  \end{algorithm}
#+end_src
******* 实现
#+begin_src latex

  \begin{cpp}
    template<class t>
    t sort_select(t arr[], size_t len, size_t k)
    {
      if(len < k){
        return -1;
      }

      // bubble sort
      for(int i=0; i<len; i++){
        bool no_swap = true;
        for(int j=0; j<len-i-1; j++)
        if(arr[j] < arr[j+1]){
          t temp = arr[j];
          arr[j] = arr[j+1];
          arr[j+1] = temp;
          no_swap = false;
        }

        if(no_swap)
        break;
      }
      return arr[k-1];
    }
  \end{cpp}
#+end_src
****** 解法二
先读入前k个元素并排序，接着将剩下的元素逐个读入，替换适当位置的元素或舍
弃。最终返回第k个元素
******* 伪代码
#+begin_src latex
  \begin{algorithm}[ht]
    optimized-sort-select
    \kwdata{a: array, k: index}
    \kwout{第k大元素}
    \blankline
    \begin{
      \for{i=1 \kwto k}{
        b[i] = a[i]
      }
      sort(b)
      \for{i=k+1 \kwto a.length}{
        j = k
        key = a[i]
        \while{key>b[j] and j>0}{
          b[j]=b[j-1]
          j = j-1
        }
        b[j-1] = key
      }
      return b[k]
    }
  \end{algorithm}
#+end_src
******* 实现
#+begin_src latex

  \begin{cpp}
    template<class t>
    t optimized_sort_select(t arr[], size_t len, size_t k)
    {
      if(len < k)
      return -1;

      t brr[k];
      for(int i=0; i<k; i++)
      brr[i] = arr[i];

      // insert-sort
      for(int i=1; i<k; i++){
        t key = brr[i];
        int j = i-1;
        while(brr[j]<key && j>=0){
          brr[j+1] = brr[j];
          j--;
        }
        brr[j+1] = key;
      }

      for(int i=k; i<len; i++){
        int j = k-1;
        t key = arr[i];
        while(brr[j]<key && j>=0){
          brr[j]=brr[j-1];
          j--;
        }
        brr[j+1] = key;
      }
      return brr[k-1];
    }
  \end{cpp}
#+end_src
****** 算法的性能
length=1000万，k=5000,000时，两种算法都不能在合理的时间内完成（每种算
法都需要计算机处理若干天才能完成）
存在另外一种算法可以在1s左右给出答案。
**** c++类
***** 基本class语法
+ 学习类的程序风格
+ 文件以下划线连接的小写字母单词命名
+ 类使用驼峰式命名
+ 类的方法使用小写字母q命名
+ 合理的注释是必要的
#+begin_src latex
  \begin{cpp}
    /**
    ,* a class for simulating an integer memory cell
    ,*/

    class intcell
    {
      /**
      ,* construct the intcell
      ,* initial value is 0
      ,*/
      intcell(){
        storedvalue = 0;
      }

      /**
      ,* construct the intcell
      ,* initial value is initialvalue
      ,*/
      intcell(int initialvalue){
        storedvalue = initialvalue;
      }

      /**
      ,* return the stored value
      ,*/
      int read(){
        return storedvalue;
      }

      /**
      ,* change the stored value
      ,*/
      void write(int x){
        storedvalue = x;
      }

      private:
      int storedvalue;
    };

  \end{cpp}
#+end_src

***** 特别的构造函数和访问函数
#+begin_src latex
  \begin{cpp}
    /**
    ,* a class for simulating an integer memory cell.
    ,*/

    class intcelloptimized
    {
      public:
      explicit intcelloptimized(int initialvalue=0)
      : storedvalue(initialvalue) {}
      int read() const{
        return storedvalue;
      }
      void write(int x){
        storedvalue = x;
      }

      private:
      int storedvalue;

    };



  \end{cpp}
#+end_src


****** 四项优化
1. 使用默认参数（default parameter）

2. 初始化列表
   1) 在数据成员是具有复杂初始化过程的类类型时，使用初始化列表代替代码
      体中的赋值语句可以节省许多时间
   2) 如果一个数据成员是const（在对象被构造后就不能再改变），数据成员
      的值只能在初始化列表中时行初始化
   3) 如果一具数据成员是不具有零参数构造函数的类类型时，该数据成员的初
      始化也必须在初始化列表中进行

3. explicit构造函数
   1) 所有单参数的构造函数都必须是explicit的，以避免后台的类型转换；
   2) 否则一些宽松的规则将允许在没有显式类型转换操作的情况下进行类型转换
   3) 通常单构造函数定义了一个隐式类型转换(impllicit type conversion)，该转换创建一个临时对象，从而使赋值变得兼容
   4) intcell obj; obj = 37; // should not compile, 会转换为intcell temp = 37; obj = temp;

4. 常量成员函数
   1) 在c++中每个成员函数都被标记为访问函数(accessor)或者修改函数(mutator)
   2) 函数声明可以在不同的情况下以不同的方式使用const关键字，只有跟在结尾圆括号后面的const才标记一个访问函数

****** 其它优化
1. 预处理指令，防止多次包括同一文件 #ifndef intcell_h #define intcell_h #endif
2. 接口与实现分离
   1) 签名一致
   2) 默认参数仅在接口中被定义，在实现中被忽略

***** vector和string
c++标准定义了两个类vector和string。
*如果可能，应尽量避免使用c++内置数组和字符串。*

****** 内置数组带来的麻烦
内置数组的问题在于其行为与基本对象不同
+ 不能使用=复制
+ 不能记忆本身长度
+ 不能对索引进行边界检查

*** \LaTeX 算法                                                     :latex:
**** 宏包： *algorithm2e*
+ 环境： *algorithm*
+ 选项
  - boxed 边框
  - lined 在某一算法的起始与结束之间排印一条垂直线，以标示作用范围
  - linesnumbered 增加行号，不包括注释
  - vlined 同lined
+ 算法环境被定义为浮动环境
  #+begin_example
    \begin{algorithm}[位置]
    算法
    \end{algorithm}
  #+end_example
+ 位置选项
  - 同浮动环境table相同
  - h 强制将算法内容就地放置
  - algorithm* 双栏格式中跨栏编排

**** 命令
***** 基本命令

[[/home/ben/tiger/figures/scrot/6757est.png]]

***** 标题命令

[[/home/ben/tiger/figures/scrot/6757dad.png]]

***** 输入输出命令

[[/home/ben/tiger/figures/scrot/6757qkj.png]]

[[/home/ben/tiger/figures/scrot/67573up.png]]

***** 条件命令

[[/home/ben/tiger/figures/scrot/6757efv.png]]

***** 关键词命令

[[/home/ben/tiger/figures/scrot/6757rpb.png]]

**** example
#+begin_src latex
  \begin{algorithm}[ht]
    \kwdata{a, b, c, i: integer}
    \begin{
      clrscr\;
      \for{i:=100 \kwto 999}{
        c:=i mod 10; \tcp{取个位数}
        b:=(i div 10) mod 10 \;
        a:=i dvi 100\;
        \if{i=a*a*a+b*b*b+c*c*c}{writeln{i:6}}
      }
    }
  \end{algorithm}
#+end_src

** 2015/11/02
*** 基于ROS的机器人即时定位与地图创建技术的研究                :literature:
research of robot slam technology based on ros

导师： supervisor

**** 摘要
1. *什么以及为什么*
   slam
   作为移动机器人最基本、最重要的技能，slam技术使机器人具备了智能自主
   行走、避障以及寻物的能力，从而在太空探索、资源勘查、室内环境、室外
   环境、水下环境等领域都有非常广泛的应用。

2. 文章内容
   1) 研究背景、意义与现状
   2) kf、ekf、pf
   3) 仿真， 基于matlab？
   4) ros

3. 英文摘要
   + some work requiring tedious process, high percision in harsh environment
   + this paper presents ...

**** 绪论

***** 移动机器人的发展现状

+ lego nxt机器人
+ sony aibo(犬形)
+ irobot 吸尘机器人roomba
  - 避障
  - 路径规化
  - 自动充电
+ nao 双足

**** 算法介绍

***** 模型建立

****** 地图表示方法
+ 几何地图（特征地图）
+ 拓扑地图
+ voronoi图
+ 栅格地图

**** ros网站作为参考文献
[52] ros 网站,http://www.ros.org/f2013-5-12].

**** 很水的论文，我不要写这么水的东西
+ 论文结构可以参考，或者作为反而教材
+ 关于ros的介绍
+ 开始准备论文
** 2015/11/03
*** Python SLAM B/C                                                 :major:
**** unit_a: robot,  motion model,  scan data
***** motion model
****** 推导过程
[[/home/ben/tiger/figures/scrot/154864ng.png]]
#+begin_src latex
  \begin{displaymath}
    \left\{
      \begin{array}{l}
        r=\alpha(r+w) \\
        l=\alpha\cdot r
      \end{array}
    \right.
  \end{displaymath}


  \begin{displaymath}
    \left\{
      \begin{array}{l}
        \alpha=\frac{r-l}{w} \\
        r=\frac{l}{\alpha}
      \end{array}
    \right.
  \end{displaymath}
#+end_src
[[/home/ben/tiger/figures/scrot/15486ufv.png]]
#+begin_src latex
  \begin{displaymath}
    c=p-(r+\frac{w}{2})\cdot\left[
      \begin{array}{l}
        \sin\theta\\
        -\cos\theta
      \end{array}
    \right]
  \end{displaymath}
  \begin{displaymath}
    p'=c+(r+\frac{w}{2})\cdot\left[
      \begin{array}{l}
        \sin(\theta+\alpha)\\
        -\cos(\theta+\alpha)
      \end{array}
    \right]
  \end{displaymath}
  \begin{displaymath}
    \theta'=(\theta+\pi)\mod 2\pi
  \end{displaymath}
#+end_src

****** 问题模型
*given*:
+ (x, y, \theta)
+ (l, r)
+ w
*for*
($x'$, $y'$, $\theta'$)

****** 求解
1. case 1: $l \ne r$
   1) $\alpha=\frac{r-l}{w}$
   2) $r=\frac{l}{\alpha}$
   3) $\left[\begin{array}{l}cx\\cy\end{array}\right]=\left[\begin{array}{l}x\\y\end{array}\right]-\left(r+\frac{w}{2}\right)\cdot\left[\begin{array}{l}\sin\theta\\-\cos\theta\end{array}\right]$
   4) $\theta'=(\theta+\alpha)\mod 2\pi$
   5) $\left[\begin{array}{l}x'\\y'\end{array}\right]=\left[\begin{array}{l}cx\\cy\end{array}\right]+\left(r+\frac{w}{2}\right)\cdot\left[\begin{array}{l}\sin\theta'\\-\cos\theta'\end{array}\right]$
2. case 2: l=r
   1) $\theta=\theta'$
   2) $x'=x+l\cdot\cos\theta$
   3) $y'=y+l\cdot\sin\theta$

****** 参数
+ w = 150mm
+ 1 tick = 0.349mm

****** 实现
\begin{python}
from math import sin, cos, pi
from pylab import *
from lego_robot import *


def filter_step(old_pose, motor_ticks):

    # find out if there is a turn at all
    if motor_ticks[0] == motor_ticks[1]:
        # no turn. just drive straight
        theta = old_pose[2]
        x = old_pose[0] + motor_ticks[0]*ticks_to_mm*cos(theta)
        y = old_pose[1] + motor_ticks[0]*ticks_to_mm*sin(theta)

        return (x, y, theta)

    else:
        # turn. computer alpha, r, etc.
        alpha = (motor_ticks[1]*ticks_to_mm - motor_ticks[0]*ticks_to_mm) \
                / robot_width
        r = motor_ticks[0] / alpha

        cx = old_pose[0] - (r+robot_width/2)*sin(old_pose[2])
        cy = old_pose[1] + (r+robot_width/2)*cos(old_pose[2])
        theta = (old_pose[2] + alpha) % (2*pi)

        x = cx + (r+robot_width/2)*sin(theta)
        y = cy - (r+robot_width/2)*cos(theta)

        return (x, y, theta)


if __name__ == '__main__':
    # empirically derived conversion from ticks to mm
    ticks_to_mm = 0.349

    # mesured width of the robot(wheel gauge), in mm
    robot_width = 150.0

    # read data
    logfile = legologfile()
    logfile.read("robot4_motors.txt")

    # start at origin (0,0), looking along x axis (alpha = 0)
    pose = (0.0, 0.0, 0.0)

    # loop over all motor ticks records generate filtered position list
    filtered = []
    for ticks in logfile.motor_ticks:
        pose = filter_step(pose, ticks)
        filtered.append(pose)

    for pose in filtered:
        print pose
    plot([p[0] for p in filtered], [p[1] for p in filtered], 'bo')
    show()
\end{python}
***** scan data

****** sensor data memory
s(flag) 315(timestamp) 660(count) 123 124(range data) ....
****** 计算微分
\[f'(i)=\frac{f(i+1)-f(i-1)}{2}\]
******* 伪代码
#+begin_src latex
    \begin{algorithm}[ht]
      \textbf{computederivative(a, t)}

      \kwin{a=[a1, a2, ... an]: array, t: threshold against outliers}
      \kwout{d=[d1, d2, ... dn]: derivative at each element}

      d[1]=0 \tcp{头部边界}
      \for{{\color{red}{{i = 2 \kwto a.length-1}}}}{
        \eif{a[i-1] > t and a[i+1] > t}{
          d[i]=(a[i+1]-a[i-1])/2
        }{
          d[i] = 0\tcp{异常点}
        }
      }
      d[n]=0\tcp{尾部边界}
      \return{d}
    \end{algorithm}
#+end_src
******* 实现
\begin{python}
def compute_derivative(scan, min_dist):
    jumps = [0]
    for i in xrange(1, len(scan)-1):
        l = scan[i-1]
        r = scan[i+1]
        if l > min_dist and r > min_dist:
            derivative = (r - l) / 2.0
            jumps.append(derivative)
        else:
            jumps.append(0)

    jumps.append(0)
    return jumps
\end{python}
****** 特征点提取
[[/home/ben/tiger/figures/scrot/15486z1k.png]]
******* 定义与特征
圆柱
在扫描线上处于波谷中心，在微分曲线上表现为先上升尖后下降尖
******* 问题描述
+ 输入：扫描线
  - 数据结构：数组，每个元素对应一个距离
+ 输出：特征点位置
  - 数据结构：结构数组，每个元素为一个结构，结构中包含一组索引和距离信
    息
******* 算法描述
思想：取扫描线上升沿和下降沿之间的索引和距离数据均值

注意：
1. 特征点的重叠处理
2. 索引整数除法或者说需要取整
******* 伪代码
# #+begin_src latex
#   \begin{algorithm}
#     \textbf{find_cylinders(scan, jump)}
#     \kwin{scan: 扫描线数组，每个元素对应一个距离信息, jump: 微分的跳动阈
#       值}
#     \kwout{cylinders: 特征点结构数组，每个元素对应一个包含索引和距离
#       的结构}
#     on_cylinder = false
#     sum_ray = 0
#     sum_index = 0\tcp{索引和}
#     sum_depth = 0\tcp{距离和}
#     cylinders=[]
#     n = 0                         % 特征点个数
#     derivate=compute_derivatives(scan)
#     \for{i=1 \kwto scan.length}{
#       \if{derivative[i] < -jump\tcp{下降沿，开始计数}}{
#         sum_ray = 0
#         sum_index = 0
#         sum_depth = 0
#         on_cylinder = true
#       }
#       \tcp{注意条件分支结构}
#       \eif{derivate[i] > jump and on_cylinder \tcp{上升沿，结束计数}}{
#         n = n+1
#         cylinders[i]=struct(sum_index/sum_ray, sum_depth/sum_ray)
#       }{
#         \if{scan[i] > mindist}{
#           sum_ray = sum_ray+1
#           sum_index = sum_index+i
#           sum_depth = sum_depth+scan[i]
#         }
#       }
#     }
#     \return{cylinders}
#   \end{algorithm}
# #+end_src

******* 实现
\begin{python}
def find_cylinders(scan, scan_derivative, jump, min_dist):
    cylinder_list = []
    on_cylinder = false
    rays, sum_ray, sum_depth = 0, 0.0, 0.0

    for i in xrange(len(scan_derivative)):
        if scan_derivative[i] < -jump:
            rays, sum_ray, sum_depth = 0, 0.0, 0.0
            on_cylinder = true
        if on_cylinder:
            if scan_derivative[i] > jump:
                cylinder_list.append((sum_ray/rays, sum_depth/rays))
                on_cylinder = false
            elif scan[i] > min_dist:
                rays += 1
                sum_ray += i
                sum_depth += scan[i]

    return cylinder_list
\end{python}
*** Hector Gazebo                                                   :major:
**** about *metapackage*
metapackages are specialized packages in ros (and catkin).
+ they do not install files other than their packages.xml
+ they do not contain any tests, code, files, or other items usually
  found in packages

*a metapackage simply references one or more related packages which
are loosely grouped together.*

#+begin_src latex
  \begin{xml}
    <package>
    <name>hector_gazebo</name>
    <version>0.3.6</version>
    <description>hector_gazebo provides packages related to to simulation of robots using gazebo (gazebo plugins, world files etc.)</description>
    <maintainer email="meyer@fsr.tu-darmstadt.de">johannes meyer</maintainer>

    <license>bsd</license>

    <url type="website">http://ros.org/wiki/hector_gazebo</url>
    <!-- <url type="bugtracker"></url> -->

    <author email="kohlbrecher@sim.tu-darmstadt.de">stefan kohlbrecher</author>
    <author email="meyer@fsr.tu-darmstadt.de">johannes meyer</author>

    <!-- dependencies which this package needs to build itself. -->
    <buildtool_depend>catkin</buildtool_depend>

    <!-- dependencies needed after this package is compiled. -->
    <run_depend>hector_gazebo_thermal_camera</run_depend>
    <run_depend>hector_gazebo_worlds</run_depend>
    <run_depend>hector_gazebo_plugins</run_depend>

    <export>
    <metapackage/>
    </export>

    </package>

  \end{xml}
#+end_src
**** hector_gazebo_worls
***** worlds
some scenarios for gazebo simulation

****** rolling_landscape_120m.launch
[[/home/ben/tiger/figures/scrot/15486dbi.png]]
****** sick_robot_day_2014_20m.launch
[[/home/ben/tiger/figures/scrot/15486cde.png]]

****** sick_robot_day_2014.launch
[[/home/ben/tiger/figures/scrot/15486pnk.png]]

****** small_indoor_scenario.launch
[[/home/ben/tiger/figures/scrot/154862xq.png]]

***** map setting yaml file
#+begin_example
image: small_indoor_scenario_edited_map_hector_mapping.pgm
resolution: 0.050000
origin: [-19.224998, -19.224998, 0.000000]
negate: 0
occupied_thresh: 0.65
free_thresh: 0.196
#+end_example

***** .material文件定义颜色和材质？
*** A comparision of line extraction algorithms using 2D Laser Rangefinder for indoor mobile robotics
**** Abstract
+ experimental evaluation
+ 6 popular algorithms
+ tested
+ advantages and drawbacks
+ comparision criteria
  - speed
  - complexity
  - correctness
  - percision
+ compare with ground truth using standard statical methods
**** Introduction
A precise position estimation always serves as the heart in any
navigation system, such as localization, dynamic map building, path
planning.

odometry is not sufficient. -> using exteroceptive sensors
+ sonar
+ infrared
+ laser
+ vision

laser usage
- localization
- dynamic mapping
- collision avoidance

laser advantages
- dense
- accurate
- high sampling rate
- high angular resolution
- good range distance and resolution

The primary issue is *how to accurately match sensed data against
information in a prior map of information that has been collected*

two ways
- *point-based matching*
- *feature-based matching*
  - compact
  - less storage
  - efficient
  - still provide rich and  accurate information

Line extraction
Among many geometric primitives,  line segment is the simplest one.

diffirent application require diffirent
quality is primary important for line-based SLAM because bad feature
extraction can led the system to divergence.
**** Problem definition
*** ARM 进阶                                                          :arm:
**** arm family
***** arm family

#+downloaded: /tmp/screenshot.png @ 2015-06-09 17:16:09
 [[~/tiger/figures/142/screenshot_2015-06-09_17:16:09.png]]
1. 芯片： 6410, 210，2440
2. arm核： a8, arm11, am9
3. 指令架构：armv7, armv6

2440(arm9(v4))
210(arm11(v6))
210(cortexa8(v7))
***** arm核

#+downloaded: /tmp/screenshot.png @ 2015-06-09 17:22:40
 [[~/tiger/figures/142/screenshot_2015-06-09_17:22:40.png]]

arm经典
cortex-m 无操作系统
cortex-r 实时
cortex-a 多媒体

***** 芯片对比
|----------+-------------+---------------------+---------------------|
|          | 2410        | 6440                | 210                 |
|----------+-------------+---------------------+---------------------|
| 处理速度 | 400-500     | 533-667             | 800-1g              |
| 缓存     | 16k         | 16k                 | 32k                 |
| 内在接口 | sdram       | sdram/ddr           | ddr1/ddr2           |
| 支持os   | wince/linux | wince/linux/android | wince/linux/android |
| 其它     | 商业停产    |                     |                     |
|----------+-------------+---------------------+---------------------|

**** 存储器格式(memory format)
***** big-endian format
in big-endian format(), the most significant byte(msb) of a world is
stored at the lowest numbered byte and the least significant byte(lsb)
at the highest numbered byte.

+ big-endian: 大端优先
+ msb：最高有效字节
+ lsb：最低有效字节

#+downloaded: /tmp/screenshot.png @ 2015-07-02 11:42:30
 [[~/tiger/figures/embeddedlinux/screenshot_2015-07-02_11:42:30.png]]
***** little-endial format
in little-endian format, the lowest numbered byte in a word is
considered the word's least significant byte, and the highest numbered
byte the most significant.

#+downloaded: /tmp/screenshot.png @ 2015-07-02 11:58:29
 [[~/tiger/figures/embeddedlinux/screenshot_2015-07-02_11:58:29.png]]
**** data type
[[file:/media/ben/reserch/document/%e8%8a%af%e7%89%87%e6%89%8b%e5%86%8c/armarchitecturereferencemanual.pdf::%25pdf-1.3%0d][armarchitecturedatatypes]]


+ byte: 8 bits
+ halfword: 16 bits
+ word: 32 bits

**** arm工作模式
[[file:/media/ben/reserch/document/%e8%8a%af%e7%89%87%e6%89%8b%e5%86%8c/armarchitecturereferencemanual.pdf::%25pdf-1.3%0d][armarchitectureprocessormodel]]

processor mode: 权限和资源使用

#+downloaded: /tmp/screenshot.png @ 2015-06-09 18:57:39
 [[~/tiger/figures/142/screenshot_2015-06-09_18:57:39.png]]

1. usr: user
2. fiq: 快速中断
3. iro: 普通中断
4. svc: supervisor
5. abt: abort
6. und: undefined
7. sys: system(v4+)


mode changes can be made using the control of sotfware, or may be
brought about by external interrupts or exception processing.(切换)

most application programs will
内核： 运行在svc模式
用户程序： 运行在usr模式

**** arm寄存器

#+downloaded: /tmp/screenshot.png @ 2015-06-09 19:04:21
 [[~/tiger/figures/142/screenshot_2015-06-09_19:04:21.png]]

+ *37 registers*
  + 31 general registers(r0-r15)
    - unbanked registers(不分组，r1-r7)
    - banked registers(分组, r8-r14)
    - r15, pc指针
  + 6 status registers
#+downloaded: /tmp/screenshot.png @ 2015-06-09 19:08:20
 [[~/tiger/figures/142/screenshot_2015-06-09_19:08:20.png]]
***** general registers
+ r13 is normally used as a stack pointer(*sp*)
+ r14 link register(*lr*)
  - 保存函数返回地址
  - 中断返回地址
+ r15 program counter(*pc*)

***** status register
cpsr & spsr


#+downloaded: /tmp/screenshot.png @ 2015-06-09 19:16:54

#+downloaded: /tmp/screenshot.png @ 2015-06-09 19:17:14
 [[~/tiger/figures/142/screenshot_2015-06-09_19:17:14.png]]

+ n: 减法操作结果
+ z: 减法相等时为1
+ i: disable irq
+ e: disable fiq
+ m[4:0]: 处理器模式

**** arm寻址方式
+ 立即数寻址： #号开头

  #+downloaded: /tmp/screenshot.png @ 2015-06-09 19:23:12
   [[~/tiger/figures/142/screenshot_2015-06-09_19:23:12.png]]
+ 寄存器寻址：

  #+downloaded: /tmp/screenshot.png @ 2015-06-09 19:24:50
  [[~/tiger/figures/142/screenshot_2015-06-09_19:24:50.png]]
+ 寄存器间接寻址：方括号

  #+downloaded: /tmp/screenshot.png @ 2015-06-09 19:25:58
  [[~/tiger/figures/142/screenshot_2015-06-09_19:25:58.png]]
+ 基址变址寻址：
  [[
  ~/tiger/figures/142/screenshot_2015-06-09_19:27:30.png]]
+ 相对寻址

  #+downloaded: /tmp/screenshot.png @ 2015-06-09 19:29:26
  [[~/tiger/figures/142/screenshot_2015-06-09_19:29:26.png]]

**** arm汇编
***** arm汇编概述
****** 为什么学习汇编
+ bootloader和linux kernel初始化时需
  要使用汇编编写，一是效率高，二是还
  没有c的环境

+ 对效率有特殊要求的地方需要使用汇编

****** arm汇编分类
+ arm标准汇编：适用于arm公司的汇编器，适合在windows平台下使用，如ads
+ gnu汇编：适用于gnu交叉编译工具链中
  的汇编器，适合于linux开发平台

两种汇编相差不多，可以触类旁通

****** 汇编程序框架
#+begin_example
.section .data  ; 初始化的数据段
.section .bbs    ; 未初始化的数据段
.section .text
.global _start   ; 标记_start为全局
_start:               ; 程序入口
         <汇编>
#+end_example

+ 常见框架
  #+begin_example
  .text
  .global _start
  _start:
  #+end_example
+ 示例
  - 汇编代码
    #+begin_example
      .text
      .global _start
      _start:
          mov r1, #1
          mov r2, #2
          mov r3, #3
    #+end_example
  - makefile
    #+begin_example
      all:start.o
              arm-linux-ld -ttext 0x30000000 -o  start.elf $^
              # 写入内在之中，因此生成elf即可，写入flash中则需要生成进制文件
              # 没有使用链接器脚本，直接在makefile中指定内在地址，2440为30000000
      %.o : %.s
              arm-linux-gcc -g -o  $@ $^ -c
      clean:
              rm *.o *.elf
    #+end_example
  - todo 编写并调试简单的汇编程序

***** 指令分类学习

[[/home/ben/tiger/figures/scrot/8571bvf.png]]

****** 算术和逻辑指令(参考资料：arm指令集.chm)
1. *mov*
   - 大小写：标准arm大写，gnu汇编小写
   - 汇编注释：@开头
   - 作用：mov 从另一个寄存器、被移位的寄存器、或一个立即值装载一个值
     到目的寄存器。
   - 格式：*mov{条件}{s}  <dest>, <op 1>*

2. *mvn*
   - mvn 从另一个寄存器、被移位的寄存器、或一个立即值装载一个值到目的
     寄存器。不同之处是在传送之前位被反转了，所以把一个被取反的值传送
     到一个寄存器中。why 取反？

   - mvn{条件}{s}  <dest>, <op 1>

   - dest = !op_1

3. *sub*
   - 做两个操作数的减法，把结果放置到目的寄存器中。

   - sbc{条件}{s}  <dest>, <op 1>, <op 2>

   - dest = op_1 - op_2 - !carry

   - 差值和被减数不能是立即数

4. *add*
   - 将把两个操作数加起来，把结果放置到目的寄存器中。操作数 1 是一个寄
     存器，操作数 2 可以是一个寄存器，被移位的寄存器，或一个立即值

   - add{条件}{s}  <dest>, <op 1>, <op 2>

   - dest = op_1 + op_2

5. *and*
   - 将在两个操作数上进行逻辑与，把结果放置到目的寄存器中；对屏蔽你要
     在上面工作的位很有用。 操作数 1 是一个寄存器，操作数 2 可以是一个
     寄存器，被移位的寄存器，或一个立即值

   - and{条件}{s}  <dest>, <op 1>, <op 2>

   - dest = op_1 and op_2

6. *bic*
   - bic 是在一个字中清除位的一种方法，与 or 位设置是相反的操作。操作
     数 2 是一个 32 位位掩码(mask)。如果如果在掩码中设置了某一位，则清
     除这一位。未设置的掩码位指示此位保持不变。

   - bic{条件}{s}  <dest>, <op 1>, <op 2>

   - dest = op_1 and (!op_2)

   - 标准汇编中数字前缀%表示二进制，gun中使用0b前缀

****** 比较指令
1. *cmp*
   - cmp 允许把一个寄存器的内容如另一个寄存器的内容或立即值进行比较，
     更改状态标志来允许进行条件执行。它进行一次减法，但不存储结果，而
     是正确的更改标志。相减
   - cmp{条件}{p}  <op 1>, <op 2>
   - status = op_1 - op_2
2. *tst*
   - tst 类似于 cmp，不产生放置到目的寄存器中的结果。而是在给出的两个
     操作数上进行操作并把结果反映到状态标志上。按位与
   - tst{条件}{p}  <op 1>, <op 2>
****** 跳转指令
1. *b*
   - b{条件}
     #+begin_example
       示例
       mov r1, #6
       mov r2, # 5
       cmp r1, r2
       bfg branch1
       add r3, r1, r2
       b end
       branch:
           sub r3, r1, r2
       end:
       nop
       if(x>y)
           z = x-y
       else
           z = x+y
     #+end_example
2. *bl*
   - 带链接返回的跳转，即把当前地址复制到lr中，用于函数调用
     示例
     #+begin_example
       mov r1, #2
       mov r2, #3
       bl func1

       func1:
       mov r1, #2
       mov r2 , #3
       mov pc, lr  @ 函数返回
     #+end_example

****** 移位指令
1. lsl
   - logical or arithmetic shift left 逻辑算术左移
rx, lsl #n or
rx, asl #n or
rx, lsl rn or
rx, asl rn
mv r1, r1 , lss #2
ror
(rotate right) 循环右移
rx, ror #n or
rx, ror rn

****** 程序状态字访问指令
*不允许直接修改程序状态寄存器，使用专用指令，先移入通用寄存器，在通用
寄存器中修改，再写入状态寄存器*

1. *msr* （r: register, s: state）
2. *mrs*

eclipse可以监控内存
示例
#+begin_example
mrs r0, cpsr
orr r0, #0b100
msr cpsr, r0
#+end_example

****** 存储器访问指令
1. *ldr*: 内存->寄存器
2. *str*: 寄存器->内存

****** 条件执行
1. eq : 等于
   如果一次比较之后设置了 z 标志。

2. ne : 不等于
   如果一次比较之后清除了 z 标志。

3. vs : 溢出设置
   如果在一次算术操作之后设置了 v 标志，计算的结果不适合放入一个 32bit 目标寄存器中。

4. vc : 溢出清除
   如果清除了 v 标志，与 vs 相反。

5. hi : 高于(无符号)
   如果一次比较之后设置了 c 标志并清除了 z 标志。

6. ls : 低于或同于(无符号)
   如果一次比较操作之后清除了 c 标志或设置了 z 标志。

7. pl : 正号
   如果一次算术操作之后清除了 n。出于定义‘正号’的目的，零是正数的原因是它不是负数...

8. mi : 负号
   如果一次算术操作之后设置了 n 标志。

9. cs : 进位设置
   如果一次算术操作或移位操作之后设置了 c 标志，操作的结果不能表示为
   32bit。你可以把 c 标志当作结果的第 33 位。

10. cc : 进位清除
    与 cs 相反。

11. ge : 大于或等于(有符号)
    如果一次比较之后设置了 n 标志并设置了 v 标志或者清除了 n 标志并清除了 v 标志。

12. gt : 大于(有符号)
    如果一次比较之后设置了 n 标志并设置了 v 标志或者清除了 n 标志并清
    除了 v 标志并且清除了 z 标志。

13. le : 小于或等于(有符号)
    如果一次比较之后设置了 n 标志并清除了 v 标志或者清除了 n 标志并设置了 v 标志并且设置了 z 标志。

14. lt : 小于(有符号)
    如果一次比较之后设置了 n 标志并清除了 v 标志。或者清除了 n 标志并设置了 v 标志。

15. al : 总是
    缺省条件，所以不用明显声明。

16. nv : 从不
    不是特别有用，它表示应当永远不执行这个指令。是穷人的 nop。包含 nv 是为了完整性(与 al 相对)，你不应该在你的代码中使用它。
***** 伪指令
伪指令本身并没有对应的机器码，它只是在编译的时候起作用(宏定义)，或者转
化为其它的实际指令来运行(loop).
****** arm机器码
汇编程序->汇编器->机器码

elf -> objdump -> 机器码

+ 机器码为32位数
+ 被分成多个段

[[/home/ben/tiger/figures/scrot/8571ofl.png]]

1. cond段， 31-28
   - al: 1110  # 无条件
   - eq: 0000
2. 27-26 保留位，为0
3. i位，立即数标志位， 25
   判断是否为立即数
4. opcode段，操作标志， 24-21
5. s段，20, 是否影响cpsr
6. rn 19-16
7. rd 目的寄存器 15-12
8. shifter_operand, 12位
   - 立即数有范围要求

****** 定义类伪指令
1. *global* 标明全局符号
   gnu arm前面会加一个句点 .global

2. *ascii*
   定义字符串

3. *byte*
   定义字节

4. *word*
   定义字

5. *data*
   存放在数据段
   #+begin_example
     .data
     hello:  # 需要标号
     .ascii "hello world"

     bh:
     .byte 0x1

     add:
     .word 0xff
   #+end_example

   *arm-linum-readelf* 读取elf文件信息

6. *equ*
   类似c中的宏定义
   #+begin_example
     .equ da, 0x89

     mv r0, #da
   #+end_example

7. *align* 数据地址对齐
   #+begin_example
   .align 4
   bh:
   byte 0x1
   #+end_example

****** 操作类伪指令
1. nop
   空操作，进行延时
   mv r0,  r0
2. ldr, 与存储器访问指令同名
   #+begin_example
     mov r0, #0x1ff  ; error: invalid constant
                     ; mov指令使用立即数不能超过8位

     ldr r0, =0x1ff  ; 需要使用=标明立即数, 不能用#
   #+end_example
   实现过程：将立即数先保存到内在中，然后使用ldr指令读入到寄存器中

***** 协处理器访问指令

****** 什么是协处理器

[[/home/ben/tiger/figures/scrot/8571bpr.png]]

cp: coprecessor
协处理器， arm架构的重要组成部分，如数学协处理器控制数据处理

arm最多支持16个协处理器

cp15: provide additional registers that are used to configure and
control the caches,  mmu,  protectionn system ...
cp15 defines 16 registers

通过寄存器访问

****** 访问协处理器
1. *mcr*
   - c: coprocessor
   - r: register
2. *mrc*

[[/home/ben/tiger/figures/scrot/8571ozx.png]]

*** Deutsch语音                                                   :deutsch:
**** hello deutsch
guten tag!

**** 德语概况
+ 德国国土面积相当于东北三省，人口8000万
+ 德国人的严谨来自德语的严谨
+ 德语入门难，动词的变位、名词的阴阳中性等
+ *德语是一门严谨、有规律的语言*
  - 发音的规律性，不需要标注音标，看字母组合即可发音
  - 德语语法复杂而严谨，不会出现歧义
**** 德语字母

[[/home/ben/tiger/figures/scrot/8571a9a.png]]
***** 元音字母发音
|------+------+---------+--------------------------------------|
| 大写 | 小写 | 音标    | 发音                                 |
|------+------+---------+--------------------------------------|
| a    | a    | a       | 大圆口形，舌头平直，胸腔送气，长平音 |
| e    | e    | e       | 扁口形，舌头前低后高                 |
| i    | i    | i       | 闭齿间                               |
| o    | o    | o       | 与英语相似，小圆口形，腮部用力       |
| u    | u    | u       | 口噘起，小圆口形                     |
|------+------+---------+--------------------------------------|
| y    | y    | ypsilon | 半元音，处于辅音后面发元音yu         |
|      |      |         | 处于元音发辅音ye                            |
|------+------+---------+---------------------------------------------|
**** 变音： 由两个元音字母组合而成的元音，有些时候写作两个元音形式

*** LaTeX listing XML                                               :latex:
listing宏包支持xml高亮显示,  but the definition are preliminary（初步
的， 预备的），所以需要进行进一步的配置
#+begin_example
  \definecolor{gray}{rgb}{0.4,0.4,0.4}
  \definecolor{darkblue}{rgb}{0.0,0.0,0.6}
  \definecolor{cyan}{rgb}{0.0,0.6,0.6}

  \lstdefinelanguage{xml}{
      morestring=[b]",
      morestring=[s]{>}{<},
      morecomment=[s]{<?}{?>},
      stringstyle=\color{black},
      identifierstyle=\color{darkblue},
      keywordstyle=\color{cyan},
      morekeywords={xmlns,version,type}% list your attributes here
      *此处不能有空行*
  }
  \lstnewenvironment{xml}[1][]{
    \lstset{
      language=xml,
      basicstyle=\ttfamily,
      columns=fullflexible,
      showstringspaces=false,
      commentstyle=\color{gray}\upshape *逗号少了*
      framexleftmargin=1mm,
      framextopmargin=1mm,
      frame=shadowbox,
      rulesepcolor=\color{blue},#1, *逗号多了*
    }
  }{}
#+end_example

#+begin_src latex
    \begin{xml}
      <person age="22" sex="female">ann</person>
    \end{xml}

     % \begin{minted}{xml}
     %   <xml>
     %   <person age="22" sex="female">ann</person>
     %   <\xml>
     % \end{minted}
#+end_src




minted宏包也可以
*** Google scholar
主页
settings -> Bibliography manager -> show links to import citations
into BibTeX/EndNote/RefMan/RefWorks
*** LaTeX Math 单边大括号
#+BEGIN_EXAMPLE
  \left\{
      \begin{array}{l}
        r=\alpha(R+\omega) \\
        l=\alpha\cdot R
      \end{array}
    \right.
#+END_EXAMPLE
*注意right后面的句点，不可以缺少。*
*** org < 扩展                                                      :emacs:
#+begin_example
<l -> begin_src latex
<p -> \begin{python}
<c -> \begin{cpp}
<[ -> \left[\right] [不行，改成k
<{ -> \left\{\right\} 同样，
<a -> \begin{algorithm}[ht]
#+end_example

#+begin_src emacs-lisp
  (setq org-structure-template-alist
        '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
         ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
         ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
         ("v" "#+begin_verse\n?\n#+end_verse" "<verse>\n?\n</verse>")
         ("v" "#+begin_verbatim\n?\n#+end_verbatim" "<verbatim>\n?\n</verbatim>")
         ;; ("c" "#+begin_center\n?\n#+end_center" "<center>\n?\n</center>")
         ("l" "#+begin_latex\n?\n#+end_latex" "<literal style=\"latex\">\n?\n</literal>")
         ("l" "#+latex: " "<literal style=\"latex\">?</literal>")
         ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
         ("h" "#+html: " "<literal style=\"html\">?</literal>")
         ;; ("a" "#+begin_ascii\n?\n#+end_ascii" "")
         ("a" "#+ascii: " "")
         ("i" "#+index: ?" "#+index: ?")
         ("i" "#+include: %file ?" "<include file=%file markup=\"?\">")
         ("p" "#+begin_latex\n\\begin{python}\n?\n\\end{python}\n#+end_latex")
         ("c" "#+begin_latex\n\\begin{cpp}\n?\n\\end{cpp}\n#+end_latex")
         ("k" "\\left[?\\right]")
         ("k" "\\left\{?\\right\}")
         ("a" "#+begin_latex\n\\begin{algorithm}\n?\n\\end{algorithm}\n#+end_latex")
         )
        )
#+end_src




*** LaTeX algorithm2e if else if else                               :latex:
\textbackslash{}uif
\textbackslash{}uelseif
\textbackslash{}else

[[/home/ben/tiger/figures/scrot/15486guj.png]]
[[/home/ben/tiger/figures/scrot/15486tep.png]]

*** 德文输入                                                      :deutsch:
蠢办法： 使用latex宏包，不知道哪个可以，而且不直观
直接的办法：安装德文输入法，fcitx有，windows不不知
输入
+ ö ö 键盘上;键
+ ä ä 键盘上'键
+ ü ü 键盘上[键
+ ß ẞ 键盘上-键，大写需要开启大写锁

问题：fcitx切换输入法不方便，所以可以折衷使用yasnippet
- ae ä
- ae ä
- oe ö
- oe ö
- ue ü
- ue ü
- ypsilon ß
- ypsilon ẞ
** 2015/11/04
*** Hector Gazebo                                                   :major:
**** hector_gazebo_plugins

***** overview of gazebo plugins

****** what?
1. a c++ standard class
2. a shared library

****** what for?
access to all the functionality of gazebo

****** advantages
+ full control cover almost every aspect
+ self-contained
+ dynamically loaded

****** types
1. world
2. model
3. sensor
4. system
5. visual

****** plugin类的基本结构
e.g. hello_world.cc
#+begin_latex
  \begin{cpp}
  #include <gazebo/gazebo.hh>

  namespace gazebo
  {
    class worldplugintutorial : public worldplugin
    {
      public: worldplugintutorial() : worldplugin()
              {
                printf("hello world!\n");
              }

      public: void load(physics::worldptr _world, sdf::elementptr _sdf)
              {
              }
    };
    gz_register_world_plugin(worldplugintutorial)
  }
  \end{cpp}
#+end_latex

1. 头文件:
   #+begin_latex
   \begin{cpp}
   #include <gazebo/gazebo.hh>
   \end{cpp}
   #+end_latex

   1) *<gazebo/gazebo.hh>*  include a core set of basic gazebo funtions
   2) <gazebo/physics/physics.hh>
   3) <gazebo/rendering/rendering.hh>

2. 命名空间
   #+begin_latex
   \begin{cpp}
   namespace gazebo{

   }
   \end{cpp}
   #+end_latex

   *all plugins must be in the /gazebo/ namespace*

3. 继承
   #+begin_latex
   \begin{cpp}
   class worldplugintutorial : public worldplugin
   \end{cpp}
   #+end_latex

   *each plugin must /inherit/ from a plugin type*
   1) worldplugin
   2) modelplugin
   3) sensorplugin

4. 成员函数
   #+begin_latex
   \begin{cpp}
   public: void load(physics::worldptr _world, sdf::elementptr _sdf){}
   \end{cpp}
   #+end_latex
   */load/ is the only mandatory function*,  which receive an sdf
   element that contains teh elements and attributes specified in
   loaded sdf file.

5. 宏
   #+begin_latex
   \begin{cpp}
   gz_register_world_plugin(worldplugintutorial)
   \end{cpp}
   #+end_latex

   the plugin must be *registered with the simulator* using the
   *type-specific macro*. the only parameter of the macro is the /name/
   of the plugin class.

   1) gz_register_world_plugin
   2) gz_register_model_plugin
   3) gz_register_sensor_plugin
   4) gz_register_system_plugin
   5) gz_register_visual_plugin

****** cmakelists.txt
#+begin_example
cmake_minimum_required(version 2.8 fatal_error)

find_package(gazebo required)
include_directories(${gazebo_include_dirs})
link_directories(${gazebo_library_dirs})
list(append cmake_cxx_flags "${gazebo_cxx_flags}")  # required for gazebo6

add_library(hello_world shared hello_world.cc)
target_link_libraries(hello_world ${gazebo_libraries})
#+end_example

编译结果： 生成 ./build/libhello_world.so 库文件

****** using  a plugin

******* add path to environment *gazebo_plugin_path*
#+begin_example
$ export gazebo_plugin_path=${gazebo_plugin_path}:/path/to/lib
#+end_example

******* attatch the plugin to a world or model in an sdf file
#+begin_latex
\begin{xml}
<?xml version="1.0"?>
<sdf version="1.4">
  <world name="default">
    <plugin name="hello_world" filename="libhello_world.so"/>
  </world>
</sdf>
\end{xml}
#+end_latex

****** model plugin
#+begin_latex
  \begin{cpp}
  namespace gazebo
  {
    class modelpush : public modelplugin
    {
      public: void load(physics::modelptr _parent, sdf::elementptr /*_sdf*/)
      {
        // store the pointer to the model
        this->model = _parent;

        // listen to the update event. this event is broadcast every
        // simulation iteration.
        this->updateconnection = event::events::connectworldupdatebegin(
            boost::bind(&modelpush::onupdate, this, _1));
      }

      // called by the world update start event
      public: void onupdate(const common::updateinfo & /*_info*/)
      {
        // apply a small linear velocity to the model.
        this->model->setlinearvel(math::vector3(.03, 0, 0));
      }

      // pointer to the model
      private: physics::modelptr model;

      // pointer to the update event connection
      private: event::connectionptr updateconnection;
    };

    // register this plugin with the simulator
    gz_register_model_plugin(modelpush)
  }
  \end{cpp}
#+end_latex
***** 6wd differential drive plugin
****** 分析
1. 需求与功能分析
   + 以目标为导向
   + 要精简，一句话定义，之后再去分析与综合

2. 功能：
   *a controller for 6-wheeled light-weight robot using differential
   drive*

3. 分解
   1) controller?
      + who?
        - ros
        - gazebo
      + how
        - publish: geometry_msgs/twist
        - subcribe: nav_msgs/odometry

   2) 6-wheeled -> parameters?

   3) differential drive -> model?

****** 包含头文件
******* h文件
#+begin_latex
\begin{cpp}
#include <map>

#include <gazebo/common/plugin.hh>
#include <gazebo/common/time.hh>

// ros
#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/twist.h>
#include <nav_msgs/odometry.h>

// custom callback queue
#include <ros/callback_queue.h>
#include <ros/advertise_options.h>

// boost
#include <boost/thread.hpp>
#include <boost/bind.hpp>

\end{cpp}
#+end_latex

******* cpp文件
#+begin_latex
\begin{cpp}
#include <algorithm>
#include <assert.h>

#include <hector_gazebo_plugins/diffdrive_plugin_6w.h>
#include <gazebo/common/events.hh>
#include <gazebo/physics/physics.hh>

#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/twist.h>
#include <nav_msgs/odometry.h>
#include <boost/bind.hpp>
\end{cpp}
#+end_latex

******* 分析
头文件中只包含类定义需要的其它头文件，在实现中需要的其它头文件只需在
cpp文件中包含即可。
****** 构造与析构
#+begin_latex
\begin{cpp}
  diffdriveplugin6w();
  virtual ~diffdriveplugin6w();
\end{cpp}
#+end_latex



***** imu sensor plugin
***** earch magnetic field plugin
***** gps sensor plugin
***** sonar ranger plugin
*** C++                                                               :cpp:
**** stl map
***** class map
***** constructor
#+begin_latex
\begin{cpp}
bool fncomp(char lhs, char rhs){return lhs<rhs;}

struct classcomp{
  bool operator()(const char& lhs, const char& rhs) const{
    return lhs<rhs;
  }
};

void construct(){
  std::map<char, int> first;

  first['a'] = 10;
  first['b'] = 30;
  first['c'] = 50;
  first['d'] = 70;

  std::map<char, int> second(first.begin(), first.end());

  std::map<char, int> third(second);

  std::map<char, int, classcomp> fourth; // class as compare

  bool(*fn_pt)(char, char)=fncomp;
  std::map<char, int, bool(*)(char, char)>fifth(fn_pt); // function pointer as compare
}
\end{cpp}
#+end_latex

***** std::map::at
+ mapped_type& at (const key_type& k);
+ const mapped_type& at (const key_type& k) const;

+ access element
  - *returns a reference to the mapped value* of the element
    identified with key k.
  - if k does not match the key of any element in the container, the
    function throws an *out_of_range exception*.

#+begin_latex
\begin{cpp}
void at(){
  std::map<std::string, int> mymap = {
    {"alpha", 0},
    {"beta", 0},
    {"gamma", 0}};


  mymap.at("alpha") = 30;
  mymap.at("beta") = 20;
  mymap.at("gamma") = 10;

  for(auto& x:mymap){
    std::cout < x.first << ":" << x.second << "\n";
  }
}
\end{cpp}
#+end_latex

error: in c++98 ‘mymap’ must be initialized by constructor, not by
‘{...}’   };

error: iso c++ forbids declaration of ‘x’ with no type [-fpermissive]
   for(auto& x:mymap){

***** std::map::begin/end
return iterator to begining
#+begin_latex
\begin{cpp}
void begin(){
  std::map<char, int> mymap;
  mymap['a'] = 100;
  mymap['b'] = 200;
  mymap['c'] = 300;

  // show content
  for(std::map<char, int>::iterator it=mymap.begin(); it!=mymap.end(); ++it){
    std::cout << it->first << "=>" << it->second << "\n";
  }
}
\end{cpp}
#+end_latex

***** std::map::cbegin/cend
return const_iterator to beginning
note: *c++11*
#+begin_latex
\begin{cpp}
void cbegin(){
  std::map<char, int> mymap;
  mymap['a'] = 100;
  mymap['b'] = 200;
  mymap['c'] = 300;

  // show content
  for(auto it=mymap.cbegin(); it!=mymap.cend(); ++it){
    std::cout << "[" << (*it).first << ":" << (*it).second << "\n";
  }
}
\end{cpp}
#+end_latex

***** std::map::clear
clear content

***** std::map::empty
test whether container is empty

#+begin_latex
\begin{cpp}
void empty(){
   std::map<char, int> mymap;
  mymap['a'] = 100;
  mymap['b'] = 200;
  mymap['c'] = 300;

  while(!mymap.empty()){
    std::cout << mymap.begin()->first << "=>" << mymap.begin()->second << '\n';
    mymap.erase(mymap.begin());
  }
}

\end{cpp}
#+end_latex

***** std::map::erase
1) void erase (iterator position);
2) size_type erase (const key_type& k);
3) void erase (iterator first, iterator last);

erase elements

#+begin_latex
\begin{cpp}
void erase(){
  std::map<char, int> mymap;
  mymap['a'] = 100;
  mymap['b'] = 200;
  mymap['c'] = 300;
  mymap['d'] = 400;
  mymap['e'] = 500;
  mymap['f'] = 600;

  std::map<char,int>::iterator it;

  it = mymap.find('b');
  mymap.erase(it);

  mymap.erase('c');

  it=mymap.find('e');
  mymap.erase(it, mymap.end());

  for(it=mymap.begin(); it!=mymap.end(); ++it){
    std::cout << it->first << "=>" << it->second << "\n";
  }

}
\end{cpp}
#+end_latex

***** std::map::find
1) iterator find (const key_type& k);
2) const_iterator find (const key_type& k) const;
3) find iterator to element

***** std::map::insert

***** std::map::size
size_type size() const;


***** std::map::count
count elements with a specific key
return 1(found) or 0 otherwise

#+begin_latex
\begin{cpp}
void count(){
  std::map<char, int> mymap;
  mymap['a'] = 100;
  mymap['b'] = 200;
  mymap['c'] = 300;

  char c;
  for(c='a'; c<'h'; c++){
    std::cout << c;
    if(mymap.count(c)>0)
      std::cout << " is an element of mymap.\n";
    else
      std::cout << " is not an element of mymap.\n";
  }
}
\end{cpp}
#+end_latex

***** std::map::crbegin/crend
return const_reverse_iterator to reverse beginning
c++11

*****

**** tobecontined stl algorithm                                      :cpp:
- state "tobecontined" from "todo"       [2015-11-04 三 16:09]

the header <algorithm> defines a collection of functions especially
designed to be used on *ranges* of elements.


a range is any sequence of objects that can be accessed through
*iterators* or pointers, such as an array or an instance of some of the
stl containers. notice though, that algorithms operate through
iterators *directly on the values*, not affecting in any way the
structure of any possible container (it never affects the size or
storage allocation of the container).

***** all_of
+ template <class inputiterator, class unarypredicate>
  bool all_of(inputiterator first, inputiterator last, unarypredicate pred);

+ test condition on all elements in range

#+begin_latex
\begin{cpp}
void all_of(){
  std::array<int, 8> foo = {3, 5, 7, 11, 13, 15, 17, 19};

  if(std::all_of(foo.begin(), foo.end(), [](int i){return i%2;}))
    std::cout << "all the elements are odd numbers.\n";
}
\end{cpp}
#+end_latex

#include <array>

error: #error this file requires compiler and library support for the
iso c++ 2011 standard. this support is currently experimental, and
must be enabled with the *-std=c++11 or -std=gnu++11* compiler
options.

***** any_of
+ template <class inputiterator, class unarypredicate>
  bool any_of (inputiterator first, inputiterator last, unarypredicate pred);

+ test if any element in range fulfills condition

#+begin_latex
\begin{cpp}
void any_of(){
  std::array<int, 7> foo = {0, 1, -1, 3, -3, 5, -5};

  if(std::any_of(foo.begin(), foo.end(), [](int i){return i<0;}))
    std::cout << "there are negative elements in the range.\n";
}
\end{cpp}
#+end_latex

***** none_of
+ template <class inputiterator, class unarypredicate>
  bool none_of (inputiterator first, inputiterator last, unarypredicate pred);

+ test if no elements fulfill condition

***** for_each
+ template <class inputiterator, class function>
   function for_each (inputiterator first, inputiterator last, function fn);

+ apply function to range

#+begin_latex
\begin{cpp}
void myfunction(int i){
  std::cout << ' ' << i;
}

struct myclass{
  void operator()(int i){std::cout << ' ' << i;}
}myobject;

void for_each(){
  std::vector<int> myvector;
  myvector.push_back(10);
  myvector.push_back(20);
  myvector.push_back(30);

  std::cout << "myvector contains: ";
  for_each(myvector.begin(), myvector.end(), myfunction);
  std::cout << '\n';

  std::cout << "myvector contains: ";
  for_each(myvector.begin(), myvector.end(), myobject);
  std::cout << '\n';
}
\end{cpp}
#+end_latex

***** find
+ template <class inputiterator, class t>
   inputiterator find (inputiterator first, inputiterator last, const t& val);

+ find value in range

+ returns an *iterator to the first element* in the range [first,last)
  that compares equal to val. if no such element is found, the
  function returns *last*.

#+begin_latex
\begin{cpp}
void find(){
  // using std::find with array and pointer
  int myints[] = {10, 20, 30, 40};
  int* p;

  p = std::find(myints, myints+4, 30);
  if(p != myints+4)
    std::cout << "element found in myints:" << *p << std::endl;
  else
    std::cout << "element not found in myints.\n";

  // using std::find with vector and iterator:
  std::vector<int>myvector(myints, myints+4);
  std::vector<int>::iterator it;

  it = find(myvector.begin(), myvector.end(), 30);
  if( it != myvector.end())
    std::cout << "element found in myvector" << std::endl;
  else
    std::cout << "element not found in myvector" << std::endl;

}
\end{cpp}
#+end_latex



**** g++ c98? c11
*-std=c++11 or -std=gnu++11*
*** Robotics: Introduction to Automous Mobile Robots             :robitics:

**** introduction
mobility: locomotion
autonomy


***** robots

****** kuka: auto assembly plant-spot welding robot

[[/home/ben/tiger/figures/scrot/3297e0x.png]]

robot arms / manipulators

****** sojourner: mars exploration,  nasa


[[/home/ben/tiger/figures/scrot/3297q-a.png]]

****** plustech: walking robot to move wood

[[/home/ben/tiger/figures/scrot/3297dih.png]]

****** airduct inspection robot: with a pan-tilt camera

[[/home/ben/tiger/figures/scrot/3297qsn.png]]

****** pioneer

[[/home/ben/tiger/figures/scrot/32973ct.png]]

****** altex auv(autonomous underwater vehicle)

[[/home/ben/tiger/figures/scrot/3297enz.png]]

****** expo: tour-guide robot

[[/home/ben/tiger/figures/scrot/3297rxf.png]]

****** helpmate: with camera looking to the ceiling

[[/home/ben/tiger/figures/scrot/3297e7l.png]]

****** rb 700: industrial cleaning robot,  navigation based on sonar and gyro

[[/home/ben/tiger/figures/scrot/3297rfs.png]]

****** rc 3000: robotcleaner consumer robot,  optical sensor to measure air pollution

[[/home/ben/tiger/figures/scrot/32974py.png]]

****** pioneer: modular mobile robot, gripper/on-board camera

[[/home/ben/tiger/figures/scrot/3297qzb.png]]

****** irobot: a large variety of sensors to high-performance navigation

[[/home/ben/tiger/figures/scrot/32973jh.png]]

****** khepera: small 60mm

[[/home/ben/tiger/figures/scrot/3297eun.png]]

****** alice,  smallest fully automous robots,  2x2x2cm, infrared distance sensor
tactile whisker
***** high-level question: cognition, localization,  navigation
require standard research *robot platform*: */ros/*

***** interdisciplinary
mobile robot's design involves the integration of many different
bodies of knowledge

1. locomotion
   + mechanism
   + kinematics
   + dynamics
   + control theory

2. robust & perceptual
   + signal analysis
   + computer vision
   + sensor technologies

3. localization & navigation
   + computer algorithms
   + information theory
   + artificia intelligence
   + probability theory

[[/home/ben/tiger/figures/scrot/3297eca.png]]

***** overview of the book
+ c2-3 locomotion：
  - mechanism enable locomotion(c2)
  - kinecmatics(c3)
  - shortcomings of conventional robotics: perception

+ c4 perception:
  - the most promising sensor for the future of mobile robotics is
    *vision*
    - ccd
    - cmos
  - perception is mre than sensing: *interpertation*
    - feature extraction

+ c5-6 localization & cognition & navigation
  - localization(c5)
    - belief representation
    - map representation
    - markov localization
    - kalman filter
  - planning and navigation(c6)
    - obstacle avoidance and path planning

*robotics is peruliar in that solution to high-level challenges are most meaningful only in the context of a solid understanding of the
 low-level details of the system.*

**** locomotion
***** forms: walk, jump, run, slide, skate, swim, fly, roll -> 仿生

[[/home/ben/tiger/figures/scrot/3297rmg.png]]

adventures:
1. mechanical complexity
2. robustness
3. energy storage

-> wheeled or a small number of articulated legs

***** key issues for locomotion
1. stability
   - number and geomety of contact point
   - center of gravity
   - static/dynamic stability
   - incination of terrain

2. characteristics of contact
   - contact point/path size and type
   - angle of contact
   - friction

3. type of environment
   - structure
   - medium

***** legged mobile robots
1. feature: a series of point contact between the robot and the ground

2. advantages
   1) adaptability and maneuverability in rough terrain
   2) capable of crossing a hole of chasm
   3) potential to manipulate objects

3. disadvantages
   - power and mechanical complexity
     - multi-freedom

****** leg configuration and stability

[[/home/ben/tiger/figures/scrot/32974wm.png]]

legged robots are biologically inspired.

two legs: much more complex active control to maintain balance

three legs: static stability

6 legs: static walking
*** Deutsch                                                       :deutsch:
**** 变音
+ ä=ae ä=ae (\epsilon)  e的舌头位置，a的口形
+ ö=oe ö=oe (\phi)
+ ü=ue ü=ue (y:)

e.g.  müchen = muechen 慕尼黑
**** 长元音与短元音
元音后面出现两个或者两个以上辅音时发短音
1) 区别不大的元音：一个绵长，一个短促
   + a
   + i
   + u

2) 口形上的区别：e
   + 长： 扁口形 de
   + 短： 大口形 eff

3) 其它没有多少区别：变音
**** 辅音
|-------+-------+--------+------------------------------------------------------|
| r     | r     | err    | 发舌音，有小舌音（南德）和大舌音（北德，普通话）之分 |
|       |       |        | 舌头平放，喉部有振动                                 |
| v     | v     | fau    |                                                      |
| w     | w     | we     |                                                      |
| z     | z     | tsett  | ts一个辅音字母组合，发顶舌音，类似拼音中的c          |
| \beta | \beta | estett | 只有小写形式，没有大写形式，不会出现在词首 |
|       |       |        | 瑞士德语中写作ss，在单词中发轻音s                            |
|-------+-------+--------+--------------------------------------------------------------|

德语发音主要看字母组合，而不是单个字母
**** 元音字母组合
德语发音的一般规律
1) 第一音节一般为重读音节
2) 德语中没有连读，不要吃音


元音a发音规律
1) a单独出现在词尾时，一定发长音
2) a后面只有一个辅音时，也发长音
3) 以上规律适用于所有发长音的字母组合
4) 两个aa连续出现时，只发一个长音，该规律适用于oo和ee

|-----------+-------------+---------------------------------------|
| 音标      | 字母组合    | 例子                                  |
|-----------+-------------+---------------------------------------|
| a:        | a aa ah     | tag staat hahn                        |
| i:        | i ie ih     | china liebe ihnen                     |
| o:        | o oo oh     | oma boot lohn                         |
| u:        | u uh        | mut du schuh kuh                      |
| e:        | e ee eh     | wer see gehen                         |
| \epsilon: | ä äh        | baer laeden waehlen                   |
|           |             | baer狗熊，音同英语                    |
| \phi:     | ö öh        | oel boese soehne                      |
| y:        | ü üh y    | uebung fuehlen physik                 |
|-----------+-------------+---------------------------------------|
|           |             |                                       |
|           |             |                                       |
| 短元音    |             |                                       |
|-----------+-------------+---------------------------------------|
| a         | a           | ampel kalt blatt                      |
| o         | o           | komma oft gold                        |
| u         | u           | mutter jung muster                    |
| i         | i           | insel immer dick                      |
| e         | e           | name lage kommen                      |
|           |             | e在词尾的非重读音节中，短而轻         |
| y         | ue y        | huette system                         |
|           |             | 德语中出现y作为元音时，通常为外来词， |
|           |             | 拼写与英文相同，发音按德语发音规律    |
| \epsilon  | e ä         | hemd männer                           |
|           | ö           | löffel östlish köln                      |
|-----------+-------------+---------------------------------------|
|           |             |                                       |
| 复合元音  |             |                                       |
|-----------+-------------+---------------------------------------|
| ai        | ei ai ay ey | leitung mai bayern mayer              |
|           |             | ay ey 通常出现在人名和地名中          |
| au        | au          | haus laune blau                       |
| oi        | eu aeu      | leute heute baeume traeume            |
|-----------+-------------+---------------------------------------|
**** 辅音字母组合
清辅音和浊辅音
浊辅音b, d, g在词尾时发对应的轻辅音

|--------------+--------------------------------------------+----------------------------------------------------------------|
| 音标         | 字母组合                                   | 单词                                                           |
|--------------+--------------------------------------------+----------------------------------------------------------------|
| p            | p b                                        | papier lippe ab kalb                                           |
|              |                                            | 舌音处于词尾时不重读，一带而过                                 |
|              |                                            | 由两三个字母组成的小词中元音一般发短音                         |
| b            | b                                          | bild aber abend                                                |
|              | b在元音前面发浊音                          |                                                                |
|--------------+--------------------------------------------+----------------------------------------------------------------|
| t            | t tt th d dt                               | tafel bett thema wald                                          |
|              | th中h不发音，d，dt在词尾发清音             | 所有名词首字母大写                                             |
| d            | d dd                                       | dach nadel pudding                                             |
|--------------+--------------------------------------------+----------------------------------------------------------------|
| k            | k g ck c ch                                | kommaa tag ecke cola christ                                    |
| g            | g                                          | geld geben tage                                                |
|              |                                            | 德语单词如果以k c ch开关，并且发k的音，一般为外来词            |
|              |                                            | 但是存在例外，可能读作h，需要查字典，唯独c、ch开头的外来词如此 |
|--------------+--------------------------------------------+----------------------------------------------------------------|
| f            | f ff v ph                                  | familie schiff vater photo                                     |
| v            | w v                                        | wasser wo vase visum                                           |
| 上齿紧贴下唇 | v在德语单词中发f，在外来词中发v            |                                                                |
|--------------+--------------------------------------------+----------------------------------------------------------------|
|              | s在德语中发音特别复杂                      |                                                                |
| s            | s ss \beta                                 | skizze wissen hei \beta en                                     |
| z            | s                                          | sie sagen sind pause                                           |
|              | 1. s在辅音前及词尾发轻音s                  |                                                                |
|              | 2. ss \beta 永远发轻音 \beta前的元音发长音 |                                                                |
|              | 3. st sp组合在词头或重读音节中特殊         |                                                                |
|              | 4. s在元音前面发浊音                       |                                                                |
|--------------+--------------------------------------------+----------------------------------------------------------------|
| sh           | sch ch                                     | mensch schon chef chance                                       |
|              | ch在单词中有时发k                          |                                                                |
|              | ch在单词的开头并且发sh音时，为法语外来词   |                                                                |
| xi 舌头稍卷  | ch ig                                      | china ich wenig mutig                                          |
| x he         | ch                                         | bach doch buch auch                                            |
| 很重的送气音 | ch前面有元音a, o, u, au时，发x he          |                                                                |
|              | 除了上述四种情况，ch发其它音               |                                                                |
|--------------+--------------------------------------------+----------------------------------------------------------------|
| j            | j y                                        | juli ya yacht yard                                             |
| 卷舌         | y在外来词占发j音                           |                                                                |
| l            | l ll                                       | liebe laufen wollen voll                                       |
| r            | r rr                                       | franfurt rot schreiben                                         |
| m            | m mm                                       | dom machen kommen dumm                                         |
| n            | n nn                                       | name neu kennen wenn                                           |
| g            | ng                                         | angst lang                                                     |
|              |                                            | 元音在ng前面发短音                                             |
| h            | h                                          | halle himmel                                                   |
|              | h在元音后面不发音，th中h不发音             |                                                                |
|              | h在元音前面发h                             |                                                                |
|              | ch强烈送气，h比较轻                        |                                                                |
| ts 拼音c     | z c tz ts ds                               | zahn celsius sitzen                                            |
|              | z在德语中发ts                              | monatskrte abends                                              |
| ks           | chs ks x                                   | wachsen fuchs links text                                       |
|              | chs发清音不发浊音                          |                                                                |
|              | 德语中以大字母组合为主                     |                                                                |
| s            | s ss \beta                                 | skizze wissen heißen                                           |
| z            | s                                          | sie sagen sinal pause                                          |
| sh           | sch ch                                     | mensch schon chef chance                                       |
|              | ch在词中发sh音为法语外来词                 |                                                                |
| shp          | sp                                         | sport sprechen 浊音                                            |
|              | sp在词头或者重读音节中发sh                 |                                                               |
| sht          | st                                         | student stadt                                                  |
| kv           | qu                                         | qualität queue                                                 |
| pf 闭唇送气  | pf                                         | apfel pflanze                                                  |
| tsh ch       | tsch                                       | deutsch quatsch                                                |
|--------------+--------------------------------------------+----------------------------------------------------------------|

*** Unit_B: Landmark assignment, similarity transform,  Icp         :major:
- state "tobecontined" from "todo"       [2015-11-04 三 16:09]

**** simularity simularity
***** 模型
[[/home/ben/tiger/figures/scrot/329789g.png]]
#+begin_src latex
  \begin{displaymath}
    \lambda{}rl_i+t=r_i
  \end{displaymath}

  $\lambda\in\mathbf{r}$ scale factor
  \[
  r=\left[
    \begin{array}{ll}
      \cos\alpha&-\sin\alpha\\
      \sin\alpha&\cos\alpha
    \end{array}
  \right]\in\mathbf{r}^{2\times{}2}
  \]
  $t=[t_x,t_y]^t\in\mathbf{r}^2$
#+end_src
4 parameters

#+begin_src latex
  \begin{displaymath}
    \lambda{}rl_i+t=r_i
  \end{displaymath}
  \begin{displaymath}
    \sum_{i}\|\lambda{}rl_i+t-r_i\|
  \end{displaymath}
#+end_src
nonlinear -> linearize and iterate.

***** 变换： compute center
[[/home/ben/tiger/figures/scrot/3297d1u.png]]

#+begin_src latex
  \begin{displaymath}
    \bar{l}=\frac{1}{m}\sum_{i}l_i
  \end{displaymath}
  \[\bar{r}=\frac{1}{m}\sum_{i}l_i\]
  \[l_i'=l_i-\bar{l}\]
  \[r_i'=r_i-\bar{r}\]
  \[\sum_{i}l_i'=0\]
  \[\sum_i{}r_i'=0\]
#+end_src

#+begin_src latex
  \begin{align*}
    & \lambda{}rl_i-r_i+t \\
  = & \lambda{}r(l_i'+\bar{l})-(r_i'+\bar{r})+t\\
  = & \lambda{}rl_i'-r_i'+\underbrace{\lambda{}r\bar{l}-\bar{r}+t}_{t'}\\
  = & \lambda{}rl_i'-r_i'-t'\rightarrow min
  \end{align*}
#+end_src

#+begin_src latex
  \begin{align}
    & \sum_{i}\|\lambda{}rl_i'-r_i'+t'\|^2 \\
  = &
      \sum_{i}\|lambda{}rl_i'-r_i'\|^2+2t'^t\underbrace{\sum_{i}(\lambda{}rl_i'-r_i')}_{0}+\underbrace{\sum_{i}\|t'\|^2}_{m\cdot\|t'\|^2}
    \\
  = &
      \underbrace{\sum_{i}\|lambda{}rl_i'-r_i'\|^2}_{\geqslant{}0}+\underbrace{m\cdot\|t'\|^2}_{\geqslant{}0}
      \rightarrow min
  \end{align}
#+end_src

#+begin_src latex
  \begin{eqnarray*}
    t'=0  \\
   \lambda{}r\bar{l}-\bar{r}+t=0 \\
\rightarrow t = \bar{r}-\lambda{}r\bar{l}
  \end{eqnarray*}
#+end_src

#+begin_src latex
  \begin{eqnarray*}
    \sum_{i}\|\lambda{}rl_i'-r_i'\|^2\rightarrow min \\
    \sum_i\|sqrt{\lambda}rl_i'-\frac{1}{\sqrt{\lambda}r_i'}\|^2\rightarrow min
  \end{eqnarray*}

  \begin{align*}
    &
      \sum_i\|sqrt{\lambda}rl_i'-\frac{1}{\sqrt{\lambda}r_i'}\|^2 \\
  = &
      \lambda\underbrace{\sum_{i}\|rl_i'\|^2}_{\sum_{i}\|l_i'\|^2}-2\sum_{i}r_i'^tl_i'+\frac{1}{\lambda}\sum_{i}\|r_i'\|^2
    \\
  = & \lambda{}a+b+\frac{1}{\lambda}c\rightarrow min
  \end{align*}

  \begin{eqnarray*}
    \lambda^2=\frac{c}{a}=\frac{\sum_{i}\|r_i'\|^2}{\sum_i{\|l_i'\|^2}}\\
    \lambda=\sqrt{\frac{c}{a}=\frac{\sum_{i}\|r_i'\|^2}{\sum_i{\|l_i'\|^2}}}
  \end{eqnarray*}
#+end_src

#+begin_src latex
    \begin{eqnarray*}
      \sum_{i}r_i'^t\cdot r\cdot l_i' \rightarrow max \\
      \left[
      \begin{array}{ll}
        l_x&r_x
      \end{array}
  \right]\left[
      \begin{array}{ll}
        \cos\alpha & -\sin\alpha \\
        \sin\alpha & \cos\alpha
      \end{array}
      \right]
  \left[
                     \begin{array}{l}
                       l_x\\l_y
                     \end{array}
                     \right] \\
  \left[
      \begin{array}{ll}
        l_x&r_x
      \end{array}
  \right] \left[
      \begin{array}{l}
        l_x\cos\alpha -l_y\sin\alpha \\
        \_x\sin\alpha+l_y\cos\alpha
      \end{array}
      \right]\\
    r_xl_x\cos\alpha-r_xl_y\sin\alpha+r_y\l_x\sin\alpha+r_yl_y\cos\alpha\\
    \cos\alpha(r_xl_x+r_yl_y)+\sin\alpha(-r_xl_y+r_yl_x)
    \end{eqnarray*}

    \begin{align*}
      \sum_{i}r_i'^trl_i'& = & \cos\alpha\cdot\sum_{i}(r_x'l_x'+r_y'l_y')+
                               \sin\alpha\sum_{i}(-r_x'l_y'+r_y'l_x')
                               \\
   &= &\left[
        \begin{array}{ll}
         \cos\alpha &\sin\alpha
        \end{array}
  \right]\left[
                      \begin{array}{l}
                        \sum_{i}(r_x'l_x'+r_y'l_y')\\
                        \sum_{i}(-r_x'l_y'+r_y'l_x')
                      \end{array}
  \right]
    \end{align*}
    \begin{displaymath}
      \left[
        \begin{array}{l}
          \cos\alpha\\\sin\alpha
        \end{array}
  \right]=\frac{1}{\|\cdot\|}\left[
    \begin{array}{l}
      \sum_{i}(r_x'l_x'+r_y'l_y')\\
      \sum_{i}(-r_x'l_y'+r_y'l_x')
    \end{array}
  \right]
    \end{displaymath}
#+end_src

****** recipe
+ given: l_i,  r_i
+ compute: $\bar{l}=\frac{1}{m}\sum{}l_{i}$,
  $\bar{r}=\frac{1}{m}\sum{}r_{i}$
  $l_{i}'=l_{i}-\bar{l}$, $r_{i}'=r_{i}-\bar{r}$


cs, ss, rr, ll = 0.0
for i in 1...m:
    $cs+=r_{x}'l_{x}'+r_{y}'l_{y'}$
    $ss+=-r_{x}'l_{y}'+r_{y}'l_{x}'$
    $rr+=r_{x}'r_{x}'+r_{y}'r_{y}'$
    $ll+=l_{x}'l_{x}'+l_{y}'l_{y}'$
$\lambda=\sqrt{\frac{rr}{ll}}$
#+begin_src latex
  \begin{displaymath}
    \left[
      \begin{array}{l}
        c\\s
      \end{array}
  \right]=\left[
    \begin{array}{l}
      cs\\ss
    \end{array}
  \right]/\sqrt{cs^2+ss^2}
  \end{displaymath}

  \begin{displaymath}
    \left[
      \begin{array}{l}
        t_x\\t_y
      \end{array}
  \right]=\bar{r}-\lambda{}r\bar{l}=\left[
    \begin{array}{l}
      \bar{r_x}\\\bar{r_y}
    \end{array}
  \right]-\lambda\left[
    \begin{array}{ll}
      c&-s\\s&c
    \end{array}
  \right]\left[
    \begin{array}{l}
      \bar{l_x}\\\bar{l_y}
    \end{array}
  \right]
  \end{displaymath}
  \begin{displaymath}
    (\lambda, c, s, t_x, t_y)
  \end{displaymath}
#+end_src

*** LaTeX 公式组与多行公式
**** 公式组 eqarray
[[~/Wally/Journal/Figures/scrot/3297vLy.png]]

[[~/Wally/Journal/Figures/scrot/3297hVB.png]]
**** 多行公式 align
align*不生成公式序号
[[~/Wally/Journal/Figures/scrot/3297ufH.png]]
** 2015/11/05
*** DONE algorithm2e 什么错误                                       :latex:
- state "done"       from "todo"       [2015-11-05 四 14:59]

答案： *下划线*,  /algorithm环境中不能下划线？？？/
#+begin_example
  \begin{algorithm}
    \textbf{find\_cylinders(scan, jump)}
    \kwin{scan: 扫描线数组，每个元素对应一个距离信息, jump: 微分的跳动阈
      值}
    \kwout{cylinders: 特征点结构数组，每个元素对应一个包含索引和距离
      的结构}
    on_cylinder = false
    sum_ray = 0
    sum_index = 0\tcp{索引和}
    sum_depth = 0\tcp{距离和}
    cylinders=[]
    n = 0                         % 特征点个数
    derivate=compute_derivatives(scan)
    \for{i=1 \kwto scan.length}{
      \if{derivative[i] < -jump\tcp{下降沿，开始计数}}{
        sum_ray = 0
        sum_index = 0
        sum_depth = 0
        on_cylinder = true
      }
      \tcp{注意条件分支结构}
      \eif{derivate[i] > jump and on_cylinder \tcp{上升沿，结束计数}}{
        n = n+1
        cylinders[i]=struct(sum_index/sum_ray, sum_depth/sum_ray)
      }{
        \if{scan[i] > mindist}{
          sum_ray = sum_ray+1
          sum_index = sum_index+i
          sum_depth = sum_depth+scan[i]
        }
      }
    }
    \return{cylinders}
  \end{algorithm}
#+end_example

*** DONE 数学图形 一份不太简短的LaTeX介绍 P76                       :latex:
- state "done"       from "todo"       [2015-11-06 五 10:02]
basic environment : *picture*.
extension package: *epic*, *eepic*, *pstricks*
graphical tool: *metapost*(a user's manual for metapost)

**** picture
#+begin_example
\setlength{\unitlength}{5cm}
\begin{picture}(x, y)...\end{picture}
\begin{picture}(x, y)(x0, y0)...\end{picture}
#+end_example

- x, y: rectuangular space
- x0, y0: bottom left corner, optional

#+begin_example
\put(x, y){object}
\multiput(x, y)(dx, dy){n}{object}
\qbezier{x1, y1}{x2, y2}{x3, y3}
#+end_example



**** line segments
#+begin_example
\put(x, y){\line(x1, y1){length}}
#+end_example
- a direction vector
- a length

[[/home/ben/tiger/figures/scrot/20724lvg.png]]

**** arrows
#+begin_example
\put(x, y){\vector(x1, y1){length}}
#+end_example

[[/home/ben/tiger/figures/scrot/20724yla.png]]

**** circles
#+begin_example
\put(x, y){\circle{diameter}}
#+end_example
- center: x, y
- diameter: /diameter/
- circle* : filled circle

[[/home/ben/tiger/figures/scrot/20724lbu.png]]

**** text and formulas

[[/home/ben/tiger/figures/scrot/20724-qo.png]]

**** multiput
#+begin_example
\multiput(x, y)(dx, dy){n}{object}
#+end_example
- starting point
- translation vector
- number
- object

**** oval
#+begin_example
\put(x, y){\oval(w, h)}
\put(x, y){\oval(w, h)[position]}
#+end_example
- center: x, y
- width: w
- height: h
[[/home/ben/tiger/figures/scrot/20724y5m.png]]

**** multiple use of predefined pictures boxes
#+begin_example
\newsavebox{name}
\savebox{name}(with, height)[position]{content}
\put(x, y)\usebox{name}
#+end_example
[[/home/ben/tiger/figures/scrot/20724_dt.png]]

**** quadratic bezeer curves

[[/home/ben/tiger/figures/scrot/20724moz.png]]

**** xy-pic
*drawing diagrams*
#+begin_example
\usepackage[options]{xy}
#+end_example

** 2015/11/06
*** Hector gazebo                                                   :major:
**** 6wd differential drive plugin
***** 分析
1. 需求与功能分析
   + 以目标为导向
   + 要精简，一句话定义，之后再去分析与综合

2. 功能：
   *a controller for 6-wheeled light-weight robot using differential
   drive*

3. 分解
   1) controller?
      + who?
        - ros
        - gazebo
      + how
        - publish: geometry_msgs/twist
        - subcribe: nav_msgs/odometry

   2) 6-wheeled -> parameters?

   3) differential drive -> model?

***** 包含头文件
****** h文件
#+begin_latex
\begin{cpp}
#include <map>

#include <gazebo/common/plugin.hh>
#include <gazebo/common/time.hh>

// ros
#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/twist.h>
#include <nav_msgs/odometry.h>

// custom callback queue
#include <ros/callback_queue.h>
#include <ros/advertise_options.h>

// boost
#include <boost/thread.hpp>
#include <boost/bind.hpp>

\end{cpp}
#+end_latex

****** cpp文件
#+begin_latex
\begin{cpp}
#include <algorithm>
#include <assert.h>

#include <hector_gazebo_plugins/diffdrive_plugin_6w.h>
#include <gazebo/common/events.hh>
#include <gazebo/physics/physics.hh>

#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/twist.h>
#include <nav_msgs/odometry.h>
#include <boost/bind.hpp>
\end{cpp}
#+end_latex

****** 分析
头文件中只包含类定义需要的其它头文件，在实现中需要的其它头文件只需在
cpp文件中包含即可。

***** 属性
***** 构造与析构
#+begin_latex
\begin{cpp}
  diffdriveplugin6w();
  virtual ~diffdriveplugin6w();
\end{cpp}
#+end_latex
****** 析构
#+begin_latex
\begin{cpp}
diffdriveplugin6w::~diffdriveplugin6w()
{
  event::events::disconnectworldupdatebegin(updateconnection);
  delete transform_broadcaster_;
  rosnode_->shutdown();
  callback_queue_thread_.join();
  delete rosnode_;
}

\end{cpp}
#+end_latex

1.
***** 继承函数
****** load

*** 虚析构函数                                                        :cpp:
#+begin_latex
\begin{cpp}
#include <iostream>

class base{
public:
  base(){};
  ~base(){};
  virtual void do_something(){std::cout << "do something in class base" << std::endl;
  }
};

class derived: public base
{
public:
  derived(){};
  ~derived(){std::cout << "output from the destructor of class derived" << std::endl;}

  void do_something(){std::cout << "do something in class derived" << std::endl; }
};


int main(int argc, char *argv[])
{
  base *ptest = new derived;	// 指向派生类对象的基类指针
  ptest->do_something();
  delete ptest;			// 必须的，不然不会释放资源，也不会调用析构函数
  return 0;
}

\end{cpp}
#+end_latex

1. output
   do something in class derived
   output from the destructor of class derived

2. 改为 derived *ptest = new derived;
   do something in class derived
   output from the destructor of class derived

3. 去掉delete ptest
   do something in class derived

4. *去掉基类析构函数的virtual*
   do something in class derived


所以虚析构函数的作用是为了 *当用一个基类的指针删除派生类对象时，派生类
的析构函数会被调用*

当类里有虚函数时，编译器会给类添加一个 *虚函数表* ， 里面用来存放 *虚
函数指针* ， 这样会增加类的存储空间。 因而，只有当一个类 *被用作为基
类* 时，才把析构函数写成虚函数。


参考：[[http://blog.csdn.net/starlee/article/details/619827]]

*** A comparision of line extraction algorithms using 2D Laser Rangefinder for indoor mobile robotics
**** Abstract
+ experimental evaluation
+ 6 popular algorithms
+ tested
+ advantages and drawbacks
+ comparision criteria
  - speed
  - complexity
  - correctness
  - percision
+ compare with ground truth using standard statical methods
**** Introduction
A precise position estimation always serves as the heart in any
navigation system, such as localization, dynamic map building, path
planning.

odometry is not sufficient. -> using exteroceptive sensors
+ sonar
+ infrared
+ laser
+ vision

laser usage
- localization
- dynamic mapping
- collision avoidance

laser advantages
- dense
- accurate
- high sampling rate
- high angular resolution
- good range distance and resolution

The primary issue is *how to accurately match sensed data against
information in a prior map of information that has been collected*

two ways
- *point-based matching*
- *feature-based matching*
  - compact
  - less storage
  - efficient
  - still provide rich and  accurate information

Line extraction
Among many geometric primitives,  line segment is the simplest one.

diffirent application require diffirent
quality is primary important for line-based SLAM because bad feature
extraction can led the system to divergence.
**** Problem definition

[[~/Wally/Journal/Figures/scrot/9220jUd.png]]
***** representaion of a line model
#+begin_src latex
  \begin{displaymath}
    \vec{r}=[r\cos\alpha\quad r\sin\alpha]^T
  \end{displaymath}
  \[
  \vec{r}^T(\vec{X}-\vec{r})=0
  \]
  \[
  [r\cos\alpha\quad r\sin\alpha]\left[
    \begin{array}{l}
      x-r\cos\alpha\\y-r\sin\alpha
    \end{array}
  \right]=xr\cos\alpha+yr\sin\alpha-r^2=0
  \]
  \[
  x\cos\alpha+y\sin\alpha=r
  \]
#+end_src
***** convariance matrix of line parameters
#+begin_src latex
  \begin{displaymath}
    cov(r,\alpha)=\left[
      \begin{array}{ll}
        \delta_r^2&\delta_{r\alpha}\\
        \delta_{r\alpha} & \delta_{\alpha}^2
      \end{array}
   \right]
  \end{displaymath}
#+end_src
***** qustions
1. How many line are there?

2. Which points belong to which line?

3. Given the points that belong to a line, how to estimate the line
   model parameters?
   -> (*total least squares*)
**** Algorithms
***** Split-and-Merge Algorithms
collinear

** 2015/11/08
*** du 查看磁盘文件大小                                             :linux:
du命令适合用来查看文件大小等,要比ls命令强大的多

linux *du* 命令也是查看使用空间的，但是与df命令不同的是linux du命令是
对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的.

1. 命令格式： *du [选项][文件]*
2. 命令功能： *显示每个文件和目录的磁盘使用空间*
3. 命令参数：
   + -a或-all  显示目录中个别文件的大小
   + -b或-bytes  显示目录或文件大小时，以byte为单位
   + -c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和
   + -k或--kilobytes  以kb(1024bytes)为单位输出。
   + -m或--megabytes  以mb为单位输出
   + *-s或--summarize*  仅显示总计，只列出最后加总的值。
   + *-h或--human-readable*  以k，m，g为单位，提高信息的可读性。
   + -x或--one-file-xystem  以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。
   + -l<符号链接>或--dereference<符号链接> 显示选项中所指定符号链接的源文件大小。
   + -s或--separate-dirs   显示个别目录的大小时，并不含其子目录的大小。
   + -x<文件>或--exclude-from=<文件>  在<文件>指定目录或文件。
   + --exclude=<目录或文件>         略过指定的目录或文件。
   + -d或--dereference-args   显示指定符号链接的源文件大小。
   + -h或--si  与-h参数相同，但是k，m，g是以1000为换算单位。
   + -l或--count-links   重复计算硬件链接的文件。
4. 使用实例：
   + 实例1：显示目录或者文件所占空间 命令：du
     说明：只显示当前目录下面的子目录的目录大小和当前目录的总的大小，
     最下面的1288为当前目录的总大小
   + 实例2：显示指定文件所占空间 命令： *du log2012.log*
   + 实例3：查看指定目录的所占空间  命令： du scf
   + 实例4：显示多个文件所占空间  命令： du log30.tar.gz log31.tar.gz
   + 实例5：只显示总和的大小  命令： *du -s*
   + 实例6：方便阅读的格式显示  命令： *du -h test* (*注：默认单位为字
     节*)
   + 实例7：文件和目录都显示  命令： 输出：
   + 实例8：显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和
     命令： du -c log30.tar.gz log31.tar.gz
     说明：加上-c选项后，du不仅显示两个目录各自占用磁盘空间的大小，还
     在最后一行统计它们的总和。
   + 实例9：按照空间大小排序 命令： *du|sort -nr|more*
   + 实例10：输出当前目录下各个子目录所使用的空间  命令： du -h --max-depth=1

*** DONE Minted宏包配置                                             :latex:
- state "done"       from "todo"       [2015-11-08 日 15:46]
*支持许多种语言*

! package minted error: you must have `pygmentize' installed to use
this package.
! latex error: file `journal.pyg' not found.

! package minted error: you must invoke latex with the -shell-escape
flag.


暂时不知道原因
可能是某个软件安装或配置问题，也可能是某个宏包没有安装的问题


需要注意的是，运行的时候需要加一个参数即： *-shell-escape*  ，如若是使
用pdflatex编译，即：pdflatex -shell-escape  filename

也就是说, 直接使用emacs tex-mode 默认的命令会出现错误。

**** auctex+minted
http://stackoverflow.com/questions/3300497/using-minted-source-code-latex-package-with-emacs-auctex

#+begin_src emacs-lisp
  ;; not work, not know why
  ;; (add-hook 'tex-mode-hook
  ;;   (lambda ()
  ;;     (setq tex-command-extra-options "-shell-escape")
  ;;   )
  ;;   )

  (eval-after-load "tex"
    '(setcdr (assoc "latex" tex-command-list)
            '("%`%l%(mode) -shell-escape%' %t"
            tex-run-tex nil (latex-mode doctex-mode) :help "run latex")
      )
    )
#+end_src

#+begin_latex
\begin{minted}{lisp}
;; not work, not know why
;; (add-hook 'tex-mode-hook
;;   (lambda ()
;;     (setq tex-command-extra-options "-shell-escape")
;;   )
;;   )

(eval-after-load "tex"
  '(setcdr (assoc "latex" tex-command-list)
          '("%`%l%(mode) -shell-escape%' %t"
          tex-run-tex nil (latex-mode doctex-mode) :help "run latex")
    )
  )
\end{minted}
#+end_latex



#+begin_src latex
  \begin{minted}{c}
    #include <stdio.h>

    main(){
      int a = 0;
      printf("hello,  minted");
    }

  \end{minted}
#+end_src

**** pygment
homepage: http://pygments.org/

支持的语言： *pygmentize -l lexers*,  >300

+ python(py, python)
+ c(c)
+ cpp(cpp)
+ cmake(cmake)
+ makefile(make, makefile)
+ bash(bash, sh)
+ yaml(yaml)
+ asm(nasm)
+ lisp(newlisp)

#+begin_example
  $ pygmentize -l lexers | grep cmake
  ,* cmake:
      cmake (filenames *.cmake, cmakelists.txt)

  $ pygmentize -l lexers | grep python
  ,* antlr-python:
  ,* python, py, sage:
  ,* python3, py3:

  $ pygmentize -l lexers | grep makefile
  ,* make, makefile, mf, bsdmake:
      makefile (filenames *.mak, makefile, makefile, makefile.*, gnumakefile)

  $ pygmentize -l lexers | grep bash
  ,* bash, sh, ksh:
      bash (filenames *.sh, *.ksh, *.bash, *.ebuild, *.eclass, .bashrc, bashrc, .bash_*, bash_*)j

  $ pygmentize -l lexers | grep yaml
  ,* yaml:
      yaml (filenames *.yaml, *.yml)

  $ pygmentize -l lexers | grep asm
      aspx-cs (filenames *.aspx, *.asax, *.ascx, *.ashx, *.asmx, *.axd)
      aspx-vb (filenames *.aspx, *.asax, *.ascx, *.ashx, *.asmx, *.axd)
  ,* nasm:
      nasm (filenames *.asm, *.asm)
  $ pygmentize -l lexers | grep lisp
  ,* common-lisp, cl:
      common lisp (filenames *.cl, *.lisp, *.el)
  ,* newlisp:
#+end_example

*注： 当minted环境设置的语言不是当前所支持的，编译时不会报错，只是编译
的结果为空白pdf*

**** org 配置
#+begin_src emacs-lisp
  (setq org-structure-template-alist
        '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
         ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
         ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
         ("v" "#+begin_verse\n?\n#+end_verse" "<verse>\n?\n</verse>")
         ("v" "#+begin_verbatim\n?\n#+end_verbatim" "<verbatim>\n?\n</verbatim>")
         ("c" "#+begin_center\n?\n#+end_center" "<center>\n?\n</center>")
         ("l" "#+begin_src latex\n?\n#+end_src" )
         ("l" "#+latex: " "<literal style=\"latex\">?</literal>")
         ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
         ("h" "#+html: " "<literal style=\"html\">?</literal>")
         ;; ("a" "#+begin_ascii\n?\n#+end_ascii" "")
         ("a" "#+ascii: " "")
         ("i" "#+index: ?" "#+index: ?")
         ("i" "#+include: %file ?" "<include file=%file markup=\"?\">")
         ;; ("p" "#+begin_latex\n\\begin{python}\n?\n\\end{python}\n#+end_latex")
         ;; ("c" "#+begin_latex\n\\begin{cpp}\n?\n\\end{cpp}\n#+end_latex")
         ;; ("k" "\\left[?\\right]")
         ;; ("k" "\\left\{?\\right\}")
         ;; ("a" "#+begin_latex\n\\begin{algorithm}\n?\n\\end{algorithm}\n#+end_latex")
         ;; ("x" "#+begin_latex\n\\begin{xml}\n?\n\\end{xml}\n#+end_latex")
         ("m" "#+begin_latex\n\\begin{minted}{?}\n\n\\end{minted}\n#+end_latex")
         )
        )
#+end_src

org #+ 块支持嵌套。

*** Emacs快捷键                                                     :emacs:
**** 基本编辑

***** 文件与目录

|---------------+----------------------------------+------------------------|
| 快捷键（c-x） | 命令（m-x）                      | 说明                   |
|---------------+----------------------------------+------------------------|
| c-x c-f       | find-file                        | 打开文件或目录         |
| c-x c-c       | save-buffers-kill-emacs          | 保存推出               |
| c-x c-z       | iconify-or-deiconify-fram        | 挂起（最小化）         |
| c-x c-r       | find-file-read-only              | 以只读模式打开         |
| c-x i         | insert-file                      | 插入文件               |
| c-x c-s       | save-buffer                      | 保存                   |
| c-x s         | save-some-buffer                 | 保存所有未保存的缓冲区 |
| c-x c-w       | write-file                       | 另存为文件             |
| c-x ret r     | revert-buffer-with-coding-system | 以制定编码读取文件     |
| c-x ret f     | set-bugger-with-coding-system    | 以制定编码保存文件     |
| c-x d         | dired                            | 进入目录列表模式       |
| c-x c-d       | list-directory                   | 获取文件列表           |
|---------------+----------------------------------+------------------------|

|---------------+-------------------------+-----------------------------|
| 按键          | 命令                    | 作用                        |
|---------------+-------------------------+-----------------------------|
| c-x c-f       | find-file               | 打开文件                    |
|---------------+-------------------------+-----------------------------|
| c-x c-v       | find-alternate-file     | 打开另一个文件              |
|---------------+-------------------------+-----------------------------|
| c-x c-s       | save-buffer             | 保存文件                    |
|---------------+-------------------------+-----------------------------|
| c-x c-w       | write-file              | 另存文件                    |
|---------------+-------------------------+-----------------------------|
| c-q (n)       | quoted-insert           | 插入字符，n表示字符的八进制 |
|               |                         | ascii码                     |
|---------------+-------------------------+-----------------------------|
| c-x 8         | ucs-insert              | 插入unicode字符             |
|---------------+-------------------------+-----------------------------|
| c-d           | delete-char             | 删除光标处字符              |
|---------------+-------------------------+-----------------------------|
| backspace     | delete-backward-char    | 删除光标前字符              |
|---------------+-------------------------+-----------------------------|
| m-d           | kill-word               | 删除光标起单词              |
|---------------+-------------------------+-----------------------------|
| m-backspace   | backward-kill-word      | 删除光标前单词              |
|---------------+-------------------------+-----------------------------|
| c-k           | kill-line               | 删除光标起当前行            |
|---------------+-------------------------+-----------------------------|
| m-k           | kill-sentence           | 删除光标起句子              |
|---------------+-------------------------+-----------------------------|
| c-x backspace | backward-kill-sentence  | 删除光标前句子              |
|---------------+-------------------------+-----------------------------|
| (none)        | kill-paragraph          | 删除光标起段落              |
|---------------+-------------------------+-----------------------------|
| (none)        | backward-kill-paragraph | 删除光标前段落              |
|---------------+-------------------------+-----------------------------|
| c-/           | undo                    | 撤销                        |
|---------------+-------------------------+-----------------------------|
| c-_           | undo                    | 撤销                        |
|---------------+-------------------------+-----------------------------|
| c-x u         | undo                    | 撤销                        |
|---------------+-------------------------+-----------------------------|
| c-g           | keyboard-quit           | 撤销命令                    |
|---------------+-------------------------+-----------------------------|
| c-h t         | help-with-tutorial      | 调出emacs tutorial          |
|---------------+-------------------------+-----------------------------|
| c-h r         | info-emacs-manual       | 调出emacs manual            |
|---------------+-------------------------+-----------------------------|
| c-h k         | describe-key            | 查看对应command帮助         |
| (command)     |                         |                             |
|---------------+-------------------------+-----------------------------|
| c-o           | open-line               | 插入空行                    |
|---------------+-------------------------+-----------------------------|
| c-x c-o       | delete-blank-line       | 删除空行                    |
|---------------+-------------------------+-----------------------------|
| c-x z         | repeat                  | 重复前个命令                |
|---------------+-------------------------+-----------------------------|

***** 光标

|------+------+------+------+------|
|      | 向前 | 向后 | 向下 | 向上 |
|------+------+------+------+------|
| 翻页 |      |      | c-v  | m-v  |
| 字符 | c-f  | c-b  | c-n  | c-p  |
| 单词 | m-f  | m-b  |      |      |
| 句   | m-a  | m-e  |      |      |
| 行   | c-a  | c-e  |      |      |
| 段落 | m-{  | m-}  |      |      |
| 缓冲区 | m-<  | m->  |      |      |
|--------+------+------+------+------|


|---------+---------------------+--------------------------------|
| m-g m-g | goto-line           | 跳转到某行                     |
| m-x     | goto-char           | 跳转到字符位置                 |
| c-m-l   | reposition-window   | 将当前行卷至页面中部           |
| c-l     | recenter            | 刷新页面，将当前行卷至页面中部 |
| m-r m-x | move-to-window-line | 移动光标之页面的中间行         |
|---------+---------------------+--------------------------------|

|---------+---------------------+-------------------------------------------|
| 按键    | 命令                | 作用                                      |
|---------+---------------------+-------------------------------------------|
| c-f     | forward-char        | 向前一个字符                              |
|---------+---------------------+-------------------------------------------|
| c-b     | backward-char       | 向后一个字符                              |
|---------+---------------------+-------------------------------------------|
| c-p     | previous-line       | 上移一行                                  |
|---------+---------------------+-------------------------------------------|
| c-n     | next-line           | 下移一行                                  |
|---------+---------------------+-------------------------------------------|
| m-f     | forward-word        | 向前一个单词                              |
|---------+---------------------+-------------------------------------------|
| m-b     | backward-word       | 向后一个单词                              |
|---------+---------------------+-------------------------------------------|
| c-a     | beginning-of-line   | 移到行首                                  |
|---------+---------------------+-------------------------------------------|
| c-e     | end-of-line         | 移到行尾                                  |
|---------+---------------------+-------------------------------------------|
| m-e     | forward-sentence    | 移到句首                                  |
|---------+---------------------+-------------------------------------------|
| m-a     | backward-sentence   | 移到句尾                                  |
|---------+---------------------+-------------------------------------------|
| m-}     | forward-paragraph   | 下移一段                                  |
|---------+---------------------+-------------------------------------------|
| m-{     | backward-paragraph  | 上移一段                                  |
|---------+---------------------+-------------------------------------------|
| c-v     | scroll-up           | 下移一屏                                  |
|---------+---------------------+-------------------------------------------|
| m-v     | scroll-down         | 上移一屏                                  |
|---------+---------------------+-------------------------------------------|
| c-x ]   | forward-page        | 下移一页                                  |
|---------+---------------------+-------------------------------------------|
| c-x [   | backward-page       | 上移一页                                  |
|---------+---------------------+-------------------------------------------|
| m-<     | beginning-of-buffer | 移到文档头                                |
|---------+---------------------+-------------------------------------------|
| m->     | end-of-buffer       | 移到文档尾                                |
|---------+---------------------+-------------------------------------------|
| m-g g n | goto-line           | 移到第n行                                 |
|---------+---------------------+-------------------------------------------|
| (none)  | goto-char           | 移到第n个字符                             |
|---------+---------------------+-------------------------------------------|
| c-l     | recenter            | 将当前位置放到页面中间(emacs最喜欢的地方) |
|---------+---------------------+-------------------------------------------|
| m-n     | digit-argument      | 重复下个命令n次                           |
|---------+---------------------+-------------------------------------------|
| c-u n   | universal-argument  | 重复下个命令n次，n默认为4                 |
|---------+---------------------+-------------------------------------------|

***** 删除
|--------------+-----------------------------+------------|
|              | 向前                        | 向后       |
|--------------+-----------------------------+------------|
| 字符         | c-d                         | del   |
| 单词         | m-d                         | m-del |
| 行           | c-k(删除至行尾)             |       |
| 整行         | c-m-backspace               |       |
| 按表达式删除 | c-m-k                       |       |
| 区块         | c-w                         |       |
| 删除连续空格 | m-x delete-horizontal-space |       |
|--------------+-----------------------------+-------|

|---------------+-------------------------+-----------------------------------------------|
| c-d           | delete-char             | 删除光标处字符                                |
| backspace     | delete-backward-char    | 删除光标前字符                                |
| m-\           | delete-horizontal-space | 删除光标处的所有空格和tab字符                 |
| m-spc         | just-one-space          | 删除光标处的所有空格和tab字符，但留下一个     |
| c-x c-o       | delete-blank-lines      | 删除光标周围的空白行，保留当前行              |
| m-^           | delete-indentation      | 将两行合为一行，删除之间的空白和缩进          |
| c-k           | kill-line               | 从光标处起删除该行                            |
| c-s-backspace | kill-whole-line         | 删除整行                                      |
| c-w           | kill-region             | 删除区域                                      |
| m-w           | kill-ring-save          | 复制到kill 环，而不删除                       |
| m-d           | kill-word               | 删除光标起一个单词                            |
| m-backspace   | backward-kill-word      | 删除光标前单词                                |
| m-k           | kill-sentence           | 删除光标起一句                                |
| c-x backspace | backward-kill-sentence  | 删除光标前删一句                              |
| m-z char      | zap-to-char             | 删至字符char为止                              |
|---------------+-------------------------+-----------------------------------------------|

***** 窗口管理
|------------+------------------------------+--------|
|c-x 2       |split-window-vertically       |水平分割|
|c-x 3       |split-window-horizontally     |竖直分割|
|c-x 1       |delete-other-window           |只保留当前窗格|
|c-x 0       |delete-window                 |关闭当前窗格|
|c-x o       |other-window                  |切换窗格|
|c-m-v       |scroll-other-windwo           |滚动下一个窗格|
|------------+------------------------------+--------------|

|---------+-------------------------------------+----------------------------------|
| 按键    | 命令                                | 作用                             |
|---------+-------------------------------------+----------------------------------|
| c-x 2   | split-window-vertically             | 垂直拆分窗口                     |
|---------+-------------------------------------+----------------------------------|
| c-x 3   | split-window-horizontally           | 水平拆分窗口                     |
|---------+-------------------------------------+----------------------------------|
| c-x o   | other-window                        | 选择下一个窗口                   |
|---------+-------------------------------------+----------------------------------|
| c-m-v   | scroll-other-window                 | 滚动下一个窗口                   |
|---------+-------------------------------------+----------------------------------|
| c-x 4 b | switch-to-buffer-other-window       | 在另一个窗口打开缓冲             |
|---------+-------------------------------------+----------------------------------|
| c-x 4   | display-buffer                      | 在另一个窗口打开缓冲，但不选中   |
| c-o     |                                     |                                  |
|---------+-------------------------------------+----------------------------------|
| c-x 4 f | find-file-other-window              | 在另一个窗口打开文件             |
|---------+-------------------------------------+----------------------------------|
| c-x 4 d | dired-other-window                  | 在另一个窗口打开文件夹           |
|---------+-------------------------------------+----------------------------------|
| c-x 4 m | mail-other-window                   | 在另一个窗口写邮件               |
|---------+-------------------------------------+----------------------------------|
| c-x 4 r | find-file-read-only-other-window    | 在另一个窗口以只读方式打开文件   |
|---------+-------------------------------------+----------------------------------|
| c-x 0   | delete-window                       | 关闭当前窗口                     |
|---------+-------------------------------------+----------------------------------|
| c-x 1   | delete-other-windows                | 关闭其它窗口                     |
|---------+-------------------------------------+----------------------------------|
| c-x 4 0 | kill-buffer-and-window              | 关闭当前窗口和缓冲               |
|---------+-------------------------------------+----------------------------------|
| c-x ^   | enlarge-window                      | 增高当前窗口                     |
|---------+-------------------------------------+----------------------------------|
| c-x {   | shrink-window-horizontally          | 将当前窗口变窄                   |
|---------+-------------------------------------+----------------------------------|
| c-x }   | enlarge-window-horizontally         | 将当前窗口变宽                   |
|---------+-------------------------------------+----------------------------------|
| c-x -   | shrink-window-if-larger-than-buffer | 如果窗口比缓冲大就缩小           |
|---------+-------------------------------------+----------------------------------|
| c-x +   | balance-windows                     | 所有窗口一样高                   |
|---------+-------------------------------------+----------------------------------|
|         | windmove-right                      | 切换到右边的窗口(类似：up, down, |
|         |                                     | left)                            |
|---------+-------------------------------------+----------------------------------|

***** frame
- c-x 5 2 :: create a new frame (=make-frame-command=).

- c-x 5 b bufname ret :: select buffer bufname in another frame. this
  runs =switch-to-buffer-other-frame=.

- c-x 5 f filename ret :: visit file filename and select its buffer in
  another frame. this runs =find-file-other-frame=. see
  [[visiting.html#visiting][visiting]].

- c-x 5 d directory ret :: select a dired buffer for directory
  directory in another frame. this runs =dired-other-frame=. see
  [[dired.html#dired][dired]].

- c-x 5 m :: start composing a mail message in another frame. this runs
  =mail-other-frame=. it is the other-frame variant of c-x m. see
  [[sending-mail.html#sending-mail][sending mail]].

- c-x 5 . :: find a tag in the current tag table in another frame. this
  runs =find-tag-other-frame=, the multiple-frame variant of m-.. see
  [[tags.html#tags][tags]].

- c-x 5 r filename ret :: visit file filename read-only, and select its
  buffer in another frame. this runs =find-file-read-only-other-frame=.
  see [[visiting.html#visiting][visiting]].

- toggle-frame-fullscreen <f11>

- toggle-frame-maximized m-<f10>(ubuntu系统菜单) esc <f10>
***** 缓冲区管理
|---------+------------------+----------------|
| c-x c-b | list-buffers     | 查看缓冲区列表 |
| c-x b   | switch-to-buffer | 切换缓冲区     |
| c-x k   | kill-buffer      | 关闭缓冲       |
|---------+------------------+----------------|

|-----------------+-------------------------------+-----------------------------------|
| 按键            | 命令                          | 作用                              |
|-----------------+-------------------------------+-----------------------------------|
| c-x b           | switch-to-buffer              | 打开或新建一个缓冲                |
|-----------------+-------------------------------+-----------------------------------|
| c-x 4 b         | switch-to-buffer-other-window | 在另一个window中打开或新建一个缓  |
|                 |                               | 冲                                |
|-----------------+-------------------------------+-----------------------------------|
| c-x 5 b         | switch-to-buffer-other-frame  | 在另一个frame中打开或新建一个缓冲 |
|-----------------+-------------------------------+-----------------------------------|
| c-x left        | next-buffer                   | 移动到下一个缓冲                  |
|-----------------+-------------------------------+-----------------------------------|
| c-x right       | previous-buffer               | 移动到前一个缓冲                  |
|-----------------+-------------------------------+-----------------------------------|
| c-x c-b         | list-buffers                  | 显示所有缓冲                      |
|-----------------+-------------------------------+-----------------------------------|
| c-u c-x c-b     |                               | 显示映射到文件的缓冲              |
|-----------------+-------------------------------+-----------------------------------|
| c-x k           | kill-buffer                   | 关闭缓冲                          |
|-----------------+-------------------------------+-----------------------------------|
|                 | kill-some-buffers             | 关闭多个缓冲                      |
|-----------------+-------------------------------+-----------------------------------|
|                 | clean-buffer-list             | 关闭三天未使用的缓冲              |
|-----------------+-------------------------------+-----------------------------------|
| c-x c-q         | toggle-read-only              | 切换缓冲只读属性                  |
|-----------------+-------------------------------+-----------------------------------|
| c-u m-g m-g num |                               | 跳至前一缓冲num行                 |
|-----------------+-------------------------------+-----------------------------------|
|                 | rename-buffer                 | 重命名缓冲                        |
|-----------------+-------------------------------+-----------------------------------|
|                 | rename-uniquely               | 重命名缓冲，在其名后加数字        |
|-----------------+-------------------------------+-----------------------------------|
|                 | view-buffer                   | 只读方式打开缓冲                  |
|-----------------+-------------------------------+-----------------------------------|
|                 | buffer-menu                   | 打开buffer menu                   |
|-----------------+-------------------------------+-----------------------------------|
|                 | make-indirect-buffer          | 建立间接缓冲                      |
|-----------------+-------------------------------+-----------------------------------|
|                 | clone-indirect-buffer         | 建立当前缓冲的间接缓冲            |
|-----------------+-------------------------------+-----------------------------------|

***** 搜索替换
|-----------+-------------------------+------------------------|
| 增量搜索  |                         |                        |
|-----------+-------------------------+------------------------|
| c-s m-x   | isearch-forward         | 向前增量搜索           |
| c-r m-x   | isearch-backward        | 向后增量搜索           |
| c-m-s m-x | isearch-forward-regexp  | 正则表达式向前增量搜索 |
| c-m-r m-x | isearch-backward-regexp | 正则表达式向后增量搜索 |
|-----------+-------------------------+------------------------|
| 一般搜索  |                         |                        |
|-----------+-------------------------+------------------------|
| m-x       | search-forward          | 向前搜索               |
| m-x       | search-backward         | 向后搜索               |
| m-x       | search-forward-regexp   | 正则表达式向前搜索     |
| m-x       | search-backwarg-regexp  | 正则表达式向后搜索     |
|-----------+-------------------------+------------------------|
| 询问替换  |                         |                        |
| m-% m-x   | query-replace           | 询问替换               |
| c-m-% m-x | query-replace-regexp    | 正则表达式询问替换     |
|-----------+-------------------------+------------------------|

|-----------+-------------------------+--------------------------------------------|
| 按键      | 命令                    | 作用                                       |
|-----------+-------------------------+--------------------------------------------|
| c-s       | isearch-forward         | 向前进行增量查找                           |
|-----------+-------------------------+--------------------------------------------|
| c-r       | isearch-backward        | 向后进行增量查找                           |
|-----------+-------------------------+--------------------------------------------|
| m-c       |                         | (查找状态)切换大写敏感                     |
|-----------+-------------------------+--------------------------------------------|
| c-j       | newline-and-indent      | (查找状态)输入换行符                       |
|-----------+-------------------------+--------------------------------------------|
| m-tab     | isearch-complete        | (查找状态)自动匹配                         |
|-----------+-------------------------+--------------------------------------------|
| c-h c-h   |                         | (查找状态)进入查找帮助                     |
|-----------+-------------------------+--------------------------------------------|
| c-w       |                         | (查找状态)将光标处单词复制到查找区域       |
|-----------+-------------------------+--------------------------------------------|
| c-y       |                         | (查找状态)将光标处直到行尾内容复制到查找区 |
|           |                         | 域                                         |
|-----------+-------------------------+--------------------------------------------|
| m-y       |                         | (查找状态)把kill 环中最后一项复制到查找区  |
|           |                         | 域                                         |
|-----------+-------------------------+--------------------------------------------|
| c-m-w     |                         | (查找状态)删除查找区域最后一个字符         |
|-----------+-------------------------+--------------------------------------------|
| c-m-y     |                         | (查找状态)将光标处字符复制到查找区域最后   |
|-----------+-------------------------+--------------------------------------------|
| c-f       |                         | (查找状态)将光标处字符复制到查找区域最后   |
|-----------+-------------------------+--------------------------------------------|
| c-s ret   | search-forward          | 向前进行简单查找                           |
|-----------+-------------------------+--------------------------------------------|
| c-r ret   | search-backward         | 向后进行简单查找                           |
|-----------+-------------------------+--------------------------------------------|
| m-s w     | isearch-forward-word    | 向前进行词组查找                           |
|-----------+-------------------------+--------------------------------------------|
| m-s w ret | word-search-forward     | 向前进行词组查找（非增量方式）             |
|-----------+-------------------------+--------------------------------------------|
| m-s w c-r | word-search-backward    | 向后进行词组查找（非增量方式）             |
| ret       |                         |                                            |
|-----------+-------------------------+--------------------------------------------|
| c-m-s     | isearch-forward-regexp  | 向前进行正则查找                   |
|-----------+-------------------------+--------------------------------------------|
| c-m-r     | isearch-backward-regexp | 向后进行正则查找                           |
|-----------+-------------------------+--------------------------------------------|
|           | replace-string          | 全文替换                                   |
|-----------+-------------------------+--------------------------------------------|
|           | replace-regexp          | 全文正则替换                               |
|-----------+-------------------------+--------------------------------------------|
| m-%       | query-replace           | 查找替换                                   |
|-----------+-------------------------+--------------------------------------------|
|           | recursive-edit          | 进入递归编辑                               |
|-----------+-------------------------+--------------------------------------------|
|           | abort-recursive-edit    | 退出递归编辑                               |
|-----------+-------------------------+--------------------------------------------|
|           | top-level               | 退出递归编辑                               |
|-----------+-------------------------+--------------------------------------------|

***** 复制与粘贴
|---------------+-------------------------+----------------------------------------------|
| 按键          | 命令                    | 作用                                         |
|---------------+-------------------------+----------------------------------------------|
| c-d           | delete-char             | 删除光标处字符                               |
|---------------+-------------------------+----------------------------------------------|
| backspace     | delete-backward-char    | 删除光标前字符                               |
|---------------+-------------------------+----------------------------------------------|
| m-\           | delete-horizontal-space | 删除光标处的所有空格和tab字符                |
|---------------+-------------------------+----------------------------------------------|
| m-spc         | just-one-space          | 删除光标处的所有空格和tab字符，但留下一个    |
|---------------+-------------------------+----------------------------------------------|
| c-x c-o       | delete-blank-lines      | 删除光标周围的空白行，保留当前行             |
|---------------+-------------------------+----------------------------------------------|
| m-^           | delete-indentation      | 将两行合为一行，删除之间的空白和缩进         |
|---------------+-------------------------+----------------------------------------------|
| c-k           | kill-line               | 从光标处起删除该行                           |
|---------------+-------------------------+----------------------------------------------|
| c-s-backspace | kill-whole-line         | 删除整行                                     |
|---------------+-------------------------+----------------------------------------------|
| c-w           | kill-region             | 删除区域                                     |
|---------------+-------------------------+----------------------------------------------|
| m-w           | kill-ring-save          | 复制到kill 环，而不删除                      |
|---------------+-------------------------+----------------------------------------------|
| m-d           | kill-word               | 删除光标起一个单词                           |
|---------------+-------------------------+----------------------------------------------|
| m-backspace   | backward-kill-word      | 删除光标前单词                               |
|---------------+-------------------------+----------------------------------------------|
| m-k           | kill-sentence           | 删除光标起一句                               |
|---------------+-------------------------+----------------------------------------------|
| c-x backspace | backward-kill-sentence  | 删除光标前删一句                             |
|---------------+-------------------------+----------------------------------------------|
| m-z char      | zap-to-char             | 删至字符char为止                             |
|---------------+-------------------------+----------------------------------------------|
| c-y           | yank                    | 召回                                         |
|---------------+-------------------------+----------------------------------------------|
| m-y           | yank-pop                | 召回前一个                                   |
|---------------+-------------------------+----------------------------------------------|
| c-m-w         | append-next-kill        | 下一个删掉内容和上次删除合并                 |
|---------------+-------------------------+----------------------------------------------|
| c-h v         | describe-variable       | 显示变量内容                                 |
|---------------+-------------------------+----------------------------------------------|
| (none)        | append-to-buffer        | 将区域中内容加入到一个buffer中               |
|---------------+-------------------------+----------------------------------------------|
| (none)        | prepend-to-buffer       | 将区域中内容加入到一个buffer光标前           |
|---------------+-------------------------+----------------------------------------------|
| (none)        | copy-to-buffer          | 区域中内容加入到一个buffer中，删除该buffer原 |
|               |                         | 有内容                                       |
|---------------+-------------------------+----------------------------------------------|
| (none)        | insert-buffer           | 在该位置插入指定的buffer中所有内容           |
|---------------+-------------------------+----------------------------------------------|
| (none)        | append-to-file          | 将区域中内容复制到一个文件中                 |
|---------------+-------------------------+----------------------------------------------|
| (none)        | cua-mode                | 启用/停用cua绑定                             |
|---------------+-------------------------+----------------------------------------------|

|-------------------+-----------------------------|
| 变量              | 作用                        |
|-------------------+-----------------------------|
| kill-read-only-ok | 是否在只读文件启用kill 命令 |
|-------------------+-----------------------------|
| kill-ring         | kill环                      |
|-------------------+-----------------------------|
| kill-ring-max     | kill环容量                  |
|-------------------+-----------------------------|

***** 标记
|---------+-------------------------+----------------------|
| 按键    | 命令                    | 作用                 |
|---------+-------------------------+----------------------|
| c-@     | set-mark-command        | 设定标记             |
|---------+-------------------------+----------------------|
| c-x c-x | exchange-point-and-mark | 交换标记和光标位置   |
|---------+-------------------------+----------------------|
| c-w     | kill-region             | 删除区域中内容       |
|---------+-------------------------+----------------------|
| c-x c-u | upcase-region           | 将区域中字母改为大写 |
|---------+-------------------------+----------------------|
| c-x h   | mark-whole-buffer       | 全选                 |
|---------+-------------------------+----------------------|
| c-x c-p | mark-page               | 选取一页             |
|---------+-------------------------+----------------------|
| m-h     | mark-paragraph          | 选取一段             |
|---------+-------------------------+----------------------|
| m-@     | mark-word               | 选取一个单词         |
|---------+-------------------------+----------------------|
| c-@ c-@ |                         | 加入点到标记环       |
|---------+-------------------------+----------------------|
| c-u c-@ |                         | 在标记环中跳跃       |
|---------+-------------------------+----------------------|
| c-x c-@ | pop-global-mark         | 在全局标记环中跳跃   |
|---------+-------------------------+----------------------|
| (none)  | transient-mark-mode     | 非持久化标记模式     |
|---------+-------------------------+----------------------|

|-----------------------------+------------------------|
| 变量                        | 作用                   |
|-----------------------------+------------------------|
| set-mark-command-repeat-pop | 是否使用c-@连续跳跃    |
|-----------------------------+------------------------|
| mark-ring-max               | 标记环最大容量         |
|-----------------------------+------------------------|
| mark-even-if-nonactive      | 是否只使用激活状态标记 |
|-----------------------------+------------------------|

***** 书签
|---------------------+---------------+--------------|
| c-x r m             | bookmark-set  | 设置书签     |
| c-x r b             | bookmark-jump | 跳转到书签   |
| c-x r l             | bookmark-list | 列出所有书签 |
| m-x bookmark-delete |               | 删除书签     |
|         | bookmark-save        | 将书签保存到书签文件中 |
|---------------------+---------------+--------------|

书签列表操作
|-----+--------------|
| d   | 标记删除     |
| u   | 取消删除标记 |
| x   | 执行删除     |
| r   | 重命名       |
| q   | 关闭列表     |
| o   |              |
| c-o |              |
| m   |              |
| u   |              |
| v   |              |
| s   |              |
|-----+--------------|

***** 帮助
|----------+--------------------------+-----------------------------------------------------|
| c-h ?    |                          | 关于帮助系统的帮助，可以通过spc和del键滚动，esc推出 |
| c-h t    | m-x help-with-tutorial   | 进入《emacs快速指南》                               |
| c-h r    | m-x info-emacs-manual    | emacs使用手册                                       |
| c-h i    | m-x info                 | 《emacs说明》                                       |
| c-h a    | m-x apropos-command      | 搜索命令                                            |
| c-h v    | m-x describe-variable    | 查看变量说明                                        |
| c-h f    | m-x describe-function    | 查看函数说明                                        |
| c-h m    | m-x describe-mode        | 查看当前mode的相关文档，包含mode中的命令、快捷键等  |
| c-h k    | m-x describe-key kyes    | 查看快捷键对应的命令及简要说明                      |
| c-h c    | m-x describe-key-briefly | 查看绑定说明                                        |
| c-h w    | m-x where-is             | 查看某个命令对应的快捷键                            |
| c-h b    | m-x describe-bindings    | 查看当前buffer中的所有的快捷键列表                  |
| keys c-c |                          | 查看当前buffer中以某个快捷键序列开头的快捷键列表    |
|          | m-x appropos             | 查看匹配某个关键字的任何东西，如函数，变量，命令，模式等                        |
|----------+--------------------------+---------------------------------------------------------------------------------|

***** 矩形操作
|-----------+----------------------------+-----------------------|
| c-x r c   | clear-rectangle            | 清空一个矩形块,以空格 |
| c-x r d   | delete-rectangle           | 删除一个矩形块,以空白 |
| c-x r k   | kill-rectangle             | 剪切一个矩形块        |
| c-x r r   | copy-rectangle-to register | 复制矩形块到寄存器    |
| c-x r i   | insert-register            |                       |
| c-x r g   | insert-register            |                       |
| c-x r y   | yank-rectangle             | 粘贴一个矩形块        |
| c-x r o   | open-rectangle             | 插入一个矩形块        |
| c-x r t   | string-rectangle           | string-rectangle      |
| c-x r m-w | copy-rectangle-as-kill     |                       |
|-----------+----------------------------+-----------------------|

***** 寄存器
\begin{itemize}
\item \textbf{window and frame configuration}

  \begin{tabular}{l|l|l}
    \hline
    key & binding & comment \\
    \hline
    c-x r w reg & window-configuration-to-register & save configure of the current frame \\
    c-x r f reg & frame-configuration-to-register & save the state of all frams \\
    c-x r j reg & jump-to-register & jump to a register reg\\
    \hline
  \end{tabular}

\item \textbf{save text}

  \begin{tabular}{l|l|l}
    \hline
    key & binding & comment \\
    \hline
    c-x r s reg & copy-to-register & copy region into register reg \\
    c-x r i reg & insert-register & insert text from register reg \\
    \hline
  \end{tabular}

\item \textbf{rectangle}

  \begin{tabular}{l|l|l}
    \hline
    key & binding & comment \\
    c-x r r reg & copy-rectangke-to-register & copy the region-rectangle\\
    \hline
  \end{tabular}

\item \textbf{position}

    \begin{tabular}{l|l|l}
    \hline
    c-x r spc reg & point-to-register & record the position fo the point\\
                  && and the current buffer \\
    c-x r j reg & jump-to-register & jump to the position and buffer \\
                  && if the buffer is killed, revisit the file and open the buffer\\
    \hline
    \end{tabular}

  \item \textbf{number}
\end{itemize}
***** 大小写转换
|---------------------------------------------+----------------------|
| 从光标位置开始，处理单词后半部分            |                      |
|---------------------------------------------+----------------------|
| capitalize-word (m-c)                       | 单词首字母转为大写   |
| upcase-word (m-u)                           | 整个单词转为大写     |
| downcase-word (m-l)                         | 整个单词转为小写     |
|---------------------------------------------+----------------------|
| 从光标位置开始，处理单词前半部分            |                      |
|---------------------------------------------+----------------------|
| negtive-argument; capitalize-word (m-- m-c) | 单词首字母转为大写   |
| negtive-argument; upcase-word (m-- m-u)     | 整个单词转为大写     |
| negtive-argument; downcase-word (m-- m-l)   | 整个单词转为小写     |
|---------------------------------------------+----------------------|
| 改变选定区域的大小写                        |                      |
|---------------------------------------------+----------------------|
| downcase-region (c-x c-l)                   | 选定区域全部改为小写 |
| upcase-region (c-x c-u)                     | 选定区域全部改为大写 |
|---------------------------------------------+----------------------|
***** 宏
|-------------+-----------------------|
| f3 or c-x ( | start recording macro |
| f4 or c-x ) | stop recording macro  |
| c-x e or f4 | playback macro        |
|-------------+-----------------------|

|-------------+------------------------------------------------------|
| c-x c-k c-k | command: kmacro-end-or-call-macro-repeat             |
|             | execute the keyboard macro at the head of the ring   |
|-------------+------------------------------------------------------|
| c-x c-k c-n | command: kmacro-cycle-ring-next                      |
|             | rotate the keyboard macro ring to the next macro     |
|             | (defined earlier).                                   |
|-------------+------------------------------------------------------|
| c-x c-k c-p | command: kmacro-cycle-ring-previous                  |
|             | rotate the keyboard macro ring to the previous macro |
|             | (defined later)                                      |
|-------------+------------------------------------------------------|

|-----------+--------------------------------------------------------------|
| c-x c-k n | command: kmacro-name-last-macr                               |
|           | give a command name (for the duration of the emacs session)  |
|           | to themost recently defined keyboard macro.                  |
|-----------+--------------------------------------------------------------|
| c-x c-k b | command: kmacro-bind-to-key                                  |
|           | bind the most recently defined keyboard macro to a key       |
|           | sequence                                                     |
|-----------+--------------------------------------------------------------|

**** tools
***** git
****** 基本使用
|-------------+-----------------------|
| c-x g c ret | git-commit-all        |
| c-x g c a   | git-commit-all        |
| c-x g c f   | git-commit-file       |
| c-x g c i   | git-commit            |
|-------------+-----------------------|
| c-x g s     | git-status            |
| c-x g a     | git-add               |
| c-x g l     | git-log               |
| c-x g b     | git-branch            |
|             | git-history           |
|-------------+-----------------------|
| c-x g c-l   | git-log-other         |
| c-x g .     | git-cmd               |
| c-x g d     | git--diff-all-map     |
| c-x g l     | git-log-files         |
| c-x g r     | git-reset             |
| c-x g c     | git--commit-map       |
| c-x g d     | git--diff-buffer-map  |
| c-x g g     | git-grep              |
| c-x g h     | git-stash             |
| c-x g i     | git-add-interactively |
| c-x g m     | git-merge-next-action |
|-------------+-----------------------|
| c-x g d ret | git-diff-all-head     |
| c-x g d b   | git-diff-all-baseline |
| c-x g d h   | git-diff-all-head     |
| c-x g d i   | git-diff-all-index    |
| c-x g d o   | git-diff-all-other    |
| c-x g d ret | git-diff-head         |
| c-x g d b   | git-diff-baseline     |
| c-x g d h   | git-diff-head         |
| c-x g d i   | git-diff-index        |
| c-x g d o   | git-diff-other        |
|-------------+-----------------------|

****** git-status
|---------+------------------------------------------|
| p/n     | 在所有文件之间上下移动                   |
| p/n     | 在变更过的文件之间上下移动               |
| </>     | 定位到列表的头部/尾部                    |
| v       | 以只读方式打开文件                       |
| m/u/spc | 设置/取消/切换标记，标记用于批量处理文件 |
| a       | 将文件加入版本控制                       |
| i       | 将文件加入ignore                         |
| c       | 提交                                     |
|---------+------------------------------------------|

****** 提交

|----------+------|
| c-c c-c  | 提交 |
| c-c c-q  | 取消 |
|----------+------|

****** 标签和分支
m-x git-branch：列出所有分支,在这里可以通过快捷键c/d/ret实现创建/删除/切换分
支。

m-x git-tag可以创建一个标签，以后在git-checkout时可以指定标签的名字，也可以
通过git-checkout-to-new-branch来基于tag创建分支。

***** w3m
|----------+---------------------------------------------------------------|
| q        | 关闭窗口                                                      |
| q        | 直接离开                                                      |
| c-x-k    | 关闭当前标签页                                                |
| u        | 打开 url                                                      |
| g        | 在标签页中打开一个网址                                        |
| s        | 用google进行搜索                                              |
| b        | 后退                                                          |
| n        | 前进                                                          |
| h        | 主页                                                          |
| r        | 刷新                                                          |
| c-n      | 下一行                                                        |
| c-p      | 向上一行                                                      |
| c-b      | 向后                                                          |
| c-f      | 向前                                                          |
| c-v      | 向下滚屏                                                      |
| esc v    | 向上滚屏                                                      |
| 打开链接 | ret                                                           |
| >        | 向右滚屏                                                      |
| <        | 向左滚屏                                                      |
| ,        | 向左移动一格                                                  |
| .        | 向右移动一格                                                  |
| r        | reload the current page                                       |
| c-t  r   | reload all the pages                                          |
| r        | redisplay the current page                                    |
| tab      | move to the new anchor                                        |
| c-m-i    | move to the previous anchor                                   |
| b        | move  back to the previous page in the history                |
| n        | move forward to the next page in the history                  |
| s        | display the history in the session                            |
|          | with the prefic arg, it displays the arrived urls             |
|----------+---------------------------------------------------------------|
| m-d      | down th url                                                   |
| d        | down load the url under point                                 |
|----------+---------------------------------------------------------------|
| u        | display the url under the point and put it into kill-ring     |
| c        | display the url of the current page and put it into kill-ring |
|----------+---------------------------------------------------------------|
| t        | toggle the visibility of an image under point                 |
| t        | toggle the visibility of all images                           |
| i        | display the image under point in the external viewer          |
| m-i      | save the image under point to a file                          |
| m-左方括号   | zoom in an image on the point                                 |
| m-右方括号   | zoom out an image on the point                                |
|----------+---------------------------------------------------------------|
| \        | display the html source of the current page                   |
| a        | 添加当前页到书签                                              |
| m-a      | add the urls under point to the bookmark                      |
| esc a    | 添加该url到书签                                               |
| v        | 显示书签                                                      |
| e        | 编辑书签                                                      |
| c-k      | 删除书签                                                      |
| c-_      | 撤消书签                                                      |
| m        | 用外部浏览器打开当前页面                                      |
| esc m    | 用外部浏览器打开链接                                          |
|----------+---------------------------------------------------------------|
| c-c c-k  | 停止载入                                                      |
|----------+---------------------------------------------------------------|


|-------------+-------------------------------+--------------|
| key-binding | function                      | 备注         |
|-------------+-------------------------------+--------------|
| spc,c-v     | forward page                  | 前页         |
| b,esc v     | backward page                 | 后页         |
| l,c-f       | cursor right                  | 光标右移     |
| h,c-b       | cursor left                   | 光标左移     |
| j,c-n       | cursor down                   | 光标下移     |
| k,c-p       | cursor up                     | 光标上移     |
| j           | roll up one line              | 向上滚屏一行 |
| k           | roll down one line            | 向下滚屏一行 |
| ^,c-a       | go to the beginning of line   | 跳转至行首   |
| $,c-e       | go to the end of line         | 跳转至行尾   |
| w           | go to next word               | 后一个单词   |
| w           | go to previous word           | 前一个单词   |
| >           | shift screen right            | 向右滚屏     |
| <           | shift screen left             | 向左滚屏     |
| .           | shift screen one column right | 向右滚屏一列 |
| ,           | shift screen one column left  | 向左滚屏一列 |
| g,m-<       | go to the first line          | 跳转至首行   |
| g,m->       | go to the last line           | 跳转至尾行   |
| esc g       | go to specified line          | 跳转至指定行 |
| z           | move to the center line       |              |
| z           | move to the center column     |              |
| tab         | move to next hyperlink        |              |
| c-u,esc tab | move to previous hyperlink    |              |
| 左方括号        | move to the first hyperlink   |              |
| 右方括号        | move to the last hyperlink    |              |
|-------------+-------------------------------+--------------|


|---------------------------+-------------------------------------------------------------------------+---|
| ret                       | follow hyperlink                                                        |   |
| a, esc ret                | save link to file                                                       |   |
| u                         | peek link url                                                           |   |
| i                         | peek image url                                                          |   |
| i                         | view inline image                                                       |   |
| esc i                     | save inline image to file                                               |   |
| :                         | mark url-like strings as anchors                                        |   |
| esc :                     | mark message-id-like strings as news anchors                            |   |
| c                         | peek current url                                                        |   |
| =                         | display information about current document                              |   |
| c-g                       | show current line number                                                |   |
| c-h                       | view history of url                                                     |   |
| f                         | render frame                                                            |   |
| m                         | browse current document using external browser (use 2m and 3m to invoke |   |
| second and third browser) |                                                                         |   |
| esc m                     | browse link using external browser (use 2esc m and 3esc m to invoke     |   |
|                           | second and third browser)                                               |   |
|---------------------------+-------------------------------------------------------------------------+---|

|---+----------------------------------|
| u | open url                         |
| v | view new file                    |
| @ | execute shell command and load   |
| # | execute shell command and browse |
|---+----------------------------------|

|-------+-----------------------------|
| b     | back to the previous buffer |
| v     | view html source            |
| s     | select buffer               |
| e     | edit buffer source          |
| c-l   | redraw screen               |
| r     | reload buffer               |
| s     | save buffer                 |
| esc s | save source                 |
| esc e | edit buffer image           |
|-------+-----------------------------|
***** tetria
  |---------+--------------------|
  | key     | binding            |
  |---------+--------------------|
  | spc     | tetris-move-bottom |
  | n       | tetris-start-game  |
  | p       | tetris-pause-game  |
  | q       | tetris-end-game    |
  | <down>  | tetris-rotate-next |
  | <left>  | tetris-move-left   |
  | <right> | tetris-move-right  |
  | <up>    | tetris-rotate-prev |
  |---------+--------------------|
***** shell command
|---------+---------------------|
| m-!     | shell-command       |
| m-&     | async-shell-command |
| m-\vert | shell-command-on-region |
|---------+-------------------------|
***** mew
****** m-x mew
|-------------+---------------------------------------------------------|
| w           | 撰写新邮件                                              |
| a           | 回复邮件，不带引用                                      |
| a           | 回复邮件，带引用                                        |
| f           | 转发邮件                                                |
| e           | 重新编辑邮件                                            |
| r           | 重新发送邮件                                            |
| spc         | 阅读邮件                                                |
| y           | 保存邮件（可以保存信件全文、信件正文、附件）            |
| c-c c-l     | 转换当前邮件的编码格式                                  |
| c-c c-a     | 加入地址薄                                              |
| c-u c-c c-a | 比 c-c c-a 多加入昵称和名字                             |
| i           | 收信                                                    |
| g           | 跳转邮箱                                                |
| o           | 对邮件进行分类                                          |
| m-o         | 对所有邮件按照设定的规则进行分类                        |
| d           | 把邮件标记为删除                                        |
| *           | 做星号标记                                              |
| m/          | 列出所有有星号标记的邮件                                |
| u           | 清除标记                                                |
| u           | 清除所有带有指定标记的标记                              |
| x           | 对所有标记进行处理(比如标记为d的邮件将真正被删除)       |
| enter       | 让阅读的邮件向下滚动一行                                |
| -           | 向上滚动一行                                            |
| n           | 下一封邮件                                              |
| p           | 前一封邮件                                              |
| j           | 跳到某一封邮件                                          |
| n           | 下一封带星号的邮件                                      |
| p           | 上一封带星号的邮件                                      |
| s           | 按某个指定项目对邮件排序                                |
| /           | 按指定条件搜索邮件，并进入虚拟模式                      |
| tt          | 进入虚拟模式，根据线索查看，普通模式下是不可以的        |
| v           | 切换"summary mode only" 和 "summary & message mode"模式 |
| c-c c-m     | 编辑新邮件，放入草稿中                                  |
| z           | 更新地址簿                                              |
|-------------+---------------------------------------------------------|

****** draft: m-x mew-send
****** 其它
|-----+-----------------------------------|
| c   | 如果设置了多个邮箱，用 c 命令切换 |
| q   | 退出mew                           |
|-----+-----------------------------------|
***** pdf-tools
****** pdf-view-mode
|--------+-----------------------------------------|
| ret    | image-next-line                         |
| esc    | prefix command                          |
| spc    | pdf-view-scroll-up-or-next-page         |
| +      | pdf-view-enlarge                        |
| -      | pdf-view-shrink                         |
| 0      | pdf-view-scale-reset                    |
| 1 .. 9 | digit-argument                          |
| <      | beginning-of-buffer                     |
| =      | pdf-view-enlarge                        |
| >      | end-of-buffer                           |
| ?      | describe-mode                           |
| h      | pdf-view-fit-height-to-window           |
| p      | pdf-view-fit-page-to-window             |
| q      | kill-this-buffer                        |
| w      | pdf-view-fit-width-to-window            |
| g      | revert-buffer                           |
| h      | describe-mode                           |
| n      | pdf-view-next-page-command              |
| p      | pdf-view-previous-page-command          |
| q      | quit-window                             |
| r      | revert-buffer                           |
|--------+-----------------------------------------|

|------------------------+-----------------------------------------|
| s                      | prefix command                          |
| del                    | pdf-view-scroll-down-or-previous-page   |
| s-spc                  | pdf-view-scroll-down-or-previous-page   |
| c-c c-c                | doc-view-mode                           |
| c-c c-d                | pdf-view-dark-minor-mode                |
|------------------------+-----------------------------------------|
| s b                    | pdf-view-set-slice-from-bounding-box    |
| s m                    | pdf-view-set-slice-using-mouse          |
| s r                    | pdf-view-reset-slice                    |
|------------------------+-----------------------------------------|
| m-<                    | pdf-view-first-page                     |
| m->                    | pdf-view-last-page                      |
|------------------------+-----------------------------------------|

****** pdf-annot-minor-mode
|-----------+-------------------------------|
| c-c c-a d | pdf-annot-delete              |
| c-c c-a a | pdf-annot-attachment-dired    |
| c-c c-a l | pdf-annot-list-annotations    |
| c-c c-a t | pdf-annot-add-text-annotation |
|-----------+-------------------------------|

****** pdf-history-minor-mode
|---+----------------------|
| b | pdf-history-backward |
| n | pdf-history-forward  |
|---+----------------------|

****** pdf-links-minor-mode
|---+--------------------------|
| f | pdf-links-action-perform |
| f | pdf-links-isearch-link   |
|---+--------------------------|
****** pdf-misc-context-menu-minor-mode
|----------------+-----------------------------|
| <down-mouse-3> | pdf-misc-popup-context-menu |
|----------------+-----------------------------|
****** pdf-outline-minor-mode

|---+---+-------------|
| o |   | pdf-outline |
|---+---+-------------|
***** 计算器
+ 命令  m-x quick-calc
+ 快捷键  c-x * q
+ minibuffer中显示
+ c-g  退出quick calculator模式。


|---------+----------------|
| c-x * c | m-x calc       |
| c-x * q | m-x quick-calc |
|---------+----------------|
***** ibuffer
|-------------+-----------------------------------------------|
| m-x ibuffer | 打开ibuffer                                   |
|             | 注:c-x c-b和c-x b被绑定到helm功能             |
| q           | 关闭ibuffer                                   |
|-------------+-----------------------------------------------|
| / m         | 根据模式筛选                                  |
| / /         | 去除筛选条件                                  |
| / g         |                                               |
| / n         | 根据buffer名称筛选                            |
| / c         | 根据内容筛选                                  |
| / f         | 根据文件名筛选                                |
| / >         | 根据buffer大小筛选                            |
| / <         | 根据buffer大小筛选                            |
|-------------+-----------------------------------------------|
| ,           | 在排序方法中循环切换                                    |
| s i         | 倒序                                          |
| s a         | 根据名称排序                                  |
| s f         | 根据文件名排序                                |
| s v         | 根据最后浏览时间排序                          |
| s s         | 根据大小排序                                  |
| s m         | 根据模式排序                                  |
|-------------+-----------------------------------------------|
| o           | 在其它窗口打开当前buffer,并将光标切换到该窗口 |
| c-o         | 在其它窗口打开当前buffer,光标停留在当前窗口   |
| g           | 更新ibuffer                                   |
| m           | 标记当前buffer                                |
| u           | 取消标记                                      |
| a           | 打开标记buffer或当前buffer                    |
| s           | 保存buffer                                    |
| d           | 关闭buffer                                    |
| v           | 放弃buffer的更改                              |
|-------------+-----------------------------------------------|
***** dired-mode
****** mark & flag
|---------------------------------+----------------------------------------|
| d                               | 标记删除                               |
| x                               | 执行删除                               |
| c-u d                           | 去掉标记                               |
| #                               | 标记所有自动保存的文件,e.g. #demo.org# |
| ~                               | 标记所有备份文件(即文件名以~结尾)      |
| &                               | 标记垃圾文件                           |
| dired-garbage-files-regexp      | 查看垃圾文件                           |
|---------------------------------+----------------------------------------|
| **                              | 标记所有可执行文件                     |
| *@                              | 标记所有符号链接                       |
| */                              | 标记所有目录文件,不包括.和..           |
| *s                              | 标记所有文件,不包括.和..               |
| *.                              | 标记具有扩展名的文件                   |
| %m regexp ret or  *% regexp ret | 标记正则表达式匹配文件                 |
| %g regexp ret                   | 标记文件内容匹配正则表达式的文件       |
|---------------------------------+----------------------------------------|
| u                               | 去除当前行的标记                       |
| del                             | 上移一行并去除该行的标记               |
| u                               | 去除所有标记                           |
| *? markchar                     | 去除所有以markchar标记的文件           |
| t                               | 交换标记                               |
| m-( or * or )                   | 使用断言                               |
|---------------------------------+----------------------------------------|
****** 常用操作
|---------------+------------------------|
| *c(不用加*号) | 拷贝文件               |
| *d            | 删除文件               |
| *r            | 重命名文件             |
| *h            | 创建硬链接             |
| *s            | 创建符号链接           |
| *m            | 修改权限               |
| *g            | 修改属组               |
| *o            | 修改属主               |
| *t            | 修改时间               |
| *p            | 打印                   |
| *z            | 压缩或解压             |
| *l            | 加载elisp文件          |
| *b            | 字节编译elisp文件      |
| *a            | 正则表达式搜索         |
| *q            | 对文件内容进行交互替换 |
|---------------+------------------------|

****** shell命令
|---+---------------|
| ！ | 执行shell命令 |
|---+---------------|
****** 强大的重命名
*wdired-change-to-wdired-mode* 进入编辑模式
*wdired-allow-to-change-permissions* 设为t可编辑权限

**** org
***** 基本
****** 视图循环
|-------+----------------------------------------------------------|
| tab   | 子树循环，在folded-children-subtree之间循环，c-u使用前缀 |
|-------+----------------------------------------------------------|
| s-tab | 全局循环                                                 |
|-------+----------------------------------------------------------|

****** 移动
|---------+--------------|
| c-c c-n | 下个标题     |
|---------+--------------|
| c-c c-p | 上个标题     |
|---------+--------------|
| c-c c-f | 下个同级标题 |
|---------+--------------|
| c-c c-b | 上个同级标题 |
|---------+--------------|
| c-c c-u | 回到上层标题 |
|---------+--------------|
****** 结构编辑
|----------------+----------------------------------------------|
| m-tab          | 插入一个同级标题                             |
|----------------+----------------------------------------------|
| m-s-tab        | 插入一个和当前标题同级的todo项               |
|----------------+----------------------------------------------|
| tab            | 如果新的条目中还没有文字，则调整到合适的级别 |
|----------------+----------------------------------------------|
| m-left/right   | 将当前标题提升/降低一个等级                  |
|----------------+----------------------------------------------|
| m-s-left/right | 将当前子树提升/降低一个等级                  |
|----------------+----------------------------------------------|
| m-s-up/down    | 将当前子树上/下移                            |
|----------------+----------------------------------------------|
| c-c c-w        | 将条目或区域传送到另外一个文件中             |
|----------------+----------------------------------------------|
| c-c n s/w      | 将缓冲区试图局限到当前子树中/再次放宽视图    |
|----------------+----------------------------------------------|
****** 脚注
|-----------+------------------------------------------------------|
| c-c c-x f | 新建一个脚注，当有前缀时，会提供一个菜单以供选择操作 |
|           | 或者在定义和引用之间跳转                             |
|-----------+------------------------------------------------------|
| c-c c-c   | 在定义和引用之间跳转                                 |
|-----------+------------------------------------------------------|

****** 链接
[[link][]]
|---------+------------------------|
| c-c l   | 在当前位置保存一个链接 |
|---------+------------------------|
| c-c c-l | 插入一个链接           |
|---------+------------------------|
| c-c c-o | 打开光标处的链接       |
|---------+------------------------|

|-------+------------------------|
| c-c % | 记录内部链接地址       |
| c-c & | 跳转到已记录的内部链接 |
|-------+------------------------|

****** 标签
添加标签
|---------+--------------|
| c-c c-q | 正文部分使用 |
| c-c c-c | 在标题上使用 |
|---------+--------------|

搜索标签
|---------+----------------------------------------------|
| c-c \   | 按标签搜索标题                               |
| c-c / m | 搜索并按树状结构显示                         |
| c-c a m | 按标签搜索多个文件(需要将文件加入全局agenda) |
|---------+----------------------------------------------|
***** 表格
****** 创建和转换
c-c | *org-table-convert-region* 将活动区域转换为表格，以tab，逗号或空白
符划分区域。

****** 调整和移动区域
|---------+----------------------------------------|
| c-c c-c | 调整表格，不移动光标                   |
|---------+----------------------------------------|
| tab     | 将光标移动到下一个区域，必要时新建一行 |
|---------+----------------------------------------|
| s-tab   | 将光标移动到上一个区域                 |
|---------+----------------------------------------|
| ret     | 将光标移动到下一行，必要时新建一行     |
|---------+----------------------------------------|
****** 编辑行和列
|--------------+------------------------------------------------------------------|
| m-left/right | 左/右以当前列                                                    |
|--------------+------------------------------------------------------------------|
| m-s-left     | 删除当前列                                                       |
|--------------+------------------------------------------------------------------|
| m-s-right    | 在光标位置左边添加一列                                           |
|--------------+------------------------------------------------------------------|
| m-up/down    | 上/下移动当前行                                                  |
|--------------+------------------------------------------------------------------|
| m-s-up       | 删除当前行                                                       |
|--------------+------------------------------------------------------------------|
| m-s-down     | 在当前行上面添加一行，如果有前缀，则在下面添加一行               |
|--------------+------------------------------------------------------------------|
| c-c -        | 在当前行下面添加一行一个水平线，如有前缀，则在上面添加一行水平线 |
|--------------+------------------------------------------------------------------|
| c-c ^        | 将表格排序，以当前位置所在的列作为依据                           |
|              | 排序在局当前位置最间的两个水平线之间的行（或者整个表）中进行     |
|--------------+------------------------------------------------------------------|
***** sort
|-------+----------|
| c-c ^ | org-sort |
|-------+----------|

***** w3m-copy
  |-------------+---------------------------|
  | c-c c-x c-w | org-w3m-copy-for-org-mode |
  |-------------+---------------------------|

***** refile
|-------------------------+---------+--------------------|
| org-refile              | c-c c-w | 同一文件中移动节点 |
| org-copy                | c-c m-w | 同形文件中复制节点 |
|-------------------------+---------+--------------------|

***** gtd
******* 任务
|---------+---------------|
| c-c c-t | org-todo      |
| s-left  | org-shiftleft |
| s-right | org-shiftright |
|---------+----------------|
******* 优先级
|--------+---------------+---------------------------------------|
| s-up   | org-shiftup   | increase priority of current headline |
| s-down | org-shiftdown | decrease priority of current headline |
|--------+---------------+---------------------------------------|
******* 子任务
|---------+----------------|
| c-c c-c | 改变复选框状态 |
| m-s-ret | 增加一个子项   |
|---------+----------------|
******* 搜索
*c-c /            只列出包含搜索结果的大纲，并高亮，支持多种搜索方式*
******* 时间戳
|---------+-------------------------+---------------------------------------------------------------------|
| c-c .   | org-time-stamp          | prompt for a date/time and insert a time stamp                      |
| c-c <   | org-date-from-calendar  | insert time stamp corresponding to cursor date in *calendar* buffer |
| c-c >   | org-goto-calendar       | go to the emacs calendar at the current date.                       |
| c-c !   | org-time-stamp-inactive | org-time-stamp-inactive                                             |
|---------+-------------------------+---------------------------------------------------------------------|
| s-up    | org-shiftup             | increase item in timestamp                                          |
| s-down  | org-shiftdown           | decrease item in timestamp                                          |
| s-left  | org-shiftleft           |                                                                     |
| s-right | org-shifright           |                                                                     |
|---------+-------------------------+---------------------------------------------------------------------|

|---------------+------------------|
| 连续使用c-c . | 可以创建时间段   |
| c-c c-y       | 计算时间段的间隔 |
|---------------+------------------|

|---------+--------------+----------------------|
| c-c c-s | org-schedule | insert the scheduled |
| c-c c-d | org-deadline | insert the deadline  |
|---------+--------------+----------------------|
******* org-agenda
|-------+--------------------------+--------------------------------------------------------------|
| c-c [ | org-agenda-file-to-front | move/add the current file to the top of the agenda file list |
| c-c ] | org-remove-file          | remove current file from the org-agenda-files                |
|-------+--------------------------+--------------------------------------------------------------|
******* org-capture
|-----------+----------------------|
| c-c c     | org-capture          |
| c-c c-c   | org-capture-finalize |
| c-c c-w   | org-capture-refile   |
| c-c c-k   | org-capture-kill     |
|-----------+----------------------|

***** latex
|---------------------+-----------------------------------|
| c-c c-x c-l         | org-preview-latex-fragment        |
| c-c c-c             | remove overlay                    |
| c-u c-c c-x c-l     | preview everything in the subtree |
| c-u c-u c-c c-x c-l | preview everything in the buffer  |
|---------------------+-----------------------------------|

***** babel
   | c-c c-v t | org-babel-tangle      | tangle the current file |
   | c-c c-v f | org-babel-tangle-file | choose a file to tangle |

**** ide
***** 基本操作
|-----------+--------------------+----------------------|
| c-m-f     | forward-sexp       | 前向匹配             |
| c-m-b     | backward-sexp      | 后向匹配             |
| c-m-k     | kill-sexp          | 删除匹配之间的区域   |
| c-m-spc/@ | mark-sexp          | 选中匹配区域         |
| c-m-a     | beginning-of-defun | 将光标移至函数起始处 |
| c-m-e     | end-of-defun       | 将光标移至函数结尾处 |
| c-m-h     | mark-defun         | 选中函数定义         |
|-----------+--------------------+----------------------|
***** cedet
***** function-args
|-----+--------------|
| m-o | moo-complete |
| m-i | fa-show      |
| m-j | fa-jump      |
|-----+--------------|
***** gtags
+ c-c g a helm-gtags-tags-in-this-function
+ c-j helm-gtags-select
+ c-c g . helm-gtags-dwim
+ c-c g , helm-gtags-pop-stack
+ c-c g < helm-gtags-previous-history
+ c-c g > helm-gtags-next-history
+ c-c g f helm-gtags-find-files
+ c-c g s helm-gtags-find-symbol
+ c-c g r helm-gtags-find-reference
***** projectile
|-----------+---------------------------------------------+--------------------------------------------------------------|
| c-c p h   | helm-projectile                             | helm interface to projectile                                 |
| c-c p p   | helm-projectile-switch-project              | switches to another projectile project                       |
| c-c p f   | helm-projectile-find-file                   | lists all files in a project                                 |
| c-c p f   | helm-projectile-find-file-in-known-projects | find file in all known projects                              |
| c-c p g   | helm-projectile-find-file-dwim              | find file based on context at point                          |
| c-c p d   | helm-projectile-find-dir                    | lists available directories in current project               |
| c-c p e   | helm-projectile-recentf                     | lists recently opened files in current project               |
| c-c p a   | helm-projectile-find-other-file             | switch between files with same name but different extensions |
| c-c p i   | projectile-invalidate-cache                 | invalidate cache                                             |
| c-c p z   | projectile-cache-current-file               | add the file of current selected buffer to cache             |
| c-c p b   | helm-projectile-switch-to-buffer            | list all open buffers in current project                     |
| c-c p s g | helm-projectile-grep                        | searches for symbol starting from project root               |
| c-c p s a | helm-projectile-ack                         | same as above but using ack                                  |
| c-c p s s | helm-projectile-ag                          | same as above but using ag                                   |
|-----------+---------------------------------------------+--------------------------------------------------------------|

***** senator
senator: sematic navigator.
|---------+--------------------------|
| c-c n   | senator-next-tag         |
| c-c p   | senator-previous-tag     |
| c-c u   | senator-go-up-reference  |
| c-c g   | semantic-symref          |
| c-c m-w | senator-copy-tag         |
| c-c c-w | senator-kill-tag         |
| c-c c-y | senator-yank-tag         |
| c-c r   | senator-copy-to-register |
|         | senator-fold-code-toggle |
|---------+--------------------------|
***** sr-speedbar
   |---------+-------------------------------------------------------------------------------------------------|
   |         | sr-speedbar-open or  sr-speedbar-toggle                                                         |
   | spc     | open the children of a node.                                                                    |
   | ret     | open the node in another window.                                                                |
   |         | if node is a file  open that file;                                                              |
   |         | if node is a directory ,  enter that directory;                                                 |
   |         | if node is a tag in a file ,  jump to the location of that tag in the file.                     |
   | u       | go up parent directory.                                                                         |
   | n/p     | moves to next or previous node.                                                                 |
   | m-n/m-p | moves to next or previous node at the current level.                                            |
   | b       | switches to buffer list using speedbar presentation. you can also open children of each buffer. |
   | f       | switches back to file list.                                                                     |
   |---------+-------------------------------------------------------------------------------------------------|
***** 代码折叠
|-------------+--------------------------------------------|
| c-c @ c-c   | command: hs-toggle-hiding                  |
|             | toggle hiding/showing of a block           |
|-------------+--------------------------------------------|
| c-c @ c-h   | command: hs-hide-block                     |
|             | select current block at point and hide it  |
|-------------+--------------------------------------------|
| c-c @ c-l   | command: hs-hide-level                     |
|             | hide all block with indentation levels     |
|             | below this block                           |
|-------------+--------------------------------------------|
| c-c @ c-s   | command: hs-show-block                     |
|             | select current block at point and show it. |
|-------------+--------------------------------------------|
| c-c @ c-m-h | command: hs-hide-all                       |
|             | hide all top level blocks, displaying      |
|             | only first and last lines.                 |
| c-c @ c-m-s | command: hs-show-all                       |
|             | show everything                            |
|-------------+--------------------------------------------|
***** narrowing
|---------+--------------------------------------------|
| c-x n d | command: narrow-to-defun                   |
| c-x n r | command: narrow-to-region                  |
| c-x n n | narrow buffer to active region             |
| c-x n w | command: widen                             |
|---------+--------------------------------------------|
***** compile
|------+-------------------------------------------------------------------|
| c-o  | display matched location, but do not switch point to matched      |
|      | buffer                                                            |
|------+-------------------------------------------------------------------|
| m-n  | move to next error message, but do not visit error location       |
|------+-------------------------------------------------------------------|
| m-p  | move to next previous message, but do not visit error location    |
|------+-------------------------------------------------------------------|
| m-g  | move to next error message, visit error location                  |
| n    |                                                                   |
|------+-------------------------------------------------------------------|
| m-g  | move to previous error message, visit error location              |
| p    |                                                                   |
|------+-------------------------------------------------------------------|
| ret  | visit location of error at poiint                                 |
|------+-------------------------------------------------------------------|
| m-{  | move point to the next error message or match occurring in a      |
|      | different file                                                    |
|------+-------------------------------------------------------------------|
| m-}  | move point to the previous error message or match occurring in a  |
|      | different file                                                    |
|------+-------------------------------------------------------------------|
| q    | quit *compilation* buffer                                         |
|------+-------------------------------------------------------------------|
***** python
  \begin{tabular}{l|l}
    \hline
    c-c c-c & py-execute-buffer \\
    c-c | & py-execute-region \\
    c-c tab & py-indent-region \\
    c-c ! & py-shell \\
    c-c c-v & py-version \\
    c-c c-k & py-mark-block-or-clause \\
    c-c c-e & py-help-at-point \\
    \hline
    c-m-a & py-begining-of-def-or-class\\
    c-m-d & py-down \\
    c-m-e & py-end-of-def-or-class \\
    c-m-h & py-mark-def-or-class \\
    c-m-i & completion-at-point \\
    c-m-u & py-up \\
    c-m-x & py-execute-def-or-class \\
    \hline
  \end{tabular}
***** octave
  \begin{tabular}{lll}
    \hline
    c-h a & octave-lookfor & octave搜索\\
    c-h d & octave-help & octave帮助\\
    c-c c-l & octave-source-file & sour文件 \\
    c-c ; & octave-update-function-file-comment & 更新函数文档 \\
    m+. & octave-find-definition & 查找定义 \\
    c-m-j & octave-indent-new-comment-line & 插入新的注释行\\
    c-m-q & prog-indent-sexp & 块缩进 \\
    c-c / or ] & smie-indent-sexp & 闭合\\
    c-c tab (c-)a & octave-send-buffer & 执行缓冲区\\
    c-c tab (c-)r & octave-send-region & 执行区域\\
    c-c tab (c-)l & octave-send-line & 执行行\\
    c-c tab (c-)b & octave-send-block & 执行块\\
    c-c tab (c-)f & octave-send-function & 执行函数\\
    c-c tab (c-)k & octave-kill-process & 关闭当前程序\\
    c-c tab (c-)s & octave-show-process-buffer & 显示程序进程缓冲区\\
    \hline
  \end{tabular}

**** latex
    |-------------+------------------------+------------|
    | c-c c-s     | entering sectioning    |            |
    | c-c c-e     | inserting environment  |            |
    | c-c c-m     | inserting macros       |            |
    | c-c ret     |                        |            |
    |-------------+------------------------+------------|
    | c-c c-f c-b | insert bold face text  | \textbf{*} |
    | c-c c-f c-i | insert italics text    | \textit{*} |
    | c-c c-f c-e | insert emphasized text | \emph{*}   |
    | c-c c-f c-s | insert slanted text    | \textsl{*} |
    | c-c c-f c-r | insert roman text      | \textrm{*} |
    | c-c c-f c-f | insert sans seriftext  | \textsf{*} |
    | c-c c-f c-t | insert typewriter text | \texttt{*} |
    | c-c c-f c-c | insert small caps      | \textsc{*} |
    | c-c c-f c-d | ...                    |            |
    |-------------+------------------------+------------|
    | c-c ;       |                        |            |
    | c-c %       |                        |            |
    |-------------+------------------------+------------|
    | c-c c-c     |                        |            |
    |-------------+------------------------+------------|

c-c ],c-c \} latex-close-block

** 2015/11/09
*** mv 无法进行跨设备移动                                           :linux:
#+begin_latex
\begin{minted}{bash}
mv /media/ben/system/test/ ~/audio/
\end{minted}
#+end_latex

mv目录名不能加结尾的斜杠
mv的source永远不会以/结尾，要么是文件名，要么是目录名。

*** git 分支                                                    :git:linux:
+ 查看分支：git branch
+ 创建分支：git branch <name>
+ 切换分支：git checkout <name>
+ 创建+切换分支：git checkout -b <name>
+ 合并某分支到当前分支：git merge <name>
+ 删除分支：git branch -d <name>

*** stackexchange 注册
=163 ^Se_6$=

*** diffdrive plugin

**** gazebo_ros_utils.h
***** namespace: gazebo

***** GazeboRos : class

****** attributes
#+begin_latex
\begin{minted}{cpp}
private:
    sdf::elementptr sdf_;       /// sdf to read
    std::string plugin_;        /// name of the plugin class
    std::string namespace_;     /// name of the launched node
    boost::shared_ptr<ros::nodehandle> rosnode_; /// rosnode
    std::string tf_prefix_;     /// prefix for the ros tf plublisher if not set it uses the namespace_
    std::string info_text;      /// info text for log messages to identify the node
\end{minted}
#+end_latex

****** constructor
#+begin_latex
  \begin{minted}{cpp}
      gazeboros ( physics::modelptr &_parent, sdf::elementptr _sdf, const std::string &_plugin )
          : sdf_ ( _sdf ), plugin_ ( _plugin ) {
          namespace_ = _parent->getname ();
          if ( !sdf_->haselement ( "robotnamespace" ) ) {
              ros_info ( "%s missing <robotnamespace>, defaults is %s", plugin_.c_str(), namespace_.c_str() );
          }  else {
              namespace_ = sdf_->getelement ( "robotnamespace" )->get<std::string>();
              if ( namespace_.empty() ) {
                  namespace_ = _parent->getname();
              }
          }
          if ( !namespace_.empty() )
              this->namespace_ += "/";
          rosnode_ = boost::shared_ptr<ros::nodehandle> ( new ros::nodehandle ( namespace_ ) );
          info_text = plugin_ + "(ns = " + namespace_ + ")";
          readcommonparameter ();
      }
  \end{minted}
#+end_latex

1. 初始化成员列表

2. 获取robotnamespace(for ros)
   1) sdf->getelement("robotnamespace")->get<std::string>()
   2) parent->getname()
   3) /

3. 新建ros node
   rosnode = boost::shared_ptr<ros::nodehandle>(new ros::nodehandle(namespace_))


***** GetModelName (parent : sensors::SensorPtr&) : std::string

#+begin_latex
  \begin{minted}{cpp}
  /**
  * Accessing model name like suggested by nkoenig at http://answers.gazebosim.org/question/4878/multiple-robots-with-ros-plugins-sensor-plugin-vs/
  * @param parent
  * @return accessing model name
  **/
  inline std::string GetModelName ( const sensors::SensorPtr &parent )
  {
      std::string modelName;
      std::vector<std::string> values;
      std::string scopedName = parent->GetScopedName();
      boost::replace_all ( scopedName, "::", "," );
      boost::split ( values, scopedName, boost::is_any_of ( "," ) );
      if ( values.size() < 2 ) {
          modelName = "";
      } else {
          modelName = values[1];
      }
      return modelName;
  }

  \end{minted}
#+end_latex

1. Gazebo模型命名规范：
   =world_name::model_name::link_name::sensor_name=

2. gazebo::sensors::Sensor::GetScopedName()
   Get fully scoped name of the sensor.
   Returns: world_name::parent_name::sensor_name.

3. boost:replace_all & boost::split()
   #+begin_latex
   \begin{minted}{cpp}
   #include <boost/algorithm/string.hpp>
   \end{minted}
   #+end_latex
   replace的主要函数(以及其包括的copy函数)包括:replace_range,
   replace_first, replace_last, replace_nth, replace_head,
   replace_tail, replace_regex, replace_all, replace_all_regex

4.





***** GetRobotNamespace (parent : sensors::SensorPtr&,sdf : sdf::ElementPtr&,pInfo : char*) : std::string
#+begin_latex
  \begin{minted}{cpp}
  /**
  * @brief Reads the name space tag of a sensor plugin
  * @param parent
  * @param sdf
  * @param pInfo
  * @return node namespace
  **/
  inline std::string GetRobotNamespace ( const sensors::SensorPtr &parent, const sdf::ElementPtr &sdf, const char *pInfo = NULL )
  {
      std::string name_space;
      std::stringstream ss;
      if ( sdf->HasElement ( "robotNamespace" ) ) {
          name_space = sdf->Get<std::string> ( "robotNamespace" );
          if ( name_space.empty() ) {
              ss << "the 'robotNamespace' param was empty";
              name_space = GetModelName ( parent );
          } else {
              ss << "Using the 'robotNamespace' param: '" <<  name_space << "'";
          }
      } else {
          ss << "the 'robotNamespace' param did not exit";
      }
      if ( pInfo != NULL ) {
          ROS_INFO ( "%s Plugin (robotNamespace = %s), Info: %s" , pInfo, name_space.c_str(), ss.str().c_str() );
      }
      return name_space;
  }

  \end{minted}
#+end_latex

1. stringstream
   1) #include <sstream>
   2) 处理字符串的 *流对象*
   3) 不直接输出到标准输出或者标准错误上，而保存在字符串流对象中，需要
      的时候再输出。

2. const stf::ElementPtr &sdf

   sdf::ElementPtr gazebo::sensors::Sensor::sdf
   protected
   Pointer the the SDF element for the sensor.

3. ROS_INFO

4.
***** Method-prototypes: GazeboRosPtr : typedef
typedef boost::shared_ptr<GazeboRos> GazeboRosPtr;

*** boost::shared_ptr                                           :boost:cpp:
shared_prt *引用数智能指针* ： 负责在不使用实例时删除它指向的对象
(pointee)，并且它可以自由地共享它指向的对象。

boost.smart_ptr库中最重要的、最有价值的、最有用的组成部分，最像指针的
“智能指针“。

shared_ptr 包装了 *new* 操作符在 *堆* 上分配的 *动态对象* ，实现的是
*引用计数型的智能指针* ， 可以被自由地拷贝和赋值，在任意地方共享它，当
没有代码使用（引用计算为0）时，它才删除被包装的动态分配的对象。

**** 例1. 简单应用
#+begin_latex
\begin{minted}{cpp}
void test(){
  boost::shared_ptr<int> sp(new int(10));
  assert(sp.unique());
  boost::shared_ptr<int> sp2 = sp;
  assert(sp == sp2 && sp.use_count() == 2);

  *sp2 = 100;
  assert(*sp == 100);
  sp.reset();
  assert(!sp);
}
\end{minted}
#+end_latex

1. assert头文件<cassert>或 <assert.h>

**** 例2. 类
#+begin_latex
\begin{minted}{cpp}
class shared
{
private:
  boost::shared_ptr<int> p;

public:
  shared(boost::shared_ptr<int> p_) : p(p_){}
  void print(){
    std::cout << "count:" << p.use_count()
	      << " v= " << *p << std::endl;
  }
};

void print_func(boost::shared_ptr<int> p){
  std::cout << "count: "<< p.use_count()
	    << " v=" << *p << std::endl;
}

int main(int argc, char *argv[])
{
  test();

  boost::shared_ptr<int> p(new int(1000));
  shared s1(p), s2(p);
  s1.print();
  s2.print();
  *p = 20;
  print_func(p);
  s1.print();

  return 0;
}

\end{minted}
#+end_latex
#+begin_example
count:3 v=1000
count:3 v=1000
count:4 v=20
count:3 v=20
#+end_example

/print_func(p)  why 4?/
/p初始化之后其use_count为2, 又是为何？/

#+begin_latex
\begin{minted}{cpp}
  boost::shared_ptr<int> p(new int(1000));
  std::cout << "count:"<< p.use_count()
	    << " v=" << *p << std::endl;
  assert(p.unique());
  print_func(p);
\end{minted}
#+end_latex

#+begin_example
count:1 v=1000
count:2 v=1000
#+end_example

*问题在于函数参数的传递*

**** 例3. 应用于标准容器

***** 方式1： 将窗口作为shared_ptr管理的对象，e.g. shared_ptr<list<t>>
这样容器可以被安全地共享

***** 方式2： 将shared_ptr作为容器的元素，e.g. vector<shared_ptr<t>>
1. shared_ptr支持拷贝和比较操作，符合标准容器对元素的要求
2. 标准窗口不能容纳auto_ptr，c++标准特别的规定
3. 标准容器不能容纳scoped_ptr，scopted_ptr不能拷贝和比较
4. 标准容器可以容纳原始指针，但这就丧失了标准容器的许多好处，因为标准
   容器无法自动管理类型为指针的元素，必须编写额外的大量代码来保证指针
   最终被正确删除。

#+begin_latex
\begin{minted}{cpp}
  typedef std::vector<boost::shared_ptr<int> > vs;
  vs v(10);
  int i = 0;
  for(vs::iterator pos = v.begin(); pos != v.end(); ++pos){
    (*pos) = boost::make_shared<int>(++i);
    std::cout << *(*pos) << ",";
  }
  std::cout << std::endl;
  boost::shared_ptr<int> pp = v[9];
  *pp = 100;
  std::cout << *v[9] << std::endl;
  return 0;
\end{minted}
#+end_latex

1. typedef：声明boost::shared_ptr<t>变量比较麻烦，所以一般使用typedef
   进行定义别名
2. boost::make_shared()是工厂函数，包含在头文件<boost/make_shared.hpp>
   中
3. *(*pos)可以写成 **pos, 但前者更清晰


**** cpp reference

***** shared_ptr
1. manage the storage of a pointer
   1) providing a limited garbage-collection facility
   2) shareing that management iwth other objects

2. share_ptr object can *only share ownership by copying their value*
   1) if two shared_ptr are contructed of made from the same pointer,
      they will both owning the pointer without sharing it,  causing
      potential access problems when one of them relaeses it and
      leaving the other pointing to an invalid location.

3. *aliasing*
   shared_ptr objects can share ownership over a pointer while at the
   same time pointing to another object.(?)

4. empty shared_prt or null shared_ptr

*** STL assert                                                    :stl:cpp:

1. *macro*
2. <cassert> <assert.h>
3. if the argument expression equal zero,
   1) a *message* is written to standard error
   2) *abort* is called, terminating the program execution
4. message: assertion failed: expression, file /filename/, line /linenumber/
5. #define ndebug before #include  to disable.
6. *therefore,  this macro is designed to capture programming errors,
   not user or run-time error*

*** Python GUI                                                     :python:
**** tk

***** intro
1. gui toolkit: *tk*
   + tcl(tool command language)
   + *cross-platform*, portability, flexibility
   + ported to a variety of other scripting languages
     - perl(perl/tk)
     - ruby(ruby/tk)
     - python(tkinter)

2. python interface: *tkinter*, short of "tk interface"
   python+tk

***** main steps
1. /import tkinter/ or /from tkinter import */
2. create a top-level *windowing* object
3. build all your gui *components* on top of windowing object
4. connect these gui components to the underlying application code
5. enter the main loop
   #+begin_latex
   \begin{minted}{py}
   tkinter.mainloop()
   \end{minted}
   #+end_latex

***** intro
1. top-level window object : *root window*
   #+begin_latex
   \begin{minted}{python}
   top = tkinter.tk()
   \end{minted}
   #+end_latex

2. *widgets* : standalone or containers

3. *events* & *callback* : event-driven processing

4. geometry managers: pack & grid
***** top-level window: tkinter.tk()
class
***** widgets
15 types of widgets
[[/home/ben/tiger/figures/scrot/15937zog.png]]
***** default arguments are your friend
these defaults were chosen carefully. they were created with an
optimized set of default arguments as a general rule. only when you
know how to exactly customize your widgets should you use values other
than the default.
***** hello world
#+begin_latex
\begin{minted}{py}
#!/usr/bin/env python

import tkinter


top = tkinter.tk()
label = tkinter.label(top, text="hello world!")
label.pack()
tkinter.mainloop()

\end{minted}
#+end_latex
***** hello world button
#+begin_latex
\begin{minted}{py}
#!/usr/bin/env python

import tkinter

top = tkinter.tk()
quit = tkinter.button(top, text="hello world!", command=top.quit)
quit.pack()
tkinter.mainloop()

\end{minted}
#+end_latex

note: 从emacs ide运行程序点击按钮无反应，不知为何。 从命令行启动没有这
个问题。
***** hello world 3
#+begin_latex
\begin{minted}{python}
#!/usr/bin/env python

import tkinter

top = tkinter.tk()

hello = tkinter.label(top, text='hello world!')
hello.pack()

quit = tkinter.button(top, text='quit', command=top.quit, bg='red', fg='white')
quit.pack(fill=tkinter.x, expand=1)

tkinter.mainloop()
\end{minted}
#+end_latex

1. /fill/
2. /expand/

***** hello world scale
#+begin_latex
\begin{minted}{py}
#!/usr/bin/env python

import tkinter

def resize(ev=none):
    label.config(font='helvetica -%d bold' % scale.get())

top = tkinter.tk()
top.geometry('250x150')

label = tkinter.label(top, text='hello world!',
                      font='helvetica -12 bold')
label.pack(fill=tkinter.y, expand=1)

scale = tkinter.scale(top, from_=10, to=40,
                      orient=tkinter.horizontal, command=resize)
scale.set(12)
scale.pack(fill=tkinter.x, expand=1)

quit = tkinter.button(top, text='quit', command=top.quit,
                      activeforeground='white', activebackground='white')
quit.pack()

tkinter.mainloop()

\end{minted}
#+end_latex

***** pfa
partial funtion application

pfas are not limited to just functions. they work with any "callable",
i.e., classes, methods, or callable instances.

gui programming makes a great use case

#+begin_latex
\begin{minted}{py}
#!/usr/bin/env python

from functools import partial as pto
from tkinter import tk, button, x
from tkmessagebox import showinfo, showwarning, showerror


warn = 'warn'
crit = 'crit'
regu = 'regu'

signs = {
    'do not enter': crit,
    'raidroad crossing': warn,
    '55\nspeed limit': regu,
    'wrong way': crit,
    'merging traffic': warn,
    'one way': regu
}

critcb = lambda: showerror('error', 'error button pressed')
warncb = lambda: showwarning('warning', 'warning button pressed')
infocb = lambda: showinfo('info', 'info button pressed')

top = tk()
top.title('road signs')
button(top, text='quit', command=top.quit,
       bg='red', fg='white').pack()
mybutton = pto(button, top)
critbutton = pto(mybutton, command=critcb, bg='white', fg='red')
warnbutton = pto(mybutton, command=warncb, bg='goldenrod1')
regubutton = pto(mybutton, command=infocb, bg='white')

for eachsign in signs:
    signtype = signs[eachsign]
    cmd = '%sbutton(text=%r%s).pack(fill=x, expand=true)' % (
        signtype.title(), eachsign, '.upper()' if signtype == crit else '.title()')
    eval(cmd)

top.mainloop()

\end{minted}
#+end_latex

1. partile
2. eval('str')
3. str.title() & upper()
   s.title() -> string
   return a titlecased version of s, i.e. words start with uppercase
   characters, all remaining cased characters have lowercase.
4. if...else 对应 :?操作符
**** pyqt

*** Vocabulary : 刻意练习                                           :toefl:
**** how to remember?
1. 阅读记忆（最好的方式）
2. 词根词缀（2/3）
3. 词源
4. 字母学规律
5. 联想

*理解+适当重复*
**** 阅读记
+ 真题
+ www.economist.com  经济学人
+ www.times.com（墙）
+ www.gardian.co.uk
+ *圏出生词，反复研读句子。勾画词组，了解替换，熟词辟意*

**** 词根词缀
1. prefix:
   1) 肯定否定
   2) 方向
   3) 数字
2. suffix：词性
3. root: 意义(根的逆推)


词根词缀不是去猜词，而是去帮助记忆。找到同源异体词


e.g
+ /regress/
  - *re*:
    - back(向后);
    - 再一次; against
  - *gress*: to go (progress，同源异体词)
  - 多读

+ /ingress/ v. 进入
  - *im/in*:
    - into; 表方向
    - im: not

+ /improvise/ v.即兴创作
  - im: not
  - *pro*: 前
  - *vis*: to see(vision,  visit，visiable)
    - visit
      - vis,  to see
      - it,  to go

+ /benefactor/ n. 行善者
  - *bene*: benefit
  - *fact*: to make
    - manufacture
      - *manu*: by hand
    - factory

**** 词源 etymology（看读音，看拼写，看意思---相近）
+ shelter n. v. 避难所，保护
  - shelt: shell加辅音t
+ shield n. 盾牌,  from
+ fetter n. 束缚
  - fet: feet

词源的变化规则
1) 元音之间可以互换 a, e, i, o, u, *y*
   - feasible
     - feas=fac=fact
       - ea <-> a
       - c <-> s
     - ible,  can

2) 辅音之间可以互换p/b, t/d, k/g/c/qu/x, f/v , s/z/x/th
   - disburse v. 支付，付款
     - dis
       - not
       - apart
     - burse: purse

   - reimburse v. 报销，偿还
     - re: back
     - im: into
     - burse: purse

   - kindle v. 点燃
     - candle

   - sunder v. 分裂，裂开
     - thunder
     - link 反义

   - miscellaneous a. 混杂的
     - mis: mix
     - celll: 单元
     - *aneous*: suffixe

   - masquerade n. 化妆舞会
     - masqu:mask
     - *ade*: 名词后缀，表集合

3) 形近字母的互换， u/v/w, m/n的互换
   - mingle
     -le 动词后缀，表重复
     - ming mix (m, n无实义, 在造词时无意义，可省略)

   - u替换v或w, 会去掉元音，u本身元音

   - renovate 翻新
     - re: 再
     - nov: new
     - ate

   - lurk 潜伏
     - lower
     - lwr
     - k 末尾辅音

4) 字母g, h的脱落，不发音
   - arduous 辛苦的
     - uous： suffix
     - ard: hard

   - hierarchy
     - archy, to rule(root)
       - anarchy 无政府主义
     - higher

5) 固定转换 s/t/d, p/b/f/v/ph
   - assent 同意
     - as, (a+辅音双写，表动作的加强)
     - sent
       -sense

   - consent
   - dissent

   - amorphous 无形状的 不定形的
     - ous
     - a/an 表否定
     - morph
       - form 希腊词汇，首尾字母倒写

   - pyre 柴火，火葬用的柴火
     - fire
**** 字母组合(用于无词缀词根的单音节词（一个元音），确定大体意思), 12组

+ sp 表示发出，散开，产生
  - speak
  - spilt
  - spew
  - spread
  - spawn
  - spout
  - spur

+ scr, cr 多和手上的动作有关，s在造词时无意义，只起到加强语气的作用
  - scroll 卷轴
  - craft
  - scratch 抓
  - crab 螃蟹

**** 联想记忆法
+ 单音节词汇--- *形近词*
  - fiend 恶魔
    - friend
    - fiendish
    - ish 像...似的
      - womanish
      - manish
      - womanly
      - manly

  - spout 喷出
    - sprout 发芽

  - balk 停止
    - talk

+ 多音节词汇要 *拆词*
  - 拆成认识的词，拆成词根词缀
  - 拼音
  - 熟词
  - 与熟词形近的部分

  - chrysnathmum 菊花
    - chrys---gold
    - anthem---flower
    - cry+3+the+mum

  - pestilence 瘟疫
    - pest 害虫
    - il---ill
    - ence

  - morose 郁闷的
    - mo
    - rose

  - precarious 不安全的，不稳固的
    - pre
    - car
    - ious
    - prec---pray 词源
    - arious

  - avalanche 雪崩
    - ava
    - lan
    - che
**** 复习(短时多次)
1. 24h
   1) 0.5h
   2) 2.0h
   3) 次日
2. 1 2 4 7天
3. 读

** 2015/11/10
*** Python GUI                                                     :python:
**** 定义类
#+begin_latex
\begin{minted}{py}
#!/usr/bin/env python

import os
from time import sleep
from tkinter import *


class dirlist(object):
\end{minted}
#+end_latex

**** main
#+begin_latex
\begin{minted}{py}
def main():
    d = dirlist(os.curdir)
    mainloop()


if __name__ == '__main__':
    main()
\end{minted}
#+end_latex

**** __init__

***** 声明
#+begin_latex
\begin{minted}{py}
 def __init__(self, initdir=none):
\end{minted}
#+end_latex

***** top
#+begin_latex
\begin{minted}{py}
self.top = tk()
        self.label = label(self.top,
                           text='directory lister v1.1')
        self.label.pack()
\end{minted}
#+end_latex

***** core attibute stringvar
#+begin_latex
\begin{minted}{py}
 self.cwd = stringvar(self.top)
\end{minted}
#+end_latex
help on class *stringvar* in module tkinter:

class stringvar(variable): value holder for strings variables.

+ get(self): return value of variable as string.

+ set(self, value): set the variable to value.

***** frame listbox
#+begin_latex
\begin{minted}{py}
 self.dirfm = frame(self.top)
 self.dirsb = scrollbar(self.dirfm)
 self.dirsb.pack(side=right, fill=y)
 self.dirs = listbox(self.dirfm, height=15,
                     width=50, yscrollcommand=self.dirsb.set)
 self.dirs.bind('<double-1>', self.setdirandgo)
 self.dirsb.config(command=self.dirs.yview)
 self.dirs.pack(side=left, fill=both)
 self.dirfm.pack()
\end{minted}
#+end_latex
1. frame类
2. listbox类
3. bind方法？？
   绑定事件到方法(evnet handler)
   - 事件：字符串
     - '<double-1>'
     - '<return>'
4. config方法？？

***** entry  文本框
#+begin_latex
\begin{minted}{py}
self.dirn = entry(self.top, width=50,
                  textvariable=self.cwd)
self.dirn.bind('<return>', self.dols)
self.dirn.pack()
\end{minted}
#+end_latex

***** buttom group
#+begin_latex
\begin{minted}{py}
self.bfm = frame(self.top)
self.clr = button(self.bfm, text='clear',
                  command=self.clrdir,
                  activeforeground='white',
                  activebackground='blue')
self.ls = button(self.bfm, text='list directory',
                 command=self.dols,
                 activeforeground='white',
                 activebackground='green')
self.quit = button(self.bfm, text='quit',
                   command=self.top.quit,
                   activeforeground='white',
                   activebackground='red')
self.clr.pack(side=left)
self.ls.pack(side=left)
self.quit.pack(side=left)
self.bfm.pack()
\end{minted}
#+end_latex

***** method
#+begin_latex
  \begin{minted}{py}
      def dols(self, ev=none):
          error = ''
          tdir = self.cwd.get()
          if not tdir:
              tdir = os.curdir

          if not os.path.exists(tdir):
              error = tdir + ': no such file'
          elif not os.path.isdir(tdir):
              error = tdir + ': not a directory'

          if error:
              self.cwd.set(error)
              self.top.update()
              sleep(2)
              if not (hasattr(self, 'last') and self.last):
                  self.last = os.curdir
              self.cwd.set(self.last)
              self.dirs.config(selectbackground='lightskyblue')
              self.top.update()
              return

          self.cwd.set('fetching directory contents...')
          self.top.update()
          dirlist = os.listdir(tdir)
          dirlist.sort()
          os.chdir(tdir)
          self.dir1.config(text=os.getcwd())
          self.dirs.delete(0, end)

          self.dirs.insert(end, os.pardir)
          for eachfile in dirlist:
              self.dirs.insert(end, eachfile)
          self.cwd.set(os.curdir)
          self.dirs.config(selectbackground='lightskyblue')

  \end{minted}
#+end_latex

****** os 方法和属性                                                :os:
+ os.curdir
+ os.pardir
+ os.getwd()
+ os.listdir()
+ os.path.exists(s)
+ os.path.isdir(s)

****** entry方法
+ config
+ insert
+ delete

****** hasattri
*** Emacs 正则表达式                                                :emacs:
#+begin_example
+ "^" 匹配行首
+ "\^" (error "invalid modifier in string")
+ "\\^" 匹配"^"本身

+ "*" 表重复匹配*本身
+ "\*" 匹配*本身
+ "\\*"
+ "^* " 匹配以"* "开头的行

+ ()  匹配括号本身
+ \(\) 表索引
+ \\(\\) 无效

+ [0-9] 一位数字
+ [0-9]+ 多位数字
+ [0-9]* 一个或多位数字

+ . 匹配任意字符
+ \. 匹配句点
+ \\. 无效

+ \  无效
+ \\ 匹配反斜线

+ [] 表分组
+ \[ 匹配左中括号


#+end_example

*** Evernote 整理技巧
1. Evernote PC客户端(Ubuntu Wine) 生成目录，并寻出为HTML
2. Emacs打开HTML文件(w3m-find-file)
3. ORG拷贝 org-w3m-copy
4. 正则替换

#+BEGIN_EXAMPLE
 1. [[evernote:///view/11551545/s52/3002d5ec-ab74-4c3d-871e-7c07514daf80/3002d5ec-ab74-4c3d-871e-7c07514daf80/][string::npos - C++ Reference]]
https://app.yinxiang.com/shard/s52/nl/11551545/3002d5ec-ab74-4c3d-871e-7c07514daf80?title=string%3A%3Anpos%20-%20C%2B%2B%20Reference
#+END_EXAMPLE

*观察规律，正则替换*
#+BEGIN_EXAMPLE
  ^[0-9, ]*\..+view/\(.*\)/\(.*\)/\(.*\)/.*/\]\[\(.*\)\]\]$
  ,***** [[https://app.yinxiang.com/shard/\2/nl/\1/\3?title=\4][\4]]
#+END_EXAMPLE

*** foobar使用
+ Wine安装
+ 启动
  - 命令行方式，有问题
  - 链接，有问题
  - *直接在目录下双击图标，没问题* ，可能和启动目录有关

*** Particle Filter                                             :algorithm:

*** Emacs Narrowing                                                 :emacs:
+ 前缀 *c-x n*
c-x n n  narrow-to-region
c-x n w

|---------+------------------+--------------------------------------------------|
| c-x n n | narrow-to-region | narrow down to between point and mark            |
| c-x n w | widen            | widen to make the entire buffer accessible again |
| c-x n p | narrow-to-page   | narrow down to the current page                  |
| c-x n d | narrow-to-defun  | narrow down to the current defun                 |
|---------+------------------+--------------------------------------------------|


the narrowing commands are *disabledcommands* because they can confuse
users who are unfamiliar with narrowing. you can enable them by using
command *‘enable-command’* or by putting the following emacslisp code
in your init file:

#+begin_src emacs-lisp
  (put 'narrow-to-defun  'disabled nil)
  (put 'narrow-to-page   'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+end_src

*** Minted配置选项                                                  :latex:
1. mathescape
   [[/home/ben/tiger/figures/scrot/5970lur.png]]
2. gobble
   [[/home/ben/tiger/figures/scrot/5970yex.png]]
3. frame
   [[/home/ben/tiger/figures/scrot/5970koa.png]]
4. 其它
   [[/home/ben/tiger/figures/scrot/5970xyg.png]]

   [[/home/ben/tiger/figures/scrot/5970-8m.png]]


#+begin_latex
\begin{minted}[frame=single]{cpp}
hello world.
\end{minted}
#+end_latex

*** booterloader                                                      :arm:
**** what's  next

[[/home/ben/tiger/figures/scrot/5970lht.png]]

**** bootloader 设计蓝图
***** bootloader作用
bootloader -> kernel -> root filesystem

引导内核(助推)
***** bootloader设计方法
+ *模仿*

+ 设计从模仿开始。

+ *模仿经典*

***** uboot快速体验
[[/home/ben/tiger/figures/scrot/5970yrz.png]]

+ 支持多种处理器
+ 支持多种嵌入式操作系统

***** u-boot代码工程建立
1. 自主模式
   uboot自动引导内核

2. 开发模式
   uboot命令 help

***** 建立uboot代码分析工程
*sourceinsight* 阅读代码软件

uboot源码


~/wally/journal/project/embeddedlinux/uboot

**** arm处理器启动流程

s3c2440 s3c6410 s5pv210
***** 2440
****** 启动方式
1. nor flash(2m)
2. nand flash(256m)
   - uboot
   - kernel
   - filesystem
****** 地址布局

手册： nand flash *memory mapping*

*处理器上电，从0地址处取第一条指令*

nand flash 没有统一编址
+ bootram(4k) 映射nandflash前4k, steppingstone
+ 其它部分复制到内存中

[[/home/ben/tiger/figures/scrot/5970lbf.png]]

[[/home/ben/tiger/figures/scrot/5970yll.png]]

内存起始地址： 0x3000, 0000

****** 启动流程
***** 6410
****** 启动方式
手册： booting

[[/home/ben/tiger/figures/scrot/5970_vr.png]]

1. srom(nor)
2. onenand
3. modem
4. irom(internal rom)
   1) nand
   2) sd/mmc

****** 地址布局
[[/home/ben/tiger/figures/scrot/5970m6x.png]]

1. irom 0x0800, 0000
2. dram 0x5000, 0000
3. 0地址： booting device region by xom setting
   - mirrored region（镜像区域，映射irom、dram设备）

****** 启动流程
s3c6410——internal_rom_booting.pdf

[[/home/ben/tiger/figures/scrot/5970-db.png]]

***** 210

****** 启动模式
1. irom
   1. sd
2. 串口等

****** 地址映射
[[/home/ben/tiger/figures/scrot/5970loh.png]]

1. irom
2. 0 address
3. dram

****** 启动过程
[[/home/ben/tiger/figures/scrot/5970yyn.png]]

irom厂商固化

bl1 : bootloader 1,  max 16kb
bl2 : bootloader 2,  max 80kb

sram？？
sdram内存

** 2015/11/11
*** 表、栈和队列                                                :algorithm:
最基本的3种数据结构， *每一个有意义的程序都将明晰地至少使用一个这样的
数据结构*
**** 抽象数据类型
抽象数据类型(abstract date type, *adt*)是带有一组操作的一些对象的集合。

抽象数据类型是数学的抽象：在adt的定义中根本没有提到这组操作是如何实现
的。

e.g. 表、集合、图
**** 表
***** 表adt
表adt： a_{0}, a_{1}, ..., a_{n-a}

表的大小(size)。

n=0, 空表(empty list)

a_{i} *后继* a_{i-1}; a_{i-1} *前驱* a_{i}

表的操作：
1. printlist
2. makeempty
3. find
4. insert
5. remove
6. findkth
***** 表的简单数组实现
vector类

1. printlist 线性时间
2. findkth 常数时间
3. insert/delete: o(n)
   1) 最坏的情况，在表头（位置0）插入删除元素，n
   2) 最好的情况，在表尾插入删除元素，o(1)
   3) 平均：线性时间

在许多情况，表是
1) 通过在 *末尾插入* 元素来 *建立* 的
2) 之后只有数组访问发生
这样，数组实现是适合和。

如果插入和删除都发生在表中的话，特别是前端的话，数组就不是一个好选择了。
***** 链表
为了避免插入和删除的线性开销 -> 表可以不连续存储。
[[/home/ben/tiger/figures/scrot/59702fs.png]]

1. printlist或find(x) 线性时间，但比数组要大
2. findkth(i) 以明显的遍历链表实现o(i)
   - 因此，调用findkth常常以排序（按i）方式进行
***** stl
standard template library标准模板库。 集合(collection) 或 容器
(container)

表adt的两种流行的实现
1. vector
   1) 优势： 在常量时间里是可索引的
   2) 缺点： 插入新项或者删除已有项的代价是高昂的，除非是在末端发生
2. list 双向链表
   1) 优点： 变化发生位置已知的话，插入新项和删除已有项的代价是很小的
   2) 缺点： 不容易索引

两者在查找时的效率都是很低的。

方法：
1. 公共的方法（所有stl）
   + int size() const
   + void clear()
   + bool empty
2. 常量时间内在末尾插入或者删除项
   + void push_back(const object& x)
   + void pop_back()
3. 在常量时间内访问前端的项
   + const object& back() const
   + const object& front() const
4. 双向链表list特有的，对前端高效地改变
   + void push_front(const object & x): 在list的前端加x
   + void pop_front(): 在list对象的前端删除对象
5. vector特有的方法
   + object& operator[] (int idx)
   + object& at(int idx)
   + int capacity() const
   + void reserve(int newcapacity): 设定新的容量
***** 迭代器
对于在表中插入删除的操作需要 *位置标记*,  -> 内置类型 *iterator* 给出
位置。

问题
1) 如何得到迭代器
2) 迭代器可以执行什么操作（方法）
3) 哪些表adt方法需要迭代器作为形参

****** 获得迭代器
+ iterator begin()
+ iterator end()  // 返回 *边界之外*

****** 迭代器方法
+ itr++ 和 ++itr
+ *itr
+ == 和 ！=

#+begin_latex
\begin{minted}[frame=single, mathescape]{cpp}
for(vector<int>::iterator itr = v.begin(); itr != v.end; ++itr){
}
\end{minted}
#+end_latex

或

#+begin_latex
\begin{minted}[frame=single, mathescape]{cpp}
vector<int>::iterator itr = v.begin()
while(itr != v.end()){
    cout << *itr++ << endl;
}
\end{minted}
#+end_latex

注：
- 后置自增运算符(++)优先级高于解引用(*)运算符，
- 后置自增运算符(++)表达式的返回值为原值，副作用是加1

****** 需要迭代器的容器操作
+ iterator insert(iterator pos, const object& x)
  - 添加x到表中迭代器pos所指向的位置之前的位置
  - 对于list是常量时间，对于vector不是
  - 返回值是一个指向插入位置的迭代器
+ iterator erase(iterator pos)
  - 删除迭代器所给位置的对象
  - 对于list是常量时间，对于vector不是
  - 返回值是调用之前pos所指向元素的下一个元素的位置，这个操作使pos失效
+ iterator erase(iterator start,  iterator end)


表adt的通用函数模板
[[/home/ben/tiger/figures/scrot/5970dqy.png]]

****** const_iterator
+ iterator begin()
+ const_iterator begin() const
+ iterator end()
+ const_iterator end() const

方法的定常性(后置const修饰符)是标号(函数签名)的一部分。

***** 向量实现
1. 数组的特性
   1) 数组就是指向一块内存的指针变量
   2) 内存块可以使用new[]来分配，相应地必须使用delete[]来释放
   3) 内在块的大小不能改变（但是可以定义一个新的具有更大内存块的数组，
      并且用原来的数组进行初始化）
2. vector需求分析
   1) 存储基本数组和数组容量
   2) 三大函数
      - 复制构造函数和operator=深复制
      - 析构函数回收基本数组
   3) resize改变大小，reserve改变容量
      - 为新的数组分配一块新的内存块
      - 复制旧内存块到新的内存块
      - 释放旧的内存块
   4) operator[]
      - 访问函数
      - 修改函数
   5) size, empty, clear, back, pop_back, push_back(调用reserve增大容
      量)
   6) 支持嵌套的iterator和const_iterator类型，和begin和end方法

#+begin_latex
\begin{minted}[frame=single, mathescape]{cpp}
#ifndef list_h
#define list_h

template<typename object>
class vector
{
public:
  explicit vector(int initsize = 0)
    : thesize(initsize), thecapacity(initsize+spare_capacity)
  {
    objects = new object[thecapacity];
  }

  vector(const vector& rhs) : objects(null) // null在<stddef.h>中定义
  {
    operator=(rhs);
  }
  ~vector(){delete[] objects;}

  const vector& operator= (const vector& rhs){
    if(this != &rhs){		//？？？
      delete[] objects;
      thesize = rhs.size();
      thecapacity = rhs.thecapacity;

      objects = new object[capacity()];
      for(int k=0; k<size(); k++) //
	objects[k] = rhs.objects[k];
    }
    return *this;		// ？？？
  }

  void resize(int newsize){
    if(newsize > thecapacity)
      reserve(newsize*2+1);
    thesize = newsize;
  }

  void reserve(int newcapacity){
    if(newcapacity < thesize)
      return;

    object* oldarray = objects;

    objects = new object[newcapacity];
    for(int k=0; k<thesize; k++)
      objects[k] = oldarray[k];

    thecapacity = newcapacity;

    delete[] oldarray;
  }

  object& operator[](int index){
    return objects[index];
  }

  const object& operator[](int index) const{
    return objects[index];
  }

  bool empty() const{
    return size() = 0;
  }

  int size() const{
    return thesize;
  }

  int capacity() const{
    return thecapacity;
  }

  void push_back(const object& x){
    if(thesize == thecapacity)
      reserve(2*thecapacity+1);
    objects[thesize++] = x;
  }

  void pop_back(){
    thesize--;
  }

  const object& back()const{
    return objects[thesize-1];
  }

  typedef object* iterator;	// 迭代器是指针
  typedef const object* const_iterator;

  iterator begin(){
    return &objects[0];
  }

  const_iterator begin() const{
    return &objects[0];
  }
  iterator end(){
    return &objects[size()];
  }
  const_iterator end() const{
    return &objects[size()];
  }

  enum{spare_capacity = 16};	// 枚举变量格式与分号




private:
  int thesize;
  int thecapacity;
  object* objects;
};

#endif

\end{minted}
#+end_latex

**** 栈
**** 队列
*** 写论文摘要，或者说写论文目标以及论文结构
*** rhs lhs                                                           :cpp:
lhs指的是==运算符左边的操作数 left hand side
rhs指的是==运算符右边的操作数 right hand side
运算符重载时常用
*** auto关键字                                                        :cpp:
有些高级特性知道即可，不需用完全掌握。

c++11中引入的auto主要有两种用途：
+ *自动类型推断*
+ *返回值占位*

auto在c++98中的标识临时变量的语义，由于使用极少且多余，在c++11中已被删
除。前后两个标准的auto，完全是两个概念。

*** C++ 匿名函数                                                      :cpp:
http://blog.csdn.net/augusdi/article/details/11773943

c++11提供了对匿名函数的支持,称为lambda函数(也叫lambda表达式). lambda表
达式具体形式如下:
*[capture](parameters)->return-type{body}*

如果没有参数,空的圆括号()可以省略.返回值也可以省略,如果函数体只由一条
return语句组成或返回类型为void的话.形如:
*[capture](parameters){body}*

*** ruby gem(类似pip)

*RubyGems is a sophisticated package manager for Ruby.*

+ Usage:
  - gem -h/--help
  - gem -v/--version
  - gem command [arguments...] [options...]
+ Examples:
  - gem install rake
  - gem list --local
  - gem build package.gemspec
  - gem help install
*** PID
PID调节器。工程上常常用在闭环系统中加入PID环节，对系统的传递函数进行修
正，以快速的跟踪变化，消除稳态误差。

PID调节器中的P为比例环节，起放大作用。I为积分环节，可以消灭稳态误差。D
为微分环节，可以加快系统的反映。

直流电机中加入PID调节器，可以实现快速启动。当系统中突发干扰、负载变化
或者使用者主动调速是，PID环节可以帮助电机缩减过渡时间、进入新的稳定状
态。
*** ant
+ wiki: http://en.wikipedia.org/wiki/Apache_Ant
+ tutorial: http://ideoplex.com/focus/java#ant
+ official page: http://ant.apache.org/

**** overview
Apache Ant is a Java library and command-line tool that help building
software.

***** what
Apache Ant is a software tool for automating software build
processes.(*like make*) It was a replacement for the *unix make* build
tool, and was created due to a number of problems with the unix make.

***** language
It is similar to Make but is *implemented using the Java language*,
requires the Java platform, and is best suited to building Java
projects.

***** vs make
The most immediately noticeable difference between Ant and Make is
that *Ant uses XML* to describe the build process and its
dependencies, whereas Make uses Makefile format.

By default the XML file is named *build.xml*.
***** license
Ant is an Apache project. It is open source software, and is released
under the *Apache License*.
**** Install
+ source code: need to configure java, so just quit
+ apt

*** gazebo tutorial
Note: 用ROS中的gazebo
**** Run Gazebo
1. run
   + $ gazebo
   + $ gzserver    # run the server
   + $ gzclient    # run the graphical client
   + rosrun gazebo_ros gazebo/gzserver/gzclient

2. world file location :
   + /usr/share/gazebo-<version>/worlds

**** Gazebo Components
1. World Files
   + contains all elemens in a simulation
     - robots
     - lights
     - sensors
     - static objectx
   + formatted using SDF(Simulation Description Format)

2. Model Files
   + SDF formatted
   + <model> ... </model>
   + included in a world fie using
     #+BEGIN_EXAMPLE
       <include>
           <uri>model://model_file_name</uri>
       </include>
     #+END_EXAMPLE
     - uri: Uniform Resource Identifier
   + online database:http://bitbucket.org/osrf/gazebo_models
   + inserted at runtime

3. Environment Variables
   + source /usr/share/gazebo-<version>/setup.sh
   + source first and then changed if neccessay

4. Gazebo Server
   + gzserver <world_filename>
     - absolute path
     - relative to the current directory
     - relative to $GAZEBO_RESOURCE_PATH (source first)
       - default: /usr/share/gazebo-2.2:/usr/share/gazebo_models
       - e.g. gzserver worlds/empty.world

5. Graphical Client
   + $ gzclient
6. Plugins
   + Plugins provide a simple and conventient mechanism to interface
     with Gazebo
   + loaded on the command line
     - $ gzserver -s <plugin_filename> <world_file>
     - $ gzclient -g <plugin_filename>
   + or specified in a world/model file

**** Gazebo Architecture
1. introduction
   + distributed architecture with separated libraries for
     - physics simulation
     - rendering
     - user interface
     - communication
     - sensor generation
   + two executable
     - a server gzserver
     - a client gzclient

2. Communication library
   + Google Protobuf for message serialization
   + boost::ASIO for transport mechanism

3. System
   1) Gazebo Master
      + a topic name server
      + namelookup
      + topic management
   2) Communication library
      + support only publish/subscribe
   3) Physics library
   4) Rendering library
   5) Sensor generation
   6) GUI
   7) Plugins

**** Capture screenshot
+ tool button on toolbar
+ saved to ~/.gazebo/pictures with a timestamped filename

**** Model Structure and requirements
1. Overview
   + Gazebo is able to *dynamically load models into simulation*
     - programmatically
     - though GUI
   + Model define a physical entity with
     - dynamic
     - kinematci
     - visual properties
     - plugin

2. The Model Database Repository
   + $ hg clone https://bitbucket.org/osrf/gazebo_models
   + download through browser

3. Model Database Structure
   \begin{figure}[ht]
   \centering
   \includegraphics[width=0.9\linewidth]{~/Wally/Journal/Figures/scrot/8517Dnu.png}
   \end{figure}

   1) Database config
      + database.config
      + xml file
      + contains
        - license information
        - name for the database
        - a list of all the valid models
      + only rereuired for the online repositories

        \begin{figure}[ht]
        \centering
        \includegraphics[width=0.7\linewidth]{~/Wally/Journal/Figures/scrot/8517Qx0.png}
        \end{figure}
   2) Model Config
      + Each model must have a model.config
      + <name> required
      + <sdf> required
      + <author> required
      + <description> required
      + <depend> optional,
      + <model> optional

        \begin{figure}[ht]
        \centering
        \includegraphics[width=0.5\linewidth]{~/Wally/Journal/Figures/scrot/8517C7D.png}
        \end{figure}
   3) Model SDF
   4) Plugins Directory
   5) Meshes Directory
   6) Material Directory
      + textures subdirectory for texture image
      + scriptes subdirectory for OGRE scripts

**** Make a model
1. Compoments of a SDF models
   1) links
      + collison
      + visual
      + inertial
      + sensor
   2) joints
   3) plugins

2. Building a Model
   1) Collect your meshes
      + Google's 3D wharehouse:
        http://sketchup.google.com/3dwarehouse/
      + diy
        - Blender
        - Sketchup
      + Format
        - STL
        - Collada(preferred)
      + Tips
        - move each mesh so that it is centered on the origin
        - Collada file allow you to attach materials ot the meshes
        - keep meshes simple
          - low polygon mesh for a collison element
          - higher polygon mesh for visual
          - use build-in shapes

   2) Make model SDF file
      #+BEGIN_SRC xml :tangle /home/ben/project/slam/gazebo/gazebotutorials/models/box/box.sdf
        <?xml version='1.0'?>
        <sdf version="1.4">
          <model name="my_model">
            <pose>0 0 0.5 0 0 0</pose>
            <static>true</static>
            <link name="link">
              <inertial>
                <mass>1.0</mass>
                <inertia>
                  <ixx>0.083</ixx>
                  <ixy>0.0</ixy>
                  <ixz>0.0</ixz>
                  <iyy>0.083</iyy>
                  <iyz>0.0</iyz>
                  <izz>0.083</izz>
                </inertia>
              </inertial>
              <collision name="collision">
                <geometry>
                  <box>
                    <size>1 1 1</size>
                  </box>
                </geometry>
              </collision>
              <visual name="visual">
                <geometry>
                  <box>
                    <size>1 1 1</size>
                  </box>
                </geometry>
              </visual>
            </link>
          </model>
        </sdf>
      #+END_SRC

   3) Add to the model SDF file
      + recommended order
        1) Add a link
        2) set the collision element
        3) set the visual element
        4) set the visual element
        5) Go to #1 until all links have been added
        6) add all joints if any
        7) add all plugins if any

**** Make a Mobile robot
1) mkdir
2) create model.config
   #+BEGIN_SRC xml :tangle /home/ben/.gazebo/models/my_robot/model.config :mkdirp yes
     <?xml version="1.0"?>
     <model>
       <name>My Robot</name>
       <version>1.0</version>
       <sdf version="1.4">model.sdf</sdf>

       <autor>
         <name>TigerDWong</name>
         <email>buaaben@163.com</email>
       </autor>

       <description>
         My awesome robot
       </description>
     </model>
   #+END_SRC
3) create sdf file
   #+BEGIN_SRC xml :tangle /home/ben/.gazebo/models/my_robot/model.sdf :mkdirp yes
     <?xml version="1.0"?>
     <sdf version="1.4">
       <model name="my_robot">
         <static>false</static>
         <link name="chassis">
           <pose>0 0 .1 0 0 0</pose>

           <collision name="collision">
             <geometry>
               <box>
                 <size>.4 .2 .1</size>
               </box>
             </geometry>
           </collision>

           <visual name="visual">
             <geometry>
               <box>
                 <size>.4 .2 .1</size>
               </box>
             </geometry>
           </visual>
           <collision name="caster_collision">
             <pose>-0.15 0 -0.05 0 0 0</pose>
             <geometry>
               <sphere>
                 <radius>.05</radius>
               </sphere>
             </geometry>

             <surface>
               <friction>
                 <ode>
                   <mu>0</mu>
                   <mu2>0</mu2>
                   <slip1>1.0</slip1>
                   <slip2>1.0</slip2>
                 </ode>
               </friction>
             </surface>
           </collision>

           <visual name="caster_visual">
             <pose>-0.15 0 -0.05 0 0 0</pose>
             <geometry>
               <sphere>
                 <radius>.05</radius>
               </sphere>
             </geometry>
           </visual>
         </link>
         <link name="left_wheel">
           <pose>0.1 0.13 0.1 0 1.5707 1.5707</pose>
           <collision name="collision">
             <geometry>
               <cylinder>
                 <radius>.1</radius>
                 <length>.05</length>
               </cylinder>
             </geometry>
           </collision>

           <visual name="visual">
             <geometry>
               <cylinder>
                 <radius>.1</radius>
                 <length>.05</length>
               </cylinder>
             </geometry>
           </visual>
         </link>
         <link name="right_wheel">
           <pose>0.1 -0.13 0.1 0 1.5707 1.5707</pose>
           <collision name="collision">
             <geometry>
               <cylinder>
                 <radius>.1</radius>
                 <length>.05</length>
               </cylinder>
             </geometry>
           </collision>

           <visual name="visual">
             <geometry>
               <cylinder>
                 <radius>.1</radius>
                 <length>.05</length>
               </cylinder>
             </geometry>
           </visual>
         </link>
         <joint type="revolute" name="left_wheel_hinge">
           <pose>0 0 -0.03 0 0 0</pose>
           <child>left_wheel</child>
           <parent>chassis</parent>
           <axis>
             <xyz>0 1 0</xyz>
           </axis>
         </joint>
         <joint type="revolute" name="right_wheel_hinge">
           <pose>0 0 0.03 0 0 0</pose>
           <child>right_wheel</child>
           <parent>chassis</parent>
           <axis>
             <xyz>0 1 0</xyz>
           </axis>
         </joint>
       </model>
     </sdf>
   #+END_SRC

**** Attach Meshes
+ Meshes can add realism to a model both visually and for sensor
+ <mesh>...</mesh>
+ Parent: Visual
+ <scale>x y z</scale>

**** Import Meshes
+ Gazebo uses a right-hand coordinate system, where +Z is
  up(veritical), +X is forward(into the screen), and +Y is to the
  left.
+ Steps
  1) Reduce complexity
  2) Center the font
  3) Scale the mesh
  4) export the mesh as a Collada file

****  Add a Sensor to a Robot
1. Adding a Laser
   #+BEGIN_SRC xml
     <include>
       <uri>model://hokuyo</uri>
       <pose>0.2 0 0.2 0 0 0</pose>
     </include>
     <joint name="hokuyo_joint" type="revolute">
       <child>hokuyo::link</child>
       <parent>chassis</parent>
       <axis>
         <xyz>0 0 1</xyz>
         <limit>
           <upper>0</upper>
           <lower>0</lower>
         </limit>
       </axis>
     </joint>
   #+END_SRC

**** Make s simple gripper
1. create a world file
   #+BEGIN_SRC xml :tangle /home/ben/.gazebo/worlds/simple_gripper_tutoial/gripper.world :mkdirp yes
     <?xml version="1.0"?>
     <sdf version="1.4">
       <world name="default">

         <!-- A ground plane -->
         <include>
           <uri>model://ground_plane</uri>
         </include>

         <!-- A global light source -->
         <include>
           <uri>model://sun</uri>
         </include>

         <include>
           <uri>model://my_gripper</uri>
         </include>

       </world>
     </sdf>
   #+END_SRC

2. create a model file
   #+BEGIN_SRC xml :tangle /home/ben/.gazebo/models/my_gripper/model.config :mkdirp yes
     <?xml version="1.0"?>
     <model>
       <name>My Gripper</name>
       <version>1.0</version>
       <sdf version="1.4">simple_gripper.sdf</sdf>

       <author>
         <name>TigerDWong</name>
         <email>buaaben@163.com</email>
       </author>

       <description>
         My awesome robot
       </description>
     </model>
   #+END_SRC

   #+BEGIN_SRC xml :tangle /home/ben/.gazebo/models/my_gripper/simple_gripper.sdf
     <?xml version="1.0"?>
     <sdf version="1.4">
       <model name="simple_gripper">
         <static>true</static>
         <link name="riser">
           <pose>-0.15 0.0 0.5 0 0 0</pose>
           <inertial>
             <pose>0 0 -0.5 0 0 0</pose>
             <inertia>
               <ixx>0.01</ixx>
               <ixy>0</ixy>
               <ixz>0</ixz>
               <iyy>0.01</iyy>
               <iyz>0</iyz>
               <izz>0.01</izz>
             </inertia>
             <mass>10.0</mass>
           </inertial>
           <collision name="collision">
             <geometry>
               <box>
                 <size>0.2 0.2 1.0</size>
               </box>
             </geometry>
           </collision>
           <visual name="visual">
             <geometry>
               <box>
                 <size>0.2 0.2 1.0</size>
               </box>
             </geometry>
           </visual>
         </link>
         <link name="palm">
           <pose>0.0 0.0 0.05 0 0 0</pose>
           <inertial>
             <inertia>
               <ixx>0.01</ixx>
               <ixy>0</ixy>
               <ixz>0</ixz>
               <iyy>0.01</iyy>
               <iyz>0</iyz>
               <izz>0.01</izz>
             </inertia>
             <mass>0.5</mass>
           </inertial>
           <collision name="collision">
             <geometry>
               <box>
                 <size>0.1 0.2 0.1</size>
               </box>
             </geometry>
           </collision>
           <visual name="visual">
             <geometry>
               <box>
                 <size>0.1 0.2 0.1</size>
               </box>
             </geometry>
             <material>
               <script>Gazebo/Red</script>
             </material>
           </visual>
         </link>
         <link name="left_finger">
           <pose>0.1 0.2 0.05 0 0 -0.78539</pose>
           <inertial>
             <inertia>
               <ixx>0.01</ixx>
               <ixy>0</ixy>
               <ixz>0</ixz>
               <iyy>0.01</iyy>
               <iyz>0</iyz>
               <izz>0.01</izz>
             </inertia>
             <mass>0.1</mass>
           </inertial>
           <collision name="collision">
             <geometry>
               <box>
                 <size>0.1 0.3 0.1</size>
               </box>
             </geometry>
           </collision>
           <visual name="visual">
             <geometry>
               <box>
                 <size>0.1 0.3 0.1</size>
               </box>
             </geometry>
             <material>
               <script>Gazebo/Blue</script>
             </material>
           </visual>
         </link>
         <link name="left_finger_tip">
           <pose>0.336 0.3 0.05 0 0 1.5707</pose>
           <inertial>
             <inertia>
               <ixx>0.01</ixx>
               <ixy>0</ixy>
               <ixz>0</ixz>
               <iyy>0.01</iyy>
               <iyz>0</iyz>
               <izz>0.01</izz>
             </inertia>
             <mass>0.1</mass>
           </inertial>
           <collision name="collision">
             <geometry>
               <box>
                 <size>0.1 0.2 0.1</size>
               </box>
             </geometry>
           </collision>
           <visual name="visual">
             <geometry>
               <box>
                 <size>0.1 0.2 0.1</size>
               </box>
             </geometry>
             <material>
               <script>Gazebo/Blue</script>
             </material>
           </visual>
         </link>
         <link name="right_finger">
           <pose>0.1 -0.2 0.05 0 0 .78539</pose>
           <inertial>
             <inertia>
               <ixx>0.01</ixx>
               <ixy>0</ixy>
               <ixz>0</ixz>
               <iyy>0.01</iyy>
               <iyz>0</iyz>
               <izz>0.01</izz>
             </inertia>
             <mass>0.1</mass>
           </inertial>
           <collision name="collision">
             <geometry>
               <box>
                 <size>0.1 0.3 0.1</size>
               </box>
             </geometry>
           </collision>
           <visual name="visual">
             <geometry>
               <box>
                 <size>0.1 0.3 0.1</size>
               </box>
             </geometry>
             <material>
               <script>Gazebo/Green</script>
             </material>
           </visual>
         </link>
         <link name="right_finger_tip">
           <pose>0.336 -0.3 0.05 0 0 1.5707</pose>
           <inertial>
             <inertia>
               <ixx>0.01</ixx>
               <ixy>0</ixy>
               <ixz>0</ixz>
               <iyy>0.01</iyy>
               <iyz>0</iyz>
               <izz>0.01</izz>
             </inertia>
             <mass>0.1</mass>
           </inertial>
           <collision name="collision">
             <geometry>
               <box>
                 <size>0.1 0.2 0.1</size>
               </box>
             </geometry>
           </collision>
           <visual name="visual">
             <geometry>
               <box>
                 <size>0.1 0.2 0.1</size>
               </box>
             </geometry>
             <material>
               <script>Gazebo/Green</script>
             </material>
           </visual>
         </link>

         <joint name="palm_left_finger" type="revolute">
           <pose>0 -0.15 0 0 0 0</pose>
           <child>left_finger</child>
           <parent>palm</parent>
           <axis>
             <limit>
               <lower>-0.4</lower>
               <upper>0.4</upper>
             </limit>
             <xyz>0 0 1</xyz>
           </axis>
         </joint>
         <joint name="left_finger_tip" type="revolute">
           <pose>0 0.1 0 0 0 0</pose>
           <child>left_finger_tip</child>
           <parent>left_finger</parent>
           <axis>
             <limit>
               <lower>-0.4</lower>
               <upper>0.4</upper>
             </limit>
             <xyz>0 0 1</xyz>
           </axis>
         </joint>
         <joint name="palm_right_finger" type="revolute">
           <pose>0 0.15 0 0 0 0</pose>
           <child>right_finger</child>
           <parent>palm</parent>
           <axis>
             <limit>
               <lower>-0.4</lower>
               <upper>0.4</upper>
             </limit>
             <xyz>0 0 1</xyz>
           </axis>
         </joint>
         <joint name="right_finger_tip" type="revolute">
           <pose>0 0.1 0 0 0 0</pose>
           <child>right_finger_tip</child>
           <parent>right_finger</parent>
           <axis>
             <limit>
               <lower>-0.4</lower>
               <upper>0.4</upper>
             </limit>
             <xyz>0 0 1</xyz>
           </axis>
         </joint>
         <joint name="palm_riser" type="prismatic">
           <child>palm</child>
           <parent>riser</parent>
           <axis>
             <limit>
               <lower>0</lower>
               <upper>0.9</upper>
             </limit>
             <xyz>0 0 1</xyz>
           </axis>
         </joint>
       </model>
     </sdf>
   #+END_SRC

**** Attach Gripper to Robot

** 2015/11/12
*** octave IDE
Matlab叫什么？ *矩阵实验室* ，在研究过程中是离不开矩阵的，所以，不能简
单地放弃Matlab，而用Python代替。

Linux可以不使用Matlab，而使用Octave作为替代。

*M-x run-octave*

|-------------+----------------------------|
| C-h a       | octave-lookfor             |
| C-h d       | octave-help                |
|-------------+----------------------------|
| C-c TAB C-a | octave-send-buffer         |
| C-c TAB C-b | octave-send-block          |
| C-c TAB C-f | octave-send-defun          |
| C-c TAB C-r | octave-send-region         |
| C-c TAB C-l | octave-send-line           |
| C-c TAB C-k | octave-kill-process        |
| C-c TAB C-q | octave-hide-process-buffer |
| C-c TAB C-s | octave-show-process-buffer |
| C-c TAB a   | octave-send-buffer         |
| C-c TAB b   | octave-send-block          |
| C-c TAB f   | octave-send-defun          |
| C-c TAB k   | octave-kill-process        |
| C-c TAB l   | octave-send-line           |
| C-c TAB q   | octave-hide-process-buffer |
| C-c TAB r   | octave-send-region         |
| C-c TAB s   | octave-show-process-buffer |
|-------------+----------------------------|

源码编译安装的octave默认没有安装帮助文档，所以在使用help函数以及
octave-help命令时会出现错误，解决的直接途径就是apt-get方式安装。

*** SQLite
**** what
SQLite是一个进程内的库，实现了 *数据库引擎*
+ 自给自足的
+ 零配置的
+ 无服务器的
+ 事务性的

**** why
+ 不需要单独的服务器进程
+ 零配置
+ 以文件形式存储
+ 轻量级，小于400k
+ 自给自足，不需要外部依赖
+ 支持SQL92的大多数查询语言的功能
+ 开源
+ 跨平台

**** SQLite命令
1. 数据定义语言 DDL
   + CREATE
   + ALTER
   + DROP
2. 数据操作语言
   + INSERT
   + UPDATE
   + DELETE
3. 数据查询语言
   + SELECT

**** 安装
1. apt-get
2. source code*

**** 常用命令
+ 以句点开头
+ 不以分号结束

e.g.
- .help
- .show
- .schema

**** SQLite语法
1. 不区分大小写
2. 注释 --开头或者/*COMMENT*/
3. SQL语句以关键字开头，分号结束

**** SQLite数据类型
1. 数据类
2. Affinity类型

**** 创建数据库
#+BEGIN_EXAMPLE
$ sqlite3 testDB.db
>.database  -- 查看数据库信息
>.quit -- 退出
$ sqlite3 testDB.db .dump > test.sql -- 保存到文本文件中
#+END_EXAMPLE

**** 附加数据库
sqlite>ATTATCH DATABASE 'DatabaseName' as 'AliasName';

main和temp是保留名称

**** 分离数据库
sqlite>DETACH DATABASE 'AliasName'

**** 创建表
#+BEGIN_EXAMPLE
CREATE TABLE database_name.table_name(
   column1 datatype  PRIMARY KEY(one or more columns),
   column2 datatype,
   column3 datatype,
   .....
   columnN datatype,
);
#+END_EXAMPLE

e.g.
#+BEGIN_EXAMPLE
sqlite> CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,  -- NOT NULL 用于约束字段不能为NULL
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
);

#+END_EXAMPLE

>.tables -- 列出表
>.schema COMPANY -- 查看表

**** 删除表
>DROP TABLE database_name.table_name;

**** INSERT
#+BEGIN_EXAMPLE
INSERT INTO TABLE_NAME (column1, column2, column3,...columnN) \
VALUES (value1, value2, value3,...valueN);
#+END_EXAMPLE

#+BEGIN_EXAMPLE
INSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);
#+END_EXAMPLE

#+BEGIN_EXAMPLE
INSERT INTO first_table_name [(column1, column2, ... columnN)]
   SELECT column1, column2, ...columnN
   FROM second_table_name
   [WHERE condition];
#+END_EXAMPLE

**** SELECT
SELECT column1, column2, columnN FROM table_name;

>.header on
>.mode column
>.width 10, 20, 10 -- 输出设置

*** 事务的属性
事务（Transaction）具有以下四个标准属性，通常根据首字母缩写为 ACID：

+ *原子性* （Atomicity）：确保工作单位内的所有操作都成功完成，否则，事
  务会在出现故障时终止，之前的操作也会回滚到以前的状态。
+ *一致性* （Consistency)：确保数据库在成功提交的事务上正确地改变状态。
+ *隔离性* （Isolation）：使事务操作相互独立和透明。
+ *持久性* （Durability）：确保已提交事务的结果或效果在系统发生故障的
  情况下仍然存在。

*** ROS arduino

**** IDE setup
1. install ros-indigo-rosserial and ros-indigo-rosserial-arduino
2. install *ros_lib* into the Arduino Environment
   *rosrun rosserial_arduino makelibrary <path/to/libraries>*

**** Hello World(as publisher)

***** src
#+begin_latex
\begin{minted}[frame=single, mathescape]{c}
#include <ros.h>
#include <std_msgs/String.h>

ros::NodeHandle nh;

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);

char hello[13] = "hello world!";

void setup()
{
  nh.initNode();
  nh.advertise(chatter);
}

void loop()
{
  str_msg.data = hello;
  chatter.publish(&str_msg);
  nh.spinOnce();
  delay(1000);
}
\end{minted}
#+end_latex

创建ROS节点需要做那些事情？
1. ros::NodeHandle
2. ros::NodeHandle::Method(advertise/subscribe) -> 绑定方法
   1) advertise <-> ros::Publisher
   2) subscribe <-> ros::Subscriber
3. Method implements(实现方法)
   1) *Publisher(topic, reference_to_msg)*
   2) *Subscriber<msg_type>(topic, &HandFunc)*

***** uploading
1. upload in Arduino IDE(easy to go)
2. upload in Emacs
   + ardpro.sh <PROJECT>
   + M-x compile make -k upload
     + <ros.h>找不到？ -> *在ros_lib目录下编写* 在其它目录下编写则有问
       题， /why?/  __暂时折衷笨方法__
     + 路径如何设置？ -> *makefile文件中缺省即可*

*在Arduino与ROS通信时下载程序会连接失败*

***** running
+ roscore&
+ *rosserial client*
  *rosrun rosserial_python serial_node /dev/ttyACM0*
+ rostopic echo chatter

**** Blink(as subscriber)
#+begin_latex
\begin{minted}[frame=single, mathescape]{c}
/*
 * rosserial Subscriber Example
 * Blinks an LED on callback
 */

#include <ros.h>
#include <std_msgs/Empty.h>

ros::NodeHandle nh;

boolean lit = false;
int ledPin = 13;

void messageCb( const std_msgs::Empty& toggle_msg){
  lit = !lit;
  if(lit)
    digitalWrite(ledPin, HIGH-digitalRead(13));   // blink the led
  else
    digitalWrite(ledPin, LOW);
}



ros::Subscriber<std_msgs::Empty> sub("toggle_led", &messageCb );

void setup()
{
  pinMode(13, OUTPUT);
  nh.initNode();
  nh.subscribe(sub);
}

void loop()
{
  nh.spinOnce();
  delay(1);
}
\end{minted}
#+end_latex

**** Using Time and TF
The rosserial_arduino package contains libraries for generating
timestamps on the Arduino which are synchronized with the PC/Tablet on
which the roscore instance is running.


#+begin_latex
\begin{minted}[frame=single, mathescape]{c}
/*
 * rosserial Time and TF Example
 * Publishes a transform at current time
*/


#include <ros.h>
#include <ros/time.h>
#include <tf/transform_broadcaster.h>

ros::NodeHandle nh;

geometry_msgs::TransformStamped t;
tf::TransformBroadcaster broadcaster;

char base_link[] = "/base_link";
char odom[] = "/odom";

void setup()
{
  nh.initNode();
  broadcaster.init(nh);
}

void loop()
{
  t.header.frame_id = odom;
  t.child_frame_id = base_link;
  t.transform.translation.x = 1.0;
  t.transform.rotation.x = 0.0;
  t.transform.rotation.y = 0.0;
  t.transform.rotation.z = 0.0;
  t.transform.rotation.w = 1.0;
  t.header.stamp = nh.now();
  broadcaster.sendTransform(t);
  nh.spinOnce();
  delay(10);
}
\end{minted}
#+end_latex

1. TF broadcaster

**** Temperature Sensor
1. sensor node
2. Arduino as IIC interface for ROS
3. Wire Library

**** Push Button
1. No pullup resistor(builtin)
2. debounce

**** CMake with rosserial_arduino
When you are doing large software projects, the Arduino IDE quickly
becomes unwieldly

1. catkin方式，更ROS化，不用将文件放到特定位置
   1) catkin_init_workspace
2. cpp而不是ino文件，IDE更友好



1. create package
   catkin_create_pkg helloworld rosserial_arduino rosserial_client std_msgs

2. source code
   in *firmware* sub-directory
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{cpp}
     #include <ros.h>
     #include <std_msgs/String.h>

     #include <Arduino.h>

     ros::NodeHandle nh;

     std_msgs::String str_msg;
     ros::Publisher chatter("chatter", &str_msg);

     char hello[] = "hello world!";

     void setup()
     {
       nh.initNode();
       nh.advertise(chatter);
     }

     void loop()
     {
       str_msg.data = hello;
       chatter.publish(&str_msg);
       nh.spinOnce();
       delay(1000);
     }

     \end{minted}
   #+end_latex

   + explicitly include a header file which contains all of the
     Arduino functions

3. CMakelists
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{cmake}
     cmake_minimum_required(VERSION 2.8.3)
     project(helloworld)

     find_package(catkin REQUIRED COMPONENTS
       rosserial_arduino
       rosserial_client
       std_msgs
     )

     catkin_package()

     rosserial_generate_ros_lib(
       PACKAGE rosserial_arduino
       SCRIPT make_libraries.py
       )

     rosserial_configure_client(
       DIRECTORY firmware
       TOOLCHAIN_FILE ${ROSSERIAL_ARDUINO_TOOLCHAIN}
       )

     rosserial_add_client_target(firmware hello ALL)
     rosserial_add_client_target(firmware hello-upload)


     include_directories(
       ${catkin_INCLUDE_DIRS}
     )
     \end{minted}
   #+end_latex

   + rosserial_generate_ros_lib:
   + rosserial_configure_client
   + rosserial_add_client_target

4. sub-project
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{cmake}
     cmake_minimum_required(VERSION 2.8.3)

     include_directories(${ROS_LIB_DIR})

     add_definitions(-DUSB_CON)

     generate_arduino_firmware(hello
       SRCS chatter.cpp ${ROS_LIB_DIR}/time.cpp
       BOARD uno
       PORT /dev/ttyACM0
       )
     \end{minted}
   #+end_latex

5. build
   catkin_make helloworld_firmware_hello  *注意命名*
   catkint_make helloworld_firmware_hello-upload

6. running
   rosrun rosserail_poython serial_node.py /dev/ttyACM0


*** Arduino boolean
*boolean* : true/false 区分大小写

操作
+ && logical and
+ || logical or
+ ! logical not
+ if()

*** Emacs F2 F2
<f2> <f2> runs the command 2C-two-columns, which is an interactive

(2C-two-columns &optional BUFFER)

Split current window vertically for two-column editing.
When called the first time, associates a buffer with the current
buffer in *two-column minor mode* (use C-h m once in the mode,
for details.).

It runs `2C-other-buffer-hook' in the new buffer.
When called again, restores the screen layout with the current buffer
first and the associated buffer to its right.

*默认行宽变乍* 关闭当前buffer重新打开文件即可。

***

** 2015/11/13

*** R语言
R is a *language* and *environment* for *statistical computing* and
*graphics*.

+ [[https://www.r-project.org/][R homepage]]
+ [[https://www.quora.com/How-can-I-become-a-data-scientist?redirected_qid=59455][Quora: How can I become a data scientist? ]]
+ [[http://www.zipfianacademy.com/blog/post/46864003608/a-practical-intro-to-data-science][A Practical Intro to Data Science]]
+ [[http://cos.name/][统计之都]]
+ [[http://www.itongji.cn/article/053121432013.html][R资料大全]]
+ [[http://www.biosino.org/R/R-doc/][R文档]]
+ [[http://www.r-bloggers.com/lang/chinese/1224][R精选十二宫]]
+ [[http://www.zhihu.com/question/20388507][R和Python的对比]]


有关概率统计、数据分析挖掘、机器学习等等，你不是要成为全才么？！

对于金融量化分析而言，MATLAB R Python这几个里面，感觉R最不好用，python
装个numpy scipy pandas 基本可以替代MATLAB+R，而Matlab在矩阵运算上，科
学计算库上，语法简洁性上R又没法比。。在专门统计领域，基本行业内都是用
SAS在跑。

R主要在学术界流行，python(numpy scipy)在工程方便比较实用。

Python是个综合语言（这里特指指CPython解释器），numpy scipy是数值计算的
扩展包，pandas是主要用来做数据处理（numpy依赖），sympy做符号计算（类似
mathematica？）

*** DONE 捕获系统音频
- State "DONE"       from "TODO"       [2015-11-13 五 21:01]

FOR: 德语录制

Google *streaming audio recorder*

Wondershare Streaming Audio Recorder，简洁易用

Evernote & BaiduYun（破解）

虚拟机中运行的不能录制真实系统中的音频

*** Deutsch
| xi                 | ch ig                     | China ich wenig mutig |
| s和sh之间轻微      | ig在词尾                  |                       |
| x(he 很重的送气音) | ch                        | Bach doch Buch auch   |
|                    | ch有元音字母a、o、u、au时 |                       |


xi
[[~/Wally/Journal/Figures/scrot/292818fO.png]]

ch 发音三个，查字典。
[[~/Wally/Journal/Figures/scrot/29281JqU.png]]

ch练习绕口令
[[~/Wally/Journal/Figures/scrot/29281W0a.png]]
from 3-3


[[~/Wally/Journal/Figures/scrot/29281j-g.png]]

from 3-4

| j(ri)     | j(yaot) y                             | Juli ja Yacht Yard                              |
|           | y在外来词中发y, 在元音前              |                                                 |
| l         | l ll                                  | Liebe laufen wollen voll                        |
| r 舌音he  | r rr                                  | Frankfurt rot schreiben                         |
|           |                                       | r在元音的后面可以很轻，但在元音前面一定要发出来 |
| m         | m mm                                  | Dom machen kommen dumm                          |
| n         | n nn                                  | Name neu kennen wenn                            |
| g         | ng                                    | Angst lang                                      |
| h         | h                                     | Halle Himmel                                    |
| ts(拼音c) | z c tz ts ds                          | Zahn牙齿 Celsius 摄氏度 sitzen坐                      |
|           | z只要出现在德语单词中发ts，不会发浊音 | Monatskarte abends                              |
| ks        | chs(s永远发清音) ks x                  | Wachsen(大组合为准) Fuchs links Text             |
| shp       | sp                                     | Sport Sprechen                                   |
|           | s在辅音前一般轻间，sp特殊sh，在词首    | 两个送气音，不好发，p发浊音，虽然标清音          |
| sht       | st 同上，在词首或重读音节中            | Student Stadt  d发浊音                              |



[[~/Wally/Journal/Figures/scrot/29281wIn.png]]

[[~/Wally/Journal/Figures/scrot/292819St.png]]

| kv         | qu           | Qualität Quelle |
|            | qu从来不分开 |                 |
| pf闭唇送气 | pf           | Apfel Pflanze   |
| tsh(拼音ch) | tsch         | Deutsch Quatsch |


1. 德语发音一般不标注音标，看到字母组合即可发音
   + ch, c, v开头需要查字典

2. 德语单词第一音节一般为重读音节

3. 元音发长音情形

   [[~/Wally/Journal/Figures/scrot/29281Kdz.png]]

4. 元音在双辅音或者两个以上辅音之前发短音

5. 元音字母e在词尾发轻音e

6. 浊辅音

   [[~/Wally/Journal/Figures/scrot/292818mC.png]]

7. s发音较多

   [[~/Wally/Journal/Figures/scrot/29281jFV.png]]
   [[~/Wally/Journal/Figures/scrot/29281wPb.png]]

8. v

   [[~/Wally/Journal/Figures/scrot/29281Kkn.png]]

9. ch

   [[~/Wally/Journal/Figures/scrot/29281Xut.png]]

10. y

    [[~/Wally/Journal/Figures/scrot/29281k4z.png]]

11. 其它

    [[~/Wally/Journal/Figures/scrot/29281jMJ.png]]

04-3 7.58 车间练习处止

** 2015/11/14
*** 数据库概述                                                   :database:
**** 数据存储方式
1. 人工管理
2. 文件系统
3. 数据库系统
**** 数据库范式
即数据库应该遵循的规则，关系数据库的范式
+ 第一范式(1nf)
+ 第二范式(2nf)
+ 第三范式(3nf)
+ bcn范式(bcnf)
**** sql语言
sql(structured query language)，结构化查询语言，数据库管理系统通过sql
语言来管理数据库中的数据。分三部分：
+ 数据定义语言(ddl)
+ 数据操作语言(dml)
+ 数据控制语言(dcl)
**** 为什么要使用mysql
+ 开源
+ 跨平台
+ 价格优势
+ 功能强大且使用方便
**** 常见的数据库系统
+ 甲骨文的 oracle
+ ibm 的 db2
+ 微软的 access 和 sql server
+ 开源的 postgresql
+ mysql
+ 文件数据库 sqlite
+ 内在数据库 hql
**** 小结
1. 数据存储方式变革
2. sql语言3类
3. 常用数据库以及选择
*** 什么是嵌入式Linux                                        :embededlinux:
嵌入式的应用主要是几个方向：
1. 系统开发：侧重开发环境搭建、内核原理、 交叉编译等；
2. 嵌入式linux应用开发：侧重linux应用编程、内核编译、系统调用；
3. 底层驱动开发：侧重嵌入式linux系统下的驱动开发、内核的深入分析。

不过初进门者主要往系统开发和应用开发发展，有了相关工作经验再进一步向底
层驱动靠。
1. linux理论知识
   1) 计算机基本理论；
   2) cpu体系结构；
   3) 内存管理；
   4) 文件系统；
   5) 进程调度；
   6) linux常用操作
2. linux驱动知识
   1) i2c驱动添加使用；
   2) spi驱动添加和读写
   3) io驱动
   4) dma驱动
   5) 中断源
   6) 竞争，并发，阻塞，异步，线程，内存，io，调试
   7) usb
   8) flash，文件系统
   9) 网卡驱动
   10) lcd驱动
3. linux编程知识（指令）
   1) 输入输出，文件,文件夹
   2) 字符串,数据结构，堆栈，链表，（查找）算法，二叉树
   3) 线程: 线程属性，线程同步（锁，信号量， 条件变量）
   4) 进程：守候进程，进程通信－管道，信号，systemv（消息，共享内存，信号灯），读写锁，套接字
   5) 网络：socket，ftp客户端，tftp客户端，http server，snmp命令
   6) 环境变量，库默认搜索路径，arm-linux-gcc库路径，设置搜索路径，编译流程，lds文件，内联汇编
   7) gcc ,ld, ar, ranlib, objdump, readelf,objcopy工具
   8) make makefile
   9) shell,perl
   10) 设备编程v4l，lcd和overlayer2，串口，并口， mixer, dsp, adc, ts，
       mouse等等
*** ARM IDE                                                           :arm:
**** emide
http://www.emide.org/
**** eclispe
http://blog.csdn.net/cxw3506/article/details/8292331

1. eclipse: eclipse的本身只是一个框架平台，但是众多插件的支持，使得
   eclipse拥有较好的灵活性。

2. cdt: cdt是eclipse用于扩展eclipse支持c/c++开发的插件。

3. zylin cdt: 支持eclipse用于嵌入式c/c++开发和远程调试的插件

4. yagarto:  yagarto整合了gnu arm的交叉编译工具链，是一个跨平台的 arm
   架构开发平台，是一个 eclipse 的插件。

5. j-link gdb server:  a jtag gdb debug agent run on host



**** arm
+ rvds
+ ads
+ arm ds development studio
**** keil uvision
**** 小结
arm ide使用eclispe
*** 回车与换行

**** 换行(Line Feed)
换行好理解，就是跳到下一行嘛

**** 回车(carriage return)

在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩
意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要
用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，
那么这个字符将丢失。

于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字
符。一个叫做“回车”，告诉打字机把打印头定位在左边界；另一个叫做“换
行”，告诉打字机把纸向下移一行。

这就是“换行”和“回车”的来历，从它们的英语名字上也可以看出一二。

后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，
一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现
了分歧。

**** 不同系统的回车与换行

#+BEGIN_EXAMPLE

#+END_EXAMPLE

**** 小结
1. 回车的来历
2. 不同系统中的使用的符号
3. 导致的问题

*** Linux下嵌入式开发工具                                   :embededsystem:
1. 编辑： emacs是不二之选
2. 编译： 51->sdcc， arm->gcc工具链
3. 烧录： 51->asem51, avr->avrdude, arduino->arduino ide, arm->openocd, dsp(ti)->ccs
4. 调试： 同上
5. 仿真： 暂时用不到
6. 电路设计： eagle

*** Eagle Tutorial                                                  :eagle:
**** eagle制板
+ http://www.eefocus.com/santiago/blog/11-09/230517_eeccb.html
+ http://www.51hei.com/bbs/dpj-31342-1.html


Eagle足够好用，但问题是目前国内的PCB厂商绝大多数并不支持eagle直接绘制
的.brd扩展文件（相当于protel中的.PCB文件），所以我们需要把eagle绘制好
的.brd文件转换成大多数protel厂商都熟知的gerber文件。

**** What is EAGLE?

+ 德国CadSoft公司的EDA软件
+ 软件小巧，功能齐全
+ 支持脚本程序和用户自定义语言ULP
+ 跨平台

**** 版本
+ 免费版
+ 标准版
+ 专业版
+ 最大支持64x64英寸、255个绘图层、16个信号层和14个电源层等

**** 电路设计流程
***** 创建元件库
****** 元件创建规则
+ Symbol满足信号流向，阅读习惯
+ Package遵从手册的尺寸、间距、排列顺序、高度
+ Device严格按照手册来分配PIN和PAD的关联关系
***** 原理图设计
****** 步骤
1. 环境参数设置
2. 放置图框
3. 封面设计
4. 系统框图
5. 放置元件
6. 原理图布线
7. 总线设计
8. ERC检查
9. 文件输出
****** 通用规则
+ 使用NET命令而不是WIRE命令进行连线
+ 一次性连接两个结点间的网络
+ 使用自动添加Junction符号完成交叉连接走线
+ 更可能多地对网络命名
+ 避免相互交叉的连接
+ 电源网路需要明确标注
+ 多页原理图使用交叉连接（XREF）
+ 对有规则的信号使用总线连接
****** 添加标
+ 禁止在Nets、Buses和Pins层添加标注，推荐在Info层添加
+ 对电路的某一模块做标注说明
+ 原理图中的跳线配置、地址设置、元件选择等需要添加说明
+ 特殊节点的信号幅度、频率、以及驱动能力等说明
+ 差分阻抗匹配、天线匹配等需要添加详细说明
+ 特殊元件需要添加描述
***** PCB设计
****** 步骤
1. PCB前期准备
2. 网络表导入
3. 栅格及层设置
4. PCB结构设计
5. PCB布局
6. PCB布线
7. 总线布线
8. 布线优化
9. 电源分割/敷铜
10. DRC检查
****** PCB结构
****** 元件布局规则
+ 设置合理的栅格：推荐10/20mil
+ 单面布局优先
+ 优先布局高度限制、位置限制、发热等元件
+ 规划模拟、数字、射频、功率电路元件布局区域
+ 模块化布局
+ 特殊元件预留布线、屏蔽空间（Memory，RF）
+ 考虑电路板装配空间
+ 布线均匀、疏密一致、美观
****** 布线基本原则
+ 设置合理栅格：推荐5mil布线
+ 禁止采用直角、锐角布线
+ 同一网络布线宽度相同
+ 遵循PCB设计规则（布线间距、长度、宽度、差分等）
+ 布线采用直线最佳，少用过孔
+ 禁止跨区域布线
+ 使用最短路径连接电源和地网络
+ 优先考虑对电源/地网络布线
+ 高频信号优先布线
+ 信号密集区域优先布线（BGA）
***** Gerber输出

**** 小结
1. 使用Eagle是没有问题的，当然使用AltuimDesigner也是没有问题的，实用为
   主

2. 电路设计流程
   1) 原理图
   2) PCB设计
   3) Gerber输出

*** TCL & Jim-TCL                                     :programming:openocd:

+ http://www.tcl.tk/
+ http://jim.tcl.tk

**** what is tcl? （工具命令语言）
tcl (tool command language) is a very powerful but easy to learn
dynamic programming language, suitable for a very wide range of uses,
including web and desktop applications, networking, administration,
testing and many more. open source and business-friendly, tcl is a
mature yet evolving language that is truly cross platform, easily
deployed and highly extensible.

tk is a graphical user interface toolkit that takes developing desktop
applications to a higher level than conventional approaches. tk is the
standard gui not only for tcl, but for many other dynamic languages,
and can produce rich, native applications that run unchanged across
windows, mac os x, linux and more.

小结：
1. 一门语言
2. 动态脚本
3. 可扩展
4. 开源
5. 平台独立
6. tk是基于tcl的图形界面开发工具包

补充：
1. tcl念作“踢叩” "tickle"
2. python的gui接口

**** jim-tcl

jim is an opensource small-footprint implementation of the tcl
programming language. it implements a large subset of tcl and adds new
features like references with garbage collection, closures, built-in
object oriented programming system, functional programming commands,
first-class arrays and utf-8 support. all this with a binary size of
about 100-200kb (depending upon selected options).

the jim core is very stable. jim passes over 3000 unit tests and many
tcl programs run unmodified. jim is highly modular with the possiblity
to configure many components as loadable modules, or omitted
entirely. a number of extensions are included with jim which may be
built as loadable modules.

jim cross compiles easily and is in use in many embedded
environments. it runs under many operating systems, including linux,
freebsd, qnx, ecos, windows (cygwin and mingw32).

jim has built-in command line editing for the interactive shell,
jimsh.

小结：
+ jim-tcl是tcl语言的实现
+ 开源
+ 在tcl之上增加了许多特性
  - 垃圾回收
  - 面向对象
  - utf-8
  - 函数式编程
+ 小巧
+ 稳定
+ 跨平台

**** tcl vs jimtcl

jim-tcl has far fewer features. jim-tcl is several dozens of .c adn .h
files and implements the basic tcl command set. in contrast: tcl 8.6
is a 4.2mb .zip ifle contraining 1540 files.

jim-tcl面向嵌入编程。

**** 小结
1. tcl是一门编程语言，了解即可，不用深入
2. jim-tcl是tcl语言的一个实现， *简洁，可以在应用在嵌入式开发中*

*** openocd                                                 :embededsystem:
+ http://openocd.org/
*open on-chip debugger*

**** 为什么使用openocd
http://blog.163.com/brave_smile_heart/blog/static/1872381712012619113640957/

以前是用rvds 的ide来烧写调试arm程序的，不过rvds虽然是集成化的
调试工具调试起来方便，但是有的时候只知其一，不知其二，只知道按部就班的
来点击按钮，忽略了一些本质性的东西。而且rvds还有一个不好的地方是它只能
在windows平台下运行，不支持linux os。为了便于学习linux，使用openocd会
是个不错的选择，可以学习gnu 汇编，makefile编写，工具链命令行使用。
如果这些命令搞熟悉了，你还可以利用qt 来做个自己的图形化界面烧写调试工
具。不过这只是个壳子而已，精髓在于openocd ，所以如果有时间你还可以分
析一下openocd的源码，因为它是开源的，开源的东西就是好，它可以满足你的
好奇心，虽然有些时候不是我们在玩代码而是代码在玩我们.

**** running

/usr/share/openocd/scripts目录下有对应接口(interface下)和芯片(target下)的
配置文件，尽量复用这些文件

openocd寻找配置文件的顺序
1) 当前目录
2) -s选项指定的目录
3) add_script_search_dir指定的目录
4) $home/.openocd
5) openocd脚本目录：$packagedir/scripts(/usr/share/openocd/scripts)


error 1: unknown param: -variant
point: samsung_s3c2440.cfg
方法： 删除

error 1：an adapter speed is not selected in the init script. insert a
call to adpter_khz or jtag_rclk to process
point: jlink.cfg
方法：按提示来，增加 adapter_khz 6000


normally, openocd starts running as a daemon(无交互后台程序).once
openocd starts running as a deamon, it waits for connections from
clients(*telnet*, *gdb*, others) and processes the commands issued
through those channels.

**** connecting
在建立了jlink识别arm，而且建立了telnet服务器端口号之后，通过talnet与
target建立连接

#+begin_src sh
telnet localhost 4444(telnet的端口号设置为4444)
#+end_src

**** openocd project configuration

you can often reuse some standard config files but need to write a few
new ones, probably a board.cfg file. for example, there may be
configuration files for your jtag adapter and target chips, but you
need a new board-specific config file giving access to your particular
flash chips. or you might need to write another target chip
configuration for a new chip built around the cortex m3 core.


*** eps                                                            :it:eps:
eps文件是封装的postscript（encapsulated postscript）格式。postscript
语言是adobe 公司设计用于向任何支持postscript语言的打印机打印文件的页
面 *描述语言* 。除了它是被优化用于纸张上打印文字和图像之外，它像basjc 语
言、c语言或任何其它编程语言一样。当你在 postscript打印机上工作并告诉
文字处理器（或任何其它的应用程序）打印页面时，计算机就会用postscript
语言编写一个程序描述该页面，并将这个程序传送给打印机。打印机实际上其
中装有一台功能齐全的计算机和postscript 语言解释器执行这个程序，将图形
画在内存中的虚拟纸张上，然后将其打印到纸上。

**** 小结
eps是一种 *矢量图片格式*


*** PDF提取矢量图片                                                   :pdf:

adobe专业版, 没有版权。

foxit pdf editor 也可。

可以利用pdf作为中介转换格式emf, wmf(矢量清晰格式)。

用途不多，毕竟图片多为 *位图*
1. 提取logo
2. 提取数学图形

** 2015/11/15
*** 标签云
标签云或文字云是关键词的视觉化描述，用于汇总用户生成的标签或一个网站的
文字内容。标签一般是独立的词汇，常常按字母顺序排列，其重要程度又能通过
改变字体大小或颜色来表现，所以标签云可以灵活地依照字序或热门程度来检索
一个标签。
+ [[https://zh.wikipedia.org/wiki/%E6%A0%87%E7%AD%BE%E4%BA%91][Wiki]]
+ [[
http://www.zhihu.com/question/21128950][知乎]]
+ http://worditout.com/ 这个网站很好

**** 小结
标签云： *关键词频率的可视化*

*** Atmel型号说明
Atmel ATmega系列芯片型号说明
ATMEGAXXX XX--XX XX
+ XXX =    8、16、48、128等芯片主型号
+ XX  =  “ P” 低电压、节能技术 ，  “ V”  1.8V-5.5V   不带“V”  2.7-5.5V ,      L   低频率
+ XX  =   20、10 代表时钟频率。
+ XX  =  规格信息：第一位代表封装 P：DIP封装， A：TQFP封装， M：MLF封装 第二位字母，表示应用级别。“C”：商业级，“I”：工业级（有铅）、“U”工业级（无铅）。

例如：ATmega48PV-10AU
代表：ATMEGA48  节能技术 低电压 时钟频率10  TQFP封装 工业级无

ATMEL ATtiny系列芯片型号说明
举例：ATtiny24-20SSU
其中ATtiny24为主型号
①、型号紧跟的字母，表示电压工作范围。带“V”：1.8-5.5V；若缺省，不带“V”：2.7-5.5V。
　　例：ATtiny24-20SSU，不带“V”表示工作电压为2.7-5.5V。
②、后缀的数字部分，表示支持的最高系统时钟。
　　例：ATtiny24-20SSU，“20”表示可支持最高为20MHZ的系统时钟。
③、后缀第一（第二）个字母，表示封装。“P”：DIP封装，“S”：SOP封装，“SS”：SSOP封装,“M”：MLF封装。
　　例：ATtiny24-20SSU，“SS”表示SSOP封装。
④、后缀最后一个字母，表示应用级别。“C”：商业级，“I”：工业级（有铅）、“U”工业级（无铅）。
　　例：ATtiny24-20SSU，“U”表示无铅工业级。ATtiny24-20SSI，“I”表示有铅工业级。

**** 小结
1. Atmel型号名称分为多个字段： ATMEGA+主型号+后缀+时钟频率+封装等
2. AVR单片机的型号有所改变，以上可能过时，仅做参考
*** 复制粘贴技巧（虚拟终端）

记得复制和粘贴技巧！

如果你正在使用鼠标，双击文件名(ls命令列出来的)，来复制它，然后按下鼠标
中键，粘贴文件名到命令行中。

**** 小结
*终端中双击复制中键粘贴*

*** Linux文件命名名规则
1. 隐藏文件
   以 “.” 字符开头的文件名是隐藏文件。这仅表示，ls 命令不能列出它们，
   用 ls -a 命令就可以了。

2. 大小写敏感
   文件名和命令名是大小写敏感的。文件名“File1”和“ﬁle1”是指两个不同
   的文件名。

3. 文件扩展名
   Linux 没有“文件扩展名”的概念，不像其它一些系统。可以用你喜欢的任
   何名字来给文件起名。文件内容或用途由其它方法来决定。虽然类 Unix 的
   操作系统，不用文件扩展名来决定文件的内容或用途，但是有些应用程序会。

4. 文件命名
   虽然 Linux 支持长文件名，文件名可能包含空格，标点符号，但标点符号仅
   限使用“.”，“-”，下划线。 *最重要的是，不要在文件名中使用空格。*
   如果你想表示词与词间的空格，用下划线字符来代替。过些时候，你会感激
   自己这样做。

**** 小结
1. 隐藏文件
2. 大小写敏感
3. 扩展名不必要
4. 不要有空格
*** Linux 文件系统
*在Linux中，没有秘密存在。*

1. /

   根目录，万物起源

2. /bin

   包含 Linux 内核，最初的 RMA 磁盘映像（系统启动时，由驱动程序所需），
   和启动加载程序。

   有趣的文件：
   + /boot/grub/grub.conf or menu.lst，被用来配置启动加载程序。
   + /boot/vmlinuz，Linux 内核。

3. /dev

   这是一个包含设备结点的特殊目录。“一切都是文件”，也使用于设备。在
   这个目录里，内核维护着它支持的设备。

4. /etc

   这个目录包含所有系统层面的配置文件。它也包含一系列的 shell 脚本，在
   系统启动时，这些脚本会运行每个系统服务。这个目录中的任何文件应该是
   可读的文本文件。有意思的文件：虽然/etc 目录中的任何文件都有趣，但这
   里只列出了一些我一直喜欢的文件：
   + /etc/crontab，定义自动运行的任务。
   + /etc/fstab，包含存储设备的列表，以及与他们相关的挂载点。
   + /etc/passwd，包含用户帐号列表。

5. /home

   在通常的配置环境下，系统会在/home 下，给每个用户分配一个目录。普通
   只能在他们自己的目录下创建文件。这个限制保护系统免受错误的用户活动
   破坏。

6. /lib

   包含核心系统程序所需的库文件。这些文件与 Windows 中的动态链接库相似。

7. /lost+found

   每个使用 Linux 文件系统的格式化分区或设备，例如 ext3文件系统，都会
   有这个目录。当部分恢复一个损坏的文件系统时，会用到这个目录。除非文
   件系统真正的损坏了，那么这个目录会是个空目录。

8. /media

   在现在的 Linux 系统中，/media 目录会包含可移除媒体设备的挂载点，例
   如 USB 驱动器，CD-ROMs 等等。这些设备连接到计算机之后，会自动地挂载
   到这个目录结点下。

9. /mnt

   在早些的 Linux 系统中，/mnt 目录包含可移除设备的挂载点。

10. /opt

    这个/opt 目录被用来安装“可选的”软件。这个主要用来存储可能安装在
    系统中的商业软件产品。

11. /proc

    这个/proc 目录很特殊。从存储在硬盘上的文件的意义上说，它不是真正的
    文件系统。反而，它是一个由 Linux 内核维护的虚拟文件系统。它所包含
    的文件是内核的窥视孔。这些文件是可读的，它们会告诉你内核是怎样监管
    计算机的。

12. /root

    root 帐户的家目录。

13. /sbin

    这个目录包含“系统”二进制文件。它们是完成重大系统任务的程序，通常
    为超级用户保留。

14. /tmp

    用来存储由各种程序创建的临时文件的地方。一些配置，导致系统每次重新
    启动时，都会清空这个目录。

15. /usr

    在 Linux 系统中，/usr 目录可能是最大的一个。它包含普通用户所需要的
    所有程序和文件。

16. /usr/bin

    /usr/bin 目录包含系统安装的可执行程序。通常，这个目录会包含许多程
    序。

17. /usr/lib

    包含由/usr/bin 目录中的程序所用的共享库。

18. /usr/local

    这个/usr/local 目录，是非系统发行版自带，却打算让系统使用的程序的
    安装目录。通常，由源码编译的程序会安装在/usr/local/bin 目录下。新
    安装的 Linux 系统中，会存在这个目录，但却是空目录，直到系统管理员
    放些东西到它里面。

19. /usr/sbin

    包含许多系统管理程序。

20. /usr/share

    /usr/share 目录包含许多由/usr/bin 目录中的程序使用的共享数据。其中
    包括像默认的配置文件，图标，桌面背景，音频文件等等。

21. /usr/share/doc

    大多数安装在系统中的软件包会包含一些文档。在/usr/share/doc 目录下，
    我们可以找到按照软件包分类的文档。

22. /var

    除了/tmp 和/home 目录之外，相对来说，目前我们看到的目录是静态的，
    这是说，它们的内容不会改变。/var 目录是可能需要改动的文件存储的地
    方。各种数据库，假脱机文件，用户邮件等等，都驻扎在这里。

23. /var/log

    这个/var/log 目录包含日志文件，各种系统活动的记录。这些文件非常重
    要，并且应该时时监测它们。其中最重要的一个文件是/var/log/messages。
    注意，为了系统安全，在一些系统中，你必须是超级用户才能查看这些日志
    文件。
*** Arduino型号
+ Arduino *Uno* 基本
+ Arduino Mini/Pro Mini  体积小
+ Arduino *Mega* 处理器强大，功能多
+ Arduino LilyPad 可穿戴的应用设计
+ Arduino Fio  无线项目设计
+ Arduino Pro 嵌入式应用设计

*** Nand Flash 和 Nor Flash的区别
**** 区别
NOR和NAND是现在市场上两种主要的非易失闪存技术。Intel于1988年首先开发出
NOR flash技术，彻底改变了原先由EPROM和EEPROM一统天下的局面。紧接着，
1989年，东芝公司发表了NAND flash结构，强调降低每比特的成本，更高的性能，
并且象磁盘一样可以通过接口轻松升级。但是经过了十多年之后，仍然有相当多
的硬件工程师分不清NOR和NAND闪存。

相“flash存储器”经常可以与相“NOR存储器”互换使用。许多业内人士也搞不
清楚NAND闪存技术相对于NOR技术的优越之处，因为大多数情况下闪存只是用来
存储少量的代码，这时NOR闪存更适合一些。而NAND则是高数据存储密度的理想
解决方案。

NOR的特点是芯片内执行(XIP, eXecute In Place)，这样应用程序可以直接在
flash闪存内运行，不必再把代码读到系统RAM中。NOR的传输效率很高，在1～
4MB的小容量时具有很高的成本效益，但是很低的写入和擦除速度大大影响了它
的性能。

NAND结构能提供极高的单元密度，可以达到高存储密度，并且写入和擦除的速度
也很快。应用NAND的困难在于flash的管理和需要特殊的系统接口。

**** 对比
***** 性能比较
flash闪存是非易失存储器，可以对称为块的存储器单元块进行擦写和再编程。
任何flash器件的写入操作只能在空或已擦除的单元内进行，所以大多数情况下，
在进行写入操作之前必须先执行擦除。NAND器件执行擦除操作是十分简单的，而
NOR则要求在进行擦除前先要将目标块内所有的位都写为0。

由于擦除NOR器件时是以64～128KB的块进行的，执行一个写入/擦除操作的时间
为5s，与此相反，擦除NAND器件是以8～32KB的块进行的，执行相同的操作最多
只需要4ms。

执行擦除时块尺寸的不同进一步拉大了NOR和NADN之间的性能差距，统计表明，
对于给定的一套写入操作(尤其是更新小文件时)，更多的擦除操作必须在基于
NOR的单元中进行。这样，当选择存储解决方案时，设计师必须权衡以下的各项
因素。

+ NOR的读速度比NAND稍快一些。
+ NAND的写入速度比NOR快很多。
+ NAND的4ms擦除速度远比NOR的5s快。
+ 大多数写入操作需要先进行擦除操作。
+ NAND的擦除单元更小，相应的擦除电路更少。

***** 接口差别
NOR flash带有SRAM接口，有足够的地址引脚来寻址，可以很容易地存取其内部
的每一个字节。

NAND器件使用复杂的I/O口来串行地存取数据，各个产品或厂商的方法可能各不
相同。8个引脚用来传送控制、地址和数据信息。

NAND读和写操作采用512字节的块，这一点有点像硬盘管理此类操作，很自然地，
基于NAND的存储器就可以取代硬盘或其他块设备。

***** 容量和成本
NAND flash的单元尺寸几乎是NOR器件的一半，由于生产过程更为简单，NAND结
构可以在给定的模具尺寸内提供更高的容量，也就相应地降低了价格。

NOR flash占据了容量为1～16MB闪存市场的大部分，而NAND flash只是用在8～
128MB的产品当中，这也说明NOR主要应用在代码存储介质中，NAND适合于数据存
储，NAND在CompactFlash、Secure Digital、PC Cards和MMC存储卡市场上所占
份额最大。

***** 可*性和耐用性
采用flahs介质时一个需要重点考虑的问题是可*性。对于需要扩展MTBF的系统来
说，Flash是非常合适的存储方案。可以从寿命(耐用性)、位交换和坏块处理三
个方面来比较NOR和NAND的可*性。

****** 寿命(耐用性)
在NAND闪存中每个块的最大擦写次数是一百万次，而NOR的擦写次数是十万次。
NAND存储器除了具有10比1的块擦除周期优势，典型的NAND块尺寸要比NOR器件小
8倍，每个NAND存储器块在给定的时间内的删除次数要少一些。

****** 位交换
所有flash器件都受位交换现象的困扰。在某些情况下(很少见，NAND发生的次数
要比NOR多)，一个比特位会发生反转或被报告反转了。

一位的变化可能不很明显，但是如果发生在一个关键文件上，这个小小的故障可
能导致系统停机。如果只是报告有问题，多读几次就可能解决了。

当然，如果这个位真的改变了，就必须采用错误探测/错误更正(EDC/ECC)算法。
位反转的问题更多见于NAND闪存，NAND的供应商建议使用NAND闪存的时候，同时
使用EDC/ECC算法。

这个问题对于用NAND存储多媒体信息时倒不是致命的。当然，如果用本地存储设
备来存储操作系统、配置文件或其他敏感信息时，必须使用EDC/ECC系统以确保
可*性。

****** 坏块处理
NAND器件中的坏块是随机分布的。以前也曾有过消除坏块的努力，但发现成品率
太低，代价太高，根本不划算。

NAND器件需要对介质进行初始化扫描以发现坏块，并将坏块标记为不可用。在已
制成的器件中，如果通过可*的方法不能进行这项处理，将导致高故障率。

***** 易于使用
可以非常直接地使用基于NOR的闪存，可以像其他存储器那样连接，并可以在上
面直接运行代码。

由于需要I/O接口，NAND要复杂得多。各种NAND器件的存取方法因厂家而异。

在使用NAND器件时，必须先写入驱动程序，才能继续执行其他操作。向NAND器件
写入信息需要相当的技巧，因为设计师绝不能向坏块写入，这就意味着在NAND器
件上自始至终都必须进行虚拟映射。

***** 软件支持
当讨论软件支持的时候，应该区别基本的读/写/擦操作和高一级的用于磁盘仿真
和闪存管理算法的软件，包括性能优化。

在NOR器件上运行代码不需要任何的软件支持，在NAND器件上进行同样操作时，
通常需要驱动程序，也就是内存技术驱动程序(MTD)，NAND和NOR器件在进行写入
和擦除操作时都需要MTD。

使用NOR器件时所需要的MTD要相对少一些，许多厂商都提供用于NOR器件的更高
级软件，这其中包括M-System的TrueFFS驱动，该驱动被Wind River System、
Microsoft、QNX Software System、Symbian和Intel等厂商所采用。

驱动还用于对DiskOnChip产品进行仿真和NAND闪存的管理，包括纠错、坏块处理
和损耗平衡。

**** 小结
1. Nor和Nand都是闪存(*flash*)技术。
2. Nor读快写慢容量小
3. Nand写快量

*** 参考文献标准格式

**** 参考文献类型
+ 专著［M］
+ 论文集［C］
+ 报纸文章［N］
+ 期刊文章［J］
+ 学位论文［D］
+ 报告［R］
+ 标准［S］
+ 专利［P］
+ 论文集中的析出文献［A］
**** 电子文献类型
+ 数据库［DB］
+ 计算机［CP］
+ 电子公告［EB］
**** 电子文献的载体类型
+ 互联网［OL］
+ 光盘［CD］
+ 磁带［MT］
+ 磁盘［DK］
**** 专著、论文集、学位论文、报告
*［序号］主要责任者.文献题名［文献类型标识］.出版地：出版者，出版年.起止页码（可选）*
［1］刘国钧，陈绍业.图书馆目录［M］.北京：高等教育出版社，1957.15-18.

**** 期刊文章
*［序号］主要责任者.文献题名［J］.刊名，年，卷（期）：起止页码*
［1］何龄修.读南明史［J］.中国史研究，1998,(3):167-173.
［2］OU J P，SOONG T T，et al.Recent advance in research on applications of passive energy dissipation systems［J］.Earthquack Eng,1997,38(3):358-361.

**** 论文集中的析出文献
*［序号］析出文献主要责任者.析出文献题名［A］.原文献主要责任者（可选）.原文献题名［C］.出版地：出版者，出版年.起止页码*
［7］钟文发.非线性规划在可燃毒物配置中的应用［A］.赵炜.运筹学的理论与应用——中国运筹学会第五届大会论文集［C］.西安：西安电子科技大学出版社，1996.468.

**** 报纸文章
*［序号］主要责任者.文献题名［N］.报纸名，出版日期（版次）*
［8］谢希德.创造学习的新思路［N］.人民日报，1998-12-25（10）.

**** 电子文献
*[文献类型/载体类型标识]：[J/OL]网上期刊、[EB/OL]网上电子公告、*
*[M/CD]光盘图书、[DB/OL]网上数据库、[DB/MT]磁带数据库*
［序号］主要责任者.电子文献题名［电子文献及载体类型标识］.电子文献的出版或获得地址，发表更新日期/引用日期
［12］王明亮.关于中国学术期刊标准化数据库系统工程的进展［EB/OL］.http://www.cajcd.edu.cn/pub/wml.html，1998-08-16/1998-10-01.
［8］万锦.中国大学学报文摘（1983-1993）.英文版［DB/CD］.北京：中国大百
*科全书出版社，1996.

*** 长镜头(时间较长的单一镜头)
长镜头是一种拍摄手法，它相对于蒙太奇拍摄方法。 这里的“长镜头”，指的
不是实体镜头外观的长短或是焦距，也不是摄影镜头距离拍摄物的远近，而是拍
摄之开机点与关机点的时间距，也就是影片的片段的长短。长镜头并没有绝对的
标准，是相对而言较长的单一镜头。通常用来表达导演的特定构想和审美情趣，
例如文场戏的演员内心描写、武打场面的真功夫等。

长镜头是指用比较长的时间（有的长达10分钟），对一个场景、一场戏进行连续
地拍摄，形成一个比较完整的镜头段落。顾名思义，就是在一段持续时间内连续
摄取的、占用胶片较长的镜头。这样命名主要是相对短镜头来对称的。摄影机从
一次开机到这次关机拍摄的内容为一个镜头，一般一个时间超过10秒的镜头称为
长镜头。长镜头能包容较多所需内容或成为一个蒙太奇句子（而不同于由若干短
镜头切换组接而成的蒙太奇句子）。其长度并无明确的、统一的规定。是相对于
‘短镜头’的讲法。

*** dae
+ 文件类型：Digital Asset Exchange File
+ 扩展名为.dae的文件是一个3D 图像文件。
+ 文件说明：

  3D interchange file format used for exchanging digital assets
  between multiple graphics programs; based on the COLLADA
  (COLLAborative Design Activity) XML schema.

  The COLLADA format was originally developed by Sony and is now
  jointly supported by Sony and the Khronos Group..dae

**** 打开.dae文件
+ Mac OS
  - Autodesk Maya with ColladaMaya plugin
  - DAZ Productions DAZ Studio
  - Luxology modo
  - GLC_Player
　
+ Windows
  - Autodesk AutoCAD
  - Autodesk 3dsMax with ColladaMax plugin
  - Autodesk Maya with ColladaMaya plugin
  - Bentley Systems Microstation
  - DAZ Productions DAZ Studio
  - Luxology modo
　
+ Linux
  - Autodesk Maya with ColladaMaya plugin
  - GLC_Player
  - Blender with Collada Plug-in for Blender

*** 正斜杠与反斜杠
+ 正斜杠，又称左斜杠，符号是 "/"
+ 反斜杠，也称右斜杠，符号是 "\"
+ 巧记： 斜的第一划为正，第二划为反
*** rst
http://blog.useasp.net/archive/2014/09/05/rst-file-restructuredtext-markup-syntax-quikstart.aspx
http://blog.useasp.net/archive/2014/09/06/the-shortcut-talbe-for-emacs-reStructuredText-mode-rst-mode.aspx

reStructuredText是一种轻量级的文本标记语言，直译为：重构建的文本，为
Python中Docutils项目的一部分。其一般保存的文件以.rst为后缀。在必要的时
候，.rst文件可以被转化成PDF或者HTML格式，也可以有Sphinx转化为LaTex,man
等格式，现在被广泛的用于程序的文档撰写。
**** 小结
1. rst: reStructuredText的缩写
2. 后缀名rst
3. 一种标记语言，和org-mode与markdown相似

*** fritzing
CLOCK: [2015-11-15 日 14:35]--[2015-11-15 日 14:44] =>  0:09
+ http://fritzing.org/home/
+ http://fritzing.org/learning/tutorials
+ [[http://blog.cavedu.com/raspberrypi-%E5%96%AE%E6%9D%BF%E9%9B%BB%E8%85%A6/%E5%9C%A8fritzing%E6%96%B0%E5%A2%9Eraspberry-pi%E6%A8%A1%E7%B5%84/][Fritzing中增加Raspberry]]模组
+ [[http://cnlearn.linksprite.com/?p=185#.VkgodI53OgA][使用Fritzing画电路]]



Fritzing is an open-source hardware initiative that makes electronics
accessible as a creative material for anyone. We offer a software
tool, a community website and services in the spirit of Processing and
Arduino, fostering a creative ecosystem that allows users to document
their prototypes, share them with others, teach electronics in a
classroom, and layout and manufacture professional pcbs.

**** 小结
1. Fritzing是一个开源电路设计软件
2. 为Arduino而生
3. 实物连接

*** 树莓派
CLOCK: [2015-11-15 日 13:36]--[2015-11-15 日 14:14] =>  0:38

**** Intro
树莓派（英语： *Raspberry Pi* ），是一款基于Linux系统的只有信用卡大小
的单板机电脑。
[[~/Wally/Journal/Figures/scrot/5070Ejz.png]]
1. 单板机电脑
2. 体积小： 85x54(B+)
3. 配置
   1) CPU
      ARM CortexA7-四核 900MHz
   2) 内存
      512(B+)
   3) 接口
      + USB: 4个，支持Hub
      + Ethernet
      + HDMI
      + GPIO： 通用IO，8+
      + UART
      + I2C
      + SPI: 2个带地
      + 电源引脚： 3.3v, 5v
      + HAT规格铺设

   4) 存储
      + SD
      + MMC
      + SDIO/MicroSD卡插槽
   5) 支持系统
      + Debian
      + ArchLinux
      + OpenWrt
      + *Raspbian* （自带系统，基于Linux）

   6) 型号
   A, A+, B,  B+, B2

**** 资源汇总

**** 安装ROS
1. 系统要求： Raspbian
2. 方式： 源码方式
**** 参考资料
1. [[https://zh.wikipedia.org/wiki/%E6%A0%91%E8%8E%93%E6%B4%BE][Wiki: 树莓派]]
2. [[http://post.smzdm.com/p/99210/][树莓派&OpenWrt]]
3. [[http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi][ROS wiki: Installing ROS indigo on the Paspberry Pi]]
4. [[http://blog.csdn.net/crazyquhezheng/article/details/43413231][blog 东方赤龙：树莓派编译安装完整版ROS]]
5. [[http://blog.csdn.net/hcx25909/article/category/1759051][blog 古月居： 树莓派Linux驱动学习系列（不多3篇，仅入门）]]

*** org-capture
**** shortkeys
|---------------+----------------------------------------------|
| C-c c         | org-capture                                  |
| C-c C-c       | org-capture-finalize                         |
| C-c C-w       | org-capture-refile                           |
| C-c C-k       | org-capture-kill                             |
|---------------+----------------------------------------------|
| C-u C-c c     | visit the target location                    |
| C-c C-c C-c c | jump to bookmark org-capture-last-stored     |
|               |                                              |
| C-O C-c c     | insert the capture at point in an Org buffer |
|               | region无效                                     |
|---------------+----------------------------------------------|
| C-c c C       | org-capture-templates                        |
|---------------+----------------------------------------------|

**** templates
#+begin_latex
  \begin{minted}[frame=single, mathescape]{lisp}
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
           "* %?\n %i\n %a")
          ("j" "Journal" entry (file+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n %i\n %a")
          ))                              ;模板

  ; 不浏览模板列表，直接插入capture
  (define-kye global-map "\C-cx"
    (lambda() (interactive (org-capture nil "x")))
  \end{minted}
#+end_latex

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
           "* %?\n %i\n %a")
          ("j" "Journal" entry (file+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n %i\n %a")
          ))                              ;模板

  ; 不浏览模板列表，直接插入capture
  (define-kye global-map "\C-cx"
    (lambda() (interactive (org-capture nil "x")))
#+END_SRC

1. templates elements
   1) keys
   2) description
   3) type
      - entry: an headline
      - item: a plain list, in the fisrt plain list at the target
        location
      - checkitem: a checkbox item
      - table-line: a new line in the first table at the target location
      - plain: Text to be inserted as it is
   4) target
      - (*file* "path/to/file")
      - (*id* "id of existing org entry")
      - (*file+headline* "path/to/file" "node headline")
      - (*file+datetree* "path/to/file")
        [[~/Wally/Journal/Figures/scrot/5070qOn.png]]
   5) template: creating the capture items
   6) properties

**** Templates expansion

[[~/Wally/Journal/Figures/scrot/50703Yt.png]]

**** settings
#+BEGIN_SRC emacs-lisp
    (require 'org-capture)
    (global-set-key "\C-cc" 'org-capture)
    (setq org-default-notes-file (expand-file-name "~/Wally/Journal/journal.org"))
    (setq
   org-capture-templates
          '(("t" "Todo" entry (file+headline "" "Tasks") "* TODO %?\n %t %i\n %a")
            ("i" "Ideas" item (file+headline "" "Ideas") "%?\n %t %i\n %a")
            ))
    (define-key global-map "\C-cCi"
      (lambda() (interactive) (org-capture nil "i")))
    (define

  -key global-map "\C-cCt"
      (lambda() (interactive) (org-capture nil "t")))
#+END_SRC

*** org-clock
计时
|-------------+---------------|
| C-c C-x C-i | org-clock-in  |
| C-c C-x C-o | org-clock-out |
| C-c C-x C-x | org-clock-in-last |
|-------------+-------------------|

#+BEGIN_EXAMPLE
CLOCK: [2015-11-15 日 13:34]--[2015-11-15 日 13:34] =>  0:00
#+END_EXAMPLE



*** git commit 内容
git commit journal 按一天下来表现得好坏进行评论
+ O
+ E
+ D
+ T
*** xmlns 命名空间机制
xmlns是 *XML Namespaces* 的缩写，中文名称是XML（标准通用标记语言的子集）
命名空间。

使用的规则为，首先定义命名空间xmlns:namespace-prefix="namespaceURI"。
Android中xml中的使用是：xmlns:前缀=http://schemas.android.com/apk/res/
应用程序包路径；然后使用的时候按格式：namespace-prefix（前缀）：属性

如果使用xmlns，则xmlns的定义必须放在最外层开始的的标记中

*当命名空间被定义之后，所有带有相同前缀的子元素都会与同一个命名空间相
关联, 避免XML解析器对xml解析时的发送名字冲突*

这就是使用xmlns的必要性。
当自定义的View有自己的属性的时候，就用到xmlns来定义一个命名空间。

*** shell cd !$
!$是列出并执行你的命令历史里面最近的一条记录，前面加上cd，除非最近的命
令跟目录相关，否则执行不了。

**** 小结
SHELL特殊符号不用刻意去记。

cd !$ 对我并没有太多用处。

*** gtags  Emacs IDE快捷键
|---------+----------------------------------|
| C-c g a | helm-gtags-tags-in-this-function |
| C-j     | helm-gtags-select                |
| C-c g . | helm-gtags-dwim                  |
| C-c g , | helm-gtags-pop-stack             |
| C-c g < | helm-gtags-previous-history      |
| C-c g > | helm-gtags-next-history          |
| C-c g f | helm-gtags-find-files            |
| C-c g s | helm-gtags-find-symbol           |
| C-c g r | helm-gtags-find-reference        |
|---------+----------------------------------|
*** elisp function
**** (message FORMAT-STRING &rest ARGS)
Display a message at the bottom of the screen.

**** (search-forward STRING &optional BOUND NOERROR COUNT)
Search forward from point for STRING.
Set point to the end of the occurrence found, and return point.

**** (search-backward STRING &optional BOUND NOERROR COUNT)
Search backward from point for STRING.
Set point to the beginning of the occurrence found, and return point.

**** (buffer-substring START END)
Return the contents of part of the current buffer as a string.
The two arguments START and END are character positions;
they can be in either order.

**** (substring STRING FROM &optional TO)

Return a new string whose contents are a substring of STRING.
The returned string consists of the characters between index FROM
(inclusive) and index TO (exclusive) of STRING.  FROM and TO are
zero-indexed: 0 means the first character of STRING.  Negative values
are counted from the end of STRING.  If TO is nil, the substring runs
to the end of STRING.

**** (call-process-shell-command COMMAND &optional INFILE BUFFER DISPLAY &rest ARGS)

Execute the shell command COMMAND synchronously in separate process.
The remaining arguments are optional.
The program's input comes from file INFILE (nil means `/dev/null').
Insert output in BUFFER before point; t means current buffer;
 nil for BUFFER means discard it; 0 means discard and don't wait.
BUFFER can also have the form (REAL-BUFFER STDERR-FILE); in that case,
REAL-BUFFER says what to do with standard output, as above,
while STDERR-FILE says what to do with standard error in the child.
STDERR-FILE may be nil (discard standard error output),
t (mix it with ordinary output), or a file name string.

**** (with-temp-buffer &rest BODY)
Create a temporary buffer, and evaluate BODY there like `progn'.

**** (string-match REGEXP STRING &optional START)
Return index of start of first match for REGEXP in STRING, or nil.
Matching ignores case if `case-fold-search' is non-nil.

**** (match-string NUM &optional STRING)
Return string of text matched by last search.
NUM specifies which parenthesized expression in the last regexp.
pp Value is nil if NUMth pair didn't match, or there were less than NUM pairs.
Zero means the entire text matched by the whole regexp or whole string.
STRING should be given if the last search was by `string-match' on STRING.

**** (length SEQUENCE)
Return the length of vector, list or string SEQUENCE.

**** (nth N LIST)
Return the Nth element of LIST.
N counts from zero.  If LIST is not that long, nil is returned.

**** (progn BODY...)
Eval BODY forms sequentially and return value of last one.

**** car & cdr
+ http://blog.csdn.net/yunjie2008/article/details/5684983


car是短语'Contents of the Address part of the Register'；
cdr（'could-er'）是短语'Contents of the Decrement part of the
Register'。这些短语说明了Lisp是在多么原始的机器上被开发的。

***** car
一个list的CAR是list中的第一个元素。(rose violet daisy buttercup)的CAR
就是rose。

执行下面的代码：

(car '(rose violet daisy buttercup))执行这个语句后，回显区将显示rose。
有一个更合理的car函数：first。

car并不从list移除第一个元素；它只返回第一个元素。car执行完后list并没有
发生改变。car是一个无害的函数（'non-destructive'）。


***** cdr
CDR是list中的其余部分，cdr函数返回list中首元素后面的其它元素。因此'(rose
violet daisy buttercup)的CDR部分是(violet daisy buttercup)。

对：
(cdr '(rose violet daisy buttercup))求值将在回显区显示(violet daisy
butercup)

cdr也不从列表中移除元素。

附带说明一下：在这个例子中list前面加了单引号。如果不加，Lisp解释器把
rose当作函数执行。在这个例子中我们并不需要那样。

cdr的一个更合理的名称是：rest。

#+BEGIN_SRC emacs-lisp

#+END_SRC

**** (point-min)
Return the minimum permissible value of point in the current buffer.
This is 1, unless narrowing (a buffer restriction) is in effect.

**** (point-max)
Return the maximum permissible value of point in the current buffer.
This is (1+ (buffer-size)), unless narrowing (a buffer restriction)
is in effect, in which case it is less.

**** (format STRING &rest OBJECTS)
Format a string out of a format-string and arguments.
The first argument is a format control string.
The other arguments are substituted into it to make the result, a string.
The format control string may contain %-sequences meaning to substitute
the next available argument:
%s means print a string argument.  Actually, prints any object, with `princ'.
%d means print as number in decimal (%o octal, %x hex).
%X is like %x, but uses upper case.
%e means print a number in exponential notation.
%f means print a number in decimal-point notation.
%g means print a number in exponential notation
  or decimal-point notation, whichever uses fewer characters.
%c means print a number as a single character.
%S means print any object as an s-expression (using `prin1').

**** (goto-char POSITION)
Set point to POSITION, a number or marker.

**** (set-mark POS)
Set this buffer's mark to POS.  Don't use this function!
That is to say, don't use this function unless you want
the user to see that the mark has moved, and you want the previous
mark position to be lost.

**** (delete-region START END)
Delete the text between START and END.
If called interactively, delete the region between point and mark.

**** (other-buffer &optional BUFFER VISIBLE-OK FRAME)
Return most recently selected buffer other than BUFFER.

**** (search-forward-regexp REGEXP &optional BOUND NOERROR COUNT)

Search forward from point for regular expression REGEXP.
Set point to the end of the occurrence found, and return point.
An optional second argument bounds the search; it is a buffer position.
The match found must not extend after that position.
Optional third argument, if t, means if fail just return nil (no error).
  If not nil and not t, move to limit of search and return nil.
Optional fourth argument is repeat count--search for successive occurrences.

**** (replace-string FROM-STRING TO-STRING &optional DELIMITED START END BACKWARD)
Replace occurrences of FROM-STRING with TO-STRING.
This function is usually the wrong thing to use in a Lisp program.
What you probably want is a loop like this:
  (while (search-forward FROM-STRING nil t)
    (replace-match TO-STRING nil t))

**** (while TEST BODY...)
If TEST yields non-nil, eval BODY... and repeat.

**** (org-current-level)
Return the level of the current entry, or nil if before the first headline.
The level is the number of stars at the beginning of the headline.

**** (org-demote-subtree)
Demote the entire subtree.  See `org-demote'.

**** (org-demote)
Demote the current heading lower down the tree.
If the region is active in `transient-mark-mode', demote all headings
in the region.

**** (buffer-file-name)
*** Arduion常用库
1. *EEPROM*
   provides functions and classes to read/write in hardware
   storage components. It is very useful to store something beyond the
   power state of the Arduino, that is, even when the power is off.

2. *Ethernet*
   helps to make layer 2 and layer 3 communications over an
   Ethernet network.

3. *Firmata*
   used for serial communication.

4. *SD*
   provides an easy way to read/write SD Cards; it is a more
   user-friendly alternative to the EEPROM solution.

5. *Servo*
   helps to control servo motors.

6. *TLC5940*
   Used to control a 16-channel, 12-bit LED controller
   smoothly

7. *MsTimer2*
   Used to trigger an action that has to be very fast and
   even each 1 ms (this library is also a nice hack of one of the
   hardware timers included inthe chipset)

8. *Tone*
   Used to generate audible square waves
*** Linux 屏幕录像软件

**** [[+ https://linuxtoy.org/archives/top-5-screen-recorder-for-linux.html][工具软件]]

+ Istanbul

  使用 Istanbul， 你可以将 Linux 屏幕上的一切操作过程录制下来 。
  Istanbul 既能够按照你的需要录制全屏 、 区域或者窗口 ， 也可以录制声
  音和鼠标指针 ， 最终会生成 Ogg Theora 格式的视频文件 。

+ Wink

  Wink 是录制 Flash 视频演示的极好工具 ， 除支持 Linux 平台外 ， 也能
  够在 Windows 系统上运行 。 你可以使用 Wink 为所录制的文件添加文字说
  明和声音旁白 。

+ Xvidcap

  Xvidcap 支持生成 avi、mpeg、asf、flv、swf、mov 等视频格式 ， 可以应
  用在各种场合 。 录制的区域也可以随意选择 ， 显得非常方便 。

+ Vnc2swf

  Vnc2swf 是继 Wink 外适合在 Linux 中使用的另一个 Flash 录制工具 ， 但
  比 Wink 稍微要难用点 ， 而且也没有 Wink 功能全面 。

+ *Recordmydesktop*

  Recordmydesktop 功能主要有 ： 可录制全屏 、 窗口 ， 也可以录制选择的
  区域 ； 除了能够录制视频的基本功能之外 ， 还能够录制音频 ； 有一些录
  制的参数可以调整 ； 生成的视频格式为 ogg。 它默认提供 GTK+ 界面 ，
  另外也有一个适合 KDE 桌面环境的 reKordmydesktop。

**** 小结

1. 验证使用Recordmydesktop效果可以，同时录制了双屏，满足需求。简单地试
   用了下命令行，没加任何参数。

2. 有一个原则，即 *不要在这些并不重要的东西上花费过多的时间。*

*** Arduion Power 供电
**** Power style
Arduino boards can be supplied in three different ways:
+ By our computer via the USB cable (5 V is provided)
+ By a battery or a direct external Power Supply Unit (PSU) / Adapter
+ By attaching a regulated 5 V to the +5 V pin

**** DC adapter requirements
Arduino Uno and Mega can be directly supplied by DC Adapter but
this one has to respect some characteristics:
+ The output voltage should be between 9 V and 12 V
+ It should be able to drive at least 250 mA of current
+ It must have a 2.1 mm power plug with center positive

**** when DC adapter?
Usually, if you ask yourself about the fact whether to use an adapter or not, it means
you need more current than the USB's 500 mA (Practically, ask yourself this question
whether you need around 400 mA).

**** 小结
1. 三种供电方式
2. 适配器的电压电流以及接口类型

*** Arduino串口通信
**** Serial commnication with Arduino
Each Arduino board has at least one serial port. It can be used by using digital
pins 0 and 1, or directly using the USB connection when you want to use serial
communication with your computer.

On the Arduino board, you can read RX and TX on both digital pins 0 and 1
respectively. *TX* means transmit and *RX* means receive; indeed, the most basic serial
communication requires two wires.

**** Serial monitoring
for *trace* for debugging

**** Serial functions
+ Serial.begin()
+ Serial.print(val) Serial.print(val, format)
+ Serial.println()

**** 小结
1. 串口在开发板上对应的针与指示
2. 库函数与配置(?)

*** 如何科学熬夜

夜深人静的时候的确注意力很容易长时间集中，学习效率也高一些。想想以后熬
夜通宵可能会成为家常便饭，所以提前尝试一下怎样熬夜才会更值得一些。熬夜
注意方法很重要，但更重要的在于身体是革命的本钱。所以，多吃肉以增加体力，
多跑步以增强恢复力。 from weibo-131025
1. 熬夜时
   + 准备热食
   + 晚饭不要吃太饱(胃肠负担重导致大脑缺氧,容易犯困)
   + 注意保暖,胃部和足部
   + 多喝白开水(熬夜身体缺水),一次喝一整杯
   + 忙完再休息,累了也不要中途上床休息,突然开突然关的,对身体和状态都没益处
   + 困乏时可喝咖啡或茶叶提神
     + 热饮
     + 低浓度,以免伤胃
   + 时时做深呼吸,熬夜大脑需氧量增加
   + 千万不要一坐一整夜,每小时起来走走
   + 事情忙完要收心,即使不睡觉,也要坐在椅子上收心
2. 熬夜后
   + 睡前或醒后利用五到十分钟敷一下脸来补充缺水的肌肤
   + 起床后利用冷,热交替刺激脸部血液循环
   + 涂抹保养品时先按摩脸部五分钟
   + 早上起床后先喝一杯枸杞茶,补气养身
     + 枸杞一把,红枣3~4粒
     + 红枣切开
     + 开水冲泡,或煮
     + 冲完开水后等入味后再喝
   + 做个简单柔软操,活动一下筋骨
   + 早饭要吃饱,不吃凉
3. 关于吃
   + 咖啡和茶,提神但
     + 维持时间短
     + 而且消维生素B
     + 咖啡碱的利尿作用,导致脱水
   + 缺少维生素B群的人容易疲劳,依赖咖啡因会形成恶性循环
   + 补充维生素B
   + 甜食是大忌
   + 吃香蕉等水果
   + 日常饮食合理,补充维生素A(预防视力减弱)和维生素B
     + 维生素A: 胡萝卜,韭菜,鳗鱼等
     + 维生素B: 瘦肉,鱼肉,猪肝等
     + 干果:花生,杏仁,核桃等

*** 键盘数字键指法
+ 左小: 1
+ 左无: 2
+ 左中: 3
+ 左食: 4,5
+ 右食: 6,7
+ 右中: 8
+ 右无: 9
+ 右小: 0

扩展: 标准指法
1) 左小指: `  1  Q  A  Z
2) 左无名指: 2  W  S  X
3) 左中指: 3  E  D  C
4) 左食指: 4  5  R  T  F  G  V  B
5) 左  右拇指: 空白键
6) 右食指: 6  7  Y  U  H  J  N  M
7) 右中指: 8  I  K  ,
8) 右无名指: 9  O  L  .
9) 右小指: 0  -  =  P  ()  ()  ;  '  /  \

*** org source highlight
以cmake-mode进行语法高亮，其它功能不需要
**** org-src-lang-modes

org-src-lang-modes is a variable defined in `org-src.el'.
Its value is shown below.

Documentation:
Alist mapping languages to their major mode.
The key is the language name, the value is the string that should
be inserted as the name of the major mode.  For many languages this is
simple, but for language where this is not the case, this variable
provides a way to simplify things on the user side.

**** settings
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("html" . nxhtml))
  (add-to-list 'org-src-lang-modes '("browser" . nxhtml))
  (add-to-list 'org-src-lang-modes '("php" . php))
  (add-to-list 'org-src-lang-modes '("cmake" . cmake))
#+END_SRC
*** 转换pdf为ppt

+ http://superuser.com/questions/268244/how-to-convert-pdf-to-ppt-or-odp


The desired result can also be achieved without proprietary tools. If
you have GhostScript installed, you can convert your PDF presentation
into a set of JPG images using:
#+BEGIN_EXAMPLE
gs -dNOPAUSE -dBATCH -dSAFER -dGraphicsAlphaBits=4  \
   -dTextAlphaBits=4 -sDEVICE=jpeg -r300 \
   -sOutputFile='page-%00d.jpg' YOURFILE.pdf
#+END_EXAMPLE

Then, with the plugin for OpenOffice/LibreOffice create a presentation
where each image fills exactly one slide. You can also easily keep the
order of the pages by choosing the plugin option "natural sorting".


*Edit -> Link -> 断开链接*  否则以链接形式插入。

**** 小结
1. 使用gs转换为图片
2. 将图片插入LibreOffice中
3. 保存时断开链接

*** Ubuntu Matlab
+ http://blog.csdn.net/lanbing510/article/details/41698285
+ http://neuro.debian.net/blog/2013/2013-05-31_matlab_64bit_on_32bit.html
+ https://help.ubuntu.com/community/MultiArch
+ http://stackoverflow.com/questions/28039025/how-to-install-64-bit-matlab-in-32-bit-ubuntu


+ Matlab对32位的支持越来越少
+ 在32位Ubuntu上安装64位软件几乎是不可能的(debian的可能)，没有必要瞎折腾
+ Python可以完全替代Matlab

*** Emacs Serial Port
**** Serial Terminal
If you have a device connected to a serial port of your computer, you
can communicate with it by typing M-x *serial-term*. This command asks
for a serial port name and speed, and switches to a new Term mode
buffer. Emacs communicates with the serial device through this buffer
just like it does with a terminal in ordinary Term mode.

The speed of the serial port is measured in bits per second. The most
common speed is 9600 bits per second. You can change the speed
interactively by clicking on the mode line.

A serial port can be configured even more by clicking on “8N1” in
the mode line. By default, a serial port is configured as “8N1”,
which means that each byte consists of 8 data bits, No parity check
bit, and 1 stopbit.

If the speed or the configuration is wrong, you cannot communicate
with your device and will probably only see garbage output in the
window.

**** Term Mode

The terminal emulator uses Term mode, which has two input modes. In
line mode, Term basically acts like Shell mode (see Shell Mode). In
char mode, each character is sent directly to the subshell, except for
the Term escape character, normally C-c.

To switch between line and char mode, use these commands:

+ *C-c C-j*
  Switch to line mode (term-line-mode). Do nothing if already in line
  mode.

+ *C-c C-k*
  Switch to char mode (term-char-mode). Do nothing if already in char
  mode.

The following commands are only available in char mode:

+ *C-c C-c*
  Send a literal C-c to the sub-shell.

+ *C-c char*
  This is equivalent to C-x char in normal Emacs. For example, C-c o
  invokes the global binding of C-x o, which is normally
  ‘other-window’.

Term mode has a page-at-a-time feature. When enabled, it makes output
pause at the end of each screenful:

+ *C-c C-q*
  Toggle the page-at-a-time feature. This command works in both line
  and char modes. When the feature is enabled, the mode-line displays
  the word ‘page’, and each time Term receives more than a screenful
  of output, it pauses and displays ‘**MORE**’ in the
  mode-line. Type SPC to display the next screenful of output, or ? to
  see your other options. The interface is similar to the more
  program.

**** 小结
1. M-x  serial-term
2. 两种模式
   1) term-char-mode
   2) term-line-mode
*** QT assistant
使用源码安装qt时，assistant没有内容？
+ sudo apt-get install libqtassistantclient qt-assistant-compat qt5-doc qttools5-dev-tools
+ sudo apt-get install --no-install-recommands install

Qt assistant只是一个阅读帮助文档的工具，它可以添加qch格式的帮助文档，
并不是只能添加Qt的帮助文档。

所以如果你需要阅读文档的话就需要先将自己的文档添加到这个工具里面，帮助
文档应该是在Documentation目录下，也就是一些.qch文件，至于怎么添加方法
如下：

打开assistant，选择菜单Edit->preferences，这个时候弹出如下对话框

qt5源码中没有找到qt压缩帮助文档(*.qch)

audo apt-get install qt5-doc

*** Linux 知网
**** wine安装知网阅读软件
源码安装的wine安装CAJviewer没有问题，使用时出现 unable to create a
MSXML instance错误

可能是缺少微软库依赖。ArchLinux查得 Some applications (e.g. Office
2003/2007) require the MSXML library to parse HTML or XML, in such
cases you need to install
lib32-libxml2. https://wiki.archlinux.org/index.php/Wine

但libxml2已经安装

卸载源码安装的wine，使用apt-get方式安装后，问题解决。

**** caj to pdf
+ http://www.zhihu.com/question/21103230


1. 虚拟打印机转换为pdf或xps格式
2. 少瞎折腾

为什么不直接下载PDF，可以从 *万方* 上直接下载PDF

*** 一个人摆脱幼稚的标志之一，就是不再以自己读的书、看的电影、听的音乐为理由而产生优越感。

你爱看书，值得鼓励，但这并不代表你有理由因此产生任何的优越感，将那些看
消遣娱乐节目的人斥为低俗，然后上知乎寻找与你志同道合的小清新。我虽然没
有工作，但我知道很多养家糊口压力大、工作繁重的人喜欢看爆米花电影，因为
平时的生活已经够残酷了，他们没必要在难得的放松时刻里去寻找”深刻“，相
反很多身无长技的啃老族，每天为赋新词强说愁，最喜欢用大卫林奇的电影证明
自己的人生是深刻的。

说实话，一般喜欢拿自己消费的文化产品标榜自己的人，他们所谓的好书或好节
目，最多也就是罗胖或高晓松级别的，再扯一点”平庸之恶“、”乌合之众
“、”娱乐至死“之类的民科概念，觉得自己虽然活在猪圈里却成了精神贵族。

*** TQ2440开发板

[[~/Wally/Journal/Figures/scrot/5070dLV.png]]

**** 系统资源
1. 处理器：S3C2440A. ARM9
   + 主频400M,  最高533M
   + 内存64M

2. 存储
   + nor flash(2M): 容量小，运行快，价格高
   + nand flash(对应硬盘): 256M
   + SD插槽

3. 接口资源
   + 用户可编程LED
   + 用户可编程按键
   + LCD及接口: 4.3寸
   + 音频输入输出
   + GPIO：40
   + USB接口： 主/从
   + RS232串口
   + RJ45网口
   + JTag
   + 系统总线（什么总线？）
   + CMOS

**** 启动方式
+ Nor flash
+ Nand flash
+ 开关设置

**** 操作系统
+ Linux: 30M左右
+ WinCE:
+ 安装位置： Nand flash
+ 安装方式：
  1. JTAG烧写引导程序到Nor flash
  2. 使用USB下载线下载操作系统到内在中
  3. 把操作系统安装到Nand flash

**** 安装系统安装
1. 软件构成
   1) bootlaoder
   2) Linux
   3) 文件系统

2. 安装步骤
   1) 使用 JTAG 将 引导安装程序 下载到 Nor Flash
   2) 使用 USB下载线 将操作系统 安装到 Nand Flash中

3. JTAG
   + 嵌入式开发使用交叉开发模型：  宿主机/目标机
   + *JTAG常用来对flash等器件进行编程* ， 按连接方式分
     - 并口
     - USB， *JLink*
   + 步骤
     - 选择Nor Flash启动
     - 连接JLink
     - 打开电源

   + 工具
     - Windows: segger:
       - 连接
       - file->open project: *2440.flash* 工程配置文件
       - target -> Erase
       - file -> open : uboot(bootloader)
       - target -> program
       - 完成后重启并拔掉JLink线
     - Linux:

**** winner-undo(Emacs Window管理)
|-------------+-------------|
| C-c <left>  | winner-undo |
| C-c <right> | winner-redo |
|-------------+-------------|



支持连续多次的undo和redo，应该有一个类似yank-ring的机制

** 2015/11/16
*** prepend-to-register                                          :register:
(prepend-to-register register start end &optional delete-flag)

prepend region to text in register register.
with prefix arg, delete as well.
called from program, takes four args: register, start, end and delete-flag.
start and end are buffer positions indicating what to prepend.
*** reverse headlines 标题逆序                                       :sort:

[[http://stackoverflow.com/questions/12874595/reverse-notes-order-in-org-mode][stackoverflow]]

*利用宏和寄存器*

i don't think there is a predefined command you are looking for. you
can implement it by yourself.

if it's a one-time task i would use emacs macro:

you show only top-level headlines. then you go to the first headline
and start macro c-x ( . you select the line c-space c-n and you type
*c-u m-x prepend-to-register .* c-u deletes the line as well. you stop
the macro c-x ) .

now you repeat the macro for all top-level headlines *m-0 c-x e* .

and you insert the register *c-x r i .*

prepend-to-register 压入寄存器，有点像入栈。

栈的思想。
*** kmacro-end-and-call-macro(C-x e )                               :macro:
(kmacro-end-and-call-macro arg &optional no-repeat)

call last keyboard macro, ending it first if currently being defined.
with numeric prefix arg, repeat macro that many times.
zero argument means repeat until there is an error.

*** projectile: remove existing projects                       :projectile:
[[http://stackoverflow.com/questions/27643917/helm-projectile-how-to-remove-a-project-from-projectile][stackoverflow]]

he function *projectile-remove-known-project* prompts for a project to
forget about. *projectile-remove-current-project-from-known-projects*
removes the active project.


known projects are stored in the file *~/.emacs.d/projectile-bookmarks.eld*.

note: c-p p p m-d 不起作用
*** org-agenda-files search TAGS
C-c a m有
** 2015/11/17
*** 不确定性椭圆的绘制                                :math:椭圆:algorithm:
1. input
   1) center 椭圆圆心
   2) angle 长轴倾斜角度
   3) a 长轴半径
   4) b 短轴半径
2. output： 构成椭圆的点的集合
3. 伪代码
   #+begin_src latex
     \begin{algorithm}
     \caption{生成不确定椭圆的散点集合}
     \kwin{center, angle, a, b}
     \kwout{points}
     ax = a*cos(angle)
     ay = a*sin(angle)
     bx = b*sin(angle)
     by = b*cos(angle)

     points = null
     cx = center[1]
     cy = center[2]

     \for{theta = 0:0.01*pi:2*pi}{
       c = cos(theta)
       s = sin(theta)
       x = cx + c*ax - s*bx
       y = cy + c*ay + s*by
       points.append(x,y)
     }
     \return{points}
     \end{algorithm}
   #+end_src

4. 实现
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{py}
         @staticmethod
         def get_ellipse_points(center, main_axis_angle, radius1, radius2,
                                start_angle = 0.0, end_angle = 2 * pi):
             """generate points of an ellipse, for drawing (y axis down)."""
             points = []
             ax = radius1 * cos(main_axis_angle)
             ay = radius1 * sin(main_axis_angle)
             bx = - radius2 * sin(main_axis_angle)
             by = radius2 * cos(main_axis_angle)
             n_full = 40  # number of points on full ellipse.
             n = int(ceil((end_angle - start_angle) / (2 * pi) * n_full))
             n = max(n, 1)
             increment = (end_angle - start_angle) / n
             for i in xrange(n + 1):
                 a = start_angle + i * increment
                 c = cos(a)
                 s = sin(a)
                 x = c*ax + s*bx + center[0]
                 y = - c*ay - s*by + center[1]
                 points.append((x,y))
             return points
     \end{minted}
   #+end_latex

*** =\relax=                                                        :relax:
[[https://app.yinxiang.com/shard/s52/nl/11551545/aab18c55-3eab-42d6-ae48-6fb594474634?title=what%20is%20the%20difference%20between%20%5crelax%20and%20%7b%7d%3f][stackexchange: relax and {}]]

[[http://tex.stackexchange.com/questions/96501/what-does-relax-do][stackexchange： what does relax do?]]

it is what's called a *no-op*: it does nothing, and it's used in various
places where you don't want anything done, but the syntax requires
something. tex's rules also dictate that in an =\if= statement, an
undefined macro will compare equal to =\relax=. so it's sort of a
general-purpose nothing.


=\relax= does nothing by itself, it is a safe command to stop
expansion of another command. some examples:

+ (plain tex) =\hskip 5pt\relax=
  in the absence of =\relax=, the =\hskip= will keep looking for plus
  or minus

+ (latex) at the end of a line, =\\ \relax [...]=
  will prevent what is in braces from being interpreted as a dimension
  that would add vertical space

*** 埃氏筛法求素数序列                                     :素数:algorithm:
计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：

首先，列出从2开始的所有自然数，构造一个序列：

2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：

3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：

5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

取新序列的第一个数5，然后用5把序列的5的倍数筛掉：

7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

不断筛下去，就可以得到所有的素数。

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
def _odd_iter():
    n = 1
    while true:
        n = n + 2
        yield n


def _not_divisible(n):
    return lambda x: x % n > 0


def primes():
    yield 2
    it = _odd_iter() # 初始序列
    while true:
        n = next(it) # 返回序列的第一个数
        yield n
        it = filter(_not_divisible(n), it) # 构造新序列


# 打印1000以内的素数:
for n in primes():
    if n < 1000:
        print(n)
    else:
        break
\end{minted}
#+end_latex

*以上程序运行有问题*

*** recover-this-file
(recover-this-file)

Recover the visited file--get contents from its last auto-save file. #file#

** 2015/11/18
*** 达林顿晶体管                                     :晶体管:三极管:达林顿:
达灵顿晶体管（英语： *darlington transistor* ），或称达灵顿对
（darlington pair）是电子学中由 *两个（甚至多个）双极性晶体管* （或者其他
类似的集成电路或分立元件）组成的 *复合结构* ，通过这样的结构，经第一个双极
性晶体管放大的电流可以 *进一步被放大。*

这样的结构可以提供一个比其中任意一个双极性晶体管高得多的电流增益。在使
用集成电流芯片的情况里，达灵顿晶体管可以使得芯片比使用两个分立晶体管元
件 *占用更少的空间* ，因为两个晶体管可以共用一个集极。达灵顿晶体管通常被封
装在单一的芯片里，从外面看就像一个双极性晶体管。

[[/home/ben/tiger/figures/scrot/18129dtn.png]]

+ b - 基极
+ c - 集电极
+ e - 发射极

**** 小结
成对复合晶体管，功放大，结构小

*** inertial matrix（moment of inertia）                          :physics:


[[/home/ben/tiger/figures/scrot/18129qdt.png]]

[[/home/ben/tiger/figures/scrot/18129dnz.png]]

*** OGRE                                                             :orge:
+ http://zh.wikipedia.org/wiki/ogre
+ http://www.ogre3d.org/
+ http://baike.baidu.com/subview/104836/15875123.htm#viewpagecontent


ogre（object-oriented graphics rendering engine，面向对象图形渲染引擎）
又叫做ogre 3d。ogre是面向场景的、灵活的图像引擎。ogre仍然在发展中，如
果就功能和商业游戏引擎还有一定差距。

开源

gazebo使用ogre作为渲染的引擎。

*** org-mode 不显示图片                                             :image:
(iimage-mode)

*** Linux C++ 多线程                                         :linux:thread:
**** why 线程
1. 节省空间时间
2. 通信机制（方便）
**** linux下的多线程
***** pthread
遵循posix线程接口， *pthread*,
头文件： <pthread.h>
库文件： libpthread.a
方法：clone()， 类似fork()

#+begin_latex
\begin{minted}[frame=single, mathescape]{cpp}
#include <iostream>
#include <unistd.h>
#include <pthread.h>

using namespace std;

void *thread(void *ptr){
  for(int i=0; i<3; i++){
    sleep(1);
    cout << "this is a pthread."  << endl;
  }

  return 0;
}

int main(int argc, char *argv[])
{
  pthread_t id;
  int ret = pthread_create(&id, null, thread, null);
  if(ret){
    cout << "created pthread error!" << endl;
    return -1;
  }
  for(int i=0; i<3; i++){
    cout << "this is the main process." << endl;
    sleep(1);
  }
  pthread_join(id, null);
  return 0;
}

\end{minted}
#+end_latex

***** g++ 编译
#+begin_latex
\begin{minted}[frame=single, mathescape]{sh}
g++ thread.cpp  # 链接错误
g++ -lpthread thread.cpp  # 链接错误
g++ thread.cpp -lpthread  # 正确
g++ -pthread thread.cpp  # 正确
\end{minted}
#+end_latex

1. *实际的做法应该是在代码文件后面添加次选项。*
2. -lpthread vs -pthread
   1) -lpthread 传统的，老式的
   2) 可见编译选项中指定 -pthread 会附加一个宏定义 *-d_reentrant* ，该宏
      会导致 libc 头文件选择那些thread-safe的实现；链接选项中指定
      -pthread 则同 -lpthread 一样，只表示链接 posix thread 库。由于
      libc 用于适应 thread-safe 的宏定义可能变化，因此在编译和链接时都
      使用 -pthread 选项而不是传统的 -lpthread 能够保持向后兼容，并提
      高命令行的一致性。

***** 常用函数

1. *pthread_t* 线程标识符
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{cpp}
        typedef unsigned long int pthread$_t;
     \end{minted}
   #+end_latex

2. *pthread_create* 创建线程
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{cpp}
     extern int pthread_create (pthread_t *__restrict __newthread,
                                const pthread_attr_t *__restrict __attr,
                                void *(*__start_routine) (void *),
                                void *__restrict __arg) __thrownl __nonnull ((1, 3));
     \end{minted}
   #+end_latex
   1) arg1： 指向线程标识符的指针
   2) arg2： 设置线程属性，null表示默认
   3) arg3： 线程运行函数的起始地址
   4) arg4： 运行函数的参数，null表示零参
   5) 返回值： 0表示创建线程成功，失败则返回其它。
      + eagain: 系统限制创建线程
      + einval: 线程属性值非法

3. *pthread_join* 用来等待一个线程的结束
   #+begin_latex
   \begin{minted}[frame=single, mathescape]{cpp}
   extern int pthread_join (pthread_t __th, void **__thread_return);
   \end{minted}
   #+end_latex
   1) arg1: 线程标识符指针
   2) arg2: 用户定义的指针，用来存储被等待线程的返回值。

4. *pthread_exit*

***** 线程属性

对于大多数程序来说，默认属性(null)就足够了。线程属性包括：是否绑定、是
否分离、堆栈地址、堆栈大小、优先级。默认的属性为非绑定、非分离、缺省1m
的堆栈、与父进程同样级别的优先级。

属性结构 *pthread_attr_t* 定义在头文件<pthread.h>中。

属性值不能直接设置，必须使用相关函数。
+ pthread_attr_init
+ pthread_attr_setscope等



*** opencv编译时链接错误                                              :ldd:
*问题在于ros的库，覆盖了opencv的库*

*source /opt/ros/indigo/setup.bash* 前
#+begin_example
pkg-config opencv --libs


~ $ cd wally/journal/project/ros/opencv/
/usr/lib/i386-linux-gnu/libopencv_calib3d.so
/usr/lib/i386-linux-gnu/libopencv_contrib.so
/usr/lib/i386-linux-gnu/libopencv_core.so
/usr/lib/i386-linux-gnu/libopencv_features2d.so
/usr/lib/i386-linux-gnu/libopencv_flann.so
/usr/lib/i386-linux-gnu/libopencv_gpu.so
/usr/lib/i386-linux-gnu/libopencv_highgui.so
/usr/lib/i386-linux-gnu/libopencv_imgproc.so
/usr/lib/i386-linux-gnu/libopencv_legacy.so
/usr/lib/i386-linux-gnu/libopencv_ml.so
/usr/lib/i386-linux-gnu/libopencv_objdetect.so
/usr/lib/i386-linux-gnu/libopencv_ocl.so
/usr/lib/i386-linux-gnu/libopencv_photo.so
/usr/lib/i386-linux-gnu/libopencv_stitching.so
/usr/lib/i386-linux-gnu/libopencv_superres.so
/usr/lib/i386-linux-gnu/libopencv_ts.so
/usr/lib/i386-linux-gnu/libopencv_video.so
/usr/lib/i386-linux-gnu/libopencv_videostab.so -lopencv_calib3d
-lopencv_contrib -lopencv_core -lopencv_features2d -lopencv_flann
-lopencv_gpu -lopencv_highgui -lopencv_imgproc -lopencv_legacy
-lopencv_ml -lopencv_objdetect -lopencv_ocl -lopencv_photo
-lopencv_stitching -lopencv_superres -lopencv_ts -lopencv_video
-lopencv_videostab
#+end_example

*source /opt/ros/indigo/setup.bash* 后
#+begin_example
/opt/ros/indigo/lib/libopencv_calib3d.so
/opt/ros/indigo/lib/libopencv_core.so
/opt/ros/indigo/lib/libopencv_features2d.so
/opt/ros/indigo/lib/libopencv_flann.so
/opt/ros/indigo/lib/libopencv_highgui.so
/opt/ros/indigo/lib/libopencv_imgcodecs.so
/opt/ros/indigo/lib/libopencv_imgproc.so
/opt/ros/indigo/lib/libopencv_ml.so
/opt/ros/indigo/lib/libopencv_objdetect.so
/opt/ros/indigo/lib/libopencv_photo.so
/opt/ros/indigo/lib/libopencv_shape.so
/opt/ros/indigo/lib/libopencv_stitching.so
/opt/ros/indigo/lib/libopencv_superres.so
/opt/ros/indigo/lib/libopencv_ts.a
/opt/ros/indigo/lib/libopencv_video.so
/opt/ros/indigo/lib/libopencv_videoio.so
/opt/ros/indigo/lib/libopencv_videostab.so
/opt/ros/indigo/lib/libopencv_viz.so
#+end_example

**** g++
g++编译：  *g++ main.cpp -lopencv_core -lopencv_highgui*
-llibs 一定要在源文件后


**** cmake

cmakelists.txt
#+begin_example
cmake_minimum_required(version 2.8)
project( displayimage )
find_package( opencv required )
include_directories (${opencv_include_dirs})  # 这句官网上没有
add_executable( displayimage hello_opencv.cpp )
target_link_libraries( displayimage ${opencv_libs} )
#+end_example

** 2015/11/19
*** Matlab续行符                                                   :续行符:

续行符，也就是三个点：...

*** Python学习
**** Python基础
作者： *Guido van Rossum（龟叔）*

TIOBE排行

龟叔给Python的定位： *优雅、明确、简单*

输入 *input()* ： birth = input("birth: ")

*r"" 不转义*

布尔值： *True* *False*

布尔运算： *and or not*

空值： *None*

*动态语言* ： 变量类型不固定的语言。

Python中通常使用 *全部大写* 的变量名表示 *常量*

*/ 为一般除法， // 为地板除法 % 取余*

编码： ASCII, Unicode, *UTF-8* --- 在计算机内存中统一使用Unicode编码，
当需要保存到硬盘或需要传输时，就转换为UTF-8。

*ord* 将字符转换为整型编码， *chr* 将编码转换为对应字符。

*len()* 函数返回字符串长度

指定保存为UTF-8编码
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
#!/usr/env/bin python
# -*- coding: utf-8 -*-
\end{minted}
#+end_latex

**** list, tuple, dict, set
***** list                                                     :listings:
list方法
1. append(element)
2. pop() 删除尾部元素
3. pop(i) 删除索引元素

***** tuple                                                       :tuple:
长度为1的tuple类型定义, *显示地使用逗号*
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
t = (1)  # 定义整数1
t = (1, ) # 定义tuple
\end{minted}
#+end_latex

*int()* 转换字符串为整数

***** dict                                                         :dict:
*字典-dict-map(其它语言)-(key:value)*
- 查找速度快，使用索引表
- list则不然，需要遍历

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
d = {'michael':95, 'bob':75, 'tracy':85}  # 初始化
d['adam'] = 67  # 也可以

# 判断key是否存在
'thomas' in d  # in 操作，返回布尔值
d.get('thomas')  # 存在则返回对应值，不存在返回none
d.get('thomas', -1)  # 不存在返回指定值, 但并不增加键
\end{minted}
#+end_latex

*dict vs list*  *以空间换时间*
+ 查找和插入速度快， 不会随着key的增加而增加
+ 需用占用大量内存
+ dict用在需要高速查找的地方

dict的键key必须是 *不可变对象* ,  如字符串、整数等，list则不行
通过key计算位置的算法，称为 *哈希算法(hash)*

***** set                                                     :setlength:
*集合set* 是一组没有重复的 key 值, 可以做集合上的交集、并集等运算。
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
s = {1,2,3,4,4}
s = set([1, 2, 3])
s.add(4)
s.remove(4)
\end{minted}
#+end_latex

**** 函数                                                       :function:
***** 定义
*函数别名： a=abs*

函数定义
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
def func(args):
    body
\end{minted}
#+end_latex

空函数: *pass占位符*
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
def nop():
    pass
\end{minted}
#+end_latex

参数类型检查与抛出异常
+ *isinstance*
+ *raise*
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
def my_abs(x):
    if not isinstance(x, (int, float)):
        raise typeerror('bad operand type')
    if x >= 0:
        return x
    else:
        return -x
\end{minted}
#+end_latex

***** 参数
1. 位置参数（普通参数、必选参数）
2. 默认参数（必须为不可变对象）
3. 可变参数（传入的参数个数是可变的, *号开头）
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{py}
     def calc(*numbers):
         sum = 0
         for n in numbers:
             sum = sum + n
         return sum

     sum1 = calc(1)
     sum2 = calc(1,2)

     l = [1, 2, 3]
     sum3 = calc(l[1], l[2], l[3])
     sum4 = calc(*sum)   # *开头传入list或tuple
     \end{minted}
   #+end_latex
4. 关键字参数(**开头，可以扩展函数的功能)
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{py}
     def person(name, age, **kw):
         if 'city' in kw:
             pass
         if 'job' in kw:
             pass
         print('name', name, 'age:', age, 'other:', kw)
     \end{minted}
   #+end_latex
   + 可变参数允许传入0个或多个任意参数，这些可变参数在调用时自动组装成
     *一个tuple*
   + 关键字参数允许传入0个或任意个含参数名的参数，这些关键字参数在函数
     内部会自动组装成一个dict
5. 命名关键字参数(使用分割符*)
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{py}
     def person(name, age, *, city="beijing", job):
         print(name, age, city, job)
     \end{minted}
   #+end_latex
   命名关键字参数必须传入参数名，这和位置参数不同。

6. 组合参数顺序
   必选参数->默认参数->可变参数/命名关键字参数->关键字参数

***** 递归函数
递归函数需要防止栈溢出。

*尾递归优化* 在函数返回的时候调用自身，并且，return语句不能包含表达式。
尾递归优化仅使用一个栈桢。尾递归事实上和循环是等价的，没有循环语句的编
程语言只能通过尾递归实现循环。

python解释器没有针对尾递归进行优化。

**** 序列                                                       :listings:
***** 迭代

dict默认迭代key
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
for key in d:
    pass
for value in d.values():
    pass
for k, v in d.items():
    pass
\end{minted}
#+end_latex

for-in可用于任何可迭代对象。
使用collection模块中的iterable类型可以判断对象是否可迭代
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
from collections import iterable
isinstance(obj, iterable)
\end{minted}
#+end_latex

*enumerate* 函数可以把一个list对象变成索引-元素对
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
for i, value in enumerate(alist):
    pass
\end{minted}
#+end_latex

***** 列表生成式(list comperhensions)
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
[x*x for x in range(1, 11)]  # 表达式+for-in循环
[x*x for x in range(1, 11) if x%2 == 0]  # 条件判断
[m+n for m in 'abc' for n in 'xyz]  # 两层
\end{minted}
#+end_latex

***** 生成器(generator)
generator保存的是 *算法*
*一边循环一边计算, 节省内存空间*
使用next方法可以获取generator的下一个元素。

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
l = [x*x for x in range(10)]  # l是一个列表
g = (x*x for x in range(10))  # g是一个generator
next(g)
\end{minted}
#+end_latex

*generator也是可迭代对象，因而可以使用for-in*
#+begin_example
>>> g = (x*x for x  in range(10))
>>> next(g)
0
>>> next(g)
1
>>> for n in g:
...     print n
...
4
9
16
25
36
49
64
81
>>>
#+end_example

*yeild* 生成器的另一种定义方法
#+begin_latex
  \begin{minted}[frame=single, mathescape]{py}
  def fib_func(max):
      n, a, b = 0, 0, 1
      while n < max:
          print b
          a, b = b, a+b
          n = n + 1
      return 'done'


  def fib_gen(max):
      n, a, b = 0, 0, 1
      while n < max:
          yield b
          a, b = b, a+b
          n = n+1
      return 'done'
  \end{minted}
#+end_latex

generator与函数的执行流程
+ 函数是顺序执行，遇到return语句或者最后一行函数语句就返回。
+ 而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，
  再次执行时从上次返回的yield语句处继续执行。

***** 迭代器
*可迭代对象(iterable)*
+ 集合数据类型： list, tuple, dict, set, str
+ generator

生成器还可以用于next()函数。能够被next()函数不断调用并返回下一个值，直
到最后抛出一个stopiteration错误的对象称为 *迭代器(iterator)*

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
from collections import iterator
isinstance((x for x in range(10)), iterator)  # true
isinstance([x for x in range(10)], iterator)  # false
\end{minted}
#+end_latex

+ 生成器都是iterator
+ list、 dict、 str不是，可以使用iter()函数将其转换为iterator

iterator对象表示的是一个 *数据流* 。

**** 函数式编程
越低级的语言，越贴近计算机，抽象程度越低，执行效率越高；
越高级的语言，越贴近计算， 抽象程度越高，执行效率越低。

函数式编程是一种抽象程度很高的编程范式。
+ 没有变量
+ 输入确定，输出即确定（没有副作用）
+ 允许传递和返回函数

***** map/reduce
map()接收两个参数，第一个是函数，第二个是Iterable,  *map将传递的函数依次
作用于序列的每一个元素，并把结果作为新的iterator返回。*

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
list(map(str, [1, 2, 3, 4, 5]))
\end{minted}
#+end_latex

map *高阶函数*

*reduce* 把一个函数作用在一个序列上，这个函数必须接收两个参数，reduce
把结果继续和序列的下一个元素作累积计算
reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
from functools import reduce
def fn(x, y):
    return x*10 + y
reduce(fn, [1, 3, 5, 7, 9])
\end{minted}
#+end_latex

***** filter
filter函数用于过滤序列。
filter作用于一个函数和一个序列，把传入的函数依次作用于每个元素，然后根
据返回值是True还是False决定保留还是放弃该元素。

filter返回的是一个Iterator，也就是一个 *惰性序列* ,  所以要强迫
filter()完成计算结果，需要用list()函数获得所有结果并返回list对象。

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
def is_odd(n):
    return n % 2 == 1

list(filter(is_odd, [1, 2, 3, 4, 5, 6, 7]))
\end{minted}
#+end_latex

***** sorted
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
sorted([25, 36, 12, 56, 18])
\end{minted}
#+end_latex

sorted也是一个高阶函数， 可以接收一个key函数实现自定义的排序
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
sorted([25, 36, 12, 56, 18], key=abs)
sorted('bob', 'about', 'Zoo', 'Credit',  key=str.lower)
\end{minted}
#+end_latex
*Z的ASCII值比a的小*

***** 返回函数
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax += n
        return ax
    return sum
\end{minted}
#+end_latex

#+BEGIN_EXAMPLE
>>> f = web_tutorial.lazy_sum(1, 2, 3, 4)
>>> f
<function sum at 0xb7114c6c>
>>> f()
10
#+END_EXAMPLE

***** 匿名函数
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
lambda x:x*x
\end{minted}
#+end_latex
冒号前面表示参数

匿名函数也是一个函数对象，因而可以赋值给一个变量。

也可以把匿名函数作为返回值老进行返回
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
def build(x, y):
    return lambda： x*x + y:y
\end{minted}
#+end_latex

Python对匿名函数支持有限。

***** 装饰器
函数也是一个对象
+ 可以被赋值给变量，并通过变量调用
+ 有属性
  - __name__ 函数的名字

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
def now():
    print('2015-11-19')

f = now
f()
print now.__name__
\end{minted}
#+end_latex

在代码运行期间动态增加功能的方式，称为 *装饰器(Decorator)*
本质上，decorator是一个返回函数的高阶函数。

@修饰，放在函数定义之前。

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
def log(func):
    def wrapper(*arg, **kw):
        print('call %s()' % func.__name__)
        return func(*arg, **kw)
    return wrapper

@log
def now():
    print('2015-11-19')

# call now()
# 2015-11-19
\end{minted}
#+end_latex


******* 偏函数
*functools* 模块的 *partial*

所为偏函数，就是把一个函数的某些参数给固定住（也就是默认值），返回一个
新的函数，调用这个函数会更简单。

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
import functools

int2 = functools.partial(int, base=2)
print int2('100')
\end{minted}
#+end_latex

**** 模块                                                         :module:
***** 模块
一个.py文件就是一个 *模块* 。
+ 便于维护
+ 避免名字冲突


*包（package）* 避免模块文件名冲突， 模块文件置于包(目录)下。

*__init__.py* 在于与否用于区分普通目录还是包目录， 可以是空文件，与可
以有python代码（本身就是一个模块）

可以有 *多级* 包目录

***** 使用模块
import

__xxx__ 特殊变量，可以被引用，但有特殊用途

__xxx _xxx 非公开变量或函数，不应该在外部直接引用

python没有一种方法可以完全限制访问private函数或变量

***** 安装第三方模块
*pip*

注册网站： https://pypi.python.org/pypi

常用模块
+ numpy 科学计算
+ mysql-connector-python
+ jinja2 生成文本
+ pillow 处理图片

***** 模块搜索路径
1. *sys.path* 变量
   #+begin_example
     >>> import sys
     >>> sys.path
     ['',
     '/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg',
     '/usr/local/lib/python2.7/dist-packages/mysql_python-1.2.4b4-py2.7-linux-i686.egg',
     '/usr/local/lib/python2.7/dist-packages/pip-6.1.1-py2.7.egg',
     '/usr/lib/python2.7', '/usr/lib/python2.7/plat-i386-linux-gnu',
     '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old',
     '/usr/lib/python2.7/lib-dynload',
     '/home/ben/.local/lib/python2.7/site-packages',
     '/usr/local/lib/python2.7/dist-packages',
     '/usr/lib/python2.7/dist-packages',
     '/usr/lib/python2.7/dist-packages/pilcompat',
     '/usr/lib/python2.7/dist-packages/gst-0.10',
     '/usr/lib/python2.7/dist-packages/gtk-2.0',
     '/usr/lib/pymodules/python2.7',
     '/usr/lib/python2.7/dist-packages/ubuntu-sso-client',
     '/usr/lib/python2.7/dist-packages/wx-2.8-gtk2-unicode']

   #+end_example

2. 添加
   1) sys.path.append(path)

   2) 设置环境变量 *pythonpath*

**** 面向对象编程 OOP                                              :class:
***** 变量类型

私有变量： 双下划线开头 __xxx
_xxx， 单下划线开头，“我不是私有变量，但不要随便访问”
__xxx__,  特殊变量，可以访问

***** 多态优点

[[/home/ben/tiger/figures/scrot/665gxj.png]]

***** 获取对象信息
1. type() 基本数据类型
2. import types type() 函数对象
3. *isinstance* 类对象
4. *dir()* 获取一个对象的所有属性和方法
5. hasattri 测试对象是否有属性

***** 实例属性和类属性
python是动态语言，根据类创建的实例可以任意绑定属性
+ 通过实例对象
+ 通过self

类本身中可以定义属性(*类属性*)，类属性可以通过实例访问。

类属性和实例属性不要同名，会屏蔽。

***** __slots__
同样可以给实例绑定方法, 使用 *types* 模块中的 *methodtype* 函数。
给一个实例绑定的方法，对另一个实例不起作用。
可以给类绑定方法
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
class student(object):
    pass

s = student()
def set_age(self, age):
    self.age = age

from types import methodtype
s.set_age = methodtype(set_age, s)
student.set_age = methodtype(set_age, student)
s1 = student()
s1.set_age(18)
\end{minted}
#+end_latex

在类定义时添加特殊的变量 *__slots__* ，限制实例的属性，
#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
class student(object):
    __slots__ = ('name', 'age')
\end{minted}
#+end_latex

__slots__仅对当前类有效，对继承的子类无效。

***** @property
@property 装饰器， 将一个getter方法变成一个属性，本身又创建了另外一个
setter装饰器。

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
class student(object):
    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise valueerror('score must be an integer!')
        if value < 0 or value > 100:
            raise valueerror('score must between 0~100')
        self._score = value


## 像属性一样调用方法
s = student()
s.score = 90                    # ok 实际转换为s.set_score(90)
print s.score                   # ok 实际 转换为s.get_score()
\end{minted}
#+end_latex

不定义setter方法，就是一个只读属性。

***** 定制类
+ __slots__
+ __len__
+ __str__
+ __repr__
+ __iter__ __next__
+ __getitem__
+ __getattr__
+ __call__: obj()

***** 枚举类定义常量
enum模块的 *enum* 类

pip install enum

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
month = enum('month', ('jan', 'feb', 'mar', 'apr', 'may', 'jun',
                       'jul', 'aug', 'sep', 'oct', 'nov', 'dec'))
\end{minted}
#+end_latex

也可以通过继承实现

***** 使用元类
****** type
动态语言和静态语言的最大的不同，就是 *函数和类的定义，不是在编译时定义
的，而是在运动时定义的*

动态创建的方法是 type()

#+begin_latex
\begin{minted}[frame=single, mathescape]{py}
def fn(self, name='world'):
    print('hello, %s' % name)

hello = type('hello',           # 类名
             (object,),         # 单元素tuple
             dict(hello=fn))    # 方法名与函数绑定
\end{minted}
#+end_latex

通过type()创建的函数和直接写class是完全一样的，因为python解释器在遇到
class定义时，仅仅是扫描class下定义的语法，然后调用type()函数创建class.

****** metaclass 元类
类的抽象，即可以根据metaclass创建出类，就像对象和类的关系。

**** 错误处理                                                  :exception:

***** try...except...finally
用错误码（即返回值中包含错误信息）表示是否出错十分不便。
高级语言都内置了一套 *try...excpet...finally...* 的错误处理机制。

当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出
错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块，
执行完except后，如果有finally语句块，则执行finally语句块，至此，执行完
毕。

错误类：
+ baseexception
+ valueerror
+ zerodivisionerror

***** 记录错误

*logging* 模块

import logging
logging.exception(e)

***** 抛出错误
raise

**** 调试                                                          :debug:
1. print()
2. assert
3. logging
4. pdb

*** OpenOCD                                                       :openocd:
open-on-chip debugger
dongle: debugger hardware usb j-link

命令和脚本均使用 jim-tcl 配置。

**** running
#+begin_example
$ openocd --help
open on-chip debugger 0.9.0 (2015-06-11-20:27)
licensed under gnu gpl v2
for bug reports, read
	http://openocd.org/doc/doxygen/bugs.html
open on-chip debugger
licensed under gnu gpl v2
--help       | -h	display this help
--version    | -v	display openocd version
--file       | -f	use configuration file <name>
--search     | -s	dir to search for config files and scripts
--debug      | -d	set debug level <0-3>
--log_output | -l	redirect log output to file <name>
--command    | -c	run <command>
#+end_example

默认文件 *openocd.cfg*

#+begin_example
openocd -f config1.cfg -f config2.cfg
#+end_example

搜索顺序
1. the *current* directory
2. *-s* specified
3. *add_script_search_dir* added
4. $home/.openocd
5. $pkgdatadir/site
6. $pkgdatadir/scripts

note: *reusing script libraries*

**** hooking up the jtag adapter
1. start with power to your target board *turned off*,  and *nothing
   connected to your jtag adapter*
2. connecting the adapter to the board
3. connecting the adapter to the pc
4. connecting the adapter's power supply if neccessary
5. power on the target board

**** user config files
1. */usr/share/openocd/scripts/*
   + interface: for debug adapter
   + board: for board
   + target: the chips which integrate cpus and other jtag taps
     #+begin_example
     source [find interface/jlink.cfg]
     source [find board/stm32.cfg]
     #+end_example
2.

**** 连接jlink
1. jlink 端未连接开发板时
   #+begin_example
     $ openocd -f interface/jlink.cfg
     open on-chip debugger 0.9.0 (2015-06-11-20:27)
     licensed under gnu gpl v2
     for bug reports, read
             http://openocd.org/doc/doxygen/bugs.html
     info : j-link arm v8 compiled jan 31 2018 18:34:52
     info : j-link caps 0xb9ff7bbf
     info : j-link hw version 80000
     info : j-link hw type j-link
     info : j-link max mem block 8368
     info : j-link configuration
     info : usb-address: 0x0
     info : kickstart power on jtag-pin 19: 0x0
     info : vref = 0.0 tck = 0 tdi = 0 tdo = 0 tms = 0 srst = 1 trst = 0
     error: vref too low. check target power
     info : j-link jtag interface ready
     error: jlink_tap_execute failed, result 5 (unknown)
     error: an adapter speed is not selected in the init script. insert a call to adapter_khz or jtag_rclk to proceed.
   #+end_example

   vref too low

2. jlink 端连接开发板后
   #+begin_example
     $ openocd -f interface/jlink.cfg
     open on-chip debugger 0.9.0 (2015-06-11-20:27)
     licensed under gnu gpl v2
     for bug reports, read
             http://openocd.org/doc/doxygen/bugs.html
     info : j-link arm v8 compiled jan 31 2018 18:34:52
     info : j-link caps 0xb9ff7bbf
     info : j-link hw version 80000
     info : j-link hw type j-link
     info : j-link max mem block 8368
     info : j-link configuration
     info : usb-address: 0x0
     info : kickstart power on jtag-pin 19: 0x0
     info : vref = 3.287 tck = 1 tdi = 0 tdo = 1 tms = 0 srst = 1 trst = 1
     info : j-link jtag interface ready
     error: jlink_tap_execute failed, result 1 (adaptive clocking timeout)
     error: an adapter speed is not selected in the init script. insert a call to adapter_khz or jtag_rclk to proceed.
   #+end_example

3. 根据提示配置 adapter_khz
   在命令行中使用 "-c adapter_khz 3000" 运行有错误

   在配置文件中配置之后， 运行暂时没有问题
   #+begin_example
   source [find interface/jlink.cfg]
   adapter_khz 3000
   transport select jtag
   #+end_example
   #+begin_example
     openocd $ openocd -f demo.config
     open on-chip debugger 0.9.0 (2015-06-11-20:27)
     licensed under gnu gpl v2
     for bug reports, read
             http://openocd.org/doc/doxygen/bugs.html
     adapter speed: 3000 khz
     jtag
     info : j-link arm v8 compiled jan 31 2018 18:34:52
     info : j-link caps 0xb9ff7bbf
     info : j-link hw version 80000
     info : j-link hw type j-link
     info : j-link max mem block 8368
     info : j-link configuration
     info : usb-address: 0x0
     info : kickstart power on jtag-pin 19: 0x0
     info : vref = 3.287 tck = 1 tdi = 0 tdo = 1 tms = 0 srst = 1 trst = 1
     info : j-link jtag interface ready
     info : clock speed 3000 khz
     warn : there are no enabled taps.  auto probing might not work!!
     info : jtag tap: auto0.tap tap/device found: 0x0032409d (mfg: 0x04e, part: 0x0324, ver: 0x0)
     warn : auto auto0.tap - use "jtag newtap auto0 tap -irlen 4 -expected-id 0x0032409d"
     warn : gdb services need one or more targets defined
   #+end_example

4. 开发板(tq2440)配置，使用 mini2440.cfg
   error:
   #+begin_example
   in procedure 'jtag' called at file "mini2440.cfg", line 124
   #+end_example

   注释掉

   #+begin_example
        adapter speed: 3000 khz
     jtag
     adapter_nsrst_delay: 100
     jtag_ntrst_delay: 100
     trst_and_srst separate srst_gates_jtag trst_push_pull srst_open_drain connect_deassert_srst
     force hard breakpoints
         targetname         type       endian tapname            state
     --  ------------------ ---------- ------ ------------------ ------------
      0* s3c2440.cpu        arm920t    little s3c2440.cpu        unknown
     error: no valid nand flash driver found (0)
     available nand flash controller drivers:
       nonce
       davinci
       lpc3180
       lpc32xx
       orion
       s3c2410
       s3c2412
       s3c2440
       s3c2443
       s3c6400
       mxc
       imx31
       at91sam9
       nuc910
     adapter_nsrst_delay: 100
     jtag_ntrst_delay: 100
     trst_and_srst separate srst_gates_jtag trst_push_pull srst_open_drain connect_deassert_srst
     info : j-link arm v8 compiled jan 31 2018 18:34:52
     info : j-link caps 0xb9ff7bbf
     info : j-link hw version 80000
     info : j-link hw type j-link
     info : j-link max mem block 8368
     info : j-link configuration
     info : usb-address: 0x0
     info : kickstart power on jtag-pin 19: 0x0
     info : vref = 3.287 tck = 1 tdi = 0 tdo = 1 tms = 0 srst = 1 trst = 1
     info : j-link jtag interface ready
     info : clock speed 3000 khz
     info : jtag tap: s3c2440.cpu tap/device found: 0x0032409d (mfg: 0x04e, part: 0x0324, ver: 0x0)
     info : embedded ice version 2
     info : s3c2440.cpu: hardware has 2 breakpoint/watchpoint units

     -------------------------------------------
     --- login with - telnet localhost 4444  ---
     --- then type help_2440                 ---
     -------------------------------------------

     help_2440
   #+end_example

   注意： *error: no valid nand flash driver found (0)*
   *先不管*

5. no valid nand flash driver found(0)
   #+begin_example
         # nand device s3c2440 0
         nand device 0 s3c2440 s3c2440.cpu
   #+end_example
   你的openocd 的版本是最新的0.5版吧，此版的 nand 命令跟以前的不一样了。

   nand device bank_id driver target [driver_options ...]

   我的 target 是 s3c2440.cpu 我改为以下的就好了：
   nand device 0 s3c2440 s3c2440.cpu
   [[http://www.100ask.org/bbs/forum.php?mod=viewthread&tid=2629][reference]]

6. seems ok
   #+begin_example
     adapter speed: 3000 khz
     jtag
     adapter_nsrst_delay: 100
     jtag_ntrst_delay: 100
     trst_and_srst separate srst_gates_jtag trst_push_pull srst_open_drain connect_deassert_srst
     force hard breakpoints
         targetname         type       endian tapname            state
     --  ------------------ ---------- ------ ------------------ ------------
      0* s3c2440.cpu        arm920t    little s3c2440.cpu        unknown
     adapter_nsrst_delay: 100
     jtag_ntrst_delay: 100
     trst_and_srst separate srst_gates_jtag trst_push_pull srst_open_drain connect_deassert_srst
     info : j-link arm v8 compiled jan 31 2018 18:34:52
     info : j-link caps 0xb9ff7bbf
     info : j-link hw version 80000
     info : j-link hw type j-link
     info : j-link max mem block 8368
     info : j-link configuration
     info : usb-address: 0x0
     info : kickstart power on jtag-pin 19: 0x0
     info : vref = 3.287 tck = 1 tdi = 0 tdo = 1 tms = 0 srst = 1 trst = 1
     info : j-link jtag interface ready
     info : clock speed 3000 khz
     info : jtag tap: s3c2440.cpu tap/device found: 0x0032409d (mfg: 0x04e, part: 0x0324, ver: 0x0)
     info : embedded ice version 2
     info : s3c2440.cpu: hardware has 2 breakpoint/watchpoint units

     -------------------------------------------
     --- login with - telnet localhost 4444  ---
     --- then type help_2440                 ---
     -------------------------------------------

     help_2440
   #+end_example

7. telnet
   #+begin_example
     telnet localhost 4444
     trying 127.0.0.1...
     connected to localhost.
     escape character is '^]'.
     open on-chip debugger
   #+end_example

**** 测试

***** halt
halt first

#+begin_example
     nand probe 0
     target not halted
     target not halted
     target must be halted to use s3c24xx nand flash controller
#+end_example

halt
#+begin_example
     > halt
     target state: halted
     target halted in arm state due to debug-request, current mode: supervisor
     cpsr: 0x80000053 pc: 0x33d15980
     mmu: enabled, d-cache: enabled, i-cache: enabled
#+end_example

***** nand probe
probe 探索
#+begin_example
     > nand probe 0
     nand flash device 'nand 256mib 3.3v 8-bit (unknown)' found
#+end_example

***** erase
erase
#+begin_example
     > nand erase 0 0 0x100000  # 应该是板子nand flash块的整数倍
     s3c2440_read_block_data: reading data: 0x8f146d0, 0xbfe2d366, 6
     s3c2440_read_block_data: reading data: 0x8f146d0, 0xbfe2d366, 6
     s3c2440_read_block_data: reading data: 0x8f146d0, 0xbfe2d366, 6
     s3c2440_read_block_data: reading data: 0x8f146d0, 0xbfe2d366, 6
     s3c2440_read_block_data: reading data: 0x8f146d0, 0xbfe2d366, 6
     s3c2440_read_block_data: reading data: 0x8f146d0, 0xbfe2d366, 6
     s3c2440_read_block_data: reading data: 0x8f146d0, 0xbfe2d366, 6
     s3c2440_read_block_data: reading data: 0x8f146d0, 0xbfe2d366, 6
     erased blocks 0 to 7 on nand flash device #0 'nand 256mib 3.3v 8-bit'
#+end_example

***** write
#+begin_example
  > nand write  0 /home/ben/wally/journal/project/arm/arm/tq2440/led/led.bin 0
  wrote file /home/ben/wally/journal/project/arm/arm/tq2440/led/led.bin to nand flash 0 up to offset 0x00000800 in 2.092001s (0.099 kib/s)
#+end_example
***** poll
poll 轮询
#+begin_example
  > poll
  background polling: on
  tap: s3c2440.cpu (enabled)
  target state: halted
  target halted in arm state due to debug-request, current mode: supervisor
  cpsr: 0x80000053 pc: 0x33d15980
  mmu: enabled, d-cache: enabled, i-cache: enabled
#+end_example

**** 常用命令

***** 目标板状态处理命令(target state handling)
+ poll 查询目标板的当前状态
+ halt 中断目标板的运行
+ resume [address] 恢复目标板的运行，指定地址则从地址处
+ step [address] 单步

***** 断点命令
+ bp <addr> <lenght> [hw] 在地址addr处设置断点，指令长度为length，hw表
  示硬件断点
+ rbp <addr>  删除地址处的断点

***** 内在访问指令
+ mdw <addr> [count] 显示从地址addr开始的count（缺省1）个字（4字节）
+ mdh <addr> [count] 显示从地址addr开始的count个半字（2字节）
+ mdb <addr> [count] 显示从地址addr开始的count个字节

+ mww <addr> <value> 向地址addr写入一个字，值为value
+ mwh <addr> <value> 向地址addr写入一个半字，值为value
+ mwb <addr> <value> 向地址addr写入一个字节，值为value

+ load_image <file> <address> ['bin'|'ihex'|'elf']
  将文件file载入地址为addr的内在，格式有bin, ihex, elf
+ dump_image <file> <address> <size>
  将内存从地址address开始的size字节数据读出，保存到文件file中
+ verify_image <file> <address> ['bin'|'ihex'|'elf']
  将文件file与内存地址address开始的数据进行比较

***** nand
help nand
nand
      nand flash command group (command valid any time)
  nand check_bad_blocks bank_id [offset length]
        check all or part of nand flash device for bad blocks
  nand device bank_id driver target [driver_options ...]
        defines a new nand bank (configuration command)
  nand drivers
        lists available nand drivers (command valid any time)
  nand dump bank_id filename offset length ['oob_raw'|'oob_only']
        dump from nand flash device
  nand erase bank_id [offset length]
        erase all or subset of blocks on nand flash device
  nand info [banknum | first_bank_num last_bank_num]
        print info about one or more nand flash devices
  nand init
        initialize nand devices (configuration command)
  nand list
        list configured nand flash devices
  nand probe bank_id
        identify nand flash device
  nand raw_access bank_id ['enable'|'disable']
        raw access to nand flash device
  nand verify bank_id filename offset
            ['oob_raw'|'oob_only'|'oob_softecc'|'oob_softecc_kw']
        verify nand flash device
  nand write bank_id filename offset
            ['oob_raw'|'oob_only'|'oob_softecc'|'oob_softecc_kw']
        write to nand flash device

***** cpu架构相关命令
+ armv4 reg 打印寄存器的值
+ arm7_9 sw_bkpts <enable|disable> 使能或禁止软件断点
+ arm920t cp15 <num> [value] 显示/修改cp15协处理器的寄存器
+ arm920t md<bhw>_phys <addr> [count] 显示物理地址addr处的内存
+ arm920t mw<bhw>_phys <addr> <value> 修改物理地址addr处的内存
+ arm920t virt2phys <va> 获取虚拟地址va对应的物理地址

***** 其它命令
script <file> 执行file文件中的命令



*****

**** 直接使用openocd命令进行调试（如上）
1. telnet localhost 4444
2. openocd命令
**** 使用gdb调试
*** GDB常用命令                                                       :gdb:
**** 启动/退出

+ gdb [file] 或xxx-xxxx-xxxx-xxxx-gdb [file]：x表示前缀字符，启动gdb，调试file(也可以先不指定文件)。

+ quit 退出gdb。

**** 连接操作

+ target remote ip:port ：远程连接，ip表示主机ip地址或主机名(如localhost)，port表示端口号，即配置脚本中gdb_port指定端口号。

**** 文件操作

+ *file* <file> ：载入文件file，注意：不会下载到目标板上。
+ *load* [file] ：把文件下载到目标板上，如果不指定file，则下载之前指定过的(比如file 命令指定的，或是gdb 运行时指定的文件)。

**** 查看源程序

+ *list <function>* ： 列出某个函数function。
+ *list <linenum>* ：以当前源文件的某行linenum为中间显示一段源程序。
+ *list*  接着前一次继续显示。
+ *break *<address>* ：在某个地址上设置断点，比如 break *0x84。
+ *list -* ：显示前一次之前的源程序。
+ *list <filename:function>或list <filename:linenum>* ：显示指定文件的一段程序。
+ *info source* ： 查看当前源程序。
+ *info stack* ：查看堆栈信息。
+ *info args* ： 查看当前的参数。

**** 断点操作

+ *break <function>* ：在函数入口设置断点。
+ *break <linenum>* ：在当前源文件的某一行上设置断点。
+ *break <filename:linenum>* ：在指定源文件的某一行上设置断点。
+ *info br* ：查看断点。
+ *delete <number>* ： 删除断点。
+ *diable <number>* ： 禁止断点。
+ *enable <number>* ：使能断点。

**** 监视点(watch)操作

+ *watch <expression>* ：当指定变量被写时，程序被停止。
+ *rwatch <expression>* ：当指定变量被读时，程序被停止。

**** 数据操作

+ *print < expression >* ：查看数据。
+ *set varible=value* ：设置变量。
+ *x /nfu addr* ： 检查内存值。
  - *n* 代表重复数
  - *f* 代表输出格式
    + *x* ：16 进制整数格式
    + *d* ：有符号十进制整数格式
    + *u* ：无符号十进制整数格式
    + *f* ：浮点数格式
  - *u* 代表输出格式* ：
    + *b* ：字节(byte)
    + *h* ：双字节数值
    + *w* ：四字节数值
    + *g* ：八字节数值

  比如“x /4ub 0x0”将会显示0 地址开始到4 个字节。

**** 执行程序

+ *step* ：单步执行，会跟踪进入一个函数。
+ *next* ：单步执行，指令则不会进入函数。
+ *nexti* ：单步执行，执行一条汇编指令。
+ *continue* 继续执行程序，加载程序后也可以用来启动程序

**** 帮助

+ *help [command]* ：列出帮助信息，或是列出某个命令的帮助信息。

**** 其他命令

+ *monitor <command …>* ：调用gdb 服务器软件的命令，比如：“monitor mdw 0x0”就是调用openocd 本身的命令“mdw 0x0”。

*** tq2440                                                         :tq2440:
**** 安装交叉工具链 arm-linux-gcc
安装： sudo tar zxvf tools/arm-linux-gcc-4.3.2.tgz -c /
配置： .bashrc
export path=$path:/usr/local/arm/4.3.2/bin/

**** 编译
#+begin_example
  led $ ls
  led.lds  led.s  makefile

  led $ arm-linux-gcc -g -c led.s
  led $ ls
  led.lds  led.o  led.s  makefile

  led $ arm-linux-ld -tled.lds -o led.elf led.o
  led $ ls
  led.elf  led.lds  led.o  led.s  makefile

  led $ arm-linux-objcopy -o binary led.elf led.bin
  led $ ls
  led.bin  led.elf  led.lds  led.o  led.s  makefile
#+end_example

1. 编译汇编文件： *arm-linux-gcc* -g -c led.s => led.o
2. 链接： *arm-linux-ld* -tled.lds -o led.elf led.o => led.elf
3. 格式转换： *arm-linux-objcopy* -o binary led.elf led.bin => led.bin
   elf文件不能直接烧录到开发板中



使用makefile集成
#+begin_example
  all: led.o
          arm-linux-ld -tled.lds -o led.elf led.o
          arm-linux-objcopy -o binary led.elf led.bin

  led.o : led.s
          arm-linux-gcc -g -o led.o -c led.s

  .phony: clean
  clean:
          rm *.o led.elf led.bin
#+end_example

**** 烧写
最终被烧 *二进制文件* 写到 *nand* 中

nor flash中有辅助烧录程序

*** OpenJTAG                                                     :openjtag:

**** about
open jtag project is an *open source hardware and software* for a
*high speed usb jtag tool*.

in this site, you can find and download all necesary files to make
your jtag device. the electric schematics, the pcb design including
gerber files, the vhdl project in altera quartus ii format, and the
c++ examples in microsoft visual studio 2005, are free to be
downloaded

**** resources
+ [[http://www.openjtag.org/][homepage]]

*** git push without entering username and password                :weekly:

[[http://stackoverflow.com/questions/6565357/git-push-requires-username-and-password][stackoverflow]]

a common mistake is cloning *using the default (https) instead of
ssh*. you can correct this by going to your repository, clicking the
ssh button left to the url field and updating the url of your origin
remote like this:

#+begin_latex
\begin{minted}[frame=single, mathescape]{sh}
git remote set-url origin ssh://git@github.com:username/repo.git
\end{minted}
#+end_latex

[[using an https remote url has some advantages: it's easier to set up than ssh, and usually works through strict firewalls and proxies. however, it also prompts you to enter your github credentials every time you pull or push a repository.][github help]]

using an https remote url has some advantages: it's easier to set up
than ssh, and usually works through strict firewalls and
proxies. however, it also prompts you to enter your github credentials
every time you pull or push a repository.

[[using an https remote url has some advantages: it's easier to set up than ssh, and usually works through strict firewalls and proxies. however, it also prompts you to enter your github credentials every time you pull or push a repository.][github]]
*caching your github password in git*

** 2015/11/20
*** latex thesis
CLOCK: [2015-11-20 五 14:12]--[2015-11-20 五 16:15] =>  2:03
CLOCK: [2015-11-20 五 11:51]--[2015-11-20 五 11:53] =>  0:02

**** 文件后缀bst cls
+ *cls* (class): 稿件类型文件，可用命令\documentclass调用。
+ *bst*: BibTeX-style-file

**** encoding                                                   :encoding:

多人合作的时候涉及多平台，因而统一编码非常重要。
#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
% !mode:: "tex:utf-8"
...
\end{minted}
#+end_latex

**** 模板声明
#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  \NeedsTeXFormat{LaTeX2e}[2007/10/19]
  \ProvidesClass{buaathesis}
                [2012/07/06 v0.8
  The LaTeX template for thesis of BUAA]
  \typeout{Document Class `buaathesis' v0.8 by BHOSC (2012/07)}

  ...

  \DeclareOption{twoteacher}{\buaa@twoteachertrue}
  % 其余选项传递给ctexbook
  \DeclareOption*{\PassOptionsToClass{\CurrentOption}{ctexbook}}
  \ProcessOptions\relax
  % 引用ctexbook及基本设置
  \LoadClass[cs4size,a4paper,fancyhdr]{ctexbook}[2007/10/19]

  %%%%%%%%%% global package %%%%%%%%%%
  % 全局通用宏包

  \RequirePackage{ifthen}

  \end{minted}
#+end_latex

1. \textbackslash{}NeedsTeXFormat
   specifies which version of TeX or LaTeX is required at least to run
   your package. The optional date may be used to specify the version
   more precisely.

2. \textbackslash{}ProvidesClass
   A package introduces itself using this command.
   1) <name> should be identical to the basename of the file itself.
   2) <version> should should begin with a date in the format
      YYYY/MM/DD. Version information should be kept updated while
      developing a package.

3. \textbackslash{}typeout

4. \textbackslash{}RequirePackage
   is equivalent to \textbackslash{}usepackage.

5. \textbackslash{}DeclareOptions
   are end-user parameters. Each option is declared by one such
   command.

6. \textbackslash{}ExecuteOptions{...}
   tells which are the default.

7. \textbackslash{}ProcessOptions\textbackslash{}relax
   terminates the option processing.

8. \textbackslash{}endinput
   this must be the last command(for package(.sty) not for class(cls)).

**** 选项
#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
% 本模板自身包含五个选项
% 前四个为对应学位类型，决定不同样式
% 第五个为颜色选项，用于电子版的情况
\newif\ifbuaa@bachelor\buaa@bachelorfalse
\newif\ifbuaa@master\buaa@mastertrue
\newif\ifbuaa@engineer\buaa@engineerfalse
\newif\ifbuaa@doctor\buaa@doctorfalse
\newif\ifbuaa@color\buaa@colorfalse
\newif\ifbuaa@twoteacher\buaa@twoteacherfalse
\DeclareOption{bachelor}{\buaa@bachelortrue}
\DeclareOption{master}{\buaa@mastertrue}
\DeclareOption{engineer}{\buaa@engineertrue}
\DeclareOption{doctor}{\buaa@doctortrue}
\DeclareOption{color}{\buaa@colortrue}
\DeclareOption{twoteacher}{\buaa@twoteachertrue}
% 其余选项传递给ctexbook
\DeclareOption*{\PassOptionsToClass{\CurrentOption}{ctexbook}}
\end{minted}
#+end_latex

**** 字体与颜色
#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  \setmainfont{Times New Roman}
  % 不需要设置CJKmainfont，ctex 宏包已经很好的处理了
  % 不仅设置了粗体为黑体，斜体为楷体，还兼容了winfonts和adobefonts
  % 直接设置反而会在只有adobefonts的情况下报错
  % \setCJKmainfont{宋体}
  \setCJKfamilyfont{hwxingkai}{STXingkai}
  \newcommand{\hwxingkai}{\CJKfamily{hwxingkai}}
  \newcommand{\xiaochuhao}{\fontsize{32pt}{\baselineskip}\selectfont}

  %%%%%%%%%% color %%%%%%%%%%
  % 颜色设置

  % 只用于电子版
  \RequirePackage{color}
  \definecolor{dkgreen}{rgb}{0,0.6,0}
  \definecolor{gray}{rgb}{0.5,0.5,0.5}
  \definecolor{mauve}{rgb}{0.58,0,0.82}
  \end{minted}
#+end_latex

1. \textbackslash{}setmintfont
2. \textbackslash{}newcommand{}{}
3. \textbackslash{}{}{}{}

**** 页边距
#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  \RequirePackage{geometry}
  \newgeometry{
      top=30mm, bottom=25mm, left=30mm, right=20mm,
      headsep=5mm,
  }
  \savegeometry{bachelorgeometry}
  \newgeometry{
      top=25mm, bottom=25mm, left=30mm, right=20mm,
      headsep=5mm, headheight=10mm, footskip=10mm,
  }
  \savegeometry{mastergeometry}

  \ifbuaa@bachelor
      \loadgeometry{bachelorgeometry}
  \else
      \loadgeometry{mastergeometry}
  \fi

  \end{minted}
#+end_latex

+ \textbackslash{}newgeometry
+ \textbackslash{}savegeometry
+ \textbackslash{}if...\textbackslash{}else...\textbackslash{}fi

**** 其它间距

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  \renewcommand{\baselinestretch}{1.5}
  \setlength{\parindent}{2em}
  \setlength{\floatsep}{3pt plus 3pt minus 2pt}      % 图形之间或图形与正文之间的距离
  \setlength{\abovecaptionskip}{10pt plus 1pt minus 1pt} % 图形中的图与标题之间的距离
  \setlength{\belowcaptionskip}{3pt plus 1pt minus 2pt} % 表格中的表与标题之间的距离
  \end{minted}
#+end_latex

+ \textbackslash{}renewcommand
+ \textbackslash{}setlength

**** 汉化
#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  \renewcommand{\contentsname}{目\qquad 录}
  \renewcommand\listfigurename{插\ 图\ 目\ 录}
  \renewcommand\listtablename{表\ 格\ 目\ 录}
  \renewcommand\bibname{参\ 考\ 文\ 献}
  \renewcommand{\figurename}{图}
  \renewcommand{\tablename}{表}
  \end{minted}
#+end_latex

**** 段落格式
#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  % 格式
  \CTEXsetup[
      format={\centering\zihao{3}\heiti},
      nameformat={},
      aftername={\quad},
      titleformat={},
      beforeskip={-.5\baselineskip},
      afterskip={\baselineskip},
  ]{chapter}
  \CTEXsetup[
      aftername={\quad},
      beforeskip={.5\baselineskip},
      afterskip={.5\baselineskip},
  ]{section}
  \CTEXsetup[
      format={\zihao{-4}\heiti},
      aftername={\quad},
      beforeskip={.5\baselineskip},
      afterskip={.5\baselineskip},
  ]{subsection}
  \ifbuaa@bachelor
      \CTEXsetup[
          name={,},
          number={\arabic{chapter}},
      ]{chapter}
      \CTEXsetup[
          format={\zihao{-4}\heiti},
      ]{section}
  \else
      \CTEXsetup[
          name={第,章},
          number={\chinese{chapter}},
      ]{chapter}
      \CTEXsetup[
          format={\zihao{4}\heiti},
      ]{section}
  \fi

  \end{minted}
#+end_latex

**** 图片
#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  %%%%%%%%%% picture %%%%%%%%%%
  % 图片

  \RequirePackage{graphicx}
  \DeclareGraphicsExtensions{.eps,.ps,.jpg,.bmp}
  \graphicspath{{figure/}}
  \RequirePackage{pifont} % “秘级”后的五角星
  \RequirePackage{subfigure}

  \end{minted}
#+end_latex

**** 列表
#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
%%%%%%%%%% list %%%%%%%%%%
% 列表

\RequirePackage{enumitem}
\setlist{noitemsep}
\setlist[1,2]{labelindent=\parindent}
\setlist[enumerate,1]{label=\arabic*、}
\setlist[enumerate,2]{label=（\arabic*）}
\setlist{
    topsep=0pt,
    itemsep=0pt,
    partopsep=0pt,
    parsep=\parskip,
}

\end{minted}
#+end_latex

**** 代码
#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  %%%%%%%%%% code %%%%%%%%%%
  % 代码

  % Listing 的设置请参考 http://en.wikibooks.org/wiki/LaTeX/Packages/Listings
  \RequirePackage{listings}
  \lstset{
      backgroundcolor=\color{white},
      basicstyle=\zihao{5}\ttfamily,
      columns=flexible,
      breakatwhitespace=false,
      breaklines=true,
      captionpos=b,
      frame=single,
      numbers=left,
      numbersep=5pt,
      showspaces=false,
      showstringspaces=false,
      showtabs=false,
      stepnumber=1,
      rulecolor=\color{black},
      tabsize=2,
      texcl=true,
      title=\lstname,
      escapeinside={\%*}{*)},
      extendedchars=false,
      mathescape=true,
      xleftmargin=3em,
      xrightmargin=3em,
  }
  \end{minted}
#+end_latex

**** 定理

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  %%%%%%%%%% theorem %%%%%%%%%%
  % 定理

  \theoremsymbol{\ensuremath{\square}}
  \newtheorem*{proof}{证明}
  \theoremstyle{plain}
  \theoremsymbol{}
  \theoremseparator{：}
  \newtheorem{assumption}{假设}[chapter]
  \newtheorem{definition}{定义}[chapter]
  \newtheorem{proposition}{命题}[chapter]
  \newtheorem{lemma}{引理}[chapter]
  \newtheorem{theorem}{定理}[chapter]
  \newtheorem{axiom}{公理}[chapter]
  \newtheorem{corollary}{推论}[chapter]
  \newtheorem{exercise}{练习}[chapter]
  \newtheorem{example}{例}[chapter]
  \newtheorem{remark}{注释}[chapter]
  \newtheorem{problem}{问题}[chapter]
  \newtheorem{conjecture}{猜想}[chapter]
  \end{minted}
#+end_latex

**** 标题

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  %%%%%%%%%% caption %%%%%%%%%%
  % 图表标题

  \RequirePackage{caption}
  \DeclareCaptionFormat{bachelorfigure}{\songti\zihao{5}{#1\textrm{#2}#3}}
  \DeclareCaptionFormat{bachelortable}{\heiti\bf\zihao{5}{#1\textrm{#2}#3}}
  \DeclareCaptionFormat{bachelorlstlisting}{\songti\bf\zihao{5}{#1\textrm{#2}#3}}
  \DeclareCaptionFormat{masterfigure}{\bf\songti\zihao{5}{#1\textrm{#2}#3}}
  \DeclareCaptionFormat{mastertable}{\bf\songti\zihao{5}{#1\textrm{#2}#3}}
  \DeclareCaptionFormat{masterlstlisting}{\bf\songti\zihao{5}{#1\textrm{#2}#3}}
  \ifbuaa@bachelor
      \captionsetup[figure]{format=bachelorfigure,labelsep=quad}
      \captionsetup[table]{format=bachelortable,labelsep=quad}
      \captionsetup[lstlisting]{format=bachelorlstlisting,labelsep=quad}
      \renewcommand{\thefigure}{\arabic{chapter}.\arabic{figure}}
      \renewcommand{\thetable}{\arabic{chapter}.\arabic{table}}
      \renewcommand{\theequation}{\arabic{chapter}.\arabic{equation}}
  \else
      \RequirePackage{remreset}
      \@removefromreset{table}{chapter}
      \@removefromreset{figure}{chapter}
      %使图表的标号与章节无关
      \captionsetup[figure]{format=masterfigure,labelsep=quad}
      \captionsetup[table]{format=mastertable,labelsep=quad}
      \captionsetup[lstlisting]{format=masterlstlisting,labelsep=quad}
      \renewcommand{\thefigure}{\arabic{figure}}
      \renewcommand{\thetable}{\arabic{table}}
      \renewcommand{\theequation}{\arabic{chapter}.\arabic{equation}}
  \fi
  \end{minted}
#+end_latex

**** 页码
#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  % 正文前的页码设置位大写罗马数字
  \renewcommand{\frontmatter}{
      \cleardoublepage
      \@mainmatterfalse
      \ifbuaa@bachelor
          \pagenumbering{Roman}
      \else
          \pagenumbering{roman}
      \fi
  }

  % 保证偶数页结束章节
  \newcommand{\clearemptydoublepage}{%
      \clearpage
      \if@twoside
          \ifodd
              \c@page
          \else
              \hbox{}\thispagestyle{empty}\newpage
              \if@twocolumn
                  \hbox{}\newpage
              \fi
          \fi
      \fi
  }
  \end{minted}
#+end_latex

**** 首页
好长！

#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
% 中文首页
\newcommand{\titlech}{
....
}

% 英文首页
\newcommand{\titleeng}{
....
}
\end{minted}
#+end_latex

**** 摘要
#+begin_latex
% 中文摘要
\begin{minted}[frame=single, mathescape]{latex}
\newenvironment{cabstract}{
...
}

% 英文摘要
\newenvironment{eabstract}{
...
}
\end{minted}
#+end_latex

**** 其它
+ 声明
+ 任务书
+ 授权页
+ 用户信息

*** \textbackslash{}newenvironment                         :newenvironment:

#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\newenvironment{envname}[narg]{def1}{def2}
\end{minted}
#+end_latex

defines a new environment,  optionally with some number of arguments
*narg*. *def1* is executed when the environment is entered and *def2*
is executed when it is exited.

*** \LaTeX 名字命令                                          :renewcommand:
#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  \renewcommand{\contentsname}{目\qquad 录}
  \renewcommand\listfigurename{插\ 图\ 目\ 录}
  \renewcommand\listtablename{表\ 格\ 目\ 录}
  \renewcommand\bibname{参\ 考\ 文\ 献}
  \renewcommand{\figurename}{图}
  \renewcommand{\tablename}{表}
  \end{minted}
#+end_latex

*** \LaTeX 中的长度                                                :length:

1. tex中的长度
   + *mm*    毫米
   + *cm*    厘米
   + *in*    英寸＝2.54cm＝72.27pt
   + *pt*    点(默认)
   + *em*    大写字母m的宽度
   + *ex*    小写字母x的高度

2. 参考
   + [[https://app.yinxiang.com/shard/s52/nl/11551545/2732e9a9-3a82-48d9-8610-796c092ae88b?title=latex%e5%91%bd%e4%bb%a4%e9%80%9f%e6%9f%a5%e6%89%8b%e5%86%8c-fruitfly1026-chinaunix%e5%8d%9a%e5%ae%a2][blog]]

*** length                                                         :length:
**** \textbackslash{}parindent                                 :parindent:

*paragraph indent*

horizontal indentation added at the begining of paragraph.

**** \textbackslash{}floatsep                                   :floatsep:

*float seperation*

distance between floats that appear at the top or bottom of a text
page

*** \textbackslash{}setlength                                   :setlength:

#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\setlength{\nl}{length}
\end{minted}
#+end_latex

sets value of length command *\textbackslash{}nl* to *length*

+ 参考
  - [[file:~/document/programming/tex/latex%e5%91%bd%e4%bb%a4%e9%80%9f%e6%9f%a5%e6%89%8b%e5%86%8c.pdf::trailer%0d<<%0d/size%20122%0d/info%20116%200%20r%20%0d/root%20115%200%20r%20%0d/prev%20304023%20%0d/id%5b<34f5bfc030aea1e56aea670e2be665ff><c4ee31aa4c02bc5316e5a8813d952c58>%5d%0d>>%0dstartxref%0d308437%0d%25%25eof%0d][latex命令速查手册]]

*** \textbackslash{}newcommand                                 :newcommand:

#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\newcommand{\cs}[narg]{def}
\end{minted}
#+end_latex

define a new control sequence *\textbackslash{}cs* with defintion *def*.

optionally,  /narg/ is the number of arguments,  indicated in *def* as
#1,  #2, etc.

+ 参考
  [[file:~/document/programming/tex/latex%e5%91%bd%e4%bb%a4%e9%80%9f%e6%9f%a5%e6%89%8b%e5%86%8c.pdf::trailer%0d<<%0d/size%20122%0d/info%20116%200%20r%20%0d/root%20115%200%20r%20%0d/prev%20304023%20%0d/id%5b<34f5bfc030aea1e56aea670e2be665ff><c4ee31aa4c02bc5316e5a8813d952c58>%5d%0d>>%0dstartxref%0d308437%0d%25%25eof%0d][latex命令速查手册]]
*** \textbackslash{}definecolor                               :definecolor:
*** \textbackslash{}renewcommand                             :renewcommand:

#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\renewcommand{\cs}[narg]{def}
\end{minted}
#+end_latex

redefines an existing control sequence *\textbackslash{}cs*  with
definition *def*

optionally,  /narg/ is the number of arguments,  indicated in *def* as
#1, #2, etc.

*** self defined conditions                                         :newif:

you can create new conditionals (as a kind of boolean variables) with
the *\textbackslash{}newif* command. with this self defined conditionals you can
control the output of your code in an elegant way. the best way to
illustrate the use of conditionals is through an example.

two versions of a document must be generated. one version for group a
the other one for the rest of people (i.e. not belonging to group a):

1. we use \textbackslash{}newif to define our conditional
   (i.e. boolean variable).
   #+begin_latex
   \begin{minted}[frame=single, mathescape]{latex}
   \newif\ifgroupa
   \end{minted}
   #+end_latex

2. in the following way we set a value (true or false) for our
   conditional
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{latex}
       \groupatrue % or
       \groupafalse
       that is:

       \<conditionalsname>true
       \<conditionalsname>false
     \end{minted}
   #+end_latex
   depending on which value we want to set in our conditional.

3. now we can use our conditional anywhere after in an if control
   structure.
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{py}
       \ifgroupa
       % here we write the code of the document that is
       % intended for the group a
       \else
       % here we write the code of the document that is
       % intended for the rest of the people
       \fi
     \end{minted}
   #+end_latex

   a full example is:
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{py}
     \newif\ifdirector

     %i set the conditional to false
     \directorfalse

     \ifdirector
      i write something for the director.
     \else
      i write something for common people.
     \fi
     \end{minted}
   #+end_latex

   i write something for common people.

4. 参考
   + [[https://en.wikibooks.org/wiki/latex/plain_tex][wikibook:latex]]

*** TeX 文件后缀说明
**** 配置文件

|------+----------------------------------------------------------------------|
| .afm | Adobe Type1字体描述文件，ASCII格式。                                 |
|------+----------------------------------------------------------------------|
| .bak | 备份文件，当源文件.tex存盘时由系统自动创建。                         |
|------+----------------------------------------------------------------------|
| .bib | 文献数据库。                                                         |
|------+----------------------------------------------------------------------|
| .cfg | 供类包或宏包调用的配置文件。                                         |
|------+----------------------------------------------------------------------|
| .cls | 稿件类型文件，可用命令\documentclass调用。                           |
|------+----------------------------------------------------------------------|
| .doc | 类包或宏包的说明文件。                                               |
|------+----------------------------------------------------------------------|
| .dtx | 包含类或宏包及其说明文件的文件，需用同名.ins文件或docstrip工具分解。 |
|------+----------------------------------------------------------------------|
| .fd  | 字体定义文件，定义某一字族，用于 \LaTeX 字体寻找。                   |
|------+----------------------------------------------------------------------|
| .ins | 同名.dtx的分解文件，用PDF \LaTeX 编译，可得到sty或cls等类型文件。    |
|------+----------------------------------------------------------------------|
| .map | 字体名称与.tfm文件之间的字体映射文件。                               |
|------+----------------------------------------------------------------------|
| .mbs | 主控文件，包含全部文献样式命令，用于生成.bst文献样式文件。           |
|------+----------------------------------------------------------------------|
| .mf  | METAFONT字体描述文件，Knuth教授创立的矢量字体。                      |
|------+----------------------------------------------------------------------|
| .pfa | Type 1字体文件，ASCII格式，一种高品质矢量字体，越放大越清晰。        |
|------+----------------------------------------------------------------------|
| .pfb | Type 1字体文件，二进制格式。                                         |
|------+----------------------------------------------------------------------|
| .pk  | pk字体，一种点阵字体，用于dvi文件预览等。                            |
|------+----------------------------------------------------------------------|
| .pl  | 字体属性列表，可读的字体描述文件。                                   |
|------+----------------------------------------------------------------------|
| .sfd | 子字库定义文件。                                                     |
|------+----------------------------------------------------------------------|
| .sty | 宏包文件，可用命令 \textbackslash{}usepackage调用。                                 |
|------+----------------------------------------------------------------------|
| .tex | \LaTeX 源文件。                                                      |
|------+----------------------------------------------------------------------|
| .tfm | 字体描述文件，设定字体的宽、高和间距等， \LaTeX 用以规划页面。       |
|------+----------------------------------------------------------------------|
| .ttf | Truetype字体，Windows系统使用的一种全真字体。                        |
|------+----------------------------------------------------------------------|
| .vf  | TEX虚拟字体                                                          |
|------+----------------------------------------------------------------------|
| .vpl | 虚拟属性列表，可读的虚拟字体文件。                                   |
|------+----------------------------------------------------------------------|


**** 在源文件编译过程中创建的文件

|----+---------------------------------------------------------|
|.aux| 引用标记记录文件，用于再次编译时生成参考文献和超链接等。|
|----+---------------------------------------------------------|
|.bbl| .blg 由BibTEX编辑.bib后创建的文献文件，再次编译时带入源文件生成文献列表。|
|----+--------------------------------------------------------------------------|
|BibTEX|处理过程记录文件。|
|------+------------------|
|.dbj| 批处理文件，由makebst工具在创建.bst文献样式文件时生成。|
|----+--------------------------------------------------------|
|.dvi| 由 \LaTeX 对.tex源文件编译后创建的输出文件，含有字库信息。|
|----+-----------------------------------------------------------|
|.glo| 术语标记记录文件，用于再次编译时生成术语表。|
|----+---------------------------------------------|
|.idx| 索引资料记录文件，可用makeindex排序后创建索引文件.ind。|
|----+--------------------------------------------------------|
|.ilg| makeindex处理过程记录文件。|
|----+----------------------------|
|.ind| makeindex对.idx排序后创建的索引文件，再次编译时带入源文件生成索引。|
|----+--------------------------------------------------------------------|
|.lof| 图形标题记录文件，用于再次编译时生成图形目录。|
|----+-----------------------------------------------|
|.log| 编译过程记录文件，记录编译时出现的提示、警告和错误信息。|
|----+---------------------------------------------------------|
|.lot| 表格标题记录文件，用于再次编译时生成表格目录。|
|----+-----------------------------------------------|
|.pdf| 由PDF \LaTeX 对.tex或dvipdf对.dvi或pspdf对.ps编译后创建的图形文件。|
|----+--------------------------------------------------------------------|
|.ps| 由dvips对.dvi文件编译后创建的图形文件。|
|---+----------------------------------------|
|.toc| 章节标题记录文件，用于再次编译时生成章节目录。|
|----+-----------------------------------------------|

*** org link                                                         :link:

|---------+-------------------|
| c-c l   | org-store-link    |
| c-c c-l | org-insert-link   |
| c-c c-o | org-open-at-point |
|---------+-------------------|

**** org-store-link
org-store-link is an interactive autoloaded compiled lisp function in
`org.el'.

it is bound to c-c l.

(org-store-link arg)

store an org-link to the current location.

**** org-insert-link
c-c c-l runs the command org-insert-link, which is an interactive
compiled lisp function in `org.el'.

it is bound to c-c c-l, <menu-bar> <org> <hyperlinks> <insert link>.

(org-insert-link &optional complete-file link-location
default-description)

insert a link.  at the prompt, enter the link.

**** org-open-at-point
c-c c-o runs the command org-open-at-point, which is an interactive
compiled lisp function in `org.el'.

it is bound to c-c c-o, <menu-bar> <org> <hyperlinks> <follow link>.

(org-open-at-point &optional arg reference-buffer)

open link at or after point.
if there is no link at point, this function will search forward up to
the end of the current line.
normally, files will be opened by an appropriate application.  if the
optional prefix argument arg is non-nil, emacs will visit the file.
with a double prefix argument, try to open outside of emacs, in the
application the system uses for this file type.

*** find                                                             :find:
1. 功能： 用于在目录树下查找文件，并作出相应的处理

2. 命令格式： *find <path> [-options] [-print|-exec-ok]*

3. 命令参数
   + path: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示
     系统根目录。

   + -print： find命令将匹配的文件输出到标准输出。

   + -exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令
     的形式为'command' {  } \;，注意{   }和\；之间的空格。

   + -ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所
     给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定
     是否执行。

4. 命令选项
   + *-name*   按照文件名查找文件。
   + -perm   按照文件权限来查找文件。
   + -prune  使用这一选项可以使find命令不在当前指定的目录中查找，如果
     同时使用-depth选项，那么-prune将被find命令忽略。

   + -user   按照文件属主来查找文件。
   + -group  按照文件所属的组来查找文件。
   + -mtime -n +n  按照文件的更改时间来查找文件，
     + - n表示文件更改时间距现在n天以内，
     + + n表示文件更改时间距现在n天以前。
   + find命令还有-atime和-ctime 选项，但它们都和-m time选项。

   + -nogroup  查找无有效所属组的文件，即该文件所属的组在/etc/groups中
     不存在。

   + -nouser   查找无有效属主的文件，即该文件的属主在/etc/passwd中不存
     在。

   + -newer file1 ! file2  查找更改时间比文件file1新但比文件file2旧的
     文件。

   + -type  查找某一类型的文件，诸如：
     + b - 块设备文件。
     + d - 目录。
     + c - 字符设备文件。
     + p - 管道文件。
     + l - 符号链接文件。
     + f - 普通文件。

   + -size n：[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节
     计。-depth：在查找文件时，首先查找当前目录中的文件，然后再在其子
     目录中查找。

   + -fstype：查找位于某一类型文件系统中的文件，这些文件系统类型通常可
     以在配置文件/etc/fstab中找到，该配置文件中包含了本系统中有关文件
     系统的信息。

   + -mount：在查找文件时不跨越文件系统mount点。

   + -follow：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。

   + -cpio：对匹配的文件使用cpio命令，将这些文件备份到磁带设备中。

   + -amin n   查找系统中最后n分钟访问的文件
   + -atime n  查找系统中最后n*24小时访问的文件
   + -cmin n   查找系统中最后n分钟被改变文件状态的文件
   + -ctime n  查找系统中最后n*24小时被改变文件状态的文件
   + -mmin n   查找系统中最后n分钟被改变文件数据的文件
   + -mtime n  查找系统中最后n*24小时被改变文件数据的文件

5. 参考
   + [[https://app.yinxiang.com/shard/s52/nl/11551545/e485b74c-eae1-4235-b3be-856404530043?title=%e6%af%8f%e5%a4%a9%e4%b8%80%e4%b8%aalinux%e5%91%bd%e4%bb%a4%ef%bc%8819%ef%bc%89%ef%bc%9afind%20%e5%91%bd%e4%bb%a4%e6%a6%82%e8%a7%88%20-%20peida%20-%20%e5%8d%9a%e5%ae%a2%e5%9b%ad][每天一个linux命令之find]]

*** pdfpages                                                 :pdfpages:pdf:
**** package: pdfpages
*pdfpages* : include multiple pdf pages in latex

**** package options
+ final: insert pages
+ draft: insert pdf filename with a box
+ enable-survey
#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\usepackage[final]{pdfpages}
\end{minted}
#+end_latex

**** \textbackslash{}includepdf
#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\includepdf[key=val]{filename}
\end{minted}
#+end_latex

***** main options
1. *pages*
   selects pages to insert, a comma separated list
   e.g. pages={3, {}, 8-11, 15} 空花括号表空白页

2. *nup*
   put multipages  onto each sheet of paper, default 1x1
   e.g nup=4x2

3. landscape


***** layout options
1. delta
   put some horizontal and vertical *space* between the logical pages.
   default: delat=0 0(seperated by space)

2. offset

3. frame

4. column


**** 参考
+ [[http://tex.stackexchange.com/questions/91440/how-to-include-multiple-pages-in-latex][stackexchange]]
+ [[file:/usr/local/texlive/2014/texmf-dist/doc/latex/pdfpages/pdfpages.pdf::%25pdf-1.5][latex:pdfpages]]

*** minted latex
#+BEGIN_EXAMPLE
  $ pygmentize -L lexers | grep latex
  tex, latex:
#+END_EXAMPLE

*** Ubuntu 文件管理器 书签                                       :bookmark:
c-d
c-b

书签-> 添加

*** 快速切换文件                                                   :buffer:

clock: [2015-11-20 五 11:29]--[2015-11-20 五 11:40] =>  0:11

c-x b ret 键还是多了，而且有helm窗口，有时两个文件之间需要频繁切换。最
好绑定在另外一个快捷键。

快捷键 m-q: m-q 与 m-tab 和 m-～最近。
m-q 被预先绑定在 fill-paragraph

1. 方案1： 定义宏
   1) 可行性： ok
   2) 问题： 中文输入法

2. (other-buffer)
   #+begin_src emacs-lisp
     (define-key global-map "\m-q" nil)
     (define-key global-map "\m-q" '(lambda()
                                      (interactive)
                                      (switch-to-buffer (other-buffer))))
   #+end_src

*** other-buffer                                                   :buffer:

(other-buffer &optional buffer visible-ok frame)

return most recently selected buffer other than buffer.
buffers not visible in windows are preferred to visible buffers, unless
optional second argument visible-ok is non-nil.  ignore the argument
buffer unless it denotes a live buffer.  if the optional third argument
frame is non-nil, use that frame's buffer list instead of the selected
frame's buffer list.

*** define-key                                                        :key:
(define-key keymap key def)

in keymap, define key sequence key as def.
keymap is a keymap.

key is a string or a vector of symbols and characters, representing a
sequence of keystrokes and events.  non-ascii characters with codes
above 127 (such as iso latin-1) can be represented by vectors.
two types of vector have special meanings:
 [remap command] remaps any key binding for command.
 [t] creates a default definition, which applies to any event with no
    other definition in keymap.

def is anything that can be a key's definition:
 nil (means key is undefined in this keymap),
 a command (a lisp function suitable for interactive calling),
 a string (treated as a keyboard macro),
 a keymap (to define a prefix key),
 a symbol (when the key is looked up, the symbol will stand for its
    function definition, which should at that time be one of the above,
    or another symbol whose function definition is used, etc.),
 a cons (string . defn), meaning that defn is the definition
    (defn should be a valid definition in its own right),
 or a cons (map . char), meaning use definition of char in keymap map,
 or an extended menu item definition.

*** bash tagerill_update_project.sh                               :project:

+ 自定义安装的程序命名格式： tagerill_<program>
+ bash 编程风格: 注释是必须的

#+begin_latex
  \begin{minted}[frame=single, mathescape]{sh}
  #! /bin/sh

  # tagerill_update_project.sh

  # version 1.0
  # this is a bash script to initialize a new project of common sense
  # it mainly finishes the following tasks
  # 1. create a new root directory that named by the first arguments
  # 2. create a readme file containing information like timestamps,
  #    author, email, license and so on
  # 3. create a .projectile file for the convinence of projectile to manage it
  #
  # version 1.1
  # add the function of update a project
  #
  # usage
  # tagerill_new_project.sh <project> [comment_str]
  #
  # todo
  # [ ] select a rule of naming versions & update the version information


  # input check
  if [ $# -lt 1 ] || [ $# -gt 2 ]
  then
      echo "error: wrong number of arguments"
      echo "usage: tagerill_new_project.sh <project> [comment_str]"
      exit -1
  fi


  project=$1
  comments=""
  if [ $# -eq 3 ]
  then
      comments=$2
  fi

  # update the project
  if [ -d $project ]
  then
     cd $project
     echo >> readme
     echo -n "modification:" >> readme
     date +%y/%m/%d-%h:%m >> readme
     # todo： 变更版本信息
     if [ $# -eq 3 ]
     then
         echo "comment: $comments" >> readme
     fi
     echo "project: $project updated."
     exit 0
  fi



  # create a new project
  # root workspace
  mkdir $project

  # readme
  cd $project
  touch readme
  echo "project: $project" >> readme
  echo "version: v1.0"
  echo -n "time: " >> readme
  date +%y/%m/%d-%h:%m >> readme
  echo "author: tagerill wong" >> readme
  echo "email: buaaben@163.com" >> readme
  echo "license: gpl v3.0" >> readme

  # .projectile
  touch .projectile

  #
  echo "project: $project has been created"

  exit 0

  \end{minted}
#+end_latex
*** dsp how                                                           :how:

*dsp只是工具，难得不是这个处理器，而是你在应用他时用的原理，技术。*

**** *dsp 和 dip 学习的方法*

作者： 丁建均
国立台湾大学电信工程学研究所

前言：

学过digital signal processing (dsp) 或digital image processing (dip)
的同学都会有这个感想，dsp 和dip 真的是相当「博大精深」的领域，即使是念
了二年的硕士，甚至再念了四年的博士之后，往往都会觉的，似乎对于dsp 和
dip ，只学到其中一小部分，还有许多的东西，在毕业之前，还尚未接触到。

不过，别因此而感到气馁，无论是在学术界还是工业界， *我们看重的，往往是
「专才」而非「通才」* 。一个只熟悉少数几个子领域，但是对这些子领域的了
解专精到别人难以取代的人，往往会比什么都知道一点，但是什么都有其他人可
以取代的人来得受欢迎。要在专业上有登峰造极的表现，也是需要对于某一个子
领域作相当深入的了解。毕竟，达文西的时代已经过去了。过去科学不发达，任
何一个领域都没有众多的文献，只要花一些时间去学习，就可以几乎学通所有相
关的知识。如今，不管是任何一个领域，都有相当丰富的文献，想要同时精通多
个领域，是相当不实际的。与其花时间把各个子领域的知识样样学，样样不精通，
还不如选择少数几个子领域，好好的钻研相关的知识。

但这并不代表，我们在研究所内，就只需针对自己研究的题目好好研究，将其他
dsp、dip 相关的子领域的知识全部忽略…….什么是「硕」士？什么是「博」士？
「硕」和「博」，都有广大的意思。如果念了两年的硕士，或四年的博士，结果
却只有有少数几个东西精通……是不是有点名实不符呢？若你想在学术界发展，
或是在产业界做研发，有的时候，许多的新理论、新产品，是将多个领域的知识，
互相综合、连贯、激荡，才可以创造出来的，如果只通一两个领域，对其他领域
一无所知，在创新上，常常会过到瓶颈。


那么，既然专精于部分的子领域，是很重要的，对各个领域多少了解一点，也是
必需的，可是研究所的时间，又只有短短几年…..如何能同时达成这​​两个目标呢？


以下，我就将我个人学习dsp 和dip 的经验，提供给大家，和各位同学们分享。
我觉的，学习dsp 和dip，可以把握以下几个原则：


(一) 「确定目标」后，采行「广而精」的策略

就如同之前所述，要在研究上达到「登峰造极」的境界，必需要对某些子领域做
非常深入的研究。但是，要增广自己的视野，以助于发明和创造，又必需广泛的
了解dsp、dip 的各个子领域。要同时达成这​​两个目标，就要采行「广而精」的
策略….「广」的意思，就是在研究所这几年之中，对于各个子领域，藉由修课、
旁听、或自修的方式，来了解各个领域的「基本概念」 (注意，「基本概念」即
可，除非你真的打算要精通这个领域)。至于「精」的意思，则是你要从dsp、
dip 的各个子领域当中，选择少数几个你真正有兴趣的子领域，来做深入的研究。


所以，在采行「广而精」这个策略之前，你必需要先确定你的目标，来决定哪些
子领域是你想深入研究的，而哪些领域将不会是你的中心目标，大概了解其中的
基础概念即可。

当然，我们会对一个几乎什么都懂一些的人很崇拜，也会对一个毕生奉献于某个
特定领域做研究的人很尊敬，但是，现实上，成就最大的人，往往是专精于少数
几个领域，同时又对其他领域的知识多少了解一点的人。


(二) 不再把「修课」当成是追求知识的唯一来源

大家有没有想过，为什么大学要修满137 个学分才可以毕业，可是硕士班只要修
24个学分，甚至博士班只要修18个学分就可以毕业？一方面，固然是希望大家有
更多的时间来做研究，一方面，也是希望大家能够开始学着用自己的方式来追求
知识，不再把修课当成是追求知识的唯一来源。


所以，每当我的学生已经快把学分修满的时候，我就会劝他们，如果对什么子领
域有兴趣，可以试着用「旁听」，「听演讲」，「上网找资料」，或是「自已到
图书馆找资料看」的方式，来了解这个子领域，而不鼓励他们超修。事实上，将
来工作之后，几乎已经不能再藉由修课来学习知识了，因此，学习用自修的方式
来增加自己的知识，也是研究所要学到的东西之一。


(三) 改变你修课时的读书习惯…… 对于不同的资料，采行不同的阅读策略

以前，在修课时，读书是以期中期末考为导向，所以，往往就只读教授给的讲义，
或是教授所指定的教课书。而且在考试范围内的，就卖力苦读，考试范围外的，
就完全不读。


但是，当你不再是为了修课而读书，而是为了增广知识和作研究来读书时，就要
改变这样的习惯了。首先，你要看的资料，将比你修课的时候，多了好几倍，不
能再以看一份讲义，或是一本书的部分章节为满足。


其次，你不必像过去修课一样，几乎页页都看，甚至逐字看。在看一篇​​论文，或
是读一本书的章节时，你要先判断，对这个资料，你要精读，还是大略了解即可。
一般而言，介绍基础理论和概念的地方，应该要精读，甚至读得比你准备考试时
还要下功夫。至于较支节，较属于衍生的概念，则略读即可。


判断什么该精读，什么该细读的方法：每篇paper 的前面都有abstract，书上每
个章节的前面也都有introduction，我们可以根据paper 前面的abstract 以及
书本章节的前面的introduction，配合标题，来判断这篇论文或这个章节该深读
或略读。也许，一开始，由于经验不够，判断得不够精准。但是，随着经验的累
积，可以判断得越来越精准。此外，如果你想要快速的读过一篇论文或一个章节，
可以把握几个原则：

(a) 先判断哪一个定理是这篇论文或这个章节的核心概念。接着，再集中精神去
了解这个定理。有时，了解了一个定理，其他的定理也就八九不离十了。这正是
「一法通而万法通」的道理。

(b) 一本书，与其只读过前面几章，还不如读过每一章的前面几个节

(c) 有时，你可以把目标定为了解这篇论文或这个章节的每个“theorems”，
“figures”， “tables”，只要你能够了解这些theorems，figures，tables，
就表示你已经大致上读通了这篇论文或这个章节。

(d) 不打硬战。有时候，看到一大堆数学式，你只要了解作者写这些数学式的目
的是什么即可，如果你决定要精读这篇论文或这个章节，才需花精力好好了解这
些式子。

另外，还有一个重要的原则，写在下一页，供大家参考

(四) 阅读时，要问自己四个问题

在你读一篇论文，或是书本的的一个章节时，可以问自己四个问题：
这章节或论文的所介绍的概念「是什么」？
这章节或论文所提出的理论或方法，有什么「优点」？
这些理论或方法，和我们之前所了解的概念，有什么「关连」？
这些理论或方法，可能有哪些「缺点」

这四个问题，其实，就是你在阅读论文或书本章节时，所应该把握的「重点」。
当你把一篇论文或一个章节读过之后，能够回答这四个问题，就表示你已经读通
了….即使你没有花太多的时间来读这篇论文或这个章节。反之，就算你花了很
多时间来读，读完之后还是不能回答这四个问题，那么就有必要再回顾这篇论文
或这个章节一次，或是好好的动脑思考这四个问题。

当然，不是每一篇论文和每一本书的章节，都会清楚的陈述这四点。尤其，许多
论文的作者，经常都不太愿意提他们的方法的缺点。又由于篇幅的限制，作者常
常不会细说他们的方法和别人的方法之间的关联。因此，有的时候，我们不能只
是猛读人家的论文或书籍章节，自己多动脑思考，才能够真正的回答上述这四个
问题，也才能真正了解别人所提的方法和概念的全貌。


(五) 初学者，看书会比直接看journal paper 妥当

对于想要了解一个领域的初学者，我建议，看书(或看tutorial paper)，会比直
接看期刊论文(journal paper) 来得妥当。因为，期刊论文是有页数的限制，因
此，作者为了避免文章过长，都会把一些较基本的概念略去不说明，或是长话短
说，或是假设读者已经了解了，甚至就连文章中的许多重要公式的推导，也都省
略。因此，要读懂一篇期刊论文的难度，往往极高。反之，书的作者，由于没有
页数限制，所以就能够把概念说得较为清楚。而且，他们写书时，都会考虑书的
销售量，也比较会花心思让大部分的读者都可以了解书的内容。

所以，对于初学者，我的建议是，看书，会比直接看期刊论文适合。如果这个子
领域真的没有适当的书籍可以看，我建议可以去找tutorial paper 来看。什么
是 tutorial paper？就是一种将某个子领域，到目前为止，所有的发展做个总
整理的论文。比如说，对于研究信号处理的人而言， ieee signal processing
magazine 这个期刊就有专门刊登对信号处理的子领域做总整理的tutorial
paper。


(六) 用自己的方式，来将所学到的东西来做整理

做学问，有一个重要的原则，就是要将「别人的知识」变成「自己的知识」。如
果，你只是像个扫描机，把书本上的文字扫过一遍，那么这些知识，还是别人的，
顶多只能在你大脑中的暂存记忆体(cache) 存在一下子，很难真正的把这些知识
长久的存在大脑的「硬碟」当中。

所以，做学问时，一定要用自己的方式，来对所学到的东西做整理。比如说，当
你在学影像处理，看到dct (discrete cosine transform) 的时候，书本或论文
往往只会讲到dct 对于影像压缩有帮助，经过转换之后，能量会较集中在低频。
但是，你自己的脑海中，必需要将dct 和其他你曾经学过的transforms 作比较，
例如， dct 和哪些transforms 相似？ dct 和dft (discrete fourier
transform) 以及dst (discrete sine transform) 之间有什么关联？ dct、dft、
dst 之间有什么共通的性质，有哪些性质不同？他们的应用分别是什么？

很多观念，必需要用「比较」的方式来厘清。 「比较」做得越多，就越能够对
你所读到的东西有概念。如果只是学习dct，而不去和已经学过的dft 来互相比
较，就难以清楚dct 在讯号处理中所扮演的角色。

此外，你还可以多画系统图，来表示你新学到的东西和你以前学到的东西，有什
么关联。或者多画table，来比较性质和优缺点。将概念做系统性的整理，不只
有助于学习，同时也有助于创造….因为，整理得越清楚，越能明白一个东西的
优缺点所在和需要改良的地方，也越能够将不同的概念结合在一起，创造出新的
东西来。

(七) 自己动手来推导数学式

很多学生，一看到论文或者书上有一大堆的数学式，常常就吓到了。然而，如果
各位只是想当一位普通的技术人员则已，如果各位有志于创造新理论，研发新产
品，还是不能没有足够的数学基础。虽然说，我个人不建议打硬战，对于一篇文
章中的每个数学式都深究其来源，但是，至少…这篇文章当中的核心定理是如何
推导出来的，同学们还是应该要深加研究，除非你觉的这篇文章真的不重要。

如果你只是看论文的文字或数学式，往往会不清楚了解作者想表达的意思。反而
是藉由数学式的推导，有时反而比较容易了解。毕竟，数学，是最共通的语言。

经由自己的数学推导，你可以更加深入了解这个核心定理的意义，甚至，有的时
候，还可以发现这个定理不足的地方(甚至错误的地方)，进而改良它，而创造出
新的定理。

(八) 建立资料库

除了读资料的方式之外，修课和做研究还有一个重要的不同处，那就是，修课的
期中考和期末考，大部分都是「close book」的方式，可是做研究却主要是
「open book」的方式。当你做研究时，不必像修课的时候，把看过的东西都背
下来。当你做研究遇到不了解，或是曾学过但记不清更的东西，只需要知道这些
东西在哪边可以查得到，再花一些时间查询相关资料即可。

但是，如果各位同学考过「open book」的考试，一定有这个经验…当你连问题
的解答在哪边可以查得到都不了解的时候，恐怕就无法拿到好的分数了。所以，
做研究也是一样，一定要替自己建构一个有系统的资料库，以做为遇到问题时查
阅之用。

就如同我在做研究时，经常计算fourier transform 和laplace transform，所
以我就从几本书上把fourier transform 和laplace transform 的tables 印下
来放在桌边。我经常计算一个式子的积分(integral)，所以我就将网路上几个可
以查询积分的网站(像http://integrals.wolfman.com/index.jsp) 放在我的最
爱。我看过很多篇论文和书籍，但有的时候，时间久了，会忘记这些论文和书籍
的内容。所以，我都有自己建立的reference 资料库，在一篇论文的后面，加一
两行的注解，来注明这篇论文的重点，如

[j25] yi ohta, t. kanade, and t. sakai, “color information for region
segmentation,” computer graphics and image processing, vol. 13,
no. 3, pp. 222-241, 1980. (the authors introduced the integer
karhunen-loeve average (kla) transform based on the statistics of
several natural images)

加了注解，除了方便回忆这篇论文的重点以外，以后写论文投稿时，也可以较快
查阅哪些论文应该放在参考资料当中。

各位同学，可能从进硕士班之后，未来四十年主要的工作都是在做研究(差别只
是在学校进修、在学术界做研究、或是在产业界做研发而已)。若能早一点建立
自己的研究资料库，对将来的研究生涯是有帮助的。

(九) 该熟记的基本概念，还是应该熟记

就如同在考open book 的考试的时候，如果连基本的公式也没有背下来，还要去
查课本，那将严重的耽误考试时间，同样的，在做研究时，虽然有一大堆资料可
以查，但是，基本的概念，该熟记的选是应该熟记。

就如同对做dsp 和dip 的人而言，dft (discrete fourier transform) 和dct
(discrete cosine transform) 都是相当重要，经常出现的东西。如果同学们连
这些东西的式子都没有背下来，做研究和写论文时，碰到dft 和dct 还要花时间
去查课本，那将会是件很没效率的事。更何况，我们做研究时，经常会在琐碎的
时间或是休息的时间来思考问题，若能够将一些重要的概念背下来，将会有助于
问题的思考。

我们会要定小孩子背九九乘法表，或是要求家教学生背中学课本的公式。同样的，
当我们做研究时，遇到常用且重要的公式，不妨把它们背下来吧！

(十) 先想想看，如果是你，该如何解决同样的问题

这是对我个人而言，受益颇多的读书习惯，所以特意用红字标出来，且放在文章
压轴之处，来供大家参考。

当我在读一篇期刊论文，或一本书的某些章节，我常常先看完标题、摘要之后，
就先停下来，不急着看内容，并且想想看，如果换作是我，该如何解决作者所提
出的问题。想过之后，再看内容。有时候，会发现作者的想法也和我相同，或是
作者的想法比我更好，精妙的令人佩服。我发现…当自己曾经思考过一个问题之
后，再看别人解决这个问题的方法，会变得比较容易理解。因为一个问题的征结
和关键，若自己不曾试图去解决，是比较难以体会的。

甚至，幸运的，有些时候，会发现我解决这个问题的方法，比作者提出的更好，
或者是我的方法可以和作者的方法相互综合…这时，就代表我发现了一个新的概
念，可以写出新的论文来投稿了～～～我个人有很多篇论文，真的就是由这种方
式创造出来的。有的时候，看完别人的方法再想办法创新，会使得自己的思路会
跟着别人的方法走而受限。反之，当你还不知道别人的方法时，思绪会较为自由，
不受限制，也会经常得出许多意外的创新。

*** arduino sevo                                                    :servo:
[[/home/ben/tiger/figures/scrot/665pwy.png]]

[[/home/ben/tiger/figures/scrot/665oqh.png]]

**** servo
#+begin_latex
  \begin{minted}[frame=single, mathescape]{cpp}
  #include <servo.h>

  servo myservo;                  /* sevo object */

  int angle = 0;

  void setup()
  {
    //  myservo.attach(9);                /* attaches the servo on pin 10 */
    myservo.attach(9, 250, 3000);
  }

  void loop()
  {
    for(angle=0; angle<180; angle+=1){
      myservo.write(angle);
      delay(20);
    }
    for(angle=180; angle>=1; angle-=1){
      myservo.write(angle);
      delay(20);
    }
  }
  \end{minted}
#+end_latex

1. 包含头文件<servo.h>
2. 创建servo对象
3. servo::attach(pin, min, max)
   + pin 舵机信号线连接的引脚，可以使用任何数字引脚
   + min 对应于舵机最小（0°）角度时的脉冲宽度，以微秒为单位，默认544us
   + max 对应于舵机最大（180°）角度的脉冲宽度，以微秒为单位，默认为2400us
   + 典型的舵机只对脉冲的微秒数而不是度数做响应。

*** map                                                               :map:

*map(value, fromlow, fromhigh, tolow, tohigh)*

description
re-maps a number from one range to another. that is, a value of
fromlow would get mapped to tolow, a value of fromhigh to tohigh,
values in-between to values in-between, etc.

参考： [[https://www.arduino.cc/en/reference/map][arduino reference: map]]

** 2015/11/21
*** SLAM Python
**** 阅读源码的思考
良好的源码有明确的目标需求和良好的结构层次。

所以阅读源码不应该直接逐行逐句来，遇到不会的地方就查，而是应该
1) 首先，把握目标 *明白程序实现的是什么功能* ， 同时去思考如果自己写，会怎
   么实现
2) 其次，立足整体， *理清楚程序的结构，并找出逻辑*
3) 先总后分， 分而治之，逐步求精， 阅读源码
4) 遇到拦路虎先不去管，只是记下来， *时刻明确自己在做什么* ， 不要顾及
   不重要的细节

**** logfile_viewer.py
***** 功能
1. GUI --> Tkinter
   + 主窗口
     - 传感器坐标(Canvas)
     - 世界坐标系(Canvas)
     - 其它控件
   + 事件响应
     - 加载文件(tkFileDialog)
     - 响应拖动(Scale)

2. 数据可视化
   1) 数据如何存储
   2) 可视化的方法怎样实现

***** 结构
1. 主函数中构建GUI界面
2. LegoLogfile保存并跟踪数据
3. 绘制不同数据使用不同的对象，这些对象有共同的基类（因为方法相似）

***** main
1. legologfile
2. tk & widgets
3. mainloop

***** 基类
1. DrawableObject
   - Trajectory : class
   - ScannerData : class
   - Landmarks : class
   - Points : class
   - Particles : class
2. Methods
   1) background_draw (self)
   2) draw (self,at_step)
      #+begin_latex
        \begin{minted}[frame=single, mathescape]{py}
            def draw(self, at_step):
                print "To be overwritten - will draw a certain point in time:", at_step

            def background_draw(self):
                print "Background draw."
        \end{minted}
      #+end_latex

      - 基类共同的方法为空
      - 默认 __init__方法
   3) get_ellipse_points (center,main_axis_angle,radius1,radius2,start_angle,end_angle)
      #+begin_latex
        \begin{minted}[frame=single, mathescape]{py}
            @staticmethod
            def get_ellipse_points(center, main_axis_angle, radius1, radius2,
                                   start_angle = 0.0, end_angle = 2 * pi):
                """Generate points of an ellipse, for drawing (y axis down)."""
                # ...
                return points
        \end{minted}
      #+end_latex
      - @staticmethod 定义静态方法
      - """""" 三引号函数说明
      - 参数与返回值

***** Trajectory
Trajectory : class
- Parents: DrawableObject
- __init__ (self,points,canvas,world_extents,canvas_extents,standard_deviations,point_size2,background_color,cursor_color,position_stddev_color,theta_stddev_color)
- background_draw (self)
- draw (self,at_step)

*** org-trick
*** fdisk                                                           :fdisk:
1. 需要特权: sudo
2. sudo fdisk -l
3. sudo fdisk =/dev/sdc=
4. 选项
   + d 删除分区
   + n 添加分区
   + w 写入并退出
   + q 放弃
   + p 查看分区

** 2015/11/22
*** raspberry手记                                                    :手记:
**** 安装raspbian

1. 参考文献的选择
   + 有官网的教程优先考虑
   + 有国外的教程优先考虑
   + 国内的博客教程等要慎重选择

2. sd卡的分区和格式化处理
   + df -h
   + sudo fdisk -l
   + sudo fdisk =/dev/sdb=
   + mkfs.vfat 需要格式化成fat文件系统，分区之后为linux文件系统

3. 参考
   + [[https://app.yinxiang.com/shard/s52/nl/11551545/740d3fc2-81e5-4733-b3e3-90631ce11d4d?title=noobs%20for%20raspberry%20pi%20%7c%20rants%20%26%20raves%20%e2%80%93%20the%20blog!][noobs for raspberry pi 2 b]]
   + [[https://app.yinxiang.com/shard/s52/nl/11551545/57510d93-2c8b-488c-9a5c-e0db65c720dd?title=ubuntu%20%e5%ae%89%e8%a3%85%20raspbian%20%e5%88%b0%20raspberry%20pi%20b%2b%20-%20wiki][ubuntu下安装raspbian到raspberry中]]

**** rasp-config

1. 语言、时区、键盘
2. 用户及密码
3. 登录方式

**** 安装ros

1. 源码方式:
   http://wiki.ros.org/rosberrypi/installing%20ros%20indigo%20on%20raspberry%20pi

2. apt方式 for arm board(pi 2):
   http://wiki.ros.org/indigo/installation/ubuntuarm

**** raspberry使用思考

1. 不要瞎折腾，用不着的东西不要装
2. 使用vi，不要装emacs
3. 不要过人热衷，先消停几天，十二月份再玩(2015/11/22)
4. ros也要精简，绝对不要尝试gui

**** raspberry todos

1. [ ] 盒子和配件
2. [ ] gpio使用
3. [ ] 各种通信 uart，i2c, isp
4. [ ] 交叉编译环境ubuntu下
5. [ ] 裸板，即不接显示器、鼠标、键盘、网线等
6. [ ] 与arduino相连
7. [ ] 按键等控制ros等
8. [ ]

*** Linux 环境变量                                         :newenvironment:

environment variables are a variable key pair stored in the shell's
environment space. here is a list of common environment variables:


|-----------------+--------------------------------------------------------------|
| variable        | description                                                  |
|-----------------+--------------------------------------------------------------|
| histfile        | the name of the file in which command history is saved       |
| histfilesize    | the maximum number of lines contained in the history file    |
| hostname        | the system's host name                                       |
| ld_library_path | it is a colon-separated set of directories                   |
|                 | where libraries should be searched for                       |
| ps1             | your default (first) shell prompt                            |
| user            | current logged in user's name.                               |
| path            | colon separated list of directories to search for binaries.  |
| display         | network name of the x11 display to connect to, if available. |
| shell           | the current shell.                                           |
| term            | the name of the user's terminal.                             |
|                 | used to determine the capabilities of the terminal.          |
| termcap         | database entry of the terminal escape codes                  |
|                 | to perform various terminal functions.                       |
| ostype          | type of operating system.                                    |
| machtype        | the cpu architecture that the system is running on.          |
| editor          | the user's preferred text editor.                            |
| pager           | the user's preferred text pager.                             |
| manpath         | colon separated list of directories                          |
|                 | to search for manual pages.                                  |
|-----------------+--------------------------------------------------------------|

** 2015/11/23
*** Python Email                                                    :email:
clock: [2015-11-22 日 23:59]--[2015-11-23 一 00:40] =>  0:41

**** email
1. module

  #+begin_latex
    \begin{minted}{py}
    import smtplib

    from email import encoders
    from email.header import header
    from email.mime.text import mimetext
    from email.mime.multipart import mimemultipart
    from email.mime.base import mimebase
    from email.utils import parseaddr, formataddr
    \end{minted}
  #+end_latex

2. formataddr
   *formataddr(pair)*
   the inverse of parseaddr(), this takes a 2-tuple of the form
   (realname, email_address) and returns the string value suitable
   for an rfc 2822 from, to or cc header.

   *parseaddr(addr)*

   #+begin_latex
     \begin{minted}{py}
     def _format_addr(s):
         name, addr = parseaddr(s)
         return formataddr((header(name, 'utf-8').encode(), addr))
     \end{minted}
   #+end_latex

3. mimemultipart
   #+begin_latex
     \begin{minted}{py}
     ## 构造邮件对象
     msg = mimemultipart()
     # 发送地址
     msg['from'] = _format_addr("ben<%s>" % from_addr)
     # 接收地址
     msg['to'] = _format_addr('qq<%s>' % to_addr)
     # 主题
     msg['subject'] = header("测试python email", 'utf-8').encode()

     # 正文
     msg.attach(mimetext('hello python', 'plain', 'utf-8'))

     # 附件
     with open('/home/tiger/wally/journal/journal.pdf', 'rb') as f:
         mime = mimebase('pdf', 'pdf', filename='journal.pdf')
         mime.add_header('content-disposition', 'attachment', filename='journal.pdf')
         mime.add_header('content-id', '<0>')
         mime.add_header('x-attachment-id', '0')
         # 把附件的内容读进来:
         mime.set_payload(f.read())
         # 用base64编码:
         encoders.encode_base64(mime)
         # 添加到mimemultipart:
         msg.attach(mime)
     \end{minted}
   #+end_latex

**** smtplib                                                        :smtp:
#+begin_latex
  \begin{minted}{py}
  ## 发送邮件
  # stmp_server = none              ####### todo
  stmp_server = "smtp.163.com"
  port = 25
  server = smtplib.smtp(stmp_server, 25)
  server.set_debuglevel(1)
  server.login(from_addr, passwd)
  server.sendmail(from_addr, [to_addr], msg.as_string())
  \end{minted}
#+end_latex

1. constructor smtp(server, port)
2. smtp::set_debuglevel(1)
3. smtp::login(addr,  passwd)
4. smtp::sendmail(from,  to_list,  *msg.as_string()*)

*** Python args                                                      :argv:
python中的命令行参数
python中有一个模块 *sys* ， *sys.argv* 这个属性提供了对命令行参数的访
问。命令行参数是调用某个程序时除程序名外的其他参数。

*sys.argv* 是命令行参数的列表

len(sys.argv)是命令行参数的个数

#+begin_latex
  \begin{minted}{py}
  #! /usr/bin/env python
  # -*- encoding:utf-8 -*-

  import sys

  for arg in sys.argv:
      print arg
  \end{minted}
#+end_latex

#+begin_example
  args $ python args.py 1 2 3
  args.py
  1
  2
  3
#+end_example

*** yas-new-snippet python header                               :yasnippet:
#+begin_example
  # -*- mode: snippet; require-final-newline: nil -*-
  # name: py
  # key: py
  # binding: direct-keybinding
  # --
  #! /usr/bin/env python
  # -*- encoding:utf-8 -*-

  $0
#+end_example

snippet: header

*** python note
+ python 路径不支持 ~ 扩展

*** DONE python with as
- State "DONE"       from "TODO"       [2015-11-23 一 16:05] \\
  还是不太明白
CLOCK: [2015-11-23 一 15:26]--[2015-11-23 一 16:05] =>  0:39

1. 用来代替传统的 try...finally语句

2. 更加优雅

3. 常用于文件处理句柄
   #+begin_latex
     \begin{listing}
       \begin{minted}[frame=single, mathescape]{py}
       # file handler
       file = open('/tmp/foo.txt')
       data = file.read()
       file.close()
       # IOError: [Errno 13] Permission denied: '/tmp/foo.txt'

       # try
       file = open('/tmp/foo.txt')     #
       try:
           data = file.read()
       finally:
           file.close()

       # with...as
       with open('/tmp/foo.txt') as file:
           data = file.read()
       \end{minted}
     \end{listing}
   #+end_latex
   Note: 处理的是 read 方法的异常，而不是 open 方法的异常

4. 要求对象有 =__enter__()= 和 =__exit__()= 两个方法

5. 运行流程
   1) =__enter__()=方法被执行
   2) 返回值被赋值给变量
   3) 执行代码块
   4) =__exit()__=方法被调用
   #+begin_latex
   \begin{listing}
     \begin{minted}[frame=single, mathescape]{py}
     # with...as
     with open('/tmp/foo.txt') as file:
         data = file.read()


     class Sample:
         def __enter__(self):
             print " In __enter__()"
             return "Foo"

         def __exit__(self, type, value, trace):
             print "In __exit__()"


     def get_sample():
         return Sample()


     with get_sample() as sample:
         print "sample:", sample

     # 运行结果
     # In __enter__()
     # sample: Foo
     # In __exit__()
     \end{minted}
   \end{listing}
   #+end_latex

6. 优点
   with真正强大之处在于它可以异常处理， =__exit()__= 方法有三个参数，
   *val, type, trace*, 异常处理中相当有用。
   #+begin_latex
\begin{listing}
     \begin{minted}[frame=single, mathescape]{py}
     class Sample:
         def __enter__(self):
             return self

         def __exit__(self, type, value, trace):
             print "type: ", type
             print "value: ", value
             print "trace: ", trace

         def do_something(self):
             bar = 1/0
             return bar + 10

     with Sample() as sample:
         sample.do_something()

     # type:  <type 'exceptions.ZeroDivisionError'>
     # value:  integer division or modulo by zero
     # trace:  <traceback object at 0xb7059cac>
     # Traceback (most recent call last):
     #   File "<stdin>", line 1, in <module>
     #   File "/home/ben/Wally/Journal/Project/Python/Tutorials/withas/withas.py", line 59, in <module>
     #     sample.do_something()
     #   File "/home/ben/Wally/Journal/Project/Python/Tutorials/withas/withas.py", line 55, in do_something
     #     bar = 1/0
     # ZeroDivisionError: integer division or modulo by zero
     \end{minted}
\end{listing}
   #+end_latex

7. 小结
   *Python的with语句是提供一个有效的机制，让代码更简练，同时在异常产生
   时，清理工作更简单*


8. 参考文献
   + [[https://app.yinxiang.com/shard/s52/nl/11551545/e0245473-6a55-4bd0-9b11-28ee558c06fc?title=%E7%90%86%E8%A7%A3Python%E7%9A%84With%E8%AF%AD%E5%8F%A5%20-%20train%E7%9A%84%E4%B8%93%E6%A0%8F%20-%20%E5%8D%9A%E5%AE%A2%E9%A2%91%E9%81%93%20-%20CSDN.NET][Understanding Python's 'with' Statement]]

*** python 日期和时间                                           :date:time:

#+begin_example
  >>> dir(datetime)
  ['maxyear', 'minyear', '__doc__', '__file__', '__name__',
  '__package__', 'date', 'datetime', 'datetime_capi', 'time',
  'timedelta', 'tzinfo']

  >>> dir(datetime.datetime)
  ['__add__', '__class__', '__delattr__', '__doc__', '__eq__',
  '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__',
  '__init__', '__le__', '__lt__', '__ne__', '__new__', '__radd__',
  '__reduce__', '__reduce_ex__', '__repr__', '__rsub__', '__setattr__',
  '__sizeof__', '__str__', '__sub__', '__subclasshook__', 'astimezone',
  'combine', 'ctime', 'date', 'day', 'dst', 'fromordinal',
  'fromtimestamp', 'hour', 'isocalendar', 'isoformat', 'isoweekday',
  'max', 'microsecond', 'min', 'minute', 'month', 'now', 'replace',
  'resolution', 'second', 'strftime', 'strptime', 'time', 'timetuple',
  'timetz', 'today', 'toordinal', 'tzinfo', 'tzname',
  'utcfromtimestamp', 'utcnow', 'utcoffset', 'utctimetuple', 'weekday',
  'year']

#+end_example

+ 模块： *datetime*
+ 类： *datetime*
  - strftime
+ 方法: now() 返回datetime对象


#+begin_latex
  \begin{minted}{py}
  import datetime

  now = datetime.datetime.now()
  print now.strftime("%y%m%d")
  \end{minted}
#+end_latex

*** python file path                                              :file:os:
#+begin_example
  dir(os.path)
  ['__all__', '__builtins__', '__doc__', '__file__', '__name__',

  '__package__', '_joinrealpath', '_unicode', '_uvarprog', '_varprog',
  'abspath', 'altsep', 'basename', 'commonprefix', 'curdir', 'defpath',
  'devnull', 'dirname', 'exists', 'expanduser', 'expandvars', 'extsep',
  'genericpath', 'getatime', 'getctime', 'getmtime', 'getsize', 'isabs',
  'isdir', 'isfile', 'islink', 'ismount', 'join', 'lexists', 'normcase',
  'normpath', 'os', 'pardir', 'pathsep', 'realpath', 'relpath',
  'samefile', 'sameopenfile', 'samestat', 'sep', 'split', 'splitdrive',
  'splitext', 'stat', 'supports_unicode_filenames', 'sys', 'walk',
  'warnings']

#+end_example

*** DONE Linux 周期任务                                      :cron:crontab:
- state "done"       from "todo"       [2015-11-23 一 11:19] \\
  用时长，首先应该充分证阅读资料
clock: [2015-11-23 一 10:46]--[2015-11-23 一 11:19] =>  0:33
clock: [2015-11-23 一 10:24]--[2015-11-23 一 10:38] =>  0:14

**** crontab

1. 命令： *crontab*,  格式： /crontab [-u user] [file | -e | -l | -r]/
   - -u user： 指定用户
   - file: 将文件file作为crontab的任务列表并载入crontab, 缺省则为标准
     输入
   - -e: 编辑
   - -l: 显示
   - -r: 从 */var/spool/cron* 删除某个用户的crontab文件
     #+begin_src sh
     ls /var/spool/cron/
     #+end_src

     #+results:
     : crontabs
   - -i: 删除时显示提示信息

2. crontab文件格式
   #+begin_example
   分 时 日 月 星期 命令
   #+end_example
   + 分: 1～59
   + 时: 0~23
   + 日: 1~31
   + 日期： 0～6
   + 命令： 第六列

**** usage

1. 指定编辑器
   #+begin_latex
   \begin{minted}[frame=single, mathescape]{sh}
   editor=vi; export editor  # in .bashrc
   \end{minted}
   #+end_latex

2. 备份
   #+begin_latex
   \begin{minted}[frame=single, mathescape]{sh}
   crontab -l > ~/mycron
   \end{minted}
   #+end_latex

   #+begin_src sh
   crontab -l
   #+end_src

   no crontab for ben

3. examples
   #+begin_example
     实例1：每1分钟执行一次mycommand
     ,* * * * * mycommand

     实例2：每小时的第3和第15分钟执行
     3,15 * * * * mycommand

     实例3：在上午8点到11点的第3和第15分钟执行
     3,15 8-11 * * * mycommand

     实例4：每隔两天的上午8点到11点的第3和第15分钟执行
     3,15 8-11 */2  *  * mycommand

     实例5：每周一上午8点到11点的第3和第15分钟执行
     3,15 8-11 * * 1 mycommand

     实例6：每晚的21:30重启smb
     30 21 * * * /etc/init.d/smb restart

     实例7：每月1、10、22日的4 : 45重启smb
     45 4 1,10,22 * * /etc/init.d/smb restart

     实例8：每周六、周日的1 : 10重启smb
     10 1 * * 6,0 /etc/init.d/smb restart

     实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb
     0,30 18-23 * * * /etc/init.d/smb restart

     实例10：每星期六的晚上11 : 00 pm重启smb
     0 23 * * 6 /etc/init.d/smb restart

     实例11：每一小时重启smb
     ,* */1 * * * /etc/init.d/smb restart

     实例12：晚上11点到早上7点之间，每隔一小时重启smb
     ,* 23-7/1 * * * /etc/init.d/smb restart

   #+end_example

**** note
1. 每条周期任务增加注释
2. 环境变量与当前环境不一定一致，往往需要设置（在要执行的脚本中）
3. 全局路径
4. 不会立即重启
   #+begin_example
   sudo service cron restart
   #+end_example
5. % 有特殊含义，表换行，需要转义
   #+begin_example
   * * * * * /bin/echo `date "+\%m"` >> /tmp/test_cron
   #+end_example

**** 手记
#+begin_example
  usage:  crontab [-u user] file
          crontab [ -u user ] [ -i ] { -e | -l | -r }
                  (default operation is replace, per 1003.2)
          -e      (edit user's crontab)
          -l      (list user's crontab)
          -r      (delete user's crontab)
          -i      (prompt before deleting user's crontab)

  journal $ crontab -l
  no crontab for ben

  journal $ crontab -u ben
  crontab: usage error: file name must be specified for replace
  usage:  crontab [-u user] file
          crontab [ -u user ] [ -i ] { -e | -l | -r }
                  (default operation is replace, per 1003.2)
          -e      (edit user's crontab)
          -l      (list user's crontab)
          -r      (delete user's crontab)
          -i      (prompt before deleting user's crontab)

  journal $ crontab -u  ben cron
  cron: 没有那个文件或目录

  journal $ crontab cron
  cron: 没有那个文件或目录

  journal $ export editro=vi

  journal $ crontab cron
  cron: 没有那个文件或目录

  journal $ touch cron
  journal $ crontab cron
  journal $ crontab -l
  journal $ crontab -e

  select an editor.  to change later, run 'select-editor'.
    1. /bin/ed
    2. /bin/nano        <---- easiest
    3. /usr/bin/vim.tiny
  choose 1-3 [2]: 3
  crontab: installing new crontab

  journal $ crontab -l
  ,* * * * * date +%m > /tmp/test_cron

  journal $ crontab -e
  crontab: installing new crontab

  journal $ ls /var/spool/cron/crontabs/
  ls: 无法打开目录/var/spool/cron/crontabs/: 权限不够
  journal $ sudo ls /var/spool/cron/crontabs/
  [sudo] password for ben:
  ben
  journal $ sudo cat /var/spool/cron/crontabs/ben
  # do not edit this file - edit the master and reinstall.
  # (/tmp/crontab.zug5cu/crontab installed on mon nov 23 10:57:55 2015)
  # (cron version -- $id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie exp $)
  ,* * * * * /bin/echo `date +%m` >> /tmp/test_cron


  journal $ crontab -l
  ,* * * * * /bin/echo `date +%m` >> /tmp/test_cron
  journal $ /bin/echo `date +%m` >> /tmp/test_cron


  journal $ service cron restart
  stop:未知任务: cron
  start:未知任务: cron

  journal $ sudo service cron restart
  cron stop/waiting
  cron start/running, process 4693

  journal $ crontab -l
  ,* * * * * /bin/echo `date +%m` >> /tmp/test_cron

  journal $ crontab -e
  crontab: installing new crontab

  journal $ crontab -l
  ,* * * * * /bin/echo `date "+%m"` >> /tmp/test_cron

  journal $ crontab -e
  crontab: installing new crontab
  journal $ sudo service cron restart
  cron stop/waiting
  cron start/running, process 4950
  journal $ cat /tmp/test_cron
  00
  06
  12
  13
  journal $ crontab -l
  ,* * * * * /bin/echo `date "+\%m"` >> /tmp/test_cron ### ok

  journal $ crontab -ir
  crontab: really delete ben's crontab? (y/n) y


#+end_example
**** 参考：
+ [[https://app.yinxiang.com/shard/s52/nl/11551545/954d6b3c-3901-41f3-b3bb-22c2e14feaff?title=19.%20crontab%20%e5%ae%9a%e6%97%b6%e4%bb%bb%e5%8a%a1%20%e2%80%94%20linux%20tools%20quick%20tutorial][linux tools quick tutorial: crontab]]

*** DONE babel块， yasnippet                                    :yasnippet:
- state "done"       from "todo"       [2015-11-23 一 11:36]
clock: [2015-11-23 一 11:26]--[2015-11-23 一 11:36] =>  0:10

1. lang $0
2. :export [code | result | both | none]
3. :results [value | output]

*org-alias-list功能不够*

#+begin_example
  # -*- mode: snippet; require-final-newline: nil -*-
  # name: bbl
  # key: bbl
  # binding: direct-keybinding
  # --

  ,#+begin_src ${1:lang} :results ${2:[value | output]} :export ${3:[code | result | both | none]}
  $0
  ,#+end_src
#+end_example


#+begin_src sh :results output :export both
date +%m
#+end_src

#+results:
: 35

*** org-agenda-file recycle
C-'

*** DONE routine中增加stardict导入journal和邮件并清空
- State "DONE"       from "TODO"       [2015-11-23 一 16:33]

*** DONE org不使双下划线，一不需要，二与python常用冲突
- State "DONE"       from "TODO"       [2015-11-23 一 16:49] \\
  不可以
CLOCK: [2015-11-23 一 16:42]--[2015-11-23 一 16:49] =>  0:07
CLOCK: [2015-11-23 一 16:38]--[2015-11-23 一 16:42] =>  0:04

a_b
a_{b}
a^{b}
a^b
_ab_
__ab__

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  a\_b
  a$_{\text{b}}$
  a$^{\text{b}}$
  a\^{}b
  \uline{ab}
  \uline{\uline{ab}}
  \end{minted}
#+end_latex

1. org-export-with-emphasize
2. #+OPTIONS: *:nil
3. 问题是： 加粗为没有用了
4. +折衷办法: 仅在需要的地方设置 *#+OPTIONS: *:nil* （这是不行的）+
5. 那就没有办法的，强调是必须用的

*** org-export-with-emphasize
org-export-with-emphasize is a variable defined in `ox.el'.
Its value is t

Documentation:
Non-nil means interpret *word*, /word/, _word_ and +word+.

If the export target supports emphasizing text, the word will be
typeset in bold, italic, with an underline or strike-through,
respectively.

This option can also be set with the OPTIONS keyword,
e.g. "*:nil".
*** DONE LaTeX 自定义浮动体                                         :float:
- State "DONE"       from "TODO"       [2015-11-23 一 17:23]
CLOCK: [2015-11-23 一 17:01]--[2015-11-23 一 17:23] =>  0:22

1. 宏包： *float*
2. 新的选项: H
3. 命令: *\textbackslash{}* 创建新的浮动体
   =\newfloat{<type>}{<placement>}{<ext>}[<within>]=
*** Minted float                                                    :float:

**** 使用float定义新的浮动体，失败，可能行
#+begin_example
\newfloat{minted}{h}{minted}


\begin{minted}[frame=single, mathescape]{py}
import os
print 'hello floating minted'
\end{minted}
#+end_example

+*not ok*+

**** 使用listing环境包装minted
[[~/Wally/Journal/Figures/scrot/18640JOs.png]]
#+begin_example
\begin{listing}
  \begin{minted}[frame=single, mathescape]{py}
  import os
  print 'hello floating minted'
  \end{minted}
\end{listing}
#+end_example

#+begin_latex
\begin{listing}
  \begin{minted}[frame=single, mathescape]{py}
  import os
  print 'hello floating minted'
  \end{minted}
\end{listing}
#+end_latex

*** DONE 标签逻辑搜索
- State "DONE"       from "TODO"       [2015-11-23 一 17:30]
C-c a m     (org-tags-view)
Produce a list of all headlines that match a given set of tags. The
command prompts for a selection criterion, which is a boolean logic
expression with tags, like ‘+work+urgent-withboss’ or ‘work|home’

+ AND +
+ SUB -
+ OR |

*** DONE 标签全部改为小写字母
- State "DONE"       from "TODO"       [2015-11-23 一 18:54]
CLOCK: [2015-11-23 一 18:31]--[2015-11-23 一 18:54] =>  0:23

1. 方便搜索与定制
2. 正则替换
3. 末尾冒号

正则替换大小写， +不会+
使用Eamcs键盘宏解决
*** DONE org babel minted是否可能
- State "DONE"       from "TODO"       [2015-11-23 一 20:26]

1. 变量： *org-latex-listings*
   #+BEGIN_SRC emacs-lisp
     ;; version lstlisting
     ;; (setq org-latex-listings t)
     ;; (setq org-latex-listings-options
     ;;       '(
     ;;         ("numbers" "\left")
     ;;         ("xleftmargin" "17pt")
     ;;         ("frame" "single")
     ;;         ("breaklines" "true")
     ;;         ("breakautoindent" "true")
     ;;         ("numberstyle" "\\tiny")
     ;;         ("tabsize" "4")
     ;;         ("showspaces" "false")
     ;;         ))



     (require 'ox-latex)
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-latex-listings 'minted)
     (setq org-latex-listings-options
           '(("frame" "single")))

     (add-to-list 'org-latex-listings-langs '(sh "bash")) ;
     (add-to-list 'org-latex-listings-langs '(cpp "cpp"))

   #+END_SRC

2. org-latex-listings-option 不要过多的选项了
   These options are supplied as a comma-separated list to the
   \textbackslash{}lstset command.
   所以对 minted 无效

3. org-latex-listings-langs
   (add-to-list 'org-latex-listings-langs '(sh "bash"))
   前者产LaTeX宏包选项，后者是Emacs mode选项，用于语法高亮

4. 参考
   + [[https://app.yinxiang.com/shard/s52/nl/11551545/3a446fb2-846d-41b1-bb43-7b3df39f5121/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D1513455a069%3AS%3Dac803e9b3af5432a7cb467ac0240b297][babel minted]]





*** DONE 如何查看当前Python安装的所有包                            :module:
- State "DONE"       from "TODO"       [2015-11-23 一 20:41]
**** pip list                                                        :pip:
pip list

#+BEGIN_SRC sh :results output :export both
pip --help
#+END_SRC

#+RESULTS:
#+begin_example

Usage:
  pip <command> [options]

Commands:
  install                     Install packages. with -U,  update
  uninstall                   Uninstall packages.
  freeze                      Output installed packages in requirements format.
  list                        List installed packages.
  show                        Show information about installed packages.
  search                      Search PyPI for packages.
  wheel                       Build wheels from your requirements.
  zip                         DEPRECATED. Zip individual packages.
  unzip                       DEPRECATED. Unzip individual packages.
  help                        Show help for commands.
#+end_example


#+BEGIN_SRC sh :results output :export both
pip list
#+END_SRC

#+RESULTS:
#+begin_example
adium-theme-ubuntu (0.3.4)
apsw (3.8.2.post1)
apt-xapian-index (0.45)
arandr (0.1.7.1)
archmage (0.2.4)
astroid (1.3.6)
BeautifulSoup (3.2.1)
bzr (2.7.0.dev1)
catkin-pkg (0.2.8)
chardet (2.0.1)
CherryPy (3.2.2)
chm2pdf (0.9)
colorama (0.2.5)
command-not-found (0.3)
configobj (4.7.2)
cssselect (0.9.1)
cssutils (0.9.10)
cwiid (0.6.0)
debtagshw (0.1)
defer (1.0.6)
dirspec (13.10)
distribute (0.6.28)
dnspython (1.11.1)
docutils (0.11)
duplicity (0.6.23)
email (4.0.2)
empy (3.1)
enum (0.4.6)
feedparser (5.1.3)
flake8 (2.4.1)
html5lib (0.999)
httplib2 (0.8)
importmagic (0.1.3)
keyring (3.5)
launchpadlib (1.10.2)
lazr.restfulclient (0.13.3)
lazr.uri (1.0.3)
lockfile (0.8)
logilab-common (0.63.2)
lxml (3.3.3)
Mako (0.9.1)
Markdown (2.4)
MarkupSafe (0.18)
matplotlib (1.3.1)
mccabe (0.3)
mechanize (0.2.5)
mercurial (2.8.2)
MySQL-python (1.2.4b4)
netifaces (0.8)
nose (1.3.1)
numpy (1.8.2)
oauth (1.0.1)
oauthlib (0.6.1)
oneconf (0.3.7)
PAM (0.4.2)
paramiko (1.10.1)
pep8 (1.5.7)
pexpect (3.1)
Pillow (2.3.0)
pip (6.1.1)
piston-mini-client (0.7.5)
psutil (1.2.1)
PyAssimp (3.0.1264)
PyBluez (0.18)
pychm (0.8.4)
pycrypto (2.6.1)
pycups (1.9.66)
pycurl (7.19.3)
pydot (1.0.28)
pyflakes (0.8.1)
Pygments (1.6)
pygobject (3.12.0)
pygpgme (0.3)
pylint (1.4.3)
Pymacs (0.25)
pymongo (2.6.3)
PyOpenGL (3.0.2)
pyOpenSSL (0.13)
pyparsing (2.0.1)
pyserial (2.6)
pysmbc (1.0.14.1)
python-apt (0.9.3.5ubuntu1)
python-dateutil (1.5)
python-debian (0.1.21-nmu2ubuntu2)
pytz (2012rc0)
pyxdg (0.25)
PyYAML (3.10)
reportlab (3.0)
repoze.lru (0.6)
requests (2.2.1)
roman (2.0.0)
rope (0.10.2)
rosdep (0.11.2)
rosdistro (0.4.2)
rosinstall (0.7.5)
rospkg (1.0.35)
Routes (2.0)
SecretStorage (2.0.0)
sessioninstaller (0.0.0)
setuptools (3.3)
shadowsocks (2.8.2)
simplejson (3.3.1)
six (1.5.2)
software-center-aptd-plugins (0.0.0)
ssh-import-id (3.21)
system-service (0.1.6)
Twisted-Core (13.2.0)
Twisted-Web (13.2.0)
urllib3 (1.7.1)
uTidylib (0.2)
vboxapi (1.0)
vcstools (0.1.36)
VTK (5.8.0)
wadllib (1.3.2)
WebOb (1.3.1)
wstool (0.1.6)
wxPython (2.8.12.1)
wxPython-common (2.8.12.1)
xdiagnose (3.6.3build2)
zope.interface (4.0.5)
#+end_example

**** help('module')

#+BEGIN_SRC python :results output :export both
help('modules')
#+END_SRC

#+RESULTS:
#+begin_example

Please wait a moment while I gather a list of all available modules...

DEBUG:oneconf.distributor:get_distro: 'Ubuntu'
ANSI                archmod             heapq               resource
BaseHTTPServer      argparse            hgext               rexec
Bastion             array               hmac                rfc822
BeautifulSoup       ast                 hotshot             rlcompleter
BeautifulSoupTests  astroid             hpmudext            robotparser
CDROM               asynchat            html5lib            roman
CGIHTTPServer       asyncore            htmlentitydefs      rope
Canvas              atexit              htmllib             rosdep2
CommandNotFound     atk                 httplib             rosdistro
ConfigParser        audiodev            httplib2            rosinstall
Cookie              audioop             ibus                rospkg
Crypto              axi                 ihooks              routes
DLFCN               base64              imageop             runpy
Dialog              bdb                 imaplib             samba
DocXMLRPCServer     binascii            imghdr              scanext
FSM                 binhex              imp                 sched
FileDialog          bisect              importlib           screen
FixTk               bluetooth           importmagic         screenlayout
HTMLParser          bonobo              imputil             secretstorage
IN                  boost               indicator_keyboard  select
Image               bsddb               inspect             serial
ImageChops          bson                io                  sessioninstaller
ImageColor          bz2                 itertools           sets
ImageCrackCode      bzrlib              json                setuptools
ImageDraw           cPickle             keybinder           sgmllib
ImageEnhance        cProfile            keyring             sha
ImageFile           cStringIO           keyword             shadowsocks
ImageFileIO         cairo               launchpadlib        shelve
ImageFilter         calendar            lazr                shlex
ImageFont           catkin_pkg          ldb                 shutil
ImageGL             cgi                 lib2to3             signal
ImageGrab           cgitb               libxml2             simplejson
ImageMath           chardet             libxml2mod          sip
ImageOps            cherrypy            linecache           sipconfig
ImagePalette        chm                 linuxaudiodev       sipconfig_nd
ImagePath           chunk               locale              sipdistutils
ImageQt             cmath               lockfile            site
ImageSequence       cmd                 logging             sitecustomize
ImageStat           code                logilab             six
ImageTk             codecs              lsb_release         smbc
ImageWin            codeop              lxml                smtpd
MimeWriter          collections         macpath             smtplib
MySQLdb             colorama            macurl2path         sndhdr
ORBit               colorsys            mailbox             socket
OpenGL              commands            mailcap             softwarecenter_aptd_plugins
OpenSSL             compileall          mako                softwareproperties
PAM                 compiler            markdown            spwd
PIL                 configobj           markupbase          sqlite3
PSDraw              contextlib          markupsafe          sre
PngImagePlugin      cookielib           marshal             sre_compile
PyKate4             copy                math                sre_constants
PyQt4               copy_reg            matplotlib          sre_parse
PySide              crypt               mccabe              ssl
Queue               cssselect           md5                 stat
ScrolledText        cssutils            mechanize           statvfs
SimpleDialog        csv                 mercurial           string
SimpleHTTPServer    ctypes              mhlib               stringold
SimpleXMLRPCServer  cups                mimetools           stringprep
SocketServer        cupsext             mimetypes           strop
StringIO            cupshelpers         mimify              struct
TYPES               curl                mmap                subprocess
Tix                 curses              modulefinder        sunau
Tkconstants         cv                  mpl_toolkits        sunaudio
Tkdnd               cv2                 multifile           symbol
Tkinter             cwiid               multiprocessing     symtable
UbuntuSystemService datetime            mutex               sys
UserDict            dateutil            netifaces           sysconfig
UserList            dbhash              netrc               syslog
UserString          dbm                 new                 tabnanny
_LWPCookieJar       dbus                nis                 talloc
_MozillaCookieJar   deb822              nntplib             tarfile
__builtin__         debconf             nose                tdb
__future__          debian              ntdb                telnetlib
_abcoll             debian_bundle       ntpath              tempfile
_ast                debtagshw           nturl2path          termios
_bisect             decimal             numbers             test
_bsddb              defer               numpy               textwrap
_codecs             difflib             oauth               this
_codecs_cn          dircache            oauthlib            thread
_codecs_hk          dirspec             oneconf             threading
_codecs_iso2022     dis                 opcode              tidy
_codecs_jp          distlib             operator            time
_codecs_kr          distutils           optparse            timeit
_codecs_tw          dl                  os                  tkColorChooser
_collections        dns                 os2emxpath          tkCommonDialog
_csv                doctest             ossaudiodev         tkFileDialog
_ctypes             docutils            pango               tkFont
_ctypes_test        dot_parser          pangocairo          tkMessageBox
_curses             drv_libxml2         paramiko            tkSimpleDialog
_curses_panel       dsextras            parser              toaiff
_dbus_bindings      dumbdbm             pcardext            token
_dbus_glib_bindings dummy_thread        pdb                 tokenize
_elementtree        dummy_threading     pep8                trace
_functools          duplicity           pexpect             traceback
_hashlib            easy_install        pickle              ttk
_heapq              em                  pickletools         tty
_hotshot            email               pip                 turtle
_io                 encodings           pipes               twisted
_json               encutils            piston_mini_client  types
_locale             enum                pkg_resources       ubuntu_sso
_lsprof             errno               pkgutil             unicodedata
_markerlib          exceptions          platform            unittest
_md5                fcntl               plistlib            urllib
_multibytecodec     fdpexpect           popen2              urllib2
_multiprocessing    feedparser          poplib              urllib3
_mysql              filecmp             posix               urlparse
_mysql_exceptions   fileinput           posixfile           user
_osx_support        flake8              posixpath           uu
_psutil_linux       fnmatch             pprint              uuid
_psutil_posix       formatter           profile             validate
_pyio               fpectl              pstats              vboxapi
_random             fpformat            psutil              vcstools
_sha                fractions           pty                 vte
_sha256             ftplib              pwd                 vtk
_sha512             functools           pxssh               wadllib
_smbc               future_builtins     py_compile          warnings
_socket             gc                  pyassimp            wave
_sqlite3            gconf               pyclbr              weakref
_sre                gdbm                pycurl              webbrowser
_ssl                genericpath         pydoc               webob
_strptime           getopt              pydoc_data          whichdb
_struct             getpass             pydot               wsgiref
_symtable           gettext             pyexpat             wstool
_sysconfigdata      gi                  pyflakes            wx
_sysconfigdata_nd   gio                 pygments            wxPython
_testcapi           glib                pygst               wxversion
_threading_local    glob                pygtk               xapian
_tkinter            gnome               pygtkcompat         xdg
_warnings           gnomecanvas         pylab               xdiagnose
_weakref            gnomekeyring        pylint              xdrlib
_weakrefset         gnomevfs            pymongo             xml
_yaml               gobject             pynotify            xmllib
abc                 gpgme               pyparsing           xmlrpclib
aifc                gridfs              pytz                xxsubtype
antigravity         grp                 quopri              yaml
anydbm              gst                 random              zeitgeist
apsw                gstoption           re                  zipfile
apt                 gtk                 readline            zipimport
apt_inst            gtkunixprint        reportlab           zlib
apt_pkg             gtweak              repoze              zope
aptdaemon           gzip                repr
aptsources          hashlib             requests

Enter any module name to get more help.  Or, type "modules spam" to search
for modules whose descriptions contain the word "spam".

#+end_example


*** DONE flex & bison 工具                                 :flex:bison:gnu:
- State "DONE"       from "TODO"       [2015-11-23 一 21:02] \\
  了解即可，不必深入

http://blog.csdn.net/wxdao/article/details/16359365

什么是Flex和Bison？

Flex是一个词法分析器，是unix lex的gnu克隆，作用是把"词"抽象成符号，供
程序识别

Bison则是一个文法分析器（也是unix yacc的gnu克隆），语法就是在这里定义，
是语言设计的核心

这两巨头不但可以应付复杂的语法处理，也可以拿来制作简单的分析器，如配置
文件等

*** DONE 74HC573是锁存器                              :74hc573:锁存器:芯片:
- State "DONE"       from ""           [2015-11-23 一 21:11] \\
  不用了解得过于详尽，反正都会忘记的，用的时候自然就会知道。但要知道是什
  么

74HC573是拥有八路输出的透明锁存器，输出为三态门，是一种高性能硅栅CMOS
器件。

+ [[http://baike.baidu.com/item/74HC573][百度百科： 74HC573]]
+ [[http://baike.baidu.com/view/629932.htm?fr=ala0_1_1][百度百科： 锁存器]]
+ [[https://app.yinxiang.com/shard/s52/nl/11551545/0731d37a-a288-4dce-926e-4e9e432a534c?title=74HC573%E9%94%81%E5%AD%98%E5%99%A8%E7%94%A8%E6%B3%95%20-%20The%20important%20thing%20in%20life%20is%20to%20have%20a%20great%20aim%20%2C%20and%20the%20determination%20to%20attain%20-%20%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD%E7%A4%BE%E5%8C%BA][evernote: &4HC573]]

*** ABORT org export to freemind
- State "ABORT"      from "TODO"       [2015-11-23 一 19:26] \\
  不需要的东西不要瞎折腾, 放弃也是一种智慧


#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/src/org-mode/contrib/lisp"))
(require 'ox-freemind)
#+END_SRC

(void-function libxml-parse-xml-region) 暂时解决不了。。。

-> 重新编译安装Emacs??? 不要鲁莽！！！

*** TTL电平信号                                                       :ttl:

TTL电平信号被利用的最多是因为通常数据表示采用二进制规定，+5V等价于逻辑
“1”，0V等价于逻辑“0”，这被称做TTL（晶体管-晶体管逻辑电平）信号系统，
这是计算机处理器控制的设备内部各部分之间通信的标准技术。

TTL电平信号对于计算机处理器控制的设备内部的数据传输是很理想的，首先计
算机处理器控制的设备内部的数据传输对于电源的要求不高以及热损耗也较低，
另外TTL电平信号直接与集成电路连接而不需要价格昂贵的线路驱动器以及接收
器电路；再者，计算机处理器控制的设备内部的数据传输是在高速下进行的，而
TTL接口的操作恰能满足这个要求。TTL型通信大多数情况下，是采用并行数据传
输方式，而并行数据传输对于超过10英尺的距离就不适合了。这是由于可靠性和
成本两面的原因。因为在并行接口中存在着偏相和不对称的问题，这些问题对可
靠性均有影响。

TTL输出高电平>2.4V，输出低电平<0.4V。在室温下，一般输出高电平是3.5V，
输出低电平是0.2V。最小输入高电平和低电平：输入高电平>=2.0V，输入低电平
<=0.8V，噪声容限是0.4V。

TTL门电路是双极型集成电路，与分立元件相比，具有速度快、可靠性高和微型
化等优点。

*** TTL逻辑电路                                                       :ttl:
全称Transistor-Transistor Logic,即BJT-BJT逻辑门电路，是数字电子技术中
常用的一种逻辑门电路，应用较早，技术已比较成熟。TTL主要有BJT（Bipolar
Junction Transistor 即双极结型晶体管，晶体三极管）和电阻构成，具有速度
快的特点。最早的TTL门电路是74系列，后来出现了74H系列，74L系列，
74LS,74AS,74ALS等系列。但是由于TTL功耗大等缺点，正逐渐被CMOS电路取代。

*** 漏极开电路(OD)                                                   :开漏:

*开漏(Open Drain)* ： MOS管的 *漏极* 作为输出(*开*)
开漏电路概念中提到的“漏”就是指MOS FET的漏极。同理，开集电路中的“集”就
是指三极管的集电极。开漏电路就是指以 *MOS FET的漏极为输出的电路* 。一
般的用法是会在漏极外部的电路添加上拉电阻。完整的开漏电路应该由开漏器件
和开漏上拉电阻组成。

[[~/Wally/Journal/Figures/scrot/18640jwg.png]]

** 2015/11/24

*** bash declare 限定属性                                         :declare:

*declare* 或typeset内建命令(它们是完全相同的)可以用来 *限定变量的属性*

这是在某些编程语言中使用的定义类型不严格的方式。命令declare是bash版本2
之后才有的。

1. -r 只读(类似C常量)
2. -i 整型
3. -f 函数
4. -a 数组

**** 参考

+ [[https://app.yinxiang.com/shard/s52/nl/11551545/b034cc4d-6ffe-4915-b86b-59266c88898d?title=linux%20bash%20shell%E4%B9%8Bdeclare%20-%20fhefh%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD][bash:declare]]
*** IPython Introduction                                    :ipython:intro:
IPython 1.2.1 -- An enhanced Interactive Python.

ipython 是一个 python 的交互式 shell，比默认的python shell 好用得多，支
持变量自动补全，自动缩进，支持 bash shell 命令，内置了许多很有用的功能
和函数。在ubuntu 下只要 sudo apt-get install ipython 就装好了，通过
ipython 启动。

1. %打头的Magic函数
2. !打头的shell命令
3. ipython notebook


Ubuntu下安装： sudo apt-get ipython
开源(BSD): 当然也可以源码安装，但是何必。
**** 参考
+ [[http://ipython.org/][ipython homepage]]
+ [[http://baike.baidu.com/link?url=7-XcxpZSu0jq6nvaEnMk4JFIV-5_SjX7WRN5a5zyxyyv1HiUBpiS2HsTndW9SZYUh2apmjYWWatpJZHEigLidK][百度百科]]
+ [[http://baike.baidu.com/link?url=7-XcxpZSu0jq6nvaEnMk4JFIV-5_SjX7WRN5a5zyxyyv1HiUBpiS2HsTndW9SZYUh2apmjYWWatpJZHEigLidK][ipython简介]]
*** org time-stamps                                                  :time:
**** [[http://orgmode.org/manual/Creating-timestamps.html][Creating timestamps]]

For Org mode to recognize timestamps, they need to be in the specific
format. All commands listed below produce timestamps in the correct
format.

+ C-c .     (org-time-stamp)

  Prompt for a date and insert a corresponding timestamp. When the
  cursor is at an existing timestamp in the buffer, the command is
  used to modify this timestamp instead of inserting a new one. When
  this command is used twice in succession, a time range is inserted.

+ *C-c !*     (org-time-stamp-inactive)
  Like C-c ., but insert an inactive timestamp that will not cause an
  agenda entry.

+ C-u C-c . &  C-u C-c !

  Like C-c . and C-c !, but use the alternative format which contains
  date and time. The default time can be rounded to multiples of 5
  minutes, see the option org-time-stamp-rounding-minutes.

+ C-c C-c

  Normalize timestamp, insert/fix day name if missing or wrong.

+ C-c <     (org-date-from-calendar)

  Insert a timestamp corresponding to the cursor date in the
  Calendar.

+ C-c >     (org-goto-calendar)

  Access the Emacs calendar for the current date. If there is a
  timestamp in the current line, go to the corresponding date
  instead.

+ C-c C-o     (org-open-at-point)

  Access the agenda for the date given by the timestamp or -range at
  point (see Weekly/daily agenda).

+ S-<left>/<right>     (org-timestamp-down/up-day)


  Change date at cursor by one day. These key bindings conflict with
  shift-selection and related modes (see Conflicts).

+ S-<up>/<down>     (org-timestamp-up/down)

  Change the item under the cursor in a timestamp. The cursor can be
  on a year, month, day, hour or minute. When the timestamp contains a
  time range like ‘15:30-16:30’, modifying the first time will also
  shift the second, shifting the time block with constant length. To
  change the length, modify the second time. Note that if the cursor
  is in a headline and not at a timestamp, these same keys modify the
  priority of an item. (see Priorities). The key bindings also
  conflict with shift-selection and related modes (see Conflicts).

+ C-c C-y     (org-evaluate-time-range)

  Evaluate a time range by computing the difference between start and
  end. With a prefix argument, insert result after the time range (in
  a table: into the following column).
**** usage
C-c ! 没有默认绑定

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map "\C-c !" (lambda()
                                     (interactive)
                                     (org-time-stamp-inactive 1)))
#+END_SRC

以上配置无效， org-time-stamp-inactive 会(*prompt*)弹出一个buffer询问插入哪个日
期。

#+BEGIN_EXAMPLE
  [2015-11-24 二 15:24]
#+END_EXAMPLE

以前写过，简单的修改成标准格式（如上）
#+BEGIN_SRC emacs-lisp
  (defun tagerill:insert-current-time ()
    "Insert the current time"
    (interactive "*")
    (insert (format-time-string "[%Y-%m-%d 周%w " (current-time)))
    (insert (format-time-string "%H:%M]" (current-time))))
  (global-set-key "\C-zt" 'tagerill:insert-current-time)
  (defun tagerill:insert-current-date()
    "Insert the current date in certain format"
    (interactive)
    (insert (format-time-string "%Y/%m/%d" (current-time))))
  (global-set-key "\C-zd" 'tagerill:insert-current-date)
#+END_SRC

测试，OK

*TODO* 周2改为二，不难, elisp 字典？
** 2015/11/25
*** trick org-agenda-file-list的顺序会影响到切换(C-')的次序
*** DONE 整理～/bin
- State "DONE"       from "TODO"       [2015-11-25 三 11:19] \\
  整理了三个脚本文件
CLOCK: [2015-11-25 三 10:17]--[2015-11-25 三 10:18] =>  0:01
CLOCK: [2015-11-25 三 09:57]--[2015-11-25 三 10:07] =>  0:10
CLOCK: [2015-11-25 三 09:37]--[2015-11-25 三 09:46] =>  0:09
CLOCK: [2015-11-25 三 09:07]--[2015-11-25 三 09:18] =>  0:11

 <2015-11-24 二>


**** DONE index2pdf                                      :pdf:script:html:
- State "DONE"       from ""           [2015-11-25 三 10:27] \\
  注释完成

#+include: ~/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh :src sh

***** 手记
测试OK

#+BEGIN_EXAMPLE
  tmp $ cat > index
  www.baidu.com Baidu 1
  http://image.baidu.com/ Baidu Image 2
  www.baidu.com BaiduToo 1^C
  tmp $ ^C
  tmp $ cat index
  www.baidu.com Baidu 1
  http://image.baidu.com/ Baidu Image 2
  tmp $ cat >> index
  www.baidu.com BaiduAgain 1
  ^C
  tmp $ ^C
  tmp $ cat index
  www.baidu.com Baidu 1
  http://image.baidu.com/ Baidu Image 2
  www.baidu.com BaiduAgain 1
  tmp $ bash ~/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh index
  cat: index: 没有那个文件或目录
  Error: /undefinedfilename in (*.pdf)
  Operand stack:

  Execution stack:
     %interp_exit   .runexec2   --nostringval--   --nostringval--   --nostringval--   2   %stopped_push   --nostringval--   --nostringval--   --nostringval--   false   1   %stopped_push
  Dictionary stack:
     --dict:1173/1684(ro)(G)--   --dict:0/20(G)--   --dict:77/200(L)--
  Current allocation mode is local
  Last OS error: No such file or directory
  GPL Ghostscript 9.10: Unrecoverable error, exit code 1
  tmp $ bashdb ~/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh index
  bash debugger, bashdb, release 4.2-0.8

  Copyright 2002, 2003, 2004, 2006, 2007, 2008, 2009, 2010, 2011 Rocky Bernstein
  This is free software, covered by the GNU General Public License, and you are
  welcome to change it and/or distribute copies of it under certain conditions.

  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:17):
  17:     mkdir build
  bashdb<0> n
  mkdir: 无法创建目录"build": 文件已存在
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:18):
  18:     cd build
  bashdb<1> ls
  ,** Undefined command "ls". Try "help".
  bashdb<1> n
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:19):
  19:     > outline                       # 利用重定向生成空文件
  bashdb<2> n
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:20):
  20:     declare -i counter=0            # 限制变量counter的属性为整型，counter用于计算章节数
  bashdb<3> n
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:21):
  21:     declare -i page=1               # page用于跟踪页数
  bashdb<4> n
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:22):
  22:     cat $1 | while read -r line
  bashdb<5>
  cat: index: 没有那个文件或目录
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:53):
  53:     gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=out.pdf  *.pdf
  bashdb<6> q
  bashdb: That's all, folks...
  tmp $ bashdb ~/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh index
  bash debugger, bashdb, release 4.2-0.8

  Copyright 2002, 2003, 2004, 2006, 2007, 2008, 2009, 2010, 2011 Rocky Bernstein
  This is free software, covered by the GNU General Public License, and you are
  welcome to change it and/or distribute copies of it under certain conditions.

  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:17):
  17:     index=$1
  bashdb<0> n
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:18):
  18:     mkdir build
  bashdb<1> n
  mkdir: 无法创建目录"build": 文件已存在
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:19):
  19:     cd build
  bashdb<2>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:20):
  20:     cp ../$index .
  bashdb<3>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:22):
  22:     > outline                       # 利用重定向生成空文件
  bashdb<4>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:23):
  23:     declare -i counter=0            # 限制变量counter的属性为整型，counter用于计算章节数
  bashdb<5>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:24):
  24:     declare -i page=1               # page用于跟踪页数
  bashdb<6>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:25):
  25:     cat $index | while read -r line
  bashdb<7>
  Loading pages (1/6)
  Counting pages (2/6)
  Resolving links (4/6)
  Loading headers and footers (5/6)
  Printing pages (6/6)
  Done
  Loading pages (1/6)
  Counting pages (2/6)
  Resolving links (4/6)
  Loading headers and footers (5/6)
  Printing pages (6/6)
  Done
  Loading pages (1/6)
  Counting pages (2/6)
  Resolving links (4/6)
  Loading headers and footers (5/6)
  Printing pages (6/6)
  Done
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:56):
  56:     gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=out.pdf  *.pdf
  bashdb<8> n
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:59):
  59:     pdfoutline out.pdf outline output.pdf
  bashdb<9> n
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:62):
  62:     mv output.pdf ..
  bashdb<10> n
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:63):
  63:     rm -rf *
  bashdb<11> n
  (/usr/bin/bashdb:1):
  1:      #!/bin/bash
  bashdb<12> q
  bashdb: That's all, folks...
  tmp $ ls
  babel-10675UiQ              orbit-ben       py3295M6x
  build                       out.pdf         py3295ndt
  config-err-PFxIbl           output.pdf      py3295vdG
  epdfinfo.log                pip_build_ben   py3295xYg
  #fcitx-socket-:0#           pip_build_root  rospackfind
  fcitx-socket-:0             py32958zK       sni-qt_python2.7_2578-UO3EC4
  foo.txt                     py3295fmy       test_cron
  index                       py3295Ivh       unity_support_test.0
  mongodb-27017.sock          py3295jGf
  openmpi-sessions-ben@ben_0  py3295lbf
  tmp $ rm out.pdf out
  rm: 无法删除"out": 没有那个文件或目录
  tmp $ rm output.pdf output.pdf
  rm: 无法删除"output.pdf": 没有那个文件或目录
  tmp $ ls
  babel-10675UiQ      openmpi-sessions-ben@ben_0  py3295M6x
  build               orbit-ben                   py3295ndt
  config-err-PFxIbl   pip_build_ben               py3295vdG
  epdfinfo.log        pip_build_root              py3295xYg
  #fcitx-socket-:0#   py32958zK                   rospackfind
  fcitx-socket-:0     py3295fmy                   sni-qt_python2.7_2578-UO3EC4
  foo.txt             py3295Ivh                   test_cron
  index               py3295jGf                   unity_support_test.0
  mongodb-27017.sock  py3295lbf
  tmp $ ls
  babel-10675UiQ      openmpi-sessions-ben@ben_0  py3295M6x
  build               orbit-ben                   py3295ndt
  config-err-PFxIbl   pip_build_ben               py3295vdG
  epdfinfo.log        pip_build_root              py3295xYg
  #fcitx-socket-:0#   py32958zK                   rospackfind
  fcitx-socket-:0     py3295fmy                   sni-qt_python2.7_2578-UO3EC4
  foo.txt             py3295Ivh                   test_cron
  index               py3295jGf                   unity_support_test.0
  mongodb-27017.sock  py3295lbf
  tmp $ bashdb ~/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh index
  bash debugger, bashdb, release 4.2-0.8

  Copyright 2002, 2003, 2004, 2006, 2007, 2008, 2009, 2010, 2011 Rocky Bernstein
  This is free software, covered by the GNU General Public License, and you are
  welcome to change it and/or distribute copies of it under certain conditions.

  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:17):
  17:     index=$1
  bashdb<0> n
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:18):
  18:     builddir=links2pdf_build
  bashdb<1>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:19):
  19:     mkdir $builddir
  bashdb<2>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:20):
  20:     cd $builddir
  bashdb<3> n
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:21):
  21:     cp ../$index .
  bashdb<4>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:23):
  23:     > outline                       # 利用重定向生成空文件
  bashdb<5>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:24):
  24:     declare -i counter=0            # 限制变量counter的属性为整型，counter用于计算章节数
  bashdb<6>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:25):
  25:     declare -i page=1               # page用于跟踪页数
  bashdb<7>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:26):
  26:     cat $index | while read -r line
  bashdb<8>
  Loading pages (1/6)
  Counting pages (2/6)
  Resolving links (4/6)
  Loading headers and footers (5/6)
  Printing pages (6/6)
  Done
  Loading pages (1/6)
  Counting pages (2/6)
  Resolving links (4/6)
  Loading headers and footers (5/6)
  Printing pages (6/6)
  Done
  Loading pages (1/6)
  Counting pages (2/6)
  Resolving links (4/6)
  Loading headers and footers (5/6)
  Printing pages (6/6)
  Done
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:57):
  57:     gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=out.pdf  *.pdf
  bashdb<9>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:60):
  60:     pdfoutline out.pdf outline output.pdf
  bashdb<10>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:63):
  63:     mv output.pdf ..
  bashdb<11>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:64):
  64:     cd ..
  bashdb<12>
  (/home/ben/Wally/Journal/Project/Bash/links2pdf/links2pdf.sh:65):
  65:     rm -rf $builddir
  bashdb<13>

#+END_EXAMPLE

**** DONE pptx2pdf                                       :pptx:ppt:script:
- State "DONE"       from ""           [2015-11-25 三 11:11]

#+INCLUDE: ~/Wally/Journal/Project/Bash/pptx2pdf/pptx2pdf.sh :src sh

***** 手记

测试OK

#+BEGIN_EXAMPLE
  tmp $ cp ~/Document/Project/Kalman/*ppt .
  tmp $ ls | grep ppt
  EKF与UKF.ppt
  KalmanSmoothing.ppt
  tmp $ bash ~/Wally/Journal/Project/Bash/pptx2pdf/pptx2pdf.sh .
  convert /tmp/EKF与UKF.ppt -> /tmp//EKF与UKF.odt using
  convert /tmp/KalmanSmoothing.ppt -> /tmp//KalmanSmoothing.odt using
  tmp $ ls | grep pdf
  EKF与UKF.pdf
  epdfinfo.log
  KalmanSmoothing.pdf
  output.pdf
  tmp $ ls  | grep -E [*.ppt | *.pdf ]
  grep: 不匹配的 [ 或 [^
  EKF与UKF.pdf：未找到命令
  tmp $ ls  | grep -E "*.ppt| *.pdf"
  EKF与UKF.pdf
  EKF与UKF.ppt
  epdfinfo.log
  KalmanSmoothing.pdf
  KalmanSmoothing.ppt
  output.pdf
  tmp $ ls  | grep -E "*.ppt$| *.pdf$"
  EKF与UKF.pdf
  EKF与UKF.ppt
  KalmanSmoothing.pdf
  KalmanSmoothing.ppt
  output.pdf

#+END_EXAMPLE

**** replace_white_with_underline                                 :script:

#+INCLUDE: ~/Wally/Journal/Project/Bash/replace_white_with_underline/replace_white_with_underline.sh :src sh

OK

*** wkhtmltopdf                                      :wkhtmltopdf:pdf:html:

CLOCK: [2015-11-25 三 09:26]--[2015-11-25 三 09:37] =>  0:11

**** reference
+ [[http://wkhtmltopdf.org/][Homepage]]
+ [[https://github.com/wkhtmltopdf/wkhtmltopdf][GitHub]]
+ [[http://wkhtmltopdf.org/libwkhtmltox/][doxygen]]
+ [[http://stackoverflow.com/questions/10981960/wkhtmltopdf-patched-qt][stackoverflow]]
+ [[http://park.jobdeer.com/discussion/10/wkhtmltopdf%E4%B8%AD%E6%96%87%E5%8F%82%E6%95%B0][wkhtmltopdf选项中文说明]]
+ [[http://wkhtmltopdf.org/usage/wkhtmltopdf.txt][document]]


**** intro

1. what

   wkhtmltopdf and wkhtmltoimage are open source (LGPLv3) command line
   tools to render HTML into PDF and various image formats using the
   QT Webkit rendering engine.

   wkhtmltopdf/wkhtmtoimage 是开源的命令行工具，用于将HMTL渲染成PDF和
   多种图片格式。 它使用Qt Webkit作为渲染引擎。

2. 安装

   有源码，但不推荐以源码方式安装。（没有必要深入研究的东西不要瞎折腾，
   将精力花在更重要的地方）

   *apt-get 方式安装*

3. 使用

   *wkhtmltopdf [GLOBAL OPTION]... [OBJECT]... <output file>*

   + [object] 为输入支持，支持链接(link)形式，也支持文件(html)形式。



**** 选项

+ --allow <path>  允许加载从指定的文件夹中的文件或文件（可重复）
+ --book*  设置一会打印一本书的时候，通常设置的选项
+ --collate  打印多份副本时整理
+ --cookie <name> <value>  设置一个额外的cookie（可重复）
+ --cookie-jar <path>  读取和写入的Cookie，并在提供的cookie jar文件
+ --copies <number>  复印打印成pdf文件数（默认为1）
+ --cover* <url>  使用HTML文件作为封面。它会带页眉和页脚的TOC之前插入
+ --custom-header <name> <value>  设置一个附加的HTTP头（可重复）
+ --debug-javascript  显示的javascript调试输出
+ --default-header*  添加一个缺省的头部，与页面的左边的名称，页面数到右边，例如： --header-left '[webpage]' --header-right '[page]/[toPage]'  --header-line
+ --disable-external-links*  禁止生成链接到远程网页
+ --disable-internal-links*  禁止使用本地链接
+ --disable-javascript  禁止让网页执行JavaScript
+ --disable-pdf-compression*  禁止在PDF对象使用无损压缩
+ --disable-smart-shrinking*  禁止使用WebKit的智能战略收缩，使像素/ DPI比没有不变
+ --disallow-local-file-access  禁止允许转换的本地文件读取其他本地文件，除非explecitily允许用 --allow
+ --dpi <dpi>  显式更改DPI（这对基于X11的系统没有任何影响）
+ --enable-plugins  启用已安装的插件（如Flash
+ --encoding <encoding>  设置默认的文字编码
+ --extended-help  显示更广泛的帮助，详细介绍了不常见的命令开关
+ --forms*  打开HTML表单字段转换为PDF表单域
+ --grayscale  PDF格式将在灰阶产生
+ --help  Display help
+ --htmldoc  输出程序HTML帮助
+ --ignore-load-errors  忽略claimes加载过程中已经遇到了一个错误页面
+ --lowquality  产生低品质的PDF/ PS。有用缩小结果文档的空间
+ --manpage  输出程序手册页
+ --margin-bottom <unitreal>  设置页面下边距 (default 10mm)
+ --margin-left <unitreal>  将左边页边距 (default 10mm)
+ --margin-right <unitreal>  设置页面右边距 (default 10mm)
+ --margin-top <unitreal>  设置页面上边距 (default 10mm)
+ --minimum-font-size <int>  最小字体大小 (default 5)
+ --no-background  不打印背景
+ --orientation <orientation>  设置方向为横向或纵向
+ --page-height <unitreal>  页面高度 (default unit millimeter)
+ --page-offset* <offset>  设置起始页码 (default 1)
+ --page-size <size>  设置纸张大小: A4, Letter, etc.
+ --page-width <unitreal>  页面宽度 (default unit millimeter)
+ --password <password>  HTTP验证密码
+ --post <name> <value>  Add an additional post field (repeatable)
+ --post-file <name> <path>  Post an aditional file (repeatable)
+ --print-media-type*  使用的打印介质类型，而不是屏幕
+ --proxy <proxy>  使用代理
+ --quiet  Be less verbose
+ --read-args-from-stdin  读取标准输入的命令行参数
+ --readme  输出程序自述
+ --redirect-delay <msec>  等待几毫秒为JS-重定向(default 200)
+ --replace* <name> <value>  替换名称,值的页眉和页脚（可重复）
+ --stop-slow-scripts  停止运行缓慢的JavaScripts
+ --title <text>  生成的PDF文件的标题（第一个文档的标题使用，如果没有指定）
+ --toc*  插入的内容的表中的文件的开头
+ --use-xserver*  使用X服务器（一些插件和其他的东西没有X11可能无法正常工作）
+ --user-style-sheet <url>  指定用户的样式表，加载在每一页中
+ --username <username>  HTTP认证的用户名
+ --version  输出版本信息退出
+ --zoom <float>  使用这个缩放因子 (default 1)

*** bash read                                                        :read:
read命令接收标准输入(键盘)的输入，或者其它文件描述符的输入。
得到输入后，read命令将数据放在一个标准变量中。

1. 基本读取

   #+INCLUDE: ~/Wally/Journal/Project/Bash/read/demo01_basicread.sh :src sh

2. -p 提示

   #+INCLUDE: ~/Wally/Journal/Project/Bash/read/demo02_read_with_hint.sh :src sh

3. 多个变量

   read后面可以有多个变量。

4. 不指定变量

   #+INCLUDE: ~/Wally/Journal/Project/Bash/read/demo03_read_without_var.sh :src sh

   放置在环境变量REPLY中（小写不行）

5. -t 计时输入

   脚本可能会停下来一直等待用户输入。
   -t <n>  # 指定秒数
   当计时满时， read命令返回非零值(零值为正常退出)

   #+INCLUDE: ~/Wally/Journal/Project/Bash/read/demo04_read_with_clock.sh :src sh

6. -n<N> 设置输入字符个数

   #+INCLUDE: ~/Wally/Journal/Project/Bash/read/demo05_specified_num_of_chars.sh :src sh

7. -s 默读，即不显示

   #+INCLUDE: ~/Wally/Journal/Project/Bash/read/demo06_invisible.sh :src sh

8. 读取文件

   每次调用调用read命令都会读取文件中折一行文本。
   当文件没有可读的行时，read命令将以非零状态退出。
   *最常用的方法是对文件使用cat命令并通过管道将结果直接传送给包含read
   命令的while命令*

   #+INCLUDE: ~/Wally/Journal/Project/Bash/read/demo07_read_file.sh :src sh

*** pdfinfo                                                   :pdfinfo:pdf:

**** reference
+ [[http://linuxcommand.org/man_pages/pdfinfo1.html][Linux command: pdfinfo]]
**** intro
1. NAME

   pdfinfo - Portable Document Format (PDF) document information
   extractor.

2. SYNOPSIS

   *pdfinfo [options] [PDF-file]*

3. DESCRIPTION

   Pdfinfo prints the contents of the ´Info’ dictionary (plus  some
   other  useful information) from a Portable Document Format (PDF)
   file.

   The ´Info’ dictionary contains the following values:
   + title
   + subject
   + keywords
   + author
   + creator
   + producer
   + creation date
   + modification date

   In addition, the following information is printed:
   + tagged (yes/no)
   + page count
   + encrypted flag (yes/no)
   + print and copy permissions (if encrypted)
   + page size
   + file size
   + linearized (yes/no)
   + PDF version
   + metadata (only if requested)

**** 手记

$ pdfinfo --help

#+BEGIN_EXAMPLE
  pdfinfo version 0.24.5
  Copyright 2005-2013 The Poppler Developers - http://poppler.freedesktop.org
  Copyright 1996-2011 Glyph & Cog, LLC
  Usage: pdfinfo [options] <PDF-file>
    -f <int>          : first page to convert
    -l <int>          : last page to convert
    -box              : print the page bounding boxes
    -meta             : print the document metadata (XML)
    -rawdates         : print the undecoded date strings directly from the PDF file
    -enc <string>     : output text encoding name
    -listenc          : list available encodings
    -opw <string>     : owner password (for encrypted files)
    -upw <string>     : user password (for encrypted files)
    -v                : print copyright and version info
    -h                : print usage information
    -help             : print usage information
    --help            : print usage information
    -?                : print usage information
#+END_EXAMPLE


#+BEGIN_SRC sh :results output :exports both
pdfinfo ~/Wally/Journal/journal.pdf
#+END_SRC

#+RESULTS:
#+begin_example
Creator:        Emacs 24.4.1 (Org mode 8.2.10)
Producer:       xdvipdfmx (20140317)
CreationDate:   Wed Nov 25 09:40:33 2015
Tagged:         no
Form:           none
Pages:          3
Encrypted:      no
Page size:      612 x 792 pts (letter)
Page rot:       0
File size:      138622 bytes
Optimized:      no
PDF version:    1.5
#+end_example

*** Emacs 倒计时                                                     :time:

1. why: *切换任务时要保证在一定时限（10～15m）内解决，然后返回到主任务。*

2. google关键字:  emacs countdown timer

3. org-timer-set-timer

   emacs help:
   #+BEGIN_EXAMPLE
     It is bound to C-c C-x ;.

     (org-timer-set-timer &optional OPT)

     Prompt for a duration and set a timer.

     If `org-timer-default-timer' is not zero, suggest this value as
     the default duration for the timer.  If a timer is already set,
     prompt the user if she wants to replace it.

     Called with a numeric prefix argument, use this numeric value as
     the duration of the timer.

     Called with a `C-u' prefix arguments, use `org-timer-default-timer'
     without prompting the user for a duration.

     With two `C-u' prefix arguments, use `org-timer-default-timer'
     without prompting the user for a duration and automatically
     replace any running timer.
   #+END_EXAMPLE

4. 手记

   只能使用整数分钟，使用浮点数会被截取，比如设置0.5会立即结束倒计时。

   由系统提示， 满足要求。

   [[~/Wally/Journal/Figures/scrot/106756Sw.png]]

5. 设置

#+BEGIN_SRC emacs-lisp
  (setq org-timer-default-timer 10)       ; 设置默认计时10分钟
#+END_SRC

*** pdfoutline                                             :pdfoutline:pdf:
**** reference
+ [[http://manpages.ubuntu.com/manpages/hardy/man1/pdfoutline.1.html][ubuntu man]]
+ [[http://sourceforge.net/projects/fntsample/?source=typ_redirect][sourceforge]]

**** intro
1. what

   pdfoutline is a part of *fntsample*, which can add outlines to pdf
   files.

   pdfoutline - *add outlines (aka bookmarks) to PDF files*

   给PDF文件添加大纲/目录

2. 安装
   + $ sudo apt-get install fntsample
   + sourcecodae

3. Usage

   *pdfoutline input.pdf outlines.txt output.pdf*

   pdfoutline accepts no options.

4. DESCRIPTION

   pdfoutline reads input file given as first argument, adds outlines
   from text file given as second argument, and saves result to file
   with  name given as third argument.

   File with outlines information should consist of lines in the following
   format: *<level> <page> Outline text*

   <level> and <page> should be integers.  Each field should be  separated
   by  *exactly one space symbol*.  All values for <level> should be greater
   or equal than that of the first line.  Page numeration starts with 1.

   Outlines file can contain comments that start with # in  first  column.
   Comments and empty lines are ignored.


5. EXAMPLES

   Here is example of outlines data file:
   #+BEGIN_EXAMPLE
     0 1 Document title
     1 1 Chapter 1
     2 1 Chapter 1.1
     2 2 Chapter 1.2
     1 3 Chapter 2
   #+END_EXAMPLE

   Using this file will result in outlines like the following:

   #+BEGIN_EXAMPLE
     +-Chapter 1
     | +-Chapter 1.1
     | +-Chapter 1.2
     +-Chapter 2
   #+END_EXAMPLE

*** unoconv                                      :unoconv:convert:tool:pdf:

**** reference
+ [[http://www.cnblogs.com/xkfz007/articles/2182480.html][Linux下Word转换PDF及多个PDF合并]]
+ [[http://dag.wieers.com/home-made/unoconv/][HomePage]]


**** intro
unoconv converts between any document format that OpenOffice
understands. It uses *OpenOffice's UNO bindings* for non-interactive
conversion of documents.

转换文档格式的命令行工具。


Supported document formats include Open Document Format (.odt), MS
Word (.doc), MS Office Open/MS OOXML (.xml), Portable Document Format
(.pdf), HTML, XHTML, RTF, Docbook (.xml), and more.

在Linux中常常涉及到多种文档格式，如doc、txt、html、rtf等等。为了方便文
件传递，就可能需要在各种格式之间进行转换。OpenOffice.Org可以方便的打
开多各文档格式并按需进行转换* ，但要一次处理大量文件或要编写脚本进行转
换时，仅用OpenOffice就难以胜任了。


用unoconv就可以轻松地实现用OpenOffice可以打开的文档的转换.
*unoconv -f pdf myDoc.doc*
进行转换了.以上命令即会生成一个名为 myDoc.pdf 的 pdf 文件。

**** 批量转换

*批量转换需要结合find命令或脚本使用，使用时需注意最好使用C/S模式以加快
速度*
+ unoconv --listener &
+ unoconv -f pdf some-document.odt
+ unoconv -f doc other-document.odt
+ unoconv -f jpg some-image.png
+ unoconv -f xsl some-spreadsheet.csv

*** gs                                                        :gs:pdf:tool:

**** intro
*ghostscript* : an interpreter for the PostScript language and for
PDF.

*解释器*

**** man
$ gs -help

#+BEGIN_EXAMPLE
  GPL Ghostscript 9.10 (2013-08-30)
  Copyright (C) 2013 Artifex Software, Inc.  All rights reserved.
  Usage: gs [switches] [file1.ps file2.ps ...]
  Most frequently used switches: (you can use # in place of =)
   -dNOPAUSE           no pause after page   | -q       `quiet', fewer messages
   -g<width>x<height>  page size in pixels   | -r<res>  pixels/inch resolution
   -sDEVICE=<devname>  select device         | -dBATCH  exit after last file
   -sOutputFile=<file> select output file: - for stdout, |command for pipe,
                                           embed %d or %ld for page #
  Input formats: PostScript PostScriptLevel1 PostScriptLevel2 PostScriptLevel3 PDF
  Default output device: x11alpha
  ...
#+END_EXAMPLE


**** 转换pdf为ppt                                             :ppt:office:

The desired result can also be achieved without proprietary tools. If
you have GhostScript installed, you can convert your PDF presentation
into a set of JPG images using:

#+BEGIN_EXAMPLE
gs -dNOPAUSE -dBATCH -dSAFER -dGraphicsAlphaBits=4  \
   -dTextAlphaBits=4 -sDEVICE=jpeg -r300 \
   -sOutputFile='page-%00d.jpg' YOURFILE.pdf
#+END_EXAMPLE

Then, with the plugin for OpenOffice/LibreOffice create a presentation
where each image fills exactly one slide. You can also easily keep the
order of the pages by choosing the plugin option "natural sorting".


*Edit -> Link -> 断开链接*  否则以链接形式插入。

***** 小结
1. 使用gs转换为图片
2. 将图片插入LibreOffice中
3. 保存时断开链接

**** Merge PDF

*多个PDF文件的合并gs* :

#+begin_latex
\begin{minted}[frame=single, mathescape]{sh}
gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=out.pdf  *.pdf
\end{minted}
#+end_latex

就会生成一个名为out.pdf的文件.但要保证当前目录下没有out.pdf这个文件.

**** reference

+ [[http://www.ghostscript.com/][Homepage]]
+ [[http://superuser.com/questions/268244/how-to-convert-pdf-to-ppt-or-odp][convert pdf to ppt]]
+ [[http://stackoverflow.com/questions/8158584/ghostscript-to-merge-pdfs-compresses-the-result][stackoverflow: gs to merge PDFs *compresses* the result]]

*** org-ring-mark

**** org-mark-ring-push

C-c % runs the command org-mark-ring-push, which is an interactive
compiled Lisp function in `org.el'.

It is bound to C-c %.

(org-mark-ring-push &optional POS BUFFER)

Put the current position or POS into the mark ring and rotate it.

**** org-mark-ring-goto

org-mark-ring-goto is an interactive compiled Lisp function in
`org.el'.

(org-mark-ring-goto &optional N)

Jump to the previous position in the mark ring.
With prefix arg N, jump back that many stored positions.  When
called several times in succession, walk through the entire ring.
Org-mode commands jumping to a different position in the current file,
or to another Org-mode file, automatically push the old position
onto the ring.

**** 配置和使用

切换任务时先记录当前位置

#+BEGIN_SRC emacs-lisp :exports code
  (define-key org-mode-map "\C-c&" 'org-mark-ring-goto) ; 默认没有绑定
#+END_SRC
*** org-return-follows-link

修改回车键的作用为打开point处的链接，与C-c C-o行为相同

Its value is t
Original value was nil

Documentation:
Non-nil means on links RET will follow the link.
In tables, the special behavior of RET has precedence.

#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC

*** org open link programs                                            :pdf:

why *使用 wine foxitreader 打开 PDF 链接*
**** *org-file-apps*
#+BEGIN_EXAMPLE
  Its value is ((auto-mode . emacs)
   ("\\.mm\\'" . default)
   ("\\.x?html?\\'" . default)
   ("\\.pdf\\'" . default))


  Documentation:
  External applications for opening `file:path' items in a document.
  Org-mode uses system defaults for different file types, but
  you can use this variable to set the application for a given file
  extension.  The entries in this list are cons cells where the car identifies
  files and the cdr the corresponding command.  Possible values for the
  file identifier are
   "string"    A string as a file identifier can be interpreted in different
                 ways, depending on its contents:

                 - Alphanumeric characters only:
                   Match links with this file extension.
                   Example: ("pdf" . "evince %s")
                            to open PDFs with evince.

                 - Regular expression: Match links where the
                   filename matches the regexp.  If you want to
                   use groups here, use shy groups.

                   Example: ("\.x?html\'" . "firefox %s")
                            ("\(?:xhtml\|html\)" . "firefox %s")
                            to open *.html and *.xhtml with firefox.

                 - Regular expression which contains (non-shy) groups:
                   Match links where the whole link, including "::", and
                   anything after that, matches the regexp.
                   In a custom command string, %1, %2, etc. are replaced with
                   the parts of the link that were matched by the groups.
                   For backwards compatibility, if a command string is given
                   that does not use any of the group matches, this case is
                   handled identically to the second one (i.e. match against
                   file name only).
                   In a custom lisp form, you can access the group matches with
                   (match-string n link).

                   Example: ("\.pdf::\(\d+\)\'" . "evince -p %1 %s")
                       to open [[file:document.pdf::5]] with evince at page 5.

   `directory'   Matches a directory
   `remote'      Matches a remote file, accessible through tramp or efs.
                 Remote files most likely should be visited through Emacs
                 because external applications cannot handle such paths.
  `auto-mode'    Matches files that are matched by any entry in `auto-mode-alist',
                 so all files Emacs knows how to handle.  Using this with
                 command `emacs' will open most files in Emacs.  Beware that this
                 will also open html files inside Emacs, unless you add
                 ("html" . default) to the list as well.
   t             Default for files not matched by any of the other options.
   `system'      The system command to open files, like `open' on Windows
                 and Mac OS X, and mailcap under GNU/Linux.  This is the command
                 that will be selected if you call `C-c C-o' with a double
                 C-u C-u prefix.

  Possible values for the command are:
   `emacs'       The file will be visited by the current Emacs process.
   `default'     Use the default application for this file type, which is the
                 association for t in the list, most likely in the system-specific
                 part.
                 This can be used to overrule an unwanted setting in the
                 system-specific variable.
   `system'      Use the system command for opening files, like "open".
                 This command is specified by the entry whose car is `system'.
                 Most likely, the system-specific version of this variable
                 does define this command, but you can overrule/replace it
                 here.
   string        A command to be executed by a shell; %s will be replaced
                 by the path to the file.
   sexp          A Lisp form which will be evaluated.  The file path will
                 be available in the Lisp variable `file'.
#+END_EXAMPLE

**** setting
#+BEGIN_SRC emacs-lisp
  (setq org-file-apps '((auto-mode . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . default)
                        ;; ("\\.pdf\\'" . "evince %s")
                        ("\\.pdf\\'" . "wine \'C:\\Program Files\\Foxit Software\\Foxit Reader\\FoxitReader.exe\' ../../../../%s")
                        ))
#+END_SRC

*wine必须的路径必须相对于wine启动路径，支持 .. , 不支持 ~ 和绝对路径。*

../../../../是从journal.org到时/的相对路径。



**** 测试

[[/usr/local/texlive/2014/texmf-dist/doc/latex/minted/minted.pdf]]

[[/media/ben/Reserch/Document/Programming/C++/Boost/Boost库学习指南.pdf]]

[[/media/ben/Reserch/Document/EmbeddedSystem/ARM/ARM Architecture Reference Manual.pdf]]

太繁琐！！！

文件中有空格也可以。
*** DONE Emacs后台进程管理
- State "DONE"       from "TODO"       [2015-11-25 三 14:07] \\
  proced

*M-x proced*

*** beamer                                                         :beamer:
**** beamer入门
***** reference

+ [[~/Document/Programming/TeX/Beamer/Beamer快速入门中文教程.chm][Beamer入门教程]]
+ [[https://bitbucket.org/rivanvx/beamer/wiki/Home][homepage]]
+ [[~/Document/Programming/TeX/Beamer/beameruserguide.pdf][Beamer User Guide]]

***** intro                                                       :intro:

1. *beamer* class

   Beamer 是 LaTeX 的一个用于创建幻灯片的文档类, 输出格式默认为PDF.

   \mint{latex}|\documentclass{beamer}|

2. *frame* environment

   在Beamer中, 基本环境是帧(*frame*)环境，即指幻灯片(slide), 其格式为:

   #+begin_latex
     \begin{minted}[frame=single, mathescape]{latex}
     \begin{frame}{frame_title}
       ...
     \end{frame}
     \end{minted}
   #+end_latex

***** Beamer 主题

****** theme

主题可以设置: 常规列表(itemized list)和排序列表(enumerated list)的标记
(marker)或项目符号, 包含日期和幻灯片序号和其它信息的底边导航条等。

\mint{latex}|\usetheme{THEME}|

主题位置： /usr/local/texlive/2014/texmf-dist/tex/latex/beamer/themes

#+BEGIN_SRC sh :results output :exports both
ls -l /usr/local/texlive/2014/texmf-dist/tex/latex/beamer/themes
#+END_SRC

#+RESULTS:
: 总用量 20
: drwxr-xr-x 2 root root 4096  4月  3  2015 color
: drwxr-xr-x 2 root root 4096  4月  3  2015 font
: drwxr-xr-x 2 root root 4096  4月  3  2015 inner
: drwxr-xr-x 2 root root 4096  4月  3  2015 outer
: drwxr-xr-x 3 root root 4096  4月  3  2015 theme

****** 主要主题(major theme)

Beamer标准主题按城市名称命名.

#+BEGIN_SRC sh :results output :exports both
ls /usr/local/texlive/2014/texmf-dist/tex/latex/beamer/themes/theme
#+END_SRC

#+RESULTS:
#+begin_example
beamerthemeAnnArbor.sty
beamerthemeAntibes.sty
beamerthemeBergen.sty
beamerthemeBerkeley.sty
beamerthemeBerlin.sty
beamerthemeBoadilla.sty
beamerthemeboxes.sty
beamerthemeCambridgeUS.sty
beamerthemeCopenhagen.sty
beamerthemeDarmstadt.sty
beamerthemedefault.sty
beamerthemeDresden.sty
beamerthemeEastLansing.sty
beamerthemeFrankfurt.sty
beamerthemeGoettingen.sty
beamerthemeHannover.sty
beamerthemeIlmenau.sty
beamerthemeJuanLesPins.sty
beamerthemeLuebeck.sty
beamerthemeMadrid.sty
beamerthemeMalmoe.sty
beamerthemeMarburg.sty
beamerthemeMontpellier.sty
beamerthemePaloAlto.sty
beamerthemePittsburgh.sty
beamerthemeRochester.sty
beamerthemeSingapore.sty
beamerthemeSzeged.sty
beamerthemeWarsaw.sty
compatibility
#+end_example

****** 次要主题(*minor themes*)

次要主题控制幻灯片外观的某些部分, 可以调用一个或多个次要主题。次要主题
分为四类:

1. 外部主题(*outer themes*):

   控制幻灯片的装饰（decorations），如显示在顶边节（header sections）
   和底边节（footer sections）中的文本和图形。

   #+BEGIN_SRC sh :results output :exports both
     ls /usr/local/texlive/2014/texmf-dist/tex/latex/beamer/themes/outer
   #+END_SRC

   #+RESULTS:
   : beamerouterthemedefault.sty
   : beamerouterthemeinfolines.sty
   : beamerouterthememiniframes.sty
   : beamerouterthemeshadow.sty
   : beamerouterthemesidebar.sty
   : beamerouterthemesmoothbars.sty
   : beamerouterthemesmoothtree.sty
   : beamerouterthemesplit.sty
   : beamerouterthemetree.sty

   eg. 添加3-D 阴影到某些顶边元素。

   \mint{latex}|\useoutertheme{shadow}|

2. 内部主题(*inner themes*)

   控制幻灯片的装饰的内部区域，如常规列表（itemization lists）的标记/
   弹头，还有放置在定理周围的盒子。

   #+BEGIN_SRC sh :results output :exports both
     ls /usr/local/texlive/2014/texmf-dist/tex/latex/beamer/themes/inner
   #+END_SRC

   #+RESULTS:
   : beamerinnerthemecircles.sty
   : beamerinnerthemedefault.sty
   : beamerinnerthemeinmargin.sty
   : beamerinnerthemerectangles.sty
   : beamerinnerthemerounded.sty

   \mint{latex}|\useinnertheme{}|
3. 字体主题(*font themes*)

   控制幻灯片不同元素的字形和字体尺寸。

   #+BEGIN_SRC sh :results output :exports both
     ls /usr/local/texlive/2014/texmf-dist/tex/latex/beamer/themes/font
   #+END_SRC

   #+RESULTS:
   : beamerfontthemedefault.sty
   : beamerfontthemeprofessionalfonts.sty
   : beamerfontthemeserif.sty
   : beamerfontthemestructurebold.sty
   : beamerfontthemestructureitalicserif.sty
   : beamerfontthemestructuresmallcapsserif.sty

   eg. 将文档的 字体更改为衬线体（serif）。（默认为无衬线体。）
   \mint{latex}|\useinnertheme{serif}|

4. 颜色主题(*color themes*)

   控制标题、帧标题、常规列表子弹以及幻灯片其它元素的颜色。

   #+BEGIN_SRC sh :results output :exports both
     ls /usr/local/texlive/2014/texmf-dist/tex/latex/beamer/themes/color
   #+END_SRC

   #+RESULTS:
   #+begin_example
   beamercolorthemealbatross.sty
   beamercolorthemebeaver.sty
   beamercolorthemebeetle.sty
   beamercolorthemecrane.sty
   beamercolorthemedefault.sty
   beamercolorthemedolphin.sty
   beamercolorthemedove.sty
   beamercolorthemefly.sty
   beamercolorthemelily.sty
   beamercolorthememonarca.sty
   beamercolorthemeorchid.sty
   beamercolorthemerose.sty
   beamercolorthemeseagull.sty
   beamercolorthemeseahorse.sty
   beamercolorthemesidebartab.sty
   beamercolorthemespruce.sty
   beamercolorthemestructure.sty
   beamercolorthemewhale.sty
   beamercolorthemewolverine.sty
   #+end_example

   eg. 改变 Beamer 的默认颜色。
   \mint{latex}|\usecolortheme{crane}|

***** 帧工具

****** 结构色
1. 结构色

   Beamer 演示稿的大部分有颜色的部分由结构（structure）提取颜色
   （abstract color）后绘制（draw）。通过更改结构（structure）你可以改
   变 Beamer 稿的全部颜色。

   #+begin_latex
     \begin{minted}[frame=single, mathescape]{latex}
     \documentclass{beamer}
       \usecolortheme[named=Brown]{structure}
       \usetheme[height=7mm]{Rochester}
     \end{minted}
   #+end_latex

   + 结构（structure）会影响多个项目（items），包括子弹（bullets）
     和导航图标。

   + 颜色 “Brown” 只是下列文件中定义的大量颜色名（color names）的一
     个。
     \textbackslash{}documentclass 的 xcolor=dvipsnames 选项将这些颜色
     名带入 Beamer。

     #+BEGIN_SRC sh :results output :exports code
       cat /usr/share/texlive/texmf-dist/tex/latex/graphics/dvipsnam.def
     #+END_SRC

     #+RESULTS:
     #+begin_example
     %%
     %% This is file `dvipsnam.def',
     %% generated with the docstrip utility.
     %%
     %% The original source files were:
     %%
     %% drivers.dtx  (with options: `dvipsnames')
     %%
     %% drivers.dtx Copyright (C) 1994      David Carlisle Sebastian Rahtz
     %%             Copyright (C) 1995 1996 1997 1998 1999 David Carlisle
     %%
     %% This file is part of the Standard LaTeX `Graphics Bundle'.
     %% It may be distributed under the terms of the LaTeX Project Public
     %% License, as described in lppl.txt in the base LaTeX distribution.
     %% Either version 1.3 or, at your option, any later version.
     %%
     \ProvidesFile{dvipsnam.def}
             [1999/02/16 v3.0i Driver-dependant file (DPC,SPQR)]
     \DefineNamedColor{named}{GreenYellow}   {cmyk}{0.15,0,0.69,0}
     \DefineNamedColor{named}{Yellow}        {cmyk}{0,0,1,0}
     \DefineNamedColor{named}{Goldenrod}     {cmyk}{0,0.10,0.84,0}
     \DefineNamedColor{named}{Dandelion}     {cmyk}{0,0.29,0.84,0}
     \DefineNamedColor{named}{Apricot}       {cmyk}{0,0.32,0.52,0}
     \DefineNamedColor{named}{Peach}         {cmyk}{0,0.50,0.70,0}
     \DefineNamedColor{named}{Melon}         {cmyk}{0,0.46,0.50,0}
     \DefineNamedColor{named}{YellowOrange}  {cmyk}{0,0.42,1,0}
     \DefineNamedColor{named}{Orange}        {cmyk}{0,0.61,0.87,0}
     \DefineNamedColor{named}{BurntOrange}   {cmyk}{0,0.51,1,0}
     \DefineNamedColor{named}{Bittersweet}   {cmyk}{0,0.75,1,0.24}
     \DefineNamedColor{named}{RedOrange}     {cmyk}{0,0.77,0.87,0}
     \DefineNamedColor{named}{Mahogany}      {cmyk}{0,0.85,0.87,0.35}
     \DefineNamedColor{named}{Maroon}        {cmyk}{0,0.87,0.68,0.32}
     \DefineNamedColor{named}{BrickRed}      {cmyk}{0,0.89,0.94,0.28}
     \DefineNamedColor{named}{Red}           {cmyk}{0,1,1,0}
     \DefineNamedColor{named}{OrangeRed}     {cmyk}{0,1,0.50,0}
     \DefineNamedColor{named}{RubineRed}     {cmyk}{0,1,0.13,0}
     \DefineNamedColor{named}{WildStrawberry}{cmyk}{0,0.96,0.39,0}
     \DefineNamedColor{named}{Salmon}        {cmyk}{0,0.53,0.38,0}
     \DefineNamedColor{named}{CarnationPink} {cmyk}{0,0.63,0,0}
     \DefineNamedColor{named}{Magenta}       {cmyk}{0,1,0,0}
     \DefineNamedColor{named}{VioletRed}     {cmyk}{0,0.81,0,0}
     \DefineNamedColor{named}{Rhodamine}     {cmyk}{0,0.82,0,0}
     \DefineNamedColor{named}{Mulberry}      {cmyk}{0.34,0.90,0,0.02}
     \DefineNamedColor{named}{RedViolet}     {cmyk}{0.07,0.90,0,0.34}
     \DefineNamedColor{named}{Fuchsia}       {cmyk}{0.47,0.91,0,0.08}
     \DefineNamedColor{named}{Lavender}      {cmyk}{0,0.48,0,0}
     \DefineNamedColor{named}{Thistle}       {cmyk}{0.12,0.59,0,0}
     \DefineNamedColor{named}{Orchid}        {cmyk}{0.32,0.64,0,0}
     \DefineNamedColor{named}{DarkOrchid}    {cmyk}{0.40,0.80,0.20,0}
     \DefineNamedColor{named}{Purple}        {cmyk}{0.45,0.86,0,0}
     \DefineNamedColor{named}{Plum}          {cmyk}{0.50,1,0,0}
     \DefineNamedColor{named}{Violet}        {cmyk}{0.79,0.88,0,0}
     \DefineNamedColor{named}{RoyalPurple}   {cmyk}{0.75,0.90,0,0}
     \DefineNamedColor{named}{BlueViolet}    {cmyk}{0.86,0.91,0,0.04}
     \DefineNamedColor{named}{Periwinkle}    {cmyk}{0.57,0.55,0,0}
     \DefineNamedColor{named}{CadetBlue}     {cmyk}{0.62,0.57,0.23,0}
     \DefineNamedColor{named}{CornflowerBlue}{cmyk}{0.65,0.13,0,0}
     \DefineNamedColor{named}{MidnightBlue}  {cmyk}{0.98,0.13,0,0.43}
     \DefineNamedColor{named}{NavyBlue}      {cmyk}{0.94,0.54,0,0}
     \DefineNamedColor{named}{RoyalBlue}     {cmyk}{1,0.50,0,0}
     \DefineNamedColor{named}{Blue}          {cmyk}{1,1,0,0}
     \DefineNamedColor{named}{Cerulean}      {cmyk}{0.94,0.11,0,0}
     \DefineNamedColor{named}{Cyan}          {cmyk}{1,0,0,0}
     \DefineNamedColor{named}{ProcessBlue}   {cmyk}{0.96,0,0,0}
     \DefineNamedColor{named}{SkyBlue}       {cmyk}{0.62,0,0.12,0}
     \DefineNamedColor{named}{Turquoise}     {cmyk}{0.85,0,0.20,0}
     \DefineNamedColor{named}{TealBlue}      {cmyk}{0.86,0,0.34,0.02}
     \DefineNamedColor{named}{Aquamarine}    {cmyk}{0.82,0,0.30,0}
     \DefineNamedColor{named}{BlueGreen}     {cmyk}{0.85,0,0.33,0}
     \DefineNamedColor{named}{Emerald}       {cmyk}{1,0,0.50,0}
     \DefineNamedColor{named}{JungleGreen}   {cmyk}{0.99,0,0.52,0}
     \DefineNamedColor{named}{SeaGreen}      {cmyk}{0.69,0,0.50,0}
     \DefineNamedColor{named}{Green}         {cmyk}{1,0,1,0}
     \DefineNamedColor{named}{ForestGreen}   {cmyk}{0.91,0,0.88,0.12}
     \DefineNamedColor{named}{PineGreen}     {cmyk}{0.92,0,0.59,0.25}
     \DefineNamedColor{named}{LimeGreen}     {cmyk}{0.50,0,1,0}
     \DefineNamedColor{named}{YellowGreen}   {cmyk}{0.44,0,0.74,0}
     \DefineNamedColor{named}{SpringGreen}   {cmyk}{0.26,0,0.76,0}
     \DefineNamedColor{named}{OliveGreen}    {cmyk}{0.64,0,0.95,0.40}
     \DefineNamedColor{named}{RawSienna}     {cmyk}{0,0.72,1,0.45}
     \DefineNamedColor{named}{Sepia}         {cmyk}{0,0.83,1,0.70}
     \DefineNamedColor{named}{Brown}         {cmyk}{0,0.81,1,0.60}
     \DefineNamedColor{named}{Tan}           {cmyk}{0.14,0.42,0.56,0}
     \DefineNamedColor{named}{Gray}          {cmyk}{0,0,0,0.50}
     \DefineNamedColor{named}{Black}         {cmyk}{0,0,0,1}
     \DefineNamedColor{named}{White}         {cmyk}{0,0,0,0}
     \endinput
     %%
     %% End of file `dvipsnam.def'.
#+end_example

2. 指定RGB
   可以通过指定它们的 RGB 构成来定义你自已的颜色。每一 RGB 构成必需在
   0–255 的范围内。
   #+BEGIN_EXAMPLE
     \documentclass{beamer}
     \usecolortheme[RGB={205,173,0}]{structure}   % 暗金
     \usetheme[height=7mm]{Rochester}
   #+END_EXAMPLE

   + RGB 构成可以是 0–255 范围内的整数，也可以是 0.00–1.00 范围
     内的小数。如果用小数表示，需用小写的 rgb 选项，如：
     rgb={0.2264,0.1561,0.0000}.

3. 直接使用结构色

   通过使用 *\textbackslash{}structure{a colored text}* 命令可以取得有
   趣的动态效果。给定的文本将依据结构色显示出相应的颜色。当改变结构色
   如将蓝色改成金色时，文本的颜色也因此而改变。

****** 条目标记

罗切斯特（Rochester）主题在常规列表（itemized lists）和排序列表
（numerated lists）中用了方形标记（square markers ）。

将方形标记更改为仿三维球形标记。

\mint{latex}|\setbeamertemplate{items}[ball]|

命令 *=\setbeamertemplate{items}=* 的可能选项有：
- ball: 仿三维球形
- circle: 二维（平面）圆圈
- rectangle: 矩形
- default: 三角形

****** 圆角框和阴影

要将围绕定理的盒子改成圆角并添加阴影

\mint{latex}|\setbeamertemplate{blocks}[rounded][shadow=true]|

****** 去掉导航图标

[[~/Wally/Journal/Figures/scrot/31690oTc.png]]

大部分 Beamer 主题都在幻灯片中放置了一行导航图标（navigation icons）。
（上述幻灯片底部边缘的那些小标记）。我认为这些图标漂亮但没什么用处且会
分散注意力。可以在文档中添加命令使这些导航图标不出现

\mint{latex}|\setbeamertemplate{navigation symbols}{}|

****** 添加底部导航条

底边导航条（footline）是幻灯片底部的狭窄长条，在这里，可以显示作者姓名、
演示稿的标题、幻灯片序号、其它有用的信息。

大部分底边导航条的信息摘自于导言区提供的数据如 =\author= 、=\title= 等。

Beamer 主题博阿迪利亚（Boadilla）和马德里（Madrid）默认情况下提供了这
样一个底边导航条。

可以使用命令

\mint{latex}|\useoutertheme{infolines}|

注意：这是 Beamer 的一个特殊癖性（bug的礼貌说法），即：

*=\useoutertheme{infolines}=* 必需放在
*=\usetheme[height=7mm]{Rochester}=* 之前。如果你搞反了顺序，幻灯片的
标题将被删除。

***** 帧元素

****** 封面

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
    \title[A short proof]{A short proof of Fermat's Last Theorem}
    \subtitle[Errors]{Estimation of numerical errors}
    \author[R. Rostamian]{Rouben Rostamian}
    \institute[UMBC]{
      Department of Mathematics and Statistics\\
      University of Maryland, Baltimore County\\
      Baltimore, Maryland 21250\\[1ex]
      \texttt{rostamian@umbc.edu}
    }
    \date[November 2004]{November 26, 2004}
    \begin{document}
    \begin{frame}[plain]
      \titlepage
    \end{frame}
   \end{document}
  \end{minted}
#+end_latex

1. 封面元素
   + title
   + subtitle
   + author
   + institute
   + data

2. 可选参数

   可选参数为缩写形式(short forms)，用在封面以后幻灯片的页脚处。必选参
   数为全称形式(long forms), 出现在封面上， 如果没有可选参数则也出现在
   后续幻灯片的页脚处。

3. plain限定项

   plain选项用于生成封面(titlepage)。如果没有该限定项，则封面就会装饰
   有页眉和页脚。

   plain可用于任意帧。

   \mint{latex}|\begin{frame}[plain]|

****** 图片

Beamer可以识别 pdf, png 和 jpg 格式的图像。

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  \begin{figure}[ht]
  \centering
  \includegraphics[width=0.8\linewidth]{/path/to/image}
  \end{figure}
  \end{minted}
#+end_latex

****** 叠层
也许Beamer最有趣的效果是叠层(overlays), 它可以让幻灯片逐渐显示。在
Beamer中，要达到双层效果很简单，只需要在暂停显示的专访放置命令
*=\pause=* 即可。

=\pause= 命令不受常规列表的约束，可以在幻灯片任意地方使用。

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  \begin{frame}{Outline of the talk}

  \begin{itemize}
    \item Introduction
    \pause
    \item Statement of the main theorem
    \pause
    \item Technical lemmata
    \pause
    \item Proof of the main theorem
    \pause
    \item Conclusions
  \end{itemize}

  \end{frame}
  \end{minted}
#+end_latex

****** 超链接导航(Hyperlinks)

******* 导航

目标(target)幻灯片中在 =\begin{frame}= 命令处增加 *[label=LABEL]* 标签
(tag)选项。

源幻灯片中使用命令 *=\hyperlink{LABELF}{here}=* 插入超链接。
\mint{latex}|{LABEL}{COMMENT}|

默认超链接文字显示为普通文本，可以在导言中使用 *hypersetup* 命令设置。

\mint{latex}|\hypersetup{colorlinks=true,linkcolor=red}|

超链接可以使用Beamer按钮.

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  \hyperlink{LABEL}{beamerbutton{COMMENT}}
  \hyperlink{LABEL}{\beamergotobutton{COMMENT}}
  \hyperlink{LABEL}{beamerskipbutton{COMMENT}}
  \hyperlink{LABEL}{beamerturnbutton{COMMENT}}
  \end{minted}
#+end_latex

******* 返回到呼叫页

+ Acrobat Reader: M-LEFT
+ Xpdf: b

****** 定理
Beamer预定义了以下几个 LaTeX 环境：
+ theorem
+ corollary (推论)
+ definition
+ example
+ proof

Beamer主题控制着这些环境的呈现(render).

事实上，这些环境是由 amsmath 宏包定义的， Beamer自动加载该宏包。

****** 添加脚注

标准的 LaTeX 命令 *=\footnote=* 可以在幻灯片中添加脚注，但其更适合要打
印的页面而非幻灯片，脚注编号和分隔线(separator line)会放在幻灯片中不适
当的位置。

LaTeX 宏包 *textpos* 可以在页面的任意的预定义的地方放置对象(objects),
可以用来为幻灯片添加脚注类文本(footnote-like).

***** 帧布局
****** 分栏 : colums环境和嵌套的column环境

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  begin{frame}{Splitting a slide into columns}
  The line you are reading goes all the way across the slide.
  From the left margin to the right margin.  Now we are going
  the split the slide into two columns.
  \bigskip
  \begin{columns}
    \begin{column}{0.5\textwidth}
      Here is the first column.  We put an itemized list in it.
      \begin{itemize}
        \item This is an item
        \item This is another item
        \item Yet another item
      \end{itemize}
    \end{column}
    \begin{column}{0.3\textwidth}
      Here is the second column.  We will put a picture in it.
      \centerline{\includegraphics[width=0.7\textwidth]{image2.png}}
    \end{column}
  \end{columns}
  \bigskip
  The line you are reading goes all the way across the slide.
  From the left margin to the right margin.
  \end{frame}
  \end{minted}
#+end_latex

1. Note
   1) 要确保栏的总宽度不能超过幻灯片的宽度，即 *=textwidth=*
   2) 每一栏中，变量 =textwidth= 会被重定义。
   3) 也可以指定分栏的绝对宽度， Beamer幻灯片的尺寸为 *128mm x 96mm*
      \mint{latex}|begin{column}{30mm}|

2. 垂直对齐
   \mint{latex}|\begin{columns}[t]|
   + center-aligned(c): default
   + top-aligned(t): e.g. \textbackslash{}begin{columns}[t]
   + bottom-aligned(a)

3. 图像的垂直对齐

   图像默认以底部作为参照点(reference point).如果想要以顶部为参照点，
   则要使用columns环境的 [T] 选项。

****** 垂直对齐

Beamer 幻灯片的内容是垂直对齐的。

frame环境的选项 t,c,b分别使幻灯片的内容以幻灯片的顶部、中部和底部对齐，
默认为c。
\mint{latex}|\begin{frame}[t]{title}|

也可以给文类beamer增加对齐选项，使其使用于所有幻灯片。
\mint{latex}|\documentclass[t]{beamer}|
****** 缩小以适合
要缩小（squeeze）Beamer 幻灯片中的少量额外材料，你必须为该幻灯片指定一
个缩小因子(shrink-factor)，如下所示：

\mint{latex}|\begin{frame}[shrink=5]{Frame title}|

这将按比例缩小幻灯片的内容至少5% ，如果需要，还能缩小更多，直至内容完
全能被幻灯片所容纳。

为达到最佳效果，你指定的缩小因子应尽可能接近所需的数值。如果你指定的缩
小因子的值不合适，Beamer 将发出警告。调整缩小因子直至警告消失。然而，
幻灯片的水平间隙（horizontal spacing）将不是最佳的。

你不应滥用这个缩小功能——少量的缩小不会引人注意，到处都使用了缩小就会让
人看着不愉快。

可以替代这个缩小功能的是，可以考虑重写幻灯片的内容，或将内容分入两张幻
灯片中。

****** 改变页边距
*Beamer 幻灯片的尺寸是 128mm × 96mm。这个尺寸是固定的不能修改。*

然而，左右两侧的页边距（margins）却可以更改。左右两侧的页边距默认设定是 1cm 。

在下面的例子中，我们将左右两侧的页边距分别更改为 6mm 和 2mm。

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  \setbeamersize{text margin left=6mm}
  \setbeamersize{text margin right=2mm}
  \end{minted}
#+end_latex

上述两条命令可以合并成一条，如下所示：

\mint{latex}|\setbeamersize{text margin left=6mm, text margin right=2mm}|

***** 字体

****** 默认字体尺寸

Beamer的默认字体尺寸是 *11 points*. 可以给文类beamer添加选项进而修改默
认字体尺寸，可选的有 8, 9, 10, 11, 12, 14, 17, 20pt.

\mint{latex}|\documentclass[14pt]{beamer}|

****** 默认的文本颜色

Beamer 的普通文本的颜色为白色背景黑色文字。 在导言区使用命令
*=\setbeamercolor=* 可以对文本颜色进行设置。

\mint{latex}|\setbeamercolor{normal text}{fg=purple}|

*fg* 用于设定普通文本(normal text)的前景色(foreground), *bg* 用于设置
普通文本的背景色。

注： 幻灯片的背景色继承于普通文本的背景色， 因此改变普通文本的背景色必
定改变幻灯片的背景色。

普通文本指幻灯片中的主体文本。幻灯片的页眉页脚不是普通文本，由结构
(structure)色控制。

\mint{latex}|\setbeamercolor{structure}{fg=purple}|

****** 结构字体和字体主题

******* 结构字体

Beamer 的结构字体(structure font)确定用于演示稿的结构元素，如页眉、页
脚和其它封面条目的字体。

\mint{latex}|\setbeamerfont{sturcture}{family=\rmfamily shape=\itshape, series=\bfseries}|

******* 字体主题

Beamer提供了字体选项的预定义设置， 它不仅影响结构元素，而且影响普通文
本和数学式。

\mint{latex}|\usefonttheme{serif}|
***** 颜色
Beamer 借助于一个外部工具处理颜色，该外部工具是一个名为 *xcolor* 的宏包。
Beamer 默认加载 xcolor，因而你无需加载它。默认加载 xcolor 宏包后，下列
颜色可用：

[[~/Wally/Journal/Figures/scrot/19740X3z.png]]


****** dvips宏包命名的颜色

Xcolor 宏包可以读取来自dvipsnam.def 文件的扩展的色名集（extended set
of color names ）。许多 LaTeX 分发版提供了dvipsnam.def 文件。

要在 Beamer 中使用该扩展的色名集，请按以下方式调用 Beamer：

\mint{latex}|\documentclass[xcolor=dvipsnames]{beamer}|

[[~/Wally/Journal/Figures/scrot/19740WLJ.png]]

****** SVG宏包命名的颜色
Xcolor 能读取来自文件 svgnam.def 的更大的色名集，多 LaTeX 分发版提供了
svgnam.def文件。
p
要在 Beamer 中使用该扩展的色名集，请按以下方式调用 Beamer：

\mint{latex}|\documentclass[xcolor=svgnames]{beamer}|

****** 混合色
xcolor 宏包提供了一个工具，用它可以混合任何色集以得到不同的颜色比例，
就象你在油画中混合颜色一样。

我们指定一个混合色组成为 A!n!B，即颜色A占n%，颜色B占(100-n) %。在
Beamer 中，A!n!B 表达式可以用在预期颜色名的地方。表达式 A!n 是
A!n!white 的简写形式。下面是一些例子。

[[~/Wally/Journal/Figures/scrot/19740jVP.png]]

****** 自定义颜色
除上述的机制外，就象LaTeX 手册记录的那样，你可以用 =\definecolor= 命令
定义颜色，加载color 宏包后并使 =\definecolor= 可用。

可以通过指定 RGB（Red Green Blue 即红绿蓝）的组成来指定颜色，
RGB组成用 0 到 1 的小数表示，如下所示：
#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\definecolor{mygold}{rgb}{0.85, 0.60, 0.00}  % 注意用小写的 rgb
\end{minted}
#+end_latex

另外，RGB 的组成也可以用 0 到 255 之间的整数表示，如下所示：
#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\definecolor{mygold}{RGB}{217, 153, 0}       % 注意用大写的 RGB
\end{minted}
#+end_latex


****** 有色文本，高亮和盒子

******* 有色文本
Beamer中的有色文本用的是标准的 LaTeX 命令 *=\textcolor=* 生成的

#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\textcolor{blue}{This ia in blue}
\end{minted}
#+end_latex

******* 高亮
*=\colorbox=* 命令指定文本的背景色，即底纹。

#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\colorbox{yellow}{This text is highlieghted in yellow}
\end{minted}
#+end_latex

******* 盒子
*=\fcolorbox=* 将文本框起来。
#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\fcolorbox{red}{yellow}{A yello box with red borders}
\end{minted}
#+end_latex

+ =\setlength{\fboxrule}{4pt}= 设置框的宽度
+ =\setlength{\fboxsep}{0pt}设置框与被框对象的间隔。

****** 幻灯片背景
Beamer默认的幻灯片背景是白色。

******* 设置为固定的颜色(solid)
设为淡品红色
#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\setbeamercolor{normal text}{bg=red!12}
\end{minted}
#+end_latex

******* 渐变色

#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\setbeamertemplate{background canvas}[vertical shading][bottom=red!20,top=yellow!30]
\end{minted}
#+end_latex

******* 叠加网格

#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\setbeamertemplate{background}[grid][step=5mm,color=blue]
\end{minted}
#+end_latex

******* 使用图像作为背景
#+begin_latex
\begin{minted}[frame=single, mathescape]{latex}
\setbeamertemplate{background canvas}{\includegraphics
        [width=\paperwidth,height=\paperheight]{alps.jpg}}
\end{minted}
#+end_latex

注意：Beamer 幻灯片的长宽比是 4:3，因此你的背景图片的长宽比最好也是
4:3，否则，在拉伸图片填满幻灯片时，背景图片会变形。

******* 设定单张幻灯片背景
要将背景设置限定在单张幻灯片，请将命令 =\setbeamertemplate{background canvas}{...}= 放在大括号中，
如下所示：

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  { % 大括号限定 \setbeamertemplate 的范围
  \setbeamertemplate{navigation symbols}{}  % 可选地隐藏导航按钮
  \setbeamertemplate{background canvas}{\includegraphics
          [width=\paperwidth,height=\paperheight]{alps.jpg}}
  \begin{frame}[plain]
  ...
  \end{frame}
  } % 结束大括号
  \end{minted}
#+end_latex

******* 注意
精美的背景色、阴景及图像可以使你的幻灯片看上去很漂亮，但也会使人分心。
请在你的演示稿中恰如其分地应用这些设计（devices）。

**** beamer ppt                                                      :ppt:
+
   http://tex.stackexchange.com/questions/21986/export-beamer-slides-to-powerpoint-openoffice-impress-keynote-editable-format
+ http://superuser.com/questions/268244/how-to-convert-pdf-to-ppt-or-odp


"beamer can export to PDF or PS", beamer doesn't export anything. It
is a LaTeX class and LaTeX compiles the document to PDF (pdflatex) or
DVI (latex) which then is mostly converted to PS. There is of course
no powerpointlatex, so you will need to convert the PDF or PS somehow
to a format PP can read, which would be RTF (Rich Text Format) or some
Windows vector format like EMF or WMF. However, I would do it either
with one or the other software. They do not mix well.

***** pdf to ppt
+  [[http://superuser.com/questions/268244/how-to-convert-pdf-to-ppt-or-odp][cnvert pdf to ppt]]

The desired result can also be achieved without proprietary tools. If
you have GhostScript installed, you can convert your PDF presentation
into a set of JPG images using:

#+begin_latex
  \begin{minted}[frame=single, mathescape]{sh}
  gs -dNOPAUSE -dBATCH -dSAFER -dGraphicsAlphaBits=4 -dTextAlphaBits=4 \
     -sDEVICE=jpeg -r300 -sOutputFile='page-%00d.jpg' YOURFILE.pdf
  \end{minted}
#+end_latex

Then, with the plugin for OpenOffice/LibreOffice create a presentation
where each image fills exactly one slide. You can also easily keep the
order of the pages by choosing the plugin option "natural sorting".、

*Edit -> Link -> 断开链接*  否则以链接形式插入。

** 2015/11/27
*** DONE ros log hints
- State "DONE"       from "TODO"       [2015-11-27 五 17:24]
 <2015-11-26 四>
 [[file:~/Wally/Journal/journal.org::*$()%20${}%20*%E4%B8%8D%E8%A6%81%E6%B7%B7%E6%B7%86*][$() ${} *不要混淆*]]

 log file:
 /home/ben/.ros/log/b2e91e66-9413-11e5-b20d-002186ef9d91/gazebo-2*.log

*Node log file*

Everything enabled goes into the log file. Your node's log file will
be in ~/.ros/log unless you override it with the ROS_HOME or
*ROS_LOG_DIR* environment variables. If you are using roslaunch, you can
use the *roslaunch-logs* command to tell you the location of the log
directory.


#+BEGIN_EXAMPLE
  ~ $ roslaunch-
  roslaunch-complete  roslaunch-deps      roslaunch-logs
  ~ $ roslaunch-logs
  /home/ben/.ros/log/d6daf7cc-94e5-11e5-8334-002186ef9d91
#+END_EXAMPLE

*** DONE example导出PDF加框 minted text
- State "DONE"       from "TODO"       [2015-11-27 五 17:23]
 <2015-11-26 四>
 [[file:~/Wally/Journal/journal.org::*lidar%EF%BC%9A%20ok][lidar： ok]]

1. plain
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{text}
     #+BEGIN_EXAMPLE
           (defun org-xor (a b)
                 "Exclusive or."
                 (if a (not b) b))
     #+END_EXAMPLE
     \end{minted}
   #+end_latex

   #+begin_latex
     \begin{minted}[frame=single, mathescape]{latex}
     \begin{verbatim}
     (defun org-xor (a b)
           "Exclusive or."
           (if a (not b) b))
     \end{verbatim}
     \end{minted}
   #+end_latex

   [[~/Wally/Journal/Figures/scrot/30792ZiT.png]]

2. -n get lines numbered

   #+begin_latex
     \begin{minted}[frame=single, mathescape]{text}
     ,#+BEGIN_EXAMPLE -n
           (defun org-xor (a b)
                 "Exclusive or."
                 (if a (not b) b))
     ,#+END_EXAMPLE
     \end{minted}
   #+end_latex

   #+begin_latex
     \begin{minted}[frame=single, mathescape]{latex}
     \begin{verbatim}
     1  (defun org-xor (a b)
     2        "Exclusive or."
     3        (if a (not b) b))
     \end{verbatim}
     \end{minted}
   #+end_latex

   [[~/Wally/Journal/Figures/scrot/30792ZpH.png]]

3. +n contine last example block

4. 使用Example块解决不了, 使用 Minted *text*

   #+begin_latex
     \begin{minted}[frame=single, mathescape]{text}
        #+BEGIN_EXAMPLE -i
           (defun org-xor (a b)
                 "Exclusive or."
                 (if a (not b) b))
        #+END_EXAMPLE
     \end{minted}
   #+end_latex

*** DONE Launch undocumented 如何注释
- State "DONE"       from "TODO"       [2015-11-27 五 17:23]
 <2015-11-26 四>
 [[file:~/Wally/Journal/journal.org::*non-launch%20options][non-launch options]]

 doc属性
*** DONE ls -l 第一个字母 c/d/l的含义
- State "DONE"       from "TODO"       [2015-11-27 五 17:24]
 <2015-11-26 四>
 [[file:~/Wally/Journal/catkin_ws/src/julie/julie_launch/launch/microstrain.launch::<arg%20name%3D"config"%20value%3D"$(find%20julie_launch)/rviz/imu_only.launch"%20/>][file:~/Wally/Journal/catkin_ws/src/julie/julie_launch/launch/microstrain.launch::<arg
 name="config" value="$(find julie_launch)/rviz/imu_only.launch" />]]

+ 文件类型说明
  +  - 常规文件
  +  d 目录文件
  +  b 块特殊设备
  +  c 字符特殊设备

*** ROS
**** anchor refer

1. 不用通过内部链接(锚)来跳转，通过 *标签* 更好
2. 有些函数值得学习

#+BEGIN_SRC emacs-lisp
  (defun tagerill:jump-to-ros-anchor()
    "jump to anchor in ros.org verion 0.1"
    (interactive)
    (save-excursion  (tagerill:work-jump-push))
    (if (not mark-active)
        (progn (backward-word)
               (push-mark)
               (forward-word))
      )
    (setq target-anchor (buffer-substring (region-beginning)
                                          (region-end)))
    (find-file (expand-file-name "~/Tiger/Journal/tagerill.org"))
    (end-of-buffer)
    (insert "[[" target-anchor "]]")      ; 投机取巧
    (org-open-at-point)
    )
  (global-set-key "\C-zr" 'tagerill:jump-to-ros-anchor)
#+END_SRC

1. (*backward-word* &optional ARG)

   Move backward until encountering the beginning of a word.With
   argument /ARG/, do this that many times.

2. (*forward-word* &optional ARG)

   Move point forward ARG words (backward if ARG is negative).
   If /ARG/ is omitted or nil, move point forward one word.

3. (*push-mark* &optional /LOCATION/ /NOMSG/ /ACTIVATE/)

   Set mark at /LOCATION/ (point, by default) and push old mark on
   mark ring. If the last global mark pushed was not in the current
   buffer, also push /LOCATION/ on the global mark ring. Display `Mark
   set' unless the optional second arg /NOMSG/ is non-nil.

4. *mark-active*

   Non-nil means the mark and region are currently active in this buffer.

5. (*not* /OBJECT/)

   Return t if /OBJECT/ is nil.

6. (*buffer-substring* /START/ /END/)

   Return the contents of part of the current buffer as a string.
   The two arguments /START/ and /END/ are character positions;they
   can be in either order.

7. (*end-of-buffer* &optional /ARG/)

   Move point to the end of the buffer.
   With numeric arg /N/, put point N/10 of the way from the end.
   If the buffer is narrowed, this command uses the end of the
   accessible part of the buffer.

8. (*region-beginning*)

   Return the integer value of point or mark, whichever is smaller.

9. (*region-end*)

   Return the integer value of point or mark, whichever is larger.

**** file jump
#+BEGIN_SRC emacs-lisp
  (defun tagerill:jump-to-rospack-find-file()
    "open the rospack-find-file under the point.
       The format is like $(find kobuki_description)/urdf/kobuki.urdf.xacro,
       quoted by double quotes.
      "
    (interactive)

    (let ((sq_begin (save-excursion (search-backward "'" nil t))) ;begin point of single quote
          (sq_end (save-excursion (search-forward "'" nil t)))
          (dq_begin (save-excursion (search-backward "\"" nil t))) ;begin point of double quote
          (dq_end (save-excursion (search-forward "\"" nil t)))
          (_begin)
          (_end)
          )
      ;; 获取字符串，并分割
      (setq _begin dq_begin)
      (setq _end dq_end)
      (if (and sq_begin (> sq_begin dq_begin))
               (progn
                  (setq _begin sq_begin)
                  (setq _end sq_end)))

      (setq cmd_str (buffer-substring (+ _begin 1) (- _end 1)))
      (setq find_str (car
                      (split-string cmd_str "/")))

      ;; (setq find_str (progn
      ;;               (string-match "(find .*)" cmd_str)
      ;;               (match-string 0 cmd_str)))
      (setq relative_path (progn
                            (string-match "/.*$" cmd_str)
                            (match-string 0 cmd_str)))
      ;; 处理命令字符串
      (setq bash_cmd
            (concat "rospack "
                    (substring find_str 2 -1)))
      (if (= 0 (call-process-shell-command bash_cmd nil nil nil ">/tmp/rospackfind"))
          (progn (setq file_to_jump (concat  (substring (with-temp-buffer
                                                          (insert-file-contents "/tmp/rospackfind")
                                                          (buffer-string)) 0 -1) ; bash命令重定向后输出文件末尾含有换行符
                                             relative_path
                                             ))
                 (find-file file_to_jump)
                 ))))

  (global-set-key "\C-zj" 'tagerill:jump-to-rospack-find-file)
#+END_SRC

** 2015/12/02
*** DONE Python Numpy入门
- State "DONE"       from "TODO"       [2015-12-02 三 14:25] \\
  不用看得过于细致，用的时候自然知道。
CLOCK: [2015-12-02 三 14:09]--[2015-12-02 三 14:25] =>  0:16
+ http://reverland.org/python/2012/08/22/numpy/
+ 教材

**** 基础

***** 数组属性
NumPy的数组类为 *ndarray*, 对象属性有
+ ndarray.ndim: 数组的秩
+ ndarray.shape： 数组的秩的大小
+ ndarray.size：数组元素的总个数
+ ndarray.dtype：数组元素对象的类型
+ ndarray.itemsize：数组中每个元素的字节大小
+ ndarray.data：包含实际数组的缓冲区

#+HEADERS: :session p1401
#+BEGIN_SRC python :results output :exports both
  from numpy import *
  a = arange(15).reshape(3,5)
  print a

#+END_SRC

#+RESULTS:
:
: >>> [[ 0  1  2  3  4]
:  [ 5  6  7  8  9]
:  [10 11 12 13 14]]

#+HEADERS: :session p1401
#+BEGIN_SRC python :results output :exports both
a.shape
#+END_SRC

#+RESULTS:
: (3, 5)

#+HEADERS: :session p1401
#+BEGIN_SRC python :results output :exports both
a.ndim
#+END_SRC

#+RESULTS:
: 2

#+HEADERS: :session p1401
#+BEGIN_SRC python :results output :exports both
a.dtype.name
#+END_SRC

#+RESULTS:
: 'int32'

#+HEADERS: :session p1401
#+BEGIN_SRC python :results output :exports both
a.itemsize
#+END_SRC

#+RESULTS:
: 4

#+HEADERS: :session p1401
#+BEGIN_SRC python :results output :exports both
type(a)
#+END_SRC

#+RESULTS:
: <type 'numpy.ndarray'>

#+HEADERS: :session p1401
#+BEGIN_SRC python :results output :exports both
b = array([6, 7, 8])
b
type(b)
#+END_SRC

#+RESULTS:
:
: array([6, 7, 8])
: <type 'numpy.ndarray'>

***** 创建数组
1. 从列表或元组中

   #+BEGIN_SRC python :results output :exports both :session p1411
     from numpy import *

     a = array([2, 3, 4])
     a
     a.dtype

     b = array([1.2, 3.5, 3.1])
     b.dtype
   #+END_SRC

   #+RESULTS:
   :
   : >>> >>> array([2, 3, 4])
   : dtype('int32')
   : >>> >>> dtype('float64')

   #+BEGIN_SRC python :results output :exports both :session p1411
     b  = array([(1.5, 2, 3), (4, 5, 6)] )
     print b
   #+END_SRC

   #+RESULTS:
   :
   : [[ 1.5  2.   3. ]
   :  [ 4.   5.   6. ]]

   显式指定数组数据类型
   #+BEGIN_SRC python :results output :exports both :session p1411
     c = array([[1,2], [3, 4]], dtype=complex)
     print c
   #+END_SRC

   #+RESULTS:
   :
   : [[ 1.+0.j  2.+0.j]
   :  [ 3.+0.j  4.+0.j]]

2. 占位函数
   + zeros，全0
   + ones，全1
   + empty, 随机

   #+BEGIN_SRC python :results output :exports both :session p1417
   from numpy import *

   zeros((3, 4))
   #+END_SRC

   #+RESULTS:
   :
   : >>> array([[ 0.,  0.,  0.,  0.],
   :        [ 0.,  0.,  0.,  0.],
   :        [ 0.,  0.,  0.,  0.]])

   #+BEGIN_SRC python :results output :exports both :session p1417
   ones((2,3,4), dtype=int16)
   #+END_SRC

   #+RESULTS:
   : array([[[1, 1, 1, 1],
   :         [1, 1, 1, 1],
   :         [1, 1, 1, 1]],
   :
   :        [[1, 1, 1, 1],
   :         [1, 1, 1, 1],
   :         [1, 1, 1, 1]]], dtype=int16)

   #+BEGIN_SRC python :results output :exports both :session p1417
   empty((2,3))
   #+END_SRC

   #+RESULTS:
   : array([[ -1.16708973e-041,   7.32845376e+025,   1.71130458e+059],
   :        [  1.79918168e+035,   7.89614618e+150,   3.18291433e-023]])

3. arange 类似 range





*** DONE Emacs 仅处理 elisp 脚本，不启动
- State "DONE"       from "TODO"       [2015-12-02 三 15:08] \\
  优先查阅手册和帮助文档，其后再Google

*emacs --script FILE*

#+BEGIN_EXAMPLE
   $ emacs --help
  Usage: emacs [OPTION-OR-FILENAME]...

  Run Emacs, the extensible, customizable, self-documenting real-time
  display editor.  The recommended way to start Emacs for normal editing
  is with no options at all.

  Run M-x info RET m emacs RET m emacs invocation RET inside Emacs to
  read the main documentation for these command-line arguments.

  Initialization options:

  --batch                     do not do interactive display; implies -q
  --chdir DIR                 change to directory DIR
  --daemon                    start a server in the background
  --debug-init                enable Emacs Lisp debugger for init file
  --display, -d DISPLAY       use X server DISPLAY
  --no-desktop                do not load a saved desktop
  --no-init-file, -q          load neither ~/.emacs nor default.el
  --no-shared-memory, -nl     do not use shared memory
  --no-site-file              do not load site-start.el
  --no-site-lisp, -nsl        do not add site-lisp directories to load-path
  --no-splash                 do not display a splash screen on startup
  --no-window-system, -nw     do not communicate with X, ignoring $DISPLAY
  --quick, -Q                 equivalent to:
                                -q --no-site-file --no-site-lisp --no-splash
  --script FILE               run FILE as an Emacs Lisp script
  --terminal, -t DEVICE       use DEVICE for terminal I/O
  --user, -u USER             load ~USER/.emacs instead of your own

  Action options:

  FILE                    visit FILE using find-file
  +LINE                   go to line LINE in next FILE
  +LINE:COLUMN            go to line LINE, column COLUMN, in next FILE
  --directory, -L DIR     prepend DIR to load-path (with :DIR, append DIR)
  --eval EXPR             evaluate Emacs Lisp expression EXPR
  --execute EXPR          evaluate Emacs Lisp expression EXPR
  --file FILE             visit FILE using find-file
  --find-file FILE        visit FILE using find-file
  --funcall, -f FUNC      call Emacs Lisp function FUNC with no arguments
  --insert FILE           insert contents of FILE into current buffer
  --kill                  exit without asking for confirmation
  --load, -l FILE         load Emacs Lisp FILE using the load function
  --visit FILE            visit FILE using find-file

  Display options:

  --background-color, -bg COLOR   window background color
  --basic-display, -D             disable many display features;
                                    used for debugging Emacs
  --border-color, -bd COLOR       main border color
  --border-width, -bw WIDTH       width of main border
  --color, --color=MODE           override color mode for character terminals;
                                    MODE defaults to `auto', and
                                    can also be `never', `always',
                                    or a mode name like `ansi8'
  --cursor-color, -cr COLOR       color of the Emacs cursor indicating point
  --font, -fn FONT                default font; must be fixed-width
  --foreground-color, -fg COLOR   window foreground color
  --fullheight, -fh               make the first frame high as the screen
  --fullscreen, -fs               make the first frame fullscreen
  --fullwidth, -fw                make the first frame wide as the screen
  --maximized, -mm                make the first frame maximized
  --geometry, -g GEOMETRY         window geometry
  --no-bitmap-icon, -nbi          do not use picture of gnu for Emacs icon
  --iconic                        start Emacs in iconified state
  --internal-border, -ib WIDTH    width between text and main border
  --line-spacing, -lsp PIXELS     additional space to put between lines
  --mouse-color, -ms COLOR        mouse cursor color in Emacs window
  --name NAME                     title for initial Emacs frame
  --no-blinking-cursor, -nbc      disable blinking cursor
  --reverse-video, -r, -rv        switch foreground and background
  --title, -T TITLE               title for initial Emacs frame
  --vertical-scroll-bars, -vb     enable vertical scroll bars
  --xrm XRESOURCES                set additional X resources
  --parent-id XID                 set parent window
  --help                          display this help and exit
  --version                       output version information and exit

  You can generally also specify long option names with a single -; for
  example, -batch as well as --batch.  You can use any unambiguous
  abbreviation for a --option.

  Various environment variables and window system resources also affect
  the operation of Emacs.  See the main documentation.

  Report bugs to bug-gnu-emacs@gnu.org.  First, please see the Bugs
  section of the Emacs manual or the file BUGS.

  Journal $ cd /tmp
  tmp $ vi test
  tmp $ emacs -script test
  hello world

#+END_EXAMPLE

*** Failed minted选项统一配置，像 \textbackslash{}lset那样
- State "Failed"     from "TODO"       [2015-12-02 三 15:53] \\
  没有直接的命令，可能通过其它命令可以间接实现，但是不会，不要浪费过多时
  间
 <2015-11-24 二>
 [[file:~/Wally/Journal/journal.org::*source%20ros][source ros]]

[[~/Document/Programming/TeX/doc/minted.pdf]]

*** minted 手册

**** -shell-escape
**** code
+
+ =\mint[hoptionsi]{hlanguagei}/hcodei/=
+ =\inputminted[hoptionsi]{hlanguagei}{hfilenamei}=
**** using different styles
1. *=\usemintedstyle{NAME}=*
2. *pygmentize -L styles*
   #+begin_latex
     \begin{minted}[frame=single, mathescape]{text}
      $ pygmentize -L styles
     Pygments version 1.6, (c) 2006-2013 by Georg Brandl.

     Styles:
     ~~~~~~~
     ,* monokai:
         This style mimics the Monokai color scheme.
     ,* manni:
         A colorful style, inspired by the terminal highlighting style.
     ,* rrt:
         Minimalistic "rrt" theme, based on Zap and Emacs defaults.
     ,* perldoc:
         Style similar to the style used in the perldoc code blocks.
     ,* borland:
         Style similar to the style used in the borland IDEs.
     ,* colorful:
         A colorful style, inspired by CodeRay.
     ,* default:
         The default style (inspired by Emacs 22).
     ,* murphy:
         Murphy's style from CodeRay.
     ,* vs:

     ,* trac:
         Port of the default trac highlighter design.
     ,* tango:
         The Crunchy default Style inspired from the color palette from the Tango Icon Theme Guidelines.
     ,* fruity:
         Pygments version of the "native" vim theme.
     ,* autumn:
         A colorful style, inspired by the terminal highlighting style.
     ,* bw:

     ,* emacs:
         The default style (inspired by Emacs 22).
     ,* vim:
         Styles somewhat like vim 7.0
     ,* pastie:
         Style similar to the pastie default style.
     ,* friendly:
         A modern style based on the VIM pyte theme.
     ,* native:
         Pygments version of the "native" vim theme.

     \end{minted}
   #+end_latex

**** supported languages

*pygmentize -L lexers*

#+begin_latex
\begin{minted}[frame=left, mathescape]{py}

\end{minted}
#+end_latex

*** Trick 阅读 \LaTeX 宏包手册时，首先将文档从安装位置拷贝到 Document 下，方便修改并做笔记
*** DONE Beamer in orgmode                                     :beamer:org:
- State "DONE"       from "TODO"       [2015-12-02 三 16:02] \\
  用以致学，需要用的时候再学
**** reference

+ [[http://orgmode.org/worg/exporters/beamer/tutorial.html][orgmode tutorial for beamer]]
+ [[http://orgmode.org/manual/Beamer-export.html][orgmode manual: export to beamer]]
+ http://www.latexstudio.net/org-beamer-cn-template/

**** insert template
*C-c C-e #*  insert default template

**** Beamer specific settings
+ #+startup:beamer
+ #+LaTeX_CLASS: beamer
+ #+LaTeX_CLASS_OPTIONS: [bigger]
+ #+BEAMER_FRAME_LEVEL:2
  - Note: Beamer also makes user of LaTeX sectioning to group frames
+ #+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args)
  %4BEAMER_col(Col) %10BEAMER_extra(Extra)
**** a simple slide
#+BEGIN_EXAMPLE
  ,* Introduction
  ,** A simple slide
  This slide consists of some text with a number of bullet points:

  - the first, very @important@, point!
  - the previous point shows the use of the special markup which
    translates to the Beamer specific /alert/ command for highlighting
    text.


  The above list could be numbered or any other type of list and may
  include sub-lists.
#+END_EXAMPLE
**** block
+ M-x org-beamer-mode
+ C-c C-b

#+BEGIN_EXAMPLE
  ,** Two columns

  ,*** A block                                           :B_ignoreheading:BMCOL:
      :PROPERTIES:
      :BEAMER_env: ignoreheading
      :BEAMER_col: 0.4
      :END:
      - this slide consists of two columns
      - the first (left) column has no heading and consists of text
      - the second (right) column has an image and is enclosed in an
        @example@ block

  ,*** A screenshot                                            :BMCOL:B_example:
      :PROPERTIES:
      :BEAMER_col: 0.6
      :BEAMER_env: example
      :END:
  ,    #+ATTR_LATEX: width=\textwidth
      [[file://../../images/org-beamer/a-simple-slide.png]]
#+END_EXAMPLE

Note
+ B_ignoreheading: ignore heading
+ #+ATTR_LATEX: set atttibute
**** export
C-c C-e l b

** 2015/12/03
*** 笔记整理

**** 曾经沧海难为水，除却巫山不是云。

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/9944e0b0-0fbe-4f40-8c9a-c8a0496c65c4/?csrfBusterToken=U=b04339:P=/:E=151681c863a:S=f960cb30f418fbab2bfc442671b6ecb7][南乡子 辛弃疾]]

何处望神州？满眼风光北固楼。
千古兴亡多少事？悠悠。不尽长江滚滚流。

年少万兜鍪，坐断东南战未休。
天下英雄谁敌手？曹刘。生子当如孙仲谋。

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/56332473-329b-4aa3-8f22-26b8f4a18164/?csrfBusterToken=U=b04339:P=/:E=151681e7067:S=c9e9db76666ace7b06f8464e87aef6a0][清平乐 李煜]]

别来春半，触目柔肠断。
砌下落梅如雪乱，拂了一身还满。
雁来音信无凭，路遥归梦难成。
离恨恰如春草，更行更远还生

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/d4f86fe4-7e50-4d61-b4d6-f890a430167e/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D15168218c0a%3AS%3D32681243e5be01d99d9306b9a5a6761b][蝶恋花  苏轼]]

花褪残红青杏小。燕子飞时，绿水人家绕。枝上柳绵吹又少，天涯何处无芳草。

墙里秋千墙外道。墙外行人，墙里佳人笑。笑渐不闻声渐悄，多情却被无情恼。

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/95567254-2cdc-4af9-bf68-17a18d33b9ad/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D1516823e433%3AS%3D33f9e32ba7ad8f46a8ec2418dc0b3fd3][卜算子 李之仪]]

我住长江头，君住长江尾。日日思君不见君，共饮长江水。

此水几时休，此恨何时已。只愿君心似我心，定不负相思意。

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/5a0df22b-c913-4213-ab97-45a8246a8724/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D15168254ede%3AS%3Dc5dddf0f46a8ba8a56a3c8f99a446a36][鹊桥仙  秦观]]

纤云弄巧，飞星传恨，银汉迢迢暗度。金风玉露一相逢，便胜却人间无数。

柔情似水，佳期如梦，忍顾鹊桥归路。两情若是久长时，又岂在朝朝暮暮。

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/515f29ec-5062-4b4f-bd6e-4b7279cab17d?title=%E9%9D%92%E7%8E%89%E6%A1%88%C2%B7%E5%87%8C%E6%B3%A2%E4%B8%8D%E8%BF%87%E6%A8%AA%E5%A1%98%E8%B7%AF%E8%B5%8F%E6%9E%90_%E5%8F%A4%E8%AF%97%E6%96%87%E7%BD%91][青玉案  贺铸]]

凌波不过横塘路。但目送、芳尘去。锦瑟华年谁与度。月桥花院，琐窗朱户。只
有春知处。

飞云冉冉蘅皋暮。彩笔新题断肠句。试问闲情都几许。一川烟草，满城风絮。梅
子黄时雨。

**** 甘草子  李永

秋暮。乱洒衰荷，颗颗真珠雨。雨过月华生，冷彻鸳鸯浦。

池上凭阑愁无侣。奈此个、单栖情绪。却傍金笼共鹦鹉。念粉郎言语。

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/fdef826d-1c3d-4f1d-a951-bba2cec1634f/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D151682bc75b%3AS%3Deea26f3c6e8811adf827d2829f8fff80][一剪梅  李清照]]

红藕香残玉簟秋，轻解罗裳，独上兰舟。云中谁寄锦书来？雁字回时，月满西楼。

花自飘零水自流，一种相思，两处闲愁。此情无计可消除，才下眉头，却上心头。

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/51925bfd-5e07-492c-9d5f-b55f929a51c4/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D151682d617c%3AS%3Dd274a57647644a7d04b9499602636883][钗头凤  唐婉]]

世情薄，人情恶，雨送黄昏花易落。晓风干，泪痕残。欲笺心事，独语斜阑。难，
难，难！

人成各，今非昨，病魂常似秋千索。角声寒，夜阑珊。怕人寻问，咽泪装欢。瞒，
瞒，瞒！

**** 钗头凤  陆游

红酥手，黄縢酒，满城春色宫墙柳。东风恶，欢情薄。一怀愁绪，几年离索。错、
错、错。

春如旧，人空瘦，泪痕红浥鲛绡透。桃花落，闲池阁。山盟虽在，锦书难托。莫、
莫、莫！

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/f0187e15-ef39-4404-8a6b-f85492dd488c/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D151683053f7%3AS%3D86477bcc36c86bfdf64d435ad755f685][青玉案  辛弃疾]]

东风夜放花千树，
更吹落，星如雨。
宝马雕车香满路。
凤箫声动，玉壶光转，一夜鱼龙舞。
蛾儿雪柳黄金缕，
笑语盈盈暗香去。
众里寻他千百度，
蓦然回首，那人却在灯火阑珊处。

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/c9079346-0ddd-4218-ac80-886fe1576db6/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D15168324f83%3AS%3D89874ba751907149fb835a7b45679ddd][临江仙  晏几道]]

梦后楼台高锁，酒醒帘幕低垂。去年春恨却来时，落花人独立，微雨燕双飞。

记得小苹初见，两重心字罗衣，琵琶弦上说相思。当时明月在，曾照彩云归。

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/3f152fe9-4f9e-49e2-8d5a-0d6db50b5d30/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D15168340c19%3AS%3Dee020908ad68d9d39f039d481e1b19b9][蝶恋花  晏殊]]

槛菊愁烟兰泣露，罗幕轻寒，燕子双飞去。明月不谙离恨苦，斜光到晓穿朱户。

昨夜西风凋碧树，独上高楼，望尽天涯路。欲寄彩笺兼尺素，山长水阔知何处！

**** 那些笃信的

+ 第一个不曾起舞的日子，都是对生命的辜负。

+ Life is beautiful for there is always something worth gratitude.

+ 人在低沉的时候，总是非常愚蠢。

+ 你要是真想做一个事情，你一定能找到方法；如果你不想做，一定能找到理由。

+ 你是怎样的人，眼里就有怎样的世界。

*** 使用 chromuium 打开 org-mode 中的网页链接                 :link:chrome:

1. why
   + 良好的可视化
   + 双显示器

2. how

   1) browse-url-browser-funtion
      #+BEGIN_SRC emacs-lisp
        (setq browse-url-browser-function 'browse-url-generic
              browse-url-generic-program "chromium-browser")
      #+END_SRC

   2) org-file-apps: External applications for opening *=file:path=* items in a document.

      #+BEGIN_SRC emacs-lisp
        (setq org-file-apps '((auto-mode . emacs)
                              ("\\.mm\\'" . default)
                              ("\\.x?html?\\'" . default)
                              ;; ("\\html\\'" . "chromium-browser %s")
                              ;; ("\\.pdf\\'" . "evince %s")
                              ("\\.pdf\\'" . "wine \'C:\\Program Files\\Foxit Software\\Foxit Reader\\FoxitReader.exe\' ../../../../%s")
                              ("\\.chm\\'" . "xchm %s")
                              ))
      #+END_SRC

      将浏览 html 链接的方式改为 'system' 和 'chromium-browser %s' 均
      无效.

3. test

   OK，鼠标焦点依然停留在 Emacs 上。

4. reference

   + [[http://stackoverflow.com/questions/4506249/how-to-make-emacs-org-mode-open-links-to-sites-in-google-chrome][stackoverflow: how to make emacs org-mode open links to sites in Google chrome]]

   + [[help:org-file-apps][help: org-file-apps]]

*** add beamer to org-latex-classes

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes '("beamer"
                                    "\\documentclass{beamer}
  \\usepackage[nofonts,fntef]{ctex}
  \\setCJKmainfont[ItalicFont={AR PL UKai CN}]{AR PL UMing CN} %设置中文默认字体
  \\setCJKsansfont{WenQuanYi Zen Hei}
  \\setCJKmonofont{WenQuanYi Zen Hei Mono}"))
#+END_SRC

*** (org-display-inline-images)

Normally only links without a description part are inlined, because
this is how it will work for export.

**** reference
[[help:org-display-inline-images][help:org-display-inline-image]]

*** python 下划线                                              :underscore:

**** reference

+ [[https://app.yinxiang.com/shard/s52/nl/11551545/60eda8d9-fbf4-4999-bc36-c6abc7df198d?title=%E8%AF%A6%E8%A7%A3Python%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF%20-%20Python%20-%20%E4%BC%AF%E4%B9%90%E5%9C%A8%E7%BA%BF][Python中的下划线]]
+ [[http://shahriar.svbtle.com/underscores-in-python][underscores in python]]

**** 在解释器中，表示上一条执行的语句的结果

#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{text}
  >>> _
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  NameError: name '_' is not defined
  >>> 42
  42
  >>> _
  42
  >>> 'alright' if _ else ':('
  'alright'
  >>> _
  'alright'

  \end{minted}
#+end_latex

**** 作为一个临时变量, 不感兴趣，仅用来占位，以后也不会用到

#+begin_latex
\begin{minted}[frame=leftline, mathescape]{py}
rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
\end{minted}
#+end_latex

**** 名称中的下划线

1. 名称前的单下划线： 表示“私有”属性

2. 名称前的双下划线： 对解释器有特殊意义，为了避免与子类定义的名称冲突
   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     >>> class A(object):
     ... def _internal_use(self):
       File "<stdin>", line 2
         def _internal_use(self):
           ^
     IndentationError: expected an indented block
     >>> class A(object):
     ...     def _internal_use(self):
     ...             pass
     ...     def __method_name(self):
     ...             pass
     ...
     >>> dir(A)
     ['_A__method_name', ... '_internal_use']

     \end{minted}
   #+end_latex

3. 名称前后的双下划线： Python中的特殊名称，惯例。

*** termios:Low-level terminal control interface.                 :termios:

This module provides an interface to the POSIX calls for tty I/O
control.

All functions in this module take a *file descriptor fd* as their first
argument. This can be an integer file descriptor, such as returned by
*sys.stdin.fileno()*, or a file object, such as *sys.stdin* itself.

[[/home/ben/Wally/Journal/Figures/scrot/4904FSb.png]]

**** example
#+INCLUDE: ~/Wally/Journal/Project/Python/termios/test.py :src python

输入密码时不可见

*** tty:Terminal control functions                                    :tty:

The *tty* module defines functions for putting the tty into cbreak and
raw modes.

1. what is tty?
2. what is cbreak mode?
3. what is raw mode?

+Because it requires the termios module, it will work only on Unix+

[[/home/ben/Wally/Journal/Figures/scrot/4904TrQ.png]]

**** 终端模式                                                       :term:

终端I/O有两种不同的工作方式：
1. 规范方式输入处理。在这种方式中，终端输入以行为单位进行处理。对于每
   个读要求，终端驱动程序最多返回一行。
2. 非规范方式输入处理。输入字符不以行为单位进行装配。

如果不作特殊处理，则默认方式是规范方式。

V7和BSD类的终端驱动程序支持三种终端输入方式：
+ 精细加工方式(输入装配成行，并对特殊字符进行处理)；
+ 原始方式(输入不装配成行，也不对特殊字符进行处理)；
+ cbreak方式(输入不装配成行，但对某些特殊字符进行处理)。

***** reference

+ [[https://app.yinxiang.com/shard/s52/nl/11551545/3300d5e1-d8a3-48df-8ff1-bc4be441f46d?title=%E7%BB%88%E7%AB%AFI%2FO%20termios%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%20tcsetattr%E8%AE%BE%E7%BD%AE%20-%20dartagnan%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD][CNDS: 终端I/O termios属性设置 tcsetattr]]
*** select: waiting for I/O completion                             :select:

This module provides access to the *select()* and *poll()* functions
available in most operating systems, epoll() available on Linux 2.5+
and kqueue() available on most BSD. Note that on Windows, it only
works for sockets; on other operating systems, it also works for other
file types (in particular, on Unix.

[[/home/ben/Wally/Journal/Figures/scrot/4904tNF.png]]
*
*** trick 使用 wkhtmltopdf 转换网页为 PDF 可以保存目录，并且支持多个网页合并，比 chrome 自带的打印功能要完善

*** 查看CPU个数

*cat /proc/cpuinfo | grep processor*

#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{text}
   $ cat /proc/cpuinfo | grep processor
  processor       : 0
  processor       : 1
  processor       : 2
  processor       : 3
  \end{minted}
#+end_latex

** 2015/12/04

*** DONE python 在函数中导入模块 有什么好处
- State "DONE"       from "TODO"       [2015-12-04 五 09:53]
CLOCK: [2015-12-04 五 09:48]--[2015-12-04 五 09:53] =>  0:05
 <2015-12-03 四>
 [[file:~/Wally/Journal/Project/Python/termios/test.py::import%20termios,%20sys%20#%20%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%AD%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97][file:~/Wally/Journal/Project/Python/termios/test.py::import termios,
 sys # 在函数中导入模块]]

**** Q & A
PEP 08 states:

*Imports are always put at the top of the file* , just after any
module comments and docstrings, and before module globals and
constants.

However if the class/method/function that I am importing is only used
in rare cases, surely it is more efficient to do the import when it is
needed?

#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{py}
  class SomeClass(object):

      def not_often_called(self)
          from datetime import datetime
          self.datetime = datetime.now()
  more efficient than this?

  from datetime import datetime

  class SomeClass(object):

      def not_often_called(self)
          self.datetime = datetime.now()
  \end{minted}
#+end_latex


Anwser:


Module importing is quite fast, but not instant. This means that:

1. Putting the imports at the top of the module is fine, because it's
   a trivial cost that's only paid once.

2. Putting the imports within a function will cause calls to that
   function to take longer.

*So if you care about efficiency, put the imports at the top.* Only move
them into a function if your profiling shows that would help (you did
profile to see where best to improve performance, right??)

**** 小结

在文件开头处导入模块只会导入一次，而在函数中导入模块，每次调用函数时都
会导入一次（而且并不需要），所以关乎效率。

**** Reference

+ [[http://stackoverflow.com/questions/128478/should-python-import-statements-always-be-at-the-top-of-a-module][Stackoverflow: Should Python import statements always be at the top
  of a module]]

*** C++ 函数声明前的宏                                              :macro:

+ Windows api 经常这么干。。。

+ 对函数修饰。

+ *为了不同平台的可移植性，比如WINDOWS 的DLL*

+ Windows中dll导出的函数貌似需要特别说明，大概是为此准备的

**** Reference

+ [[http://bbs.chinaunix.net/thread-3578773-1-1.html]]

*** org-mark-ring-push 需要经常用到，默认绑定的快捷键繁琐

*M-<f4> 是 关闭当前窗口的 全局快捷键*

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map "\M-<f3>" 'org-mark-ring-push)
  (define-key org-mode-map "\C-<f4>" 'org-mark-ring-goto)
#+END_SRC

不行。

*** [[https://app.yinxiang.com/shard/s52/nl/11551545/66242b51-a72b-482b-9fa9-b75e5dc14d0b][find -exec]] :find:

-exec  参数后面跟的是command命令， *它的终止是以;为结束标志的* ，所以
这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所
以前面加反斜杠。

{}   花括号代表前面find查找出来的文件名。

使用find时，只要把想要的操作写在一个文件里，就可以用exec来配合find查找，
很方便的。在有些操作系统中只允许-exec选项执行诸如l s或ls -l这样的命令。
大多数用户使用这一选项是为了查找旧文件并删除它们。建议在真正执行rm命令
删除文件之前，最好先用ls命令看一下，确认它们是所要删除的文件。 exec选
项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\，最
后是一个分号。为了使用exec选项，必须要同时使用print选项。

当使用诸如mv或rm命令时，可以使用-exec选项的安全模式。它将在对每个匹配
到的文件进行操作之前提示你。  *-ok*

1. 实例1：ls -l命令放在find命令的-exec选项中

   #+begin_latex
   \begin{minted}[frame=leftline, mathescape]{sh}
   find . -type f -exec ls -l {} \;
   \end{minted}
   #+end_latex

2. 实例2：在目录中查找更改时间在n日以前的文件并删除它们

   #+begin_latex
   \begin{minted}[frame=leftline, mathescape]{sh}
   find . -type f -mtime +14 -exec rm {} \;
   \end{minted}
   #+end_latex

3. 实例3：在目录中查找更改时间在n日以前的文件并删除它们，在删除之前先给出提示

   #+begin_latex
   \begin{minted}[frame=leftline, mathescape]{sh}
   find . -name "*.log" -mtime +5 -ok rm {} \;
   \end{minted}
   #+end_latex

4. 实例4：-exec中使用grep命令

   #+begin_latex
   \begin{minted}[frame=leftline, mathescape]{sh}
   find /etc -name "passwd*" -exec grep "root" {} \;
   \end{minted}
   #+end_latex

5. 实例5：查找文件移动到指定目录

   #+begin_latex
   \begin{minted}[frame=leftline, mathescape]{sh}
   find . -name "*.log" -exec mv {} .. \;
   \end{minted}
   #+end_latex

6. 实例6：用exec选项执行cp命令

   #+begin_latex
   \begin{minted}[frame=leftline, mathescape]{sh}
   find . -name "*.log" -exec cp {} test3 \;p
   \end{minted}
   #+end_latex

** 2015/12/05
*** DONE AVR JLink
- State "DONE"       from "TODO"       [2015-12-05 六 14:39] \\
  花也很大工夫，虽然还是没有整出来，但明白了一些基本概念。
CLOCK: [2015-12-05 六 10:29]--[2015-12-05 六 14:39] =>  4:10

- State "TODO"       from ""           [2015-12-05 六 10:19] \\
  目标：使用AVR、sdcc、JLink、avrd.. 编译烧录程序

*** avrdude                                                       :avrdude:

**** reference

+ [[http://www.nongnu.org/avrdude/][homepage]]
+ [[~/Document/EmbeddedSystem/Sofewares/Ardude/avrdude-doc-5.5.pdf][Manual]]
+ [[http://www.ladyada.net/learn/avr/avrdude.html][AVR tutorials]]
+ [[https://app.yinxiang.com/Home.action#n=8245c1de-e308-41be-92dd-45932263d7da&ses=3&sh=5&sds=5&x=avrdude&][在Linux下烧录单片机]]

**** overview

*AVRDUDE* is an utility to *download/upload/manipulate* the ROM and
EEPROM contents of AVR microcontrollers using the in-system
programming technique (*ISP*).

简言之， *AVR在线烧录*

features
1. 命令行 -> 自动化，makefile
2. terminal mode
3. 跨平台
4. 支持多烧录器, ISP/JTag/Serial
5. 支持多种格式，hex/bin

**** usage
#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{text}
   $ avrdude --help
  avrdude: invalid option -- '-'
  Usage: avrdude [options]
  Options:
    -p <partno>                Required. Specify AVR device.
    -b <baudrate>              Override RS-232 baud rate.
    -B <bitclock>              Specify JTAG/STK500v2 bit clock period (us).
    -C <config-file>           Specify location of configuration file.
    -c <programmer>            Specify programmer type.
    -D                         Disable auto erase for flash memory
    -i <delay>                 ISP Clock Delay [in microseconds]
    -P <port>                  Specify connection port.
    -F                         Override invalid signature check.
    -e                         Perform a chip erase.
    -O                         Perform RC oscillator calibration (see AVR053).
    -U <memtype>:r|w|v:<filename>[:format]
                               Memory operation specification.
                               Multiple -U options are allowed, each request
                               is performed in the order specified.
    -n                         Do not write anything to the device.
    -V                         Do not verify.
    -u                         Disable safemode, default when running from a script.
    -s                         Silent safemode operation, will not ask you if
                               fuses should be changed back.
    -t                         Enter terminal mode.
    -E <exitspec>[,<exitspec>] List programmer exit specifications.
    -x <extended_param>        Pass <extended_param> to programmer.
    -y                         Count # erase cycles in EEPROM.
    -Y <number>                Initialize erase cycle # in EEPROM.
    -v                         Verbose output. -v -v for more.
    -q                         Quell progress output. -q -q for less.
    -l logfile                 Use logfile rather than stderr for diagnostics.
    -?                         Display this usage.

  avrdude version 6.0.1, URL: <http://savannah.nongnu.org/projects/avrdude/>

  \end{minted}
#+end_latex

[[/home/ben/Wally/Journal/Figures/scrot/946502K.png]]

e.g

#+begin_latex
\begin{minted}[frame=leftline, mathescape]{sh}
sudo avrdude -p 8052 -c usbasp -e -U flash:w:'跑马灯.hex'
\end{minted}
#+end_latex

#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{makefile}
    main：
        # 注意 这一行以及一下每行开头都是一个Tab
        sdcc liushui.c
        # SDCC默认的输出格式是ihx 我 们把它转换成hex
        packihx liushui.ihx>liushui.hex
        # 这就是烧录的语句，其实最后的格式是ihx也可以烧录的
        sudo avrdude -p 8052 -c usbasp -e -U flash:w:liushui.hex
  \end{minted}
#+end_latex

**** 配置文件
#+include: /etc/avrdude.conf :lines "1-10"

***** programmer 编程器格式

#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{text}
  #   programmer
  #       parent <id>                                 # optional parent
  #       id       = <id1> [, <id2> [, <id3>] ...] ;  # <idN> are quoted strings
  #       desc     = <description> ;                  # quoted string
  #       type     = <type>;                          # programmer type, quoted string
  #                          # supported programmer types can be listed by "-c ?type"
  #       connection_type = parallel | serial | usb
  #       baudrate = <num> ;                          # baudrate for avr910-programmer
  #       vcc      = <num1> [, <num2> ... ] ;         # pin number(s)
  #       buff     = <num1> [, <num2> ... ] ;         # pin number(s)
  #       reset    = <num> ;                          # pin number
  #       sck      = <num> ;                          # pin number
  #       mosi     = <num> ;                          # pin number
  #       miso     = <num> ;                          # pin number
  #       errled   = <num> ;                          # pin number
  #       rdyled   = <num> ;                          # pin number
  #       pgmled   = <num> ;                          # pin number
  #       vfyled   = <num> ;                          # pin number
  #       usbvid   = <hexnum>;                        # USB VID (Vendor ID)
  #       usbpid   = <hexnum>;                        # USB PID (Product ID)
  #       usbdev   = <interface>;                     # USB interface or other device info
  #       usbvendor = <vendorname>;                   # USB Vendor Name
  #       usbproduct = <productname>;                 # USB Product Name
  #       usbsn    = <serialno>;                      # USB Serial Number
  #
  #        To invert a bit, use = ~ <num>, the spaces are important.
  #        For a pin list all pins must be inverted.
  #        A single pin can be specified as usual = ~ <num>, for lists
  #        specify it as follows = ~ ( <num> [, <num2> ... ] ) .
  #     ;
  \end{minted}
#+end_latex

***** 查看支持的 programmer: avrdude -c foo (a little trick)
#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{text}
   $ avrdude -c foo

  avrdude: Can't find programmer id "abc"

  Valid programmers are:
    2232HIO          = FT2232H based generic programmer
    4232h            = FT4232H based generic programmer
    89isp            = Atmel at89isp cable
    abcmini          = ABCmini Board, aka Dick Smith HOTCHIP
    alf              = Nightshade ALF-PgmAVR, http://nightshade.homeip.net/
    arduino          = Arduino
    arduino-ft232r   = Arduino: FT232R connected to ISP
    atisp            = AT-ISP V1.1 programming cable for AVR-SDK1 from <http://micro-research.co.th/>
    avr109           = Atmel AppNote AVR109 Boot Loader
    avr910           = Atmel Low Cost Serial Programmer
    avr911           = Atmel AppNote AVR911 AVROSP
    avrftdi          = FT2232D based generic programmer
    avrisp           = Atmel AVR ISP
    avrisp2          = Atmel AVR ISP mkII
    avrispmkII       = Atmel AVR ISP mkII
    avrispv2         = Atmel AVR ISP V2
    bascom           = Bascom SAMPLE programming cable
    benisp           = none
    blaster          = Altera ByteBlaster
    bsd              = Brian Dean's Programmer, http://www.bsdhome.com/avrdude/
    buspirate        = The Bus Pirate
    buspirate_bb     = The Bus Pirate (bitbang interface, supports TPI)
    butterfly        = Atmel Butterfly Development Board
    butterfly_mk     = Mikrokopter.de Butterfly
    bwmega           = BitWizard ftdi_atmega builtin programmer
    c2n232i          = serial port banging, reset=dtr sck=!rts mosi=!txd miso=!cts
    dapa             = Direct AVR Parallel Access cable
    dasa             = serial port banging, reset=rts sck=dtr mosi=txd miso=cts
    dasa3            = serial port banging, reset=!dtr sck=rts mosi=txd miso=cts
    diecimila        = alias for arduino-ft232r
    dragon_dw        = Atmel AVR Dragon in debugWire mode
    dragon_hvsp      = Atmel AVR Dragon in HVSP mode
    dragon_isp       = Atmel AVR Dragon in ISP mode
    dragon_jtag      = Atmel AVR Dragon in JTAG mode
    dragon_pdi       = Atmel AVR Dragon in PDI mode
    dragon_pp        = Atmel AVR Dragon in PP mode
    dt006            = Dontronics DT006
    ere-isp-avr      = ERE ISP-AVR <http://www.ere.co.th/download/sch050713.pdf>
    frank-stk200     = Frank STK200
    ft232r           = FT232R Synchronous BitBang
    ft245r           = FT245R Synchronous BitBang
    futurlec         = Futurlec.com programming cable.
    jtag1            = Atmel JTAG ICE (mkI)
    jtag1slow        = Atmel JTAG ICE (mkI)
    jtag2            = Atmel JTAG ICE mkII
    jtag2avr32       = Atmel JTAG ICE mkII im AVR32 mode
    jtag2dw          = Atmel JTAG ICE mkII in debugWire mode
    jtag2fast        = Atmel JTAG ICE mkII
    jtag2isp         = Atmel JTAG ICE mkII in ISP mode
    jtag2pdi         = Atmel JTAG ICE mkII PDI mode
    jtag2slow        = Atmel JTAG ICE mkII
    jtag3            = Atmel AVR JTAGICE3 in JTAG mode
    jtag3dw          = Atmel AVR JTAGICE3 in debugWIRE mode
    jtag3isp         = Atmel AVR JTAGICE3 in ISP mode
    jtag3pdi         = Atmel AVR JTAGICE3 in PDI mode
    jtagkey          = Amontec JTAGKey, JTAGKey-Tiny and JTAGKey2
    jtagmkI          = Atmel JTAG ICE (mkI)
    jtagmkII         = Atmel JTAG ICE mkII
    jtagmkII_avr32   = Atmel JTAG ICE mkII im AVR32 mode
    lm3s811          = Luminary Micro LM3S811 Eval Board (Rev. A)
    mib510           = Crossbow MIB510 programming board
    mkbutterfly      = Mikrokopter.de Butterfly
    nibobee          = NIBObee
    o-link           = O-Link, OpenJTAG from www.100ask.net
    openmoko         = Openmoko debug board (v3)
    pavr             = Jason Kyle's pAVR Serial Programmer
    pickit2          = MicroChip's PICkit2 Programmer
    picoweb          = Picoweb Programming Cable, http://www.picoweb.net/
    pony-stk200      = Pony Prog STK200
    ponyser          = design ponyprog serial, reset=!txd sck=rts mosi=dtr miso=cts
    siprog           = Lancos SI-Prog <http://www.lancos.com/siprogsch.html>
    sp12             = Steve Bolt's Programmer
    stk200           = STK200
    stk500           = Atmel STK500
    stk500hvsp       = Atmel STK500 V2 in high-voltage serial programming mode
    stk500pp         = Atmel STK500 V2 in parallel programming mode
    stk500v1         = Atmel STK500 Version 1.x firmware
    stk500v2         = Atmel STK500 Version 2.x firmware
    stk600           = Atmel STK600
    stk600hvsp       = Atmel STK600 in high-voltage serial programming mode
    stk600pp         = Atmel STK600 in parallel programming mode
    usbasp           = USBasp, http://www.fischl.de/usbasp/
    usbasp-clone     = Any usbasp clone with correct VID/PID
    usbtiny          = USBtiny simple USB programmer, http://www.ladyada.net/make/usbtinyisp/
    wiring           = Wiring
    xil              = Xilinx JTAG cable

  \end{minted}
#+end_latex

***** 自定义 ISP
1. 参考
   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     programmer
       id    = "usbasp";
       desc  = "USBasp, http://www.fischl.de/usbasp/";
       type  = "usbasp";
       connection_type = usb;
       usbvid     = 0x16C0; # VOTI
       usbpid     = 0x05DC; # Obdev's free shared PID
       usbvendor  = "www.fischl.de";
       usbproduct = "USBasp";

       # following variants are autodetected for id "usbasp"

       # original usbasp from fischl.de
       # see above "usbasp"

       # old usbasp from fischl.de
       #usbvid     = 0x03EB; # ATMEL
       #usbpid     = 0xC7B4; # (unoffical) USBasp
       #usbvendor  = "www.fischl.de";
       #usbproduct = "USBasp";

       # NIBObee (only if -P nibobee is given on command line)
       # see below "nibobee"
     ;

     programmer
       id    = "usbasp-clone";
       desc  = "Any usbasp clone with correct VID/PID";
       type  = "usbasp";
       connection_type = usb;
       usbvid    = 0x16C0; # VOTI
       usbpid    = 0x05DC; # Obdev's free shared PID
       #usbvendor  = "";
       #usbproduct = "";
     ;

     \end{minted}
   #+end_latex

2. benusp
   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     programmer
       id    = "benisp";
       desc  = "Any usbasp clone with correct VID/PID";
       type  = "usbasp";
       connection_type = usb;
       usbvid    = 0x03eb; # VOTI
       usbpid    = 0xc8b4; # Obdev's free shared PID
       #usbvendor  = "";
       #usbproduct = "";
     ;
     \end{minted}
   #+end_latex

3. test
   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     Ardude $ avrdude -p 8052 -c benasp

     avrdude: error: usbasp_transmit: error sending control message: Operation not permitted
     avrdude: error: usbasp_transmit: error sending control message: Operation not permitted
     avrdude: warning: cannot set sck period. please check for usbasp firmware update.
     avrdude: error: usbasp_transmit: error sending control message: Operation not permitted
     avrdude: error: usbasp_transmit: error sending control message: Operation not permitted
     avrdude: error: programm enable: target doesn't answer. 0
     avrdude: initialization failed, rc=-1
              Double check connections and try again, or use -F to override
              this check.

     avrdude: error: usbasp_transmit: error sending control message: Operation not permitted

     avrdude done.  Thank you.

     Ardude $ sudo avrdude -p 8052 -c benasp

     avrdude: warning: cannot set sck period. please check for usbasp firmware update.
     avrdude: error: programm enable: target doesn't answer. 0
     avrdude: initialization failed, rc=-1
              Double check connections and try again, or use -F to override
              this check.


     avrdude done.  Thank you.

     \end{minted}
   #+end_latex

   1. 权限
   2. 配置不对



***** part AVR型号

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     #   part
     #       id               = <id> ;                 # quoted string
     #       desc             = <description> ;        # quoted string
     #       has_jtag         = <yes/no> ;             # part has JTAG i/f
     #       has_debugwire    = <yes/no> ;             # part has debugWire i/f
     #       has_pdi          = <yes/no> ;             # part has PDI i/f
     #       has_tpi          = <yes/no> ;             # part has TPI i/f
     #       devicecode       = <num> ;            # deprecated, use stk500_devcode
     #       stk500_devcode   = <num> ;                # numeric
     #       avr910_devcode   = <num> ;                # numeric
     #       signature        = <num> <num> <num> ;    # signature bytes
     #       chip_erase_delay = <num> ;                # micro-seconds
     #       reset            = dedicated | io;
     #       retry_pulse      = reset | sck;
     #       pgm_enable       = <instruction format> ;
     #       chip_erase       = <instruction format> ;
     #       chip_erase_delay = <num> ;                # chip erase delay (us)
     #       # STK500 parameters (parallel programming IO lines)
     #       pagel            = <num> ;                # pin name in hex, i.e., 0xD7
     #       bs2              = <num> ;                # pin name in hex, i.e., 0xA0
     #       serial           = <yes/no> ;             # can use serial downloading
     #       parallel         = <yes/no/pseudo>;       # can use par. programming
     #       # STK500v2 parameters, to be taken from Atmel's XML files
     #       timeout          = <num> ;
     #       stabdelay        = <num> ;
     #       cmdexedelay      = <num> ;
     #       synchloops       = <num> ;
     #       bytedelay        = <num> ;
     #       pollvalue        = <num> ;
     #       pollindex        = <num> ;
     #       predelay         = <num> ;
     #       postdelay        = <num> ;
     #       pollmethod       = <num> ;
     #       mode             = <num> ;
     #       delay            = <num> ;
     #       blocksize        = <num> ;
     #       readsize         = <num> ;
     #       hvspcmdexedelay  = <num> ;
     #       # STK500v2 HV programming parameters, from XML
     #       pp_controlstack  = <num>, <num>, ...;   # PP only
     #       hvsp_controlstack = <num>, <num>, ...;  # HVSP only
     #       hventerstabdelay = <num>;
     #       progmodedelay    = <num>;               # PP only
     #       latchcycles      = <num>;
     #       togglevtg        = <num>;
     #       poweroffdelay    = <num>;
     #       resetdelayms     = <num>;
     #       resetdelayus     = <num>;
     #       hvleavestabdelay = <num>;
     #       resetdelay       = <num>;
     #       synchcycles      = <num>;               # HVSP only
     #       chiperasepulsewidth = <num>;            # PP only
     #       chiperasepolltimeout = <num>;
     #       chiperasetime    = <num>;               # HVSP only
     #       programfusepulsewidth = <num>;          # PP only
     #       programfusepolltimeout = <num>;
     #       programlockpulsewidth = <num>;          # PP only
     #       programlockpolltimeout = <num>;
     #       # JTAG ICE mkII parameters, also from XML files
     #       allowfullpagebitstream = <yes/no> ;
     #       enablepageprogramming = <yes/no> ;
     #       idr              = <num> ;                # IO addr of IDR (OCD) reg.
     #       rampz            = <num> ;                # IO addr of RAMPZ reg.
     #       spmcr            = <num> ;                # mem addr of SPMC[S]R reg.
     #       eecr             = <num> ;                # mem addr of EECR reg.
     #                                                 # (only when != 0x3c)
     #       is_at90s1200     = <yes/no> ;             # AT90S1200 part
     #       is_avr32         = <yes/no> ;             # AVR32 part
     #
     #       memory <memtype>
     #           paged           = <yes/no> ;          # yes / no
     #           size            = <num> ;             # bytes
     #           page_size       = <num> ;             # bytes
     #           num_pages       = <num> ;             # numeric
     #           min_write_delay = <num> ;             # micro-seconds
     #           max_write_delay = <num> ;             # micro-seconds
     #           readback_p1     = <num> ;             # byte value
     #           readback_p2     = <num> ;             # byte value
     #           pwroff_after_write = <yes/no> ;       # yes / no
     #           read            = <instruction format> ;
     #           write           = <instruction format> ;
     #           read_lo         = <instruction format> ;
     #           read_hi         = <instruction format> ;
     #           write_lo        = <instruction format> ;
     #           write_hi        = <instruction format> ;
     #           loadpage_lo     = <instruction format> ;
     #           loadpage_hi     = <instruction format> ;
     #           writepage       = <instruction format> ;
     #         ;
     #     ;
     \end{minted}
   #+end_latex


***** [[http://www.avrfreaks.net/forum/writing-at89s52-through-usbasp][at89252]]
#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{text}
  #------------------------------------------------------------
  # Below chips by added by me .. Joy Shukla(joy_shukla@yahoo.in)
  # these chips can be programmed with my usbasp programmer(changed atmega8 program)
  # after adding avrdude support in this file ..
  #------------------------------------------------------------

  #------------------------------------------------------------
  # AT89S52
  #------------------------------------------------------------
  part
      id               = "8052";
      desc             = "AT89S52";
      signature        = 0x1E 0x52 0x06;
      chip_erase_delay = 20000;
      pgm_enable       = "1 0 1 0  1 1 0 0    0 1 0 1  0 0 1 1",
                         "x x x x  x x x x    x x x x  x x x x";

      chip_erase       = "1 0 1 0  1 1 0 0    1 0 0 x  x x x x",
                         "x x x x  x x x x    x x x x  x x x x";

      timeout      = 200;
      stabdelay      = 100;
      cmdexedelay      = 25;
      synchloops      = 32;
      bytedelay      = 0;
      pollindex      = 3;
      pollvalue      = 0x53;
      predelay      = 1;
      postdelay      = 1;
      pollmethod      = 0;

      memory "flash"
          size            = 8192;
          paged           = no;
          min_write_delay = 4000;
          max_write_delay = 9000;
          readback_p1     = 0xff;
          readback_p2     = 0xff;
          read            = "  0   0   1   0    0   0   0   0",
                            "  x   x   x a12  a11 a10  a9  a8",
                            " a7  a6  a5  a4   a3  a2  a1  a0",
                            "  o   o   o   o    o   o   o   o";

          write           = "  0   1   0   0    0   0   0   0",
                            "  x   x   x a12  a11 a10  a9  a8",
                            " a7  a6  a5  a4   a3  a2  a1  a0",
                            "  i   i   i   i    i   i   i   i";
     mode      = 0x21;
     delay      = 12;
        ;

      memory "signature"
          size            = 3;
          read            = "0  0  1  0   1  0  0  0   x  x  x  0   0  0 a1 a0",
                            "0  0  0  0   0  0  0  0   o  o  o  o   o  o  o  o";
        ;
    ;
  \end{minted}
#+end_latex
**** ISP测试

接入 USB ISP 后的反应

#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{text}
  Ardude $ lsusb
  Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
  ...

  Ardude $ lsusb
  Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
  ...
  Bus 003 Device 003: ID 03eb:c8b4 Atmel Corp.

  \end{minted}
#+end_latex

clk

#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{text}
   $ sudo avrdude -p 8052 -c benisp

  avrdude: warning: cannot set sck period. please check for usbasp firmware update.
  avrdude: error: programm enable: target doesn't answer. 0
  avrdude: initialization failed, rc=-1
           Double check connections and try again, or use -F to override
           this check.


  avrdude done.  Thank you.

  \end{minted}
#+end_latex

*avrdude: warning: cannot set sck period. please check for usbasp
firmware update.*

***** TODO 固件升级

买的 USBISP 好难用。。。。做工也好粗糙。

*** Linux 下 AVR 开发环境搭建

- =https://app.yinxiang.com/Home.action#n=9c09ae6a-512d-42b1-a8b0-731e9bba8e7f&ses=1&sh=5&sds=5&x=avrdude&=


1. 编译： avr-gcc 或 sdcc
2. 烧录： avrdude
3. IDE: Eclipse

*** lsusb                                                       :lsusb:usb:

#+BEGIN_SRC sh :results output :exports both
lsusb
#+END_SRC

#+RESULTS:
#+begin_example
Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 008 Device 002: ID 05e3:0606 Genesys Logic, Inc. USB 2.0 Hub / D-Link DUB-H4 USB 2.0 Hub
Bus 008 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 007 Device 002: ID 046d:c52f Logitech, Inc. Unifying Receiver
Bus 007 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 006 Device 002: ID 046a:0011 Cherry GmbH G83 (RS 6000) Keyboard
Bus 006 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 005 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 004 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 003 Device 004: ID 03eb:c8b4 Atmel Corp.
Bus 003 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
#+end_example

1. BUS 002: 表示第2个 *usb 主控制器* ， 通过命令 *lspci | grpe USB* 查看

   #+BEGIN_SRC sh :results output :exports both
   lspci | grep USB
   #+END_SRC

   #+RESULTS:
   : 00:1a.0 USB controller: Intel Corporation 82801JD/DO (ICH10 Family) USB UHCI Controller #4 (rev 02)
   : 00:1a.1 USB controller: Intel Corporation 82801JD/DO (ICH10 Family) USB UHCI Controller #5 (rev 02)
   : 00:1a.2 USB controller: Intel Corporation 82801JD/DO (ICH10 Family) USB UHCI Controller #6 (rev 02)
   : 00:1a.7 USB controller: Intel Corporation 82801JD/DO (ICH10 Family) USB2 EHCI Controller #2 (rev 02)
   : 00:1d.0 USB controller: Intel Corporation 82801JD/DO (ICH10 Family) USB UHCI Controller #1 (rev 02)
   : 00:1d.1 USB controller: Intel Corporation 82801JD/DO (ICH10 Family) USB UHCI Controller #2 (rev 02)
   : 00:1d.2 USB controller: Intel Corporation 82801JD/DO (ICH10 Family) USB UHCI Controller #3 (rev 02)
   : 00:1d.7 USB controller: Intel Corporation 82801JD/DO (ICH10 Family) USB2 EHCI Controller #1 (rev 02)

2. Device 001: 表示系统给USB分配的设备号 (*devnum*)

3. ID 1d6d:0001: 表示USB设备的ID，由芯片制造商设置，可以 *唯一* 标识该
   设备
   1) 1d6d    *usb_device_descriptor.idVendor*
   2) 0001    *usb_device_descriptor.idProduct*
**** reference

+ [[chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/js/main/generateUrlWithTempToken.html?baseUrl=https%3A%2F%2Fapp.yinxiang.com&targetUrl=%2Fshard%2Fs52%2Fnl%2F11551545%2F9180248d-1b9d-4919-86a7-580c4f691b56%2F][lsusb查看系统中的USB设备]]

*** usbisp & usbasp                                         :usbisp:usbasp:

**** usbasp

USBasp is a USB in-circuit programmer for Atmel AVR controllers. It
simply consists of an ATMega88 or an ATMega8 and a couple of passive
components. The programmer uses a firmware-only USB driver, no special
USB controller is needed.

[[http://www.fischl.de/usbasp/][fischl:usbasp]] 官网可下载 固件、原理图及PCB


#+DOWNLOADED: file:///home/ben/Wally/Journal/Figures/usbasp_circuit.png @ 2015-12-05 14:36:13
 [[~/Wally/Journal/Figures/日事日毕/usbasp_circuit_2015-12-05_14:36:13.png]]

**** 联系与区别

*谷歌搜索不到 usbisp 的英文资料， avrdude中也没有对 usbisp 的直接支持。*

1. USBISP与USBASP分别是2个德国人的设计,在硬件上基本兼容,但内核软件有不
   同,尽管低层USB都采用开源代码,但上层支持协议不同.USBISP是STK500v2
   conpatible (direct from AVR-Studio useable) 的,直接在AVR STUDIO中支
   持和使用.而USBASP需要使用专用的编程软件.另外ASPISP的更新比USBASP快.

2. 这两者硬件电路相同，固件程序不同；

3. 两者使用的烧录软件不同，USBISP是模拟STK500下载线，所以可以使用AVR
   Stduio开发环境来下载烧录程序；而USBASP不能用AVR Stduio，但是现在网
   上很多支持USBASP的软件，比如PROGISP,AVR flater等。

4. USBISP与并口ISP(STK200/STK300)的比较并口ISP(STK200/STK300)下载线需
   要PC带真正的LPT口,在ICC、CVAVR、BASCOM-AVR中可以直接使用。USBISP使
   用USB口，只能在AVR STUDIO中使用（其它支持的不稳定）USBISP速度稍为慢
   一点（M8模拟USB）

**** reference

+ [[chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/js/main/generateUrlWithTempToken.html?baseUrl=https%3A%2F%2Fapp.yinxiang.com&targetUrl=%2Fshard%2Fs52%2Fnl%2F11551545%2F707ecdc3-6ae1-492d-99d8-6ecdd0215315%2F][USBISP与USBASP]]
+ [[http://www.fischl.de/usbasp/][fischl:usbasp]]

*** 并口                                                             :并口:

+ [[https://zh.wikipedia.org/wiki/%E5%B9%B6%E8%A1%8C%E7%AB%AF%E5%8F%A3][Wiki: 并口]]

并行端口（Parallel Port），又称平行埠、並列埠、并口，是计算机上数据以
并行方式传递的端口，也就是说至少应该有两条连接线用于传递数据。与只使用
一根线传递数据（这里没有包括用于接地、控制等的连接线）的串行端口相比，
并口在相同的数据传送速率下，并口可以更快地传输数据。所以在21世纪之前，
在需要较大传输速度的地方，例如打印机，并口得到广泛使用。但是随着速度迅
速提高，并口上导线之间数据同步成为一个很难处理的难题，导致并口在速度竞
赛中逐渐被淘汰。目前USB等改进的串口逐渐代替了并口。

[[/home/ben/Wally/Journal/Figures/scrot/9465etO.png]]

[[/home/ben/Wally/Journal/Figures/scrot/9465r3U.png]]

*** org-trick C-x C-o delete-blank-lines deletes any extra blank lines between two paragraphs, leaving just one blank line.

*** yasnippet doxygen cpp                           :doxygen:yasnippet:cpp:

1. reference

   + [[https://app.yinxiang.com/shard/s52/nl/11551545/fe360834-1a0a-4475-adbb-f11faf65c292?title=%E5%9F%BA%E4%BA%8Edoxygen%E7%9A%84C%2B%2B%E6%B3%A8%E9%87%8A][基于doxygen的C++注释]]

2. yasnippet 自定义风格

   + key 要短
   + 文件名要有意义 key:comment

3. 头文件

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     # -*- mode: snippet; require-final-newline: nil -*-
     # name: doxygen for header file
     # key: dh
     # binding: direct-keybinding
     # --
     /*!
     ,* \file $1
     ,* \brief $2
     ,*
     ,* ${3:详细概述}
     ,*
     ,* \author Tagerill Wong
     ,* \version ${4:maj.min}
     ,* \date $5
     ,*/
     $0
     \end{minted}
   #+end_latex

   #+BEGIN_SRC cpp
     /*!
      ,* \file test.h
      ,* \brief test
      ,*
      ,* test
      ,*
      ,* \author Tagerill Wong
      ,* \version 1.0
      ,* \date 2015/12/05
      ,*/
     hello world!

   #+END_SRC

4. 命名空间

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     # -*- mode: snippet; require-final-newline: nil -*-
     # name: doxygen for namespace
     # key: dn
     # binding: direct-keybinding
     # --
     /// \brief $1
     ///
     /// ${2: 命名空间的详细概述}
     $0
     \end{minted}
   #+end_latex

   #+BEGIN_SRC cpp
     /// \brief namespace
     ///
     /// namespace

   #+END_SRC

5. 类

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     # -*- mode: snippet; require-final-newline: nil -*-
     # name: doxygen for class
     # key: dc
     # binding: direct-keybinding
     # --
     /// \brief $1
     ///
     /// ${2:详细说明}
     \end{minted}
   #+end_latex

   #+BEGIN_SRC cpp
     /// \brief class
     ///
     /// fds
   #+END_SRC

6. 函数

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     # -*- mode: snippet; require-final-newline: nil -*-
     # name: doxygen for function
     # key: df
     # binding: direct-keybinding
     # --
     /// \brief $1
     ///
     /// ${2:详细说明, 不要标识，需要空行，可以多行}
     /// \param $3
     /// \return $4
     /// \see $5
     $0
     \end{minted}
   #+end_latex

   #+BEGIN_SRC cpp
     /// \brief func
     ///
     /// foo
     /// \param p1 comment
     /// \return commnet
     /// \see what

   #+END_SRC

7. 变量

   1) brief

      #+begin_latex
        \begin{minted}[frame=leftline, mathescape]{text}
        # -*- mode: snippet; require-final-newline: nil -*-
        # name: doxygen for variable, default brief, that is at the end
        # key: //
        # binding: direct-keybinding
        # --
        \\\< $0
        \end{minted}
      #+end_latex

      #+BEGIN_SRC cpp
        int foo;                        ///<
      #+END_SRC

      trick: *//* 使用快捷键生成注释符号，而且位置合适

   2) verbose

      #+begin_latex
        \begin{minted}[frame=leftline, mathescape]{text}
        # -*- mode: snippet; require-final-newline: nil -*-
        # name: doxygen for variable, verbose
        # key: dv
        # binding: direct-keybinding
        # --

        /// \brief $1
        ///
        /// ${2:详细说明}
        ///
        \end{minted}
      #+end_latex

      #+BEGIN_SRC cpp

        /// \brief varible for foo
        ///
        /// foo
        ///
      #+END_SRC

*** yasnippet

**** 命令
+ yas-new-snippet
+ yas-find-snippet
+ yas-visit-snippet-file
+ yas-expand /used interactively/
+ yas-expand-snippet /used in emacs-lisp code/
+ yas-load-snippet-buffer
+ yas-reload-all

*** [[http://tuhdo.github.io/c-ide.html][Emacs C++ IDE]]

**** 功能分析

+ [X] 头文件和源文件之间的跳转(switch between .h and .c/.cpp)
  - helm-gtags-dwim 项目中跳转

+ [ ] 利用gtag在源文件之间跳转 (helm-gtags)

+ [ ] 交互式大纲 (function-args /moo-jump-local/)

+ [X] 文件目录树 (ecb, 不用 speedbar)
  - ecb

+ [ ] 符号引用

+ [ ] 代码补全 (helm窗口)

+ [ ] 头文件补全

+ [ ] 底边栏显示函数接口和变量定义

+ [ ] 顶部显示当前位置函数

+ [ ] 编译支持

+ [ ] 编译输出的可视化

+ [ ] GDB调试

+ [ ] man帮助手册

**** 基本操作

|-----------+--------------------+----------------------|
| C-M-f     | forward-sexp       | 前向匹配             |
| C-M-b     | backward-sexp      | 后向匹配             |
| C-M-k     | kill-sexp          | 删除匹配之间的区域   |
| C-M-SPC/@ | mark-sexp          | 选中匹配区域         |
| C-M-a     | beginning-of-defun | 将光标移至函数起始处 |
| C-M-e     | end-of-defun       | 将光标移至函数结尾处 |
| C-M-h     | mark-defun         | 选中函数定义         |
|-----------+--------------------+----------------------|

**** gtags                                                         :gtags:
***** intro: [[http://www.gnu.org/software/global/][GNU GLOBAL]]  :gtags:

GNU GLOBAL is a source code tagging system that works the same way
across diverse environments, such as Emacs editor, Vi editor, Less
viewer, Bash shell, various web browsers, etc.

首先在项目根目录下使用 *gtags* 命令生成标签数据库文件
+ /GTAGS/: definition database
+ /GRTAGS/: reference database
+ /GPATH/: path name database

e.g
#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{text}
  linux-stable $ du -h G*
  8.7M    GPATH
  318M    GRTAGS
  127M    GTAGS
  \end{minted}
#+end_latex

***** shortcuts                                                :shortcut:

|---------+----------------------------------|
| C-c g a | helm-gtags-tags-in-this-function |
| C-j     | helm-gtags-select                |
| C-c g . | helm-gtags-dwim                  |
| C-c g , | helm-gtags-pop-stack             |
| C-c g < | helm-gtags-previous-history      |
| C-c g > | helm-gtags-next-history          |
| C-c g f | helm-gtags-find-files            |
| C-c g s | helm-gtags-find-symbol           |
| C-c g r | helm-gtags-find-reference        |
|---------+----------------------------------|

***** helm-gtags

#+BEGIN_SRC emacs-lisp
  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-cg"
   helm-gtags-suggested-key-mapping t
   )

  (require 'helm-gtags)
  ;; Enable helm-gtags-mode
  (add-hook 'dired-mode-hook 'helm-gtags-mode)
  (add-hook 'eshell-mode-hook 'helm-gtags-mode)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)

  (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  ;; (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c g h") 'helm-gtags-show-stack)
  (define-key helm-gtags-mode-map (kbd "C-c g p") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c g n") 'helm-gtags-next-history)
#+END_SRC

Note： 快捷键绑定以 *C-c g* 打头

***** ggtags

#+BEGIN_SRC emacs-lisp
  (require 'ggtags)
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                (ggtags-mode 1))))

  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

  (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC

ggtags 没有 helm-gtags 好用，可能会破坏当前 buffer 窗口布局， /弃用/

***** helm-gtags-dwim M-. （跳转定义、引用、头文件）

M-. runs the command *helm-gtags-dwim*

It is bound to *M-.*.

(helm-gtags-dwim)

Find by context. Here is
- on include statement then jump to included file
- on symbol definition then jump to its references
- on reference point then jump to its definition.

***** helm-gtags-pop-stack M-, (跳回)
***** helm-gtags-select （浏览project中的所有标签）

设置绑定在 C-j 上，不好， C-j 应该是回车与换行

[[/home/ben/Wally/Journal/Figures/scrot/22666kXD.png]]

***** helm-gtags-tags-in-this-function 本函数中的所有标签
***** tag history

|-----------------------------+---------|
| helm-gtags-show-stack       | C-c g h |
| helm-gtags-previous-history | C-c g p |
| helm-gtags-next-history     | C-c g n |
|-----------------------------+---------|
**** sr-speedbar                                                :speedbar:

1. shortcut
   |---------+-------------------------------------------------------------------------------------------------|
   |         | sr-speedbar-open OR  sr-speedbar-toggle                                                         |
   | SPC     | open the children of a node.                                                                    |
   | RET     | open the node in another window.                                                                |
   |         | If node is a file  open that file;                                                              |
   |         | if node is a directory ,  enter that directory;                                                 |
   |         | if node is a tag in a file ,  jump to the location of that tag in the file.                     |
   | U       | go up parent directory.                                                                         |
   | n/p     | moves to next or previous node.                                                                 |
   | M-n/M-p | moves to next or previous node at the current level.                                            |
   | b       | switches to buffer list using Speedbar presentation. You can also open children of each buffer. |
   | f       | switches back to file list.                                                                     |
   |---------+-------------------------------------------------------------------------------------------------|

2. Improvements compared to speedbar
   1) Automatically switches directory tree - when you switch buffer -
      to the default-directory of current buffer.
   2) Use an Emacs window instead of frame, make it easier to use.
   3) C-x 1 deletes every window except Speedbar, so you won't have to
      open again.
   4) You can prevent C-x o to jump to sr-speedbar window by setting
      sr-speedbar-skip-other-window-p to `t`. You can still move to
      sr-speedbar window using either the mouse or windmove.

3. 结论

   *ecb完全可以取代之，弃*

**** company-mode: [[http://company-mode.github.io/][general completion]] :company:

***** intro

Company stands for /complete anything/ and is a modular in-buffer
completion mechanism.

+ *Back-ends* are single functions.
+ A visualization (*front-end*) is also a single function.

/Company-mode/ 比 /Auto-complete/ 用着更习惯。

***** settings

#+BEGIN_SRC emacs-lisp
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

***** shortcut                                                 :shortcut:

|-----------+-----------------------|
| M-p/n     | move to previous/next |
| M-<digit> | move to n-th          |
| Return    | select                |
| TAB       |                       |
| *C-s/r*   | search                |
| *C-w*     | see the source        |
|-----------+-----------------------|

**** [[https://github.com/abo-abo/function-args][fucntion-args]]

1. intro

   function-args is a GNU Emacs package for /showing an inline
   arguments hint/ for the C/C++ function at point.

2. moo-jump-local: 本地标签跳转

   Select a tag to jump to from tags defined in current buffer.

   弹出 helm 窗口，能够跳转至 /函数定义/, /头文件引用/ 和 /宏/ 处。
   不支持变量的定义与引用跳转。

   *使用 ECB 能够完全取代*

3. fa-show M-i

   |-------+-------------------------------------|
   | M-i   | fa-show                             |
   | M-n/h | cycle overloaded functions          |
   | M-u   | dismiss the hint                    |
   | M-j   | fa-jump  (*when fa-show is active*) |
   |-------+-------------------------------------|

4. moo-complete M-o

   It's essentially a c++-specific version of
   semantic-ia-complete-symbol. It behaves better, because it accounts
   more for function overloading and inheritance. Also it's prettier
   (type parts are fontified) and faster (helm is used for
   completion). You can invoke it with M-o by default.

**** CEDET: [[http://cedet.sourceforge.net/][Collection of Emacs Development Tools]] :cedet:

***** why cedet?

1. Elisp写成，便于移植
2. /动态/ 相对gtags静态
3. disadvantages: slow,  but still fast
4. 内置于Emacs，安装配置简单


#+BEGIN_SRC cpp
  #include <boost/asio.hpp>
  #include <iostream>

  struct s{
    int ab;
    bool b;
  };

  int main(int argc, char *argv[])
  {
    s ss;
    return 0;
  }

#+END_SRC

*Note: 在 org source buffer 中无效*

***** cedet源码安装（ 内置的cedet足够用了 ）

****** 编译错误
#+BEGIN_EXAMPLE
  Wrong type argument: stringp, nil
  make: *** [autoloads] 错误 255
#+END_EXAMPLE

原因：可能因为版本问题，官网上测试的Ubuntu和Emacs版本都低于当前使用版
本

****** 解决

******* 放弃，使用Emacs内置的cedet

******* 使用git版

1) git clone http://git.code.sf.net/p/cedet/git cedet

2) place the checked out cedet directory in your ~/.emacs.d.

3) make

   #+BEGIN_EXAMPLE
     cd cedet
     make # wait for it to complete
     cd contrib
     make
   #+END_EXAMPLE

4) setting

   #+BEGIN_EXAMPLE
     (load-file (concat user-emacs-directory "/cedet/cedet-devel-load.el"))
     (load-file (concat user-emacs-directory "cedet/contrib/cedet-contrib-load.el"))
   #+END_EXAMPLE


******* 使用bzr版
1) bzr checkout

   bzr://cedet.bzr.sourceforge.net/bzrroot/cedet/code/trunk cedet

2) place the checked out cedet directory in your ~/.emacs.d.

3) make

   #+BEGIN_EXAMPLE
     cd cedet
     make # wait for it to complete
     cd contrib
     make
   #+END_EXAMPLE

4) setting

   #+BEGIN_EXAMPLE
     (load-file (concat user-emacs-directory "/cedet/cedet-devel-load.el"))
     (load-file (concat user-emacs-directory "cedet/contrib/cedet-contrib-load.el"))
   #+END_EXAMPLE

5) error:Cannot unload builtin CEDET since it is already loaded

   - 原因：可能在load-file之前已经有其它包启用了内置的cedet
   - 解决
     - (setq load-path (remove-if (lambda (x) (string-match-p "cedet" x)) load-path))
     - 将cedet-bzr配置提前

***** semantic(语义)                                           :semantic:

****** intro

Semantic is a package that provides language-aware editing commands
based on /source code parsers/. Parsing is a process of analyzing source
code based on programming language syntax. Emacs understands your
source code through this process to provides features such as
contextual /code completion/, /code navigation/.

****** setup

#+BEGIN_EXAMPLE
  (require 'cc-mode)
  (require 'semantic)

  (global-semanticdb-minor-mode 1)
  (global-semantic-idle-scheduler-mode 1)

  (semantic-mode 1)
#+END_EXAMPLE

****** command: semantic-mode

This command activates semantic-mode. In Semantic mode, Emacs parses
the buffers you visit for their semantic content.

Notice that at the bottom, Emacs prints messages like this:

#+begin_latex
\begin{minted}[frame=leftline, mathescape]{text}
Parsing stl_list.h (LL)...done
\end{minted}
#+end_latex

This is common behavior of Semantic:  when you perform a jump to a
symbol or perform a completion, Semantic tries to be accurate by
parsing all the included files and all the included files in the
included files and so on, until it reaches the end:

You may worry that this process takes a long time. Sometimes, it
does. However, this is just a one time process. Once it is parsed,
Semantic will cache the parsing result for future use. The next time
you perform some action on the parsed code, such as code completion,
you will get your desired output instantly.

****** Command: global-semanticdb-minor-mode

As mentioned above, Semantic caches parsing result for future use. To
do that, /semanticdb-minor-mode/ must be activated. In Semantic DB mode,
Semantic parsers store results in a database, which can be saved for
future Emacs sessions. The cache is saved in directory specified by
semanticdb-default-save-directory variable. The default directory is
*~/.emacs.d/semanticdb* .

****** Command: global-semantic-idle-scheduler-mode

When /semantic-idle-scheduler-mode/ is enabled, Emacs periodically
checks to see if the buffer is out of date, and reparses while the
user is idle (not typing). When this mode is off, a buffer is only
reparsed when user explicitly issue some command.

With semantic-idle-scheduler-mode, Emacs keeps track live changes of
your source code.

****** Add more system include paths

By default, Semantic automatically includes some default system
include paths such as /usr/include, /usr/local/include… You can view
the list of include paths in
*semantic-dependency-system-include-path*. To add more include paths,
for example Boost include paths, use the function
/semantic-add-system-include/ like this:

#+BEGIN_EXAMPLE
(semantic-add-system-include "/usr/include/boost" 'c++-mode)
(semantic-add-system-include "~/linux/kernel")
(semantic-add-system-include "~/linux/include")
#+END_EXAMPLE

****** shortcuts                                              :shortcut:

|   | semantic-ia-fast-jump |
|   | semantic-ia-complete-symbol  |
** 2015/12/06
*** TOBECONTINED sed入门                                              :sed:
- State "TOBECONTINED" from "TODO"       [2015-12-06 日 11:09] \\
  了解了Sed的基本用法和正则，深入学习需要有使用的需求
CLOCK: [2015-12-06 日 10:38]--[2015-12-06 日 11:08] =>  0:30
**** reference

+ [[http://www.gnu.org/software/sed/][Homepage]]
+ [[http://www.yiibai.com/sed/][Tutorials]]
+ [[http://www.gnu.org/software/sed/manual/][Manual]]

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/6cbed3d0-87be-4f5b-8a5b-2fd887a946ac/?csrfBusterToken%3DU%253Db04339%253AP%253D%252F%253AE%253D151751b76dd%253AS%253Dac7631de678b37e0893833bb47b6dc2d][Intro]]

sed (stream editor) isn't an interactive text editor. Instead, it is
used to filter text, i.e., it takes text input, performs some
operation (or set of operations) on it, and outputs the modified
text. sed is typically used for extracting part of a file using
pattern matching or substituting multiple occurrences of a string
within a file.

*Sed* 表示 /流编辑器(Stream Editor)/ 的缩写。

这是一个简单但功能强大的工具，分析文本，并无缝地转换它。 SED是在
_1973-1974_ 年由 _贝尔实验室_ 的李E. _McMahon_ 开发。如今，它运行在所
有主要的操作系统。McMahon编写了一个通用的 /面向行的编辑器/ ，它最终成
为sed。sed借用语法和ed编辑许多有用的功能。自成立开始，对 /正则表达式/
有所支持。 _sed接受来自文件以及管道的输入。此外，它也可以接受来自标准
输入的数据流的输入_

sed是自由软件由基金会（ /FSF/ ）维护，它是由GNU/ Linux分发。因此，它通
常被称为GNU sed的。 _对于新手用户，sed语法看起来神秘。但是，一旦熟悉了
它的语法，就可以使用sed的几行脚本解决许多复杂的任务。_

sed典型用途, sed可以有许多不同的方式使用，例如：

- 文本替换
- 选择性打印的文本文件
- 一个就地文本文件的编辑
- 文本文件的非交互式的编辑等等。

**** install & check

1. Linux 发行版本默认安装
2. apt-get
3. [[ftp://ftp.gnu.org/gnu/sed/][source code]]

#+BEGIN_SRC sh :results output :exports both
sed --version
#+END_SRC

#+RESULTS:
#+begin_example
sed (GNU sed) 4.2.2
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jay Fenlason, Tom Lord, Ken Pizzini,
and Paolo Bonzini.
GNU版sed主页： <http://www.gnu.org/software/sed/>。
使用GNU软件所需帮助文档： <http://www.gnu.org/gethelp/>。
将错误报告通过电子邮件发送到：<bug-sed@gnu.org>.
请务必将单词“sed”放在标题的某处。
#+end_example

**** [[http://www.yiibai.com/sed/sed_workflow.html][工作流程]]

[[/home/ben/Wally/Journal/Figures/scrot/20587gGd.png]]

1. 读取

   sed从输入流(文件，管道，或标准输入)读取，并将其存储在其内部的缓冲模
   式称为缓冲行。

2. 执行

   所有sed命令顺序地对模式缓冲区使用。默认情况下，sed命令都适用于所有
   行(全局)，除非指定行寻址。

3. 显示

   sed发送(修改)的内容到输出数据流。在发送数据后，模式缓冲器是空的。这
   个过程一直重复，直到文件被耗尽。

**** sed --help

用法: sed [选项]... {脚本(如果没有其他脚本)} [输入文件]...

1. -n, --quiet, --silent

   取消自动打印模式空间

2. /-e 脚本, --expression=脚本/

   添加“脚本”到程序的运行列表

3. /-f 脚本文件, --file=脚本文件/

   添加“脚本文件”到程序的运行列表

4. --follow-symlinks

   直接修改文件时跟随软链接

5. -i[SUFFIX], --in-place[=SUFFIX]

   edit files in place (makes backup if SUFFIX supplied)

6. -l N, --line-length=N

   指定“l”命令的换行期望长度

7. --posix

   关闭所有 GNU 扩展

8. -r, --regexp-extended

   在脚本中使用扩展正则表达式

9. -s, --separate

   将输入文件视为各个独立的文件而不是一个长的连续输入

10. -u, --unbuffered

    从输入文件读取最少的数据，更频繁的刷新输出

11. -z, --null-data

    separate lines by NUL characters

12. --help

    打印帮助并退出

13. --version
    输出版本信息并退出

如果没有 -e, --expression, -f 或 --file 选项，那么第一个非选项参数被视为
sed脚本。其他非选项参数被视为输入文件，如果没有输入文件，那么程序将从标准
输入读取数据。

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/d9ac9d7e-5cb9-4c08-8aeb-4a7b738fb7a3/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D15175335524%3AS%3Dfc6c61e88fe18a62fe1fcc29f6b72dd0][基本命令]]

+ d 删除
+ w 写入
+ a 追加
+ c 修改
+ i 插入
+ y 转换
+ l 显示隐藏字符
+ q 退出
+ r 读
+ e 执行外部命令
+ N 操作多行

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/b7e85649-29a4-4e6c-b0a0-b7a8c5a58054/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D1517538ae33%3AS%3Dc5b81f7f21b546d60a3c70485c2d02b7][特殊字符]]

+ = 行号
+ & 替换

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/44b5a4ab-edb8-44f8-bd26-49f01f9a8449/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D151753acd19%3AS%3Db7b51c5421cb557f1e34b51a9886541e][正则表达式]]

1. 标准的正则表达式

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     + 行开始 (^)
     + 行尾 ($)
     + 单个字符(.)
     + 匹配字符集合 ([])
     + 独有集 ([^])
     + 字符范围 ([-])
     + 零到一次出现 (\?)
     + 一次或多次出现 (\+)
     + 零或多次出现 (*)
     + n个重复 {n}
     + 最少出现n个 {n,}
     + M到N次出现 {m, n}
     \end{minted}
   #+end_latex


2. 转义

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
        + "\"
        + "\n" 新行字符匹配。
        + "\r" 回车匹配。
        + 转义"\dnnn" 匹配一个字符的十进制ASCII码值
        + 转义 "\onnn" 匹配字符的八进制ASCII码值
     \end{minted}
   #+end_latex

3. 正则表达式的 POSIX 类

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     + [:alnum:] 这意味着按字母和数字字符
     + [:alpha:] 这意味着只有字母字符
     + [:blank:] 这意味着空白字符可以是任何空格或制表符
     + [:digit:] 这意味着只有小数
     + [:lower:] 这意味着只有小写字母
     + [:upper:] 这意味着只有大写字母
     + [:punct:] 它意味着标点符号包括非空格或字母数字字符
     + [:space:] 这意味着空格字符
     \end{minted}
   #+end_latex

4. 元字符

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     + 单词边界 (\b)
     + 非单词边界(\B)
     + 单空白 (\s)
     + 单非空白 (\S)
     + 单字字符 (\w)
     + 单非单词字符 (\W)
     + 模式空间的开始 (\`)
     \end{minted}
   #+end_latex

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/d6d0e355-984e-43fe-ab58-e1f750d23709/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D15175467fbf%3AS%3Db22c328957943d9b98cf17a0186628ac][管理模式]]

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/77001447-dee9-492c-ad22-3a99ca9e7d3c/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D15175474322%3AS%3Da31c3b6d37564d32ca8abbb68073027b][模式范围]]

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/84ae24db-72e4-423b-9f80-eaef02fa0674/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D15175482ecc%3AS%3D7ae4d46db25e178c91c0e287c68cadc1][模式缓冲区]]

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/dd36224a-3220-4d01-969f-b354cbd42c0c/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D1517549207f%3AS%3Dd2a7e7843f9728e054946c9edfeba5d4][字符串]]

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/1cb3dab6-6c9e-4966-9bfe-f56e36e82223/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D1517549de2e%3AS%3D16a629acaab5e78a8e6c1419f5adf978][分支]]

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/3f5d41e7-0e79-4c69-ad9f-40087ac85eb2/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D151754ad2cf%3AS%3Dee8de982e2e19928a4480d5a3445fa18][循环]]

**** [[https://app.yinxiang.com/shard/s52/nl/11551545/3ecd8012-44c1-4a1c-b997-c9dca09d17fe/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D151754bf96c%3AS%3D90d2cd00d1034b0b046191e363c10e3f][实用功能]] :sed:

*** DONE bash case语句                                               :case:
- State "DONE"       from "TODO"       [2015-12-06 日 11:17] \\
  了解了 case 语句的基本语法格式和基本用途


1. reference

   + [[https://app.yinxiang.com/shard/s52/nl/11551545/c4452b5d-c981-4d13-b7fd-d27677179695?title=7.3.%C2%A0%E4%BD%BF%E7%94%A8case%E8%AF%AD%E5%8F%A5_Bash%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97-shell%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97_Linux%20%E5%91%BD%E4%BB%A4_linux_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F__www.iteedu.com][bash::case]]

2. 语法

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     case EXPRESSION in
     CASE1) COMMAND-LIST;;
     CASE2) COMMAND-LIST;;
     ...
     CASEN) COMMAND-LIST;;
     esac
     \end{minted}
   #+end_latex

   + 每个分支是一个符合 /pattern/ 的表达式。
   + 在 COMMAND-LIST 中首先符合的的命令就执行。
   + /“|”/ 符号用来分割多个pattern，
   + /“)”/ 操作符中断一个pattern。
   + 每个分支加上他们的后继命令称作一个 子句 。每个 子句 必须以 /“;;”/ 结尾。
   + 每个 case 语句以 /esac/ 语句结束。

3. 例子

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{sh}
     #!/bin/bash

     # This script does a very simple test for checking disk space.

     space=`df -h | awk '{print $5}' | grep % | grep -v Use | sort -n | tail -1 | cut -d "%" -f1 -`

     case $space in
     [1-6]*)
       Message="All is quiet."
       ;;
     [7-8]*)
       Message="Start thinking about cleaning out some stuff.  There's a partition that is $space % full."
       ;;
     9[1-8])
       Message="Better hurry with that new disk...  One partition is $space % full."
       ;;
     99)
       Message="I'm drowning here!  There's a partition at $space %!"
       ;;
     ,*)
       Message="I seem to be running with an nonexitent amount of disk space..."
       ;;
     esac

     echo $Message | mail -s "disk report `date`" anny
     \end{minted}
   #+end_latex

4. 初始脚本通常利用 case 语句来启动，停止和查询系统服务

*** DONE [[https://app.yinxiang.com/shard/s52/nl/11551545/bbef3800-db30-4966-bc75-ce63217e2d19/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D1517559bd9e%3AS%3D4f423340d7084977e2b162680fdfe6c9][C++11 Thread]] :thread:cpp11:
- State "DONE"       from ""           [2015-12-06 日 11:24] \\
  仅限了解

C++11标准 /直接提供了并发编程的支持/ ，这是C++新标准中非常重要的部分，
可以极大的提高程序的 /可移植性/ 。

以前的多线程编程基本上依赖于特定的操作系统，比如Linux环境下使用
/pthread/ 库。

*** [[https://app.yinxiang.com/shard/s52/nl/11551545/7bb2be9a-d487-4905-9fcd-f69f48ecc287?title=%E3%80%90C%2B%2B11%E3%80%91%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94auto%E7%9A%84%E4%BD%BF%E7%94%A8%20-%20%E6%B8%85%E9%A3%8E%E5%B0%8F%E9%98%81%20-%20%E5%8D%9A%E5%AE%A2%E9%A2%91%E9%81%93%20-%20CSDN.NET][auto关键字]] :auto:cpp11:

有些高级特性知道即可，不需用完全掌握。

c++11中引入的auto主要有两种用途：
+ *自动类型推断*
+ *返回值占位*

auto在c++98中的标识临时变量的语义，由于使用极少且多余，在c++11中已被删
除。前后两个标准的auto，完全是两个概念。

*** DONE [[https://app.yinxiang.com/shard/s52/nl/11551545/49063b6f-c21c-4663-9120-3bbf64c00fc7?title=C%2B%2B11%E4%B8%AD%E7%9A%84%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0(lambda%E5%87%BD%E6%95%B0%2Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F)%20-%20Augusdi%E7%9A%84%E4%B8%93%E6%A0%8F%20-%20%E5%8D%9A%E5%AE%A2%E9%A2%91%E9%81%93%20-%20CSDN.NET][C++匿名函数]] :cpp11:lambda:
- State "DONE"       from ""           [2015-12-06 日 11:28] \\
  仅限了解，需要时再查阅，反正也记不住

C++11提供了对匿名函数的支持,称为Lambda函数(也叫Lambda表达式). Lambda表
达式具体形式如下:

#+begin_latex
\begin{minted}[frame=leftline, mathescape]{text}
[capture](parameters)->return-type{body}
\end{minted}
#+end_latex

#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{cpp}
  [](int i){return i%2;}
  \end{minted}
#+end_latex
　　　　
*** fritzing入门                                                 :fritzing:
CLOCK: [2015-12-06 日 11:32]--[2015-12-06 日 11:39] =>  0:07
**** reference

+ [[http://fritzing.org/home/][Homepage]]
+

**** intro

*Fritzing* is an /open-source/ hardware initiative that makes
electronics accessible as a creative material for anyone.

We offer a software tool, a community website and services in the
spirit of /Processing/ and /Arduino/, fostering a creative ecosystem
that allows users to /document/ their prototypes, /share/ them with
others, /teach/ electronics in a classroom, and layout and manufacture
professional pcbs.

Fritzing 是个电子设计自动化软件，是一个开源免费软件。它支持设计师，艺
术家，研究人员和爱好者参加从物理原型到进一步制作实际的产品。还支持用户
记录其Arduino和其他电子为基础的原型，与他人分享，在教室里教电子，并建
立一家生产印刷电路板的布局。

+ *实物电路图绘制软件*
+ 跨平台
+ 简单易用

**** install

apt-get 不要源码！！！

**** 使用

*要用时直接上手，不要教程*

*** EasyPG: 加密                                               :easypg:gpg:
**** 参考:

+ http://www.baidu.com/link?url=ej9AHfY5QR5sRKUofHUYRnu8U-G2A5BO5SghohjAKGLTVnlD2luM0JUO7Fa5mijPnVioLyZV4Xbxb5GkEQr9XINO1YRyYXavf0EtjUZckre&wd=emacs%20%E5%8A%A0%E5%AF%86&issp=1&f=8&ie=utf-8&tn=baiduhome_pg
+ [[http://www.emacswiki.org/emacs/EasyPG][EmacsWiki]]

**** overview
对于一些比较隐私的文件，比如说帐号、密码等，如果不用文件记下来则容易忘
记；而用普通文件记下来，总是觉得有点不放心，哪天电脑丢了怎么办？

Emacs 支持加密文件的操作，总的来说，比较好用的有下面这些方法.

**** ange-crypt

最简单的可能是 ange-crypt 包：

把下面的代码添加到 .emacs 文件里

用命令 *M-x ange-crypt-mode* 来启动这个模式。

**** EasyPG

应该是比较好用的，EmacsWiki 上也专门有相关的讨论
配置:

#+BEGIN_EXAMPLE
  (require 'epa-file)
  (epa-file-enable)
#+END_EXAMPLE

这样，打开或是保存以 .gpg 为后缀的文件，Emacs 就会提示输入加密用的
关键字。
注:

1) 如果希望在打开以 .gpg 为后缀的加密文件时，也能进入相应的 mode，
   我们只需要把 .gpg 作为普通文件的后缀添加到普通文件名后面。比如说，
   一个使用 org mode 文件原来应该命名为 test.org，现在我希望通过
   Emacs 来对它进行加密处理，则我可以把它保存为 test.org.gpg，这样
   下次打开该文件时，Emacs 会自动进入相应的 org mode。

2) 如果在使用 EasyPG 的时候，提示下面的错误byte-code: Opening
   output file: Searching for program, no such file or directory,
   gpg, 则表示没有安装 gpg 这个程序，可以下载安装。

   [[https://www.gnupg.org/][gpg]]: GnuPG is a complete and free implementation of the OpenPGP
   standard as defined by RFC4880 (also known as PGP).

3) 如果希望使用minibuffer输入passphrase，而不是弹出对话框的话，可以
   将环境变量 GPG_AGENT_INFO 清空。

   #+BEGIN_EXAMPLE
   (setenv "GPG_AGENT_INFO" nil)
   #+END_EXAMPLE

4) 默认使用对称加密

   每次保存加密文件，Emacs 都会弹出来问你要用什么方式来加密，很烦人！

   #+BEGIN_EXAMPLE
   (setq epa-file-encrypt-to nil)
   #+END_EXAMPLE

   这样就可以让 Emacs 每次都使用对称加密。

5) 保存时不提示加密

   每次保存加密文件的时候，Emacs 都要让你输一遍密码。我相信你不想每
   次保存文件的时候，都让你输一遍密码

   用下面的代码可以让 Emacs 记住密码并自动保存文档：
   #+BEGIN_EXAMPLE
     (setq epa-file-cache-passphrase-for-symmetric-encryption t)
     (setq epa-file-inhibit-auto-save nil)
   #+END_EXAMPLE

当然，不用担心，Emacs 只是在当前这次 Session 记住密码，下次你重启
Emacs 要再次打开这个文件的时候，Emacs 依然会向你要一次密码的。

*** python os                                                          :os:
**** os 方法和属性
+ os.curdir

+ os.pardir

+ os.getwd()

+ os.listdir()

  #+begin_latex
    \begin{minted}[frame=leftline, mathescape]{text}
    >>> help(os.listdir)
    Help on built-in function listdir in module posix:

    listdir(...)
        listdir(path) -> list_of_strings

        Return a list containing the names of the entries in the directory.

            path: path of directory to list

        The list is in arbitrary order.  It does not include the special
        entries '.' and '..' even if they are present in the directory.
    \end{minted}
  #+end_latex

+ os.path.exists(s)

+ os.path.isdir(s)
