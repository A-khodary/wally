#+LATEX_HEADER: \usepackage[boxed, lined]{algorithm2e}
# #+LATEX_HEADER: \usepackage{minted}
# #+LATEX_HEADER: \usepackage{float}
#+PORPERTY: RANDOM

# freemind
# .sdcv_history
# agenda
# obj

* Journal
** TASK

- [X] 处理邮递三方
- [X] 制连接线
- [ ] SLAM matlab 仿真
- [ ] 论文 outlier 剔除
- [X] 大脑疲劳时如何放松
- [ ] 淘宝上买元器件

** INBOX
# 存放当日能够在一刻钟之内处理完成的事务

** JOURNAL

*** Gratitude

** ROS

- sql http://wiki.ros.org/sql_database
- arbotix_python http://wiki.ros.org/arbotix_python?distro=indigo#Services
- Q&A
  - http://answers.ros.org/question/95486/hector-slam-with-turtlebot-in-gazebo/
  - http://answers.ros.org/question/46004/turtlebothector-slam-possibile-or-not/
- http://wiki.ros.org/hector_turtlebot
- http://wiki.ros.org/hector_turtlebot
- http://www.ros.org/news/2014/12/updated-package-razor-imu-9dof.html
-
  http://answers.ros.org/question/99211/how-to-combine-a-camera-image-and-a-laser-pointcloud-to-create-a-color-pointcloud/

** 2016

- [X] +dota2+
- [X] fcitx
- [X] +vim+

*** list

- [ ] <算法导论>
- [ ] makeups
- [ ] UTG 线

*** NEXT 使用 blender 制作 Mecanum 轮
- State "NEXT"       from "TODO"       [2016-01-30 六 15:46]
**** DONE 准备
- State "DONE"       from "TODO"       [2016-01-30 六 15:18]
- [X] blender + dae
- [X] 文献
- [X] matlab
- [X] wine + CAJ + FoxitReader
- [X] blender 本地教程

*** NEXT Thesis
- State "NEXT"       from "TODO"       [2016-01-30 六 15:46]
**** DONE preperation
- State "DONE"       from "TODO"       [2016-01-30 六 15:18]
- [X] workspace
- [X] texlive
- [X] emacs + auctex
- [X] wine + CAJ

*** NEXT Gazebo sim
- State "NEXT"       from "TODO"       [2016-01-30 六 20:18]
**** DONE preparation
- State "DONE"       from "TODO"       [2016-01-30 六 20:18]
- [X] gazebo models
- [X] gazebo doc

*** NEXT imusim
- State "NEXT"       from "TODO"       [2016-01-30 六 15:46]
**** DONE preperation
- State "DONE"       from "TODO"       [2016-01-30 六 15:24]
- [X] source code
- [X] matlab
- [X] book

*** NEXT algorithms
- State "NEXT"       from "TODO"       [2016-01-30 六 15:46]
**** DONE preperation
- State "DONE"       from "TODO"       [2016-01-30 六 15:26]
- [X] book in papaer

*** NEXT PF
- State "NEXT"       from "TODO"       [2016-01-30 六 15:46]
**** DONE preparation
- State "DONE"       from "TODO"       [2016-01-30 六 15:38]
- [X] blog
- [X] source
- [X] math textbook

*** NEXT SLAM sim
- State "NEXT"       from "TODO"       [2016-01-30 六 15:46]
**** DONE preparation
- State "DONE"       from "TODO"       [2016-01-30 六 15:28]
- [X] source code
- [X] matlab

*** NEXT SLAM python 2d
- State "NEXT"       from "TODO"       [2016-01-30 六 15:46]
**** DONE preperation
- State "DONE"       from "TODO"       [2016-01-30 六 15:27]
- [X] 视频
- [X] 源码
*** NEXT es tools
- State "NEXT"       from "TODO"       [2016-01-30 六 19:59]
**** DONE preparation
- State "DONE"       from "TODO"       [2016-01-30 六 19:59]
- [X] avr
- [X] arduino
- [X] cross-tool

*** TODO Deutsch

**** TODO preparation

- [ ] VM
- [ ] video course
- [ ] movie
- [ ] audio  & article slown genmen

*** TODO PCL

**** DONE preparation

- State "DONE"       from "TODO"       [2016-02-06 六 16:46]
- [X] lib
- [X] rospack
- [X] doc/ref
- [X] qtcreator

**** pcltk
*** matplotlib

* Week
** 2016/02/28
*** ndiswrapper                                  :ndiswrapper:wifi:ndisgtk:
:NOTE:
简单地尝试了下配置USB无线网卡，没有成功，比较繁琐，而且不见得有必要。2016/02/27
:END:

- [[http://ndiswrapper.sourceforge.net/wiki/index.php/Main_Page][SourceForge]]
- [[https://wiki.archlinux.org/index.php/Wireless_network_configuration_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)][ArchLinux]]
- [[https://help.ubuntu.com/community/WifiDocs/Driver/Ndiswrapper][HowTo]]
- [[https://en.wikipedia.org/wiki/NDISwrapper][WikiPedia]]

ndiswrapper: Linux 使用仅提供 Windows 驱动的无线网卡

如果列表中没有，可能你的设备只提供了 Windows 驱动(比如 Broadcom, 3com
等)。这时需要用 ndiswrapper.Ndiswrapper 可以在 Linux 中使用 Windows 驱
动。兼容性列表在 这里. 需要
Windows 中安装的 .inf 和 .sys 文件。如果有更新的网卡，请通过互联网搜索
型号名称 + 'linux' 以获取更多信息。

There is also a graphical interface for ndiswrapper that you can use
called *ndisgtk*.

*** 细嚼慢咽

1. 于消化有益
2. 于增重有益

*** 使用虾米收藏歌词

虾米每首歌的页面上都有歌词，首次听歌的时候可以同时浏览这个页面，将喜欢
的歌词保存下来。用 org-mode 整理收藏。

*** 微信备份

1. 使用云端暂时备份
2. 使用腾讯电脑管家备份
   - 路径： C:\ProgramData\Tencent\WechatBackup\Data\qf1043728967
3. 手动备份

*** Evernote 与Weibo

1. 长微博

   搜索文字原文，找干净的页面收藏

2. 视频与注释

   收藏视频网址，并将微博中有用的信息添加为注释

3. 图片

   如果值得收藏的话，则手动整理为 Evernote 笔记

*** fdsl
【年龄称谓】男子20岁称弱冠，30岁称而立，40岁称不惑，50岁称知天命，60岁称耳顺。70岁称古稀，80岁称杖朝。90岁称合耄耋。100岁称乐期颐。女子12岁称金钗之年，13岁称豆蔻年华，15岁称及笄之年，16岁称碧玉年华，20岁称桃李年华，24岁称花信年华，出嫁女子称梅之年。

** 2016/02/26
*** progress - Coreutils Progress Viewer                      :cv:progress:
**** What is it?

This tool can be described as a *Tiny*, Dirty, Linux-and-OSX-Only C
command that looks for coreutils basic commands (cp, mv, dd, tar,
gzip/gunzip, cat, etc.) currently running on your system and displays
the *percentage* of copied data. It can also show *estimated time* and
*throughput*, and provides a "top-like" mode (monitoring).

#+CAPTION: progress screenshot with cp and mv

[[https://raw.github.com/Xfennec/progress/master/capture.png]]
/(After many requests: the colors in the shell come from
[[https://github.com/milkbikis/powerline-shell][powerline-shell]]. Try
it, it's cool.)/

Formerly known as cv (Coreutils Viewer).

**** How do you build it?

#+BEGIN_EXAMPLE
    make && make install
#+END_EXAMPLE

It depends on library ncurses, you may have to install corresponding
packages (may be something like 'libncurses5-dev' or 'ncurses-devel').

**** How do you run it?

Just launch the binary, =progress=.

**** What can I do with it?

A few examples. You can:

-  monitor all current and upcoming instances of coreutils commands in a
   simple window:

   #+BEGIN_EXAMPLE
       watch progress -q
   #+END_EXAMPLE

-  see how your download is progressing:

   #+BEGIN_EXAMPLE
       watch progress -wc firefox
   #+END_EXAMPLE

-  look at your Web server activity:

   #+BEGIN_EXAMPLE
       progress -c httpd
   #+END_EXAMPLE

-  launch and monitor any heavy command using =$!=:

   #+BEGIN_EXAMPLE
       cp bigfile newfile & progress -mp $!
   #+END_EXAMPLE

and much more.

**** How does it work?

It simply scans =/proc= for interesting commands, and then looks at
directories =fd= and =fdinfo= to find opened files and seek positions,
and reports status for the largest file.

It's very light, and compatible with virtually any command.

**** help

progress - Coreutils Viewer
---------------------
Shows progress on file manipulations (cp, mv, dd, ...)

Monitored commands (default):
cp mv dd tar cat rsync grep fgrep egrep cut sort md5sum sha1sum sha224sum sha256sum sha384sum sha512sum adb gzip gunzip bzip2 bunzip2 xz unxz lzma unlzma zcat bzcat lzcat

Usage: progress [-qdwmM] [-W secs] [-c command] [-p pid]
  -q --quiet                 hides all messages
  -d --debug                 shows all warning/error messages
  -w --wait                  estimate I/O throughput and ETA (slower display)
  -W --wait-delay secs       wait 'secs' seconds for I/O estimation (implies -w, default=1.0)
  -m --monitor               loop while monitored processes are still running
  -M --monitor-continuously  like monitor but never stop (similar to watch progress)
  -c --command cmd           monitor only this command name (ex: firefox)
  -p --pid id                monitor only this process ID (ex: `pidof firefox`)
  -i --ignore-file file      do not report process if using file
  -o --open-mode {r|w}       report only files opened for read or write
  -v --version               show program version and exit
  -h --help                  display this help and exit

*** Matlab GUI
**** Matlab 字体设置                                                :font:

1. 设置方法：  preferences - fonts

2. 默认字体： Monospaced Plain  10; SansSerif Plain  10
   [[http://zhidao.baidu.com/link?url=fTTgbfe_ldiDhi_se_YZFSgWgdtJhAf8BbRfpf_A2gbMRC7RFZoGw4upGROg_TiS6MV66admM5FRVkr5-NoS1a][百度知道]]

3. 默认字体看着就很舒服，字体调到 11 号

**** Frame 布局(Layout)

C-S-m 切换到最在化

*** [[http://www.52souji.net/my-own-standards-for-comment-of-matlab-function/][MATLAB函数头注释规范]]

注释在编写程序的过程中是至关重要的，尤其是算法比较复杂的程序。除非，你
确定你以后一定不会再看这段程序，也不打算让任何人理解你的这段程序。

MATLAB的函数注释是非常重要的。我们通常 *help* 一个函数看到的信息就是这
个函数的函数头注释。

下面是我在写MATLAB程序过程总结出来的函数头的注释规范，是为了方便自己以
后忘了以后查找，如果你恰巧看到这篇文章，也算给你一点参考。

我将MATLB函数头注释分为以下几个部分：

1. 函数功能简要说明
2. 函数参数简要介绍
3. 举例
4. 注意事项或者建议
5. 版权信息
6. 日志信息

在不同的注释部分之间最好能够空一行，但为了能够保证注释的连续性，仍然保
持这一行为注释行。每一部分的注释，如果有二级信息，可以空两格进行缩进。

版权信息中最好能够留着邮箱，这样方便使用你的代码的人在遇到问题时跟你联
系，但为了防止垃圾邮件，一般用#替换@。

因为日志信息是以后修改可能性比较大的部分，所以用两行注释号突出显示。

下面是一个例子。

#+BEGIN_EXAMPLE
    function xyz2lmp(f_xyz)
    % Convert .xyz file to lammps data file.
    %
    % xyz2lmp(f_xyz)
    %   f_xyz: name of the input .xyz file.
    %
    % Example:
    %   xyz2lmp('PdAu.xyz')
    %
    % NOTE: The second line must be in specified format as:
    %   PdAu xlo xhi ylo yhi zlo zhi
    %
    % Email: xianbao.d # gmail.com
    % Website: http://www.52souji.net/
    %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % log:
    % 2011-05-04: Complete
    % 2012-08-16: Modify the description and comments
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#+END_EXAMPLE

*** org-toggle-latex-fragment

It is bound to C-c C-x C-l.

(org-toggle-latex-fragment &optional ARG)

Preview the LaTeX fragment at point, or all locally or globally.

**** org-preview-latex-fragment

(org-preview-latex-fragment &optional ARG)

*This function is obsolete since 24.4;*
use `org-toggle-latex-fragment' instead.

**** error

https://lists.gnu.org/archive/html/emacs-orgmode/2015-10/msg00037.html

#+BEGIN_EXAMPLE
Debugger entered--Lisp error: (wrong-type-argument number-or-marker-p nil)
  >=(nil 123889)
...
#+END_EXAMPLE

不明所以，可能是没有配置好。还是使用 org-preview-latex.
Woops org-preview-latex-fragment 出现同样错误。。。
重新启动 Emacs 解决问题。。。。

**** +settings+

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map "\C-c\C-x\C-l" nil) ; disable keybinding of org-toggle-latex-fragment
  (define-key org-mode-map "\C-c\C-x\C-l" 'org-preview-latex-fragment)
#+END_SRC

*** org-toggle-inline-images

It is bound to *C-c C-x C-v*

C-c C-x 也是十分常用的热键绑定前缀

*** Foxit Reader 切换标签页热键

C-<TAB>

*** yasnippet 在自动展开时与 smartparens 冲突，键入 [ 时有错误

** 2016/02/25
*** Linux 虚拟化                                                   :vm:kvm:

keywords:  kvm,


- [[https://www.ibm.com/developerworks/cn/linux/theme/virtualization/][IBM:Linux 虚拟化技术]]
- [[https://www.zhihu.com/question/19880359][知乎:Xen KVM 等虚拟化技术在服务器上有哪些应用？
]]- [[http://dockone.io/article/871][Ubuntu创始人 ：Linux容器将完全颠覆虚拟化
]]

**** [[http://os.51cto.com/art/201005/198264_all.htm][六大Linux虚拟化技术]]

Linux虚拟化技术已经不是什么新鲜的技术，对于模拟、平台和操作系统虚拟化，
这三个大家都熟悉的虚拟化技术之外还有其他的虚拟化技术如，CoLinux、用户
模式Linux以及Wine和Cygwin，这些技术都将推动虚拟化技术的发展。

关于Linux虚拟化的优势我们大家已经有所了解。目前使用最多的虚拟化操作系
统还是Windows系列，但是Linux的成长速度是惊人的，大有替代Windows的趋势。

关于Linux虚拟化技术大致上可以分为六个不同的方式。在本文中，我们将讨论
实现Linux虚拟化的这六种方式，以及Linux下的多种虚拟化解决方案。


当我们讨论虚拟化解决方案的时候，常常都要提到具体厂商的具体产品，但是当
我们提及Linux虚拟化解决方案的时候，我们更乐意讨论广泛而多样化的开源生
态系统。Linux支持多种虚拟化平台，并延伸出多种技术，同样也是一个完整方
案的一个元素。


***** 虚拟化—老树开新花

虽然虚拟化现在如此的流行，但虚拟化不是一个新的技术，早在半个世纪之前
IBM就已经开始部署虚拟化。最早虚拟化技术是在IBM M44计算机上进行实验，然
后在IBM System/360大型机产品上开始普及。最早的真正意义上的整体应用虚拟
化的硬件平台是IBM CP-40系统，在上世纪60年代末被用在商业应用上。

虚拟化包含多个层面，比如硬件虚拟化，这种虚拟化从底层的硬件平台直接支持
软件环境；另外一种是操作系统虚拟化，这是Linux的一个亮点。

在硬件层之上，独立于操作系统的一层软件被称之为hypervisor，或者叫做虚拟
机监视器。hypervisor创建了虚拟化平台，而操作系统实例则运行在这个平台上，
这使得硬件平台可以被多个操作系统和应用所共享，从而降低硬件的成本。

运行在hypervisor上面的实体被称为虚拟机，即VM，是用来放置操作系统、应用
和数据元的“容器”。虚拟机中的操作系统和应用程序的数据被存储在虚拟磁盘
中，hypervisor利用虚拟磁盘来启动虚拟化平台。虚拟机被封装为一个文件，这
样比分布式的文件更好管理。


#+DOWNLOADED: http://images.51cto.com/files/uploadimg/20100506/1019430.jpg @ 2016-02-25 10:18:34
 [[~/Wally/Journal/Figure/.org-download/Journal/1019430_2016-02-25_10:18:33.jpg]]
本地虚拟化和主机虚拟化模型


早期的虚拟化模型被称为Type 1，或者叫本地虚拟化（native virtualization），
这种模型下hypervisor直接运行在硬件之上，在hypervisor上面是虚拟机。

后来出现了主机虚拟化（hosted virtualization）模式，被称为Type 2，
hypervisor运行在操作系统之上，在同一平台上允许两个或更多的操作系统共存。

***** Linux虚拟化技术基础

了解了有关虚拟化的一些基本知识后，我们进入正题，来讨论一下Linux虚拟化
的一些知识。首先是模拟（Emulation），是将一个操作系统（Host）的服务转
换并显示成另一个操作系统（Guest）的过程，Host和Guest系统不一定是相同的，
比如，Host系统可能是x86平台，可以提供PowerPC平台的模拟，即使是指令和架
构完全不相同。

另外，hypervisor的模拟器（emulator）可以提供多个平台的模拟，比如下面的
图例，在Host系统上可以仿真出PowerPC和ARM系统。模拟过程并不仅限于Type 2
虚拟化模型，在虚拟化技术中都存在这个过程。


#+DOWNLOADED: http://images.51cto.com/files/uploadimg/20100506/1019431.jpg @ 2016-02-25 10:19:10
 [[~/Wally/Journal/Figure/.org-download/Journal/1019431_2016-02-25_10:19:10.jpg]]
虚拟化模型中的模拟过程

Linux中最流行的两个模拟器（emulator）包括QEMU和Bochs（处理器和平台模拟
器）。这种解决方案的优点是它们是非常“轻便的”，可以支持在不同的Host操
作系统和平台上运行不同的Guest操作系统。而这种解决方案的缺点在于由于要
模拟指令，导致效率比较低。QEMU通过动态编码转换的模拟方式，让内核和内部
用户代码可以被加速。另外，QEMU是一个很好的嵌入式平台开发工具，可以为与
主机相异的CPU开发和测试代码。QEMU还可以被用来其他虚拟化解决方案来进行
设备模拟。

***** 平台虚拟化

更加传统的虚拟化解决方案是平台虚拟化，或者叫做硬件虚拟化，具有两种主要
的形式，完全虚拟化（ full-virtualization）和半虚拟化
（para-virtualization）。

完全虚拟化，虚拟化平台通过hypervisor来承载虚拟机（VM），完全虚拟化的关
键在于这些虚拟机，也就是运行在这些虚拟机里面的操作系统可以在hypervisor
上运行，并且不被修改，这在需要一个真正的虚拟平台时是非常理想的，但这种
模式具有一个缺点。

在完全虚拟化下虚拟机VM会把虚拟平台当作物理平台，工作在虚拟平台上的
Guest操作系统驱动就好像运行在真实的硬件之上。但需要考虑这意味着什么，
Guest操作系统和虚拟平台之间通讯就好像和真实平台一样，在hypervisor里面
存在着另外一个模拟层，模拟硬件平台并转发虚拟机对硬件的访问，就好像虚拟
机直接在使用真实的硬件。这个过程需要大量的处理，会限制Guest系统的I/O性
能。

解决这个问题的一个方法就是让Guest操作系统意识到自身是被虚拟化的，这种
形式被称作半虚拟化（para-virtualization），如下图，在这种模式下，Guest
系统包含了缩短硬件访问过程所需的驱动程序，这让把Guest系统从不必要的工
作中解放出来，来进行更高级别的工作。


#+DOWNLOADED: http://images.51cto.com/files/uploadimg/20100506/1019432.jpg @ 2016-02-25 10:20:05
 [[~/Wally/Journal/Figure/.org-download/Journal/1019432_2016-02-25_10:20:05.jpg]]
两种平台虚拟化方式

虽然完全虚拟化是一个理想的方案，但是通过修改Guest操作系统可以最大限度
的减少处理开销，获得相当大的性能提升。

Linux包含两个重要的解决方案，可以同时实现完全虚拟化和半虚拟化。如
Citrix的Xen是一个流行的解决方案，可以同时执行Type1和Type2型hypervisor，
Amazon的EC2就采用Xen来进行服务器的虚拟化。

另一个重要的hypervisor是Linux Kernel Virtual Machine（KVM），同样都支
持本地虚拟化和主机虚拟化模型。KVM是有特点的，它通过夹在内核模块可以对
Linux内核进行小的修改，从而变成一个全特性的hypervisor。KVM通过应用
virtio可以支持半虚拟化，在Guest系统中包括用于半虚拟化的标准Linux驱动。

KVM也是第一个完全集成在主线内核（mainline kernel）的hypervisor，由Rad
Hat开发，在一些关键领域被采用，比如IBM对云计算的开发和测试中。

需要注意的是无论是完全虚拟化还是半虚拟化，每种解决方案都应用了硬件协助
虚拟化（hardware-assisted virtualization）。目前新的AMD和英特尔CPU都集
成了优化hypervisor的指令集，来增强Guest虚拟机的I/O性能。

***** 操作系统虚拟化

操作系统虚拟化是另外一个重要的虚拟化技术，正如其名，是对操作系统本身进
行虚拟化，而不是平台。在这种方式下，操作系统提供一组用户空间
（User-Space）彼此隔离，而应用被限制在每个用户空间里面，就好像一个独立
的主机。这种形式的虚拟化在虚拟主机环境中非常流行，让多个独立的用户可以
共享一个操作系统。


#+DOWNLOADED: http://images.51cto.com/files/uploadimg/20100506/1019433.jpg @ 2016-02-25 10:20:34
 [[~/Wally/Journal/Figure/.org-download/Journal/1019433_2016-02-25_10:20:34.jpg]]
操作系统虚拟化

操作系统虚拟化依赖于可以创建和隔离用户空间（或者叫做容器或者私有虚拟服
务器）的Linux内核，OS虚拟化最大的好处在于几乎没有任何开销，因为用户只
是简单的共享OS和主机，而不需要通过虚拟机。而缺点在于目前我们采用的OS虚
拟化解决方案缺乏灵活性，不能在任意的操作系统上实施，用户共享主机和操作
系统还需要注意版本。尽管有这些不足，服务器虚拟化还是应用的非常广泛。

Linux包含很多的操作系统解决方案，具有很高的可配置性。比如OpenVZ、
Linux-VServer和FreeVPS是其中三个最流行的，均支持CPU、内存网络、I/O和存
储配额配置，OpenVZ还支持主机之间的在线VPSes迁移。


***** 其他Linux虚拟化技术

在上面的文章中，我们讨论了模拟、平台虚拟化和操作系统虚拟化，这三种是最
常用的虚拟化技术，除此之外，还有很多其他种类的虚拟化技术可以满足我们的
需求，下面我们来看看几种不同于之前谈论范畴的虚拟化技术。

****** CoLinux

CoLinux，或者叫做协作Linux，是一种利用协作虚拟机的虚拟化方式。在
CoLinux模式下，Linux Guest系统运行在微软Windows操作系统之上，共享底层
的硬件资源。CoLinux需要Guest系统（即CoLinux本身）被修改，让它认为自己
运行在其他操作系统之上。CoLinux是一种半虚拟化的方式，是将Windows作为
Host操作系统，并且每个Host系统上只能运行一个CoLinux实例。由于这种限制，
CoLinux被定义为一种特别的虚拟化技术。


#+DOWNLOADED: http://images.51cto.com/files/uploadimg/20100506/1019434.jpg @ 2016-02-25 10:21:04
 [[~/Wally/Journal/Figure/.org-download/Journal/1019434_2016-02-25_10:21:04.jpg]]
CoLinux：特别的半虚拟化架构

****** 用户模式（User-Mode）Linux

用户模式（User-Mode）Linux，即UML，和CoLinux有些类似，但是更加灵活。如
上图右边的架构，UML允许在一个Linux Host系统上运行多个Linux Guest操作系
统，UML也是一种半虚拟化架构，实现更好的性能。UML吸引人的一个方面是可以
支持更高一层的UML，所以运行在Linux Host操作系统上的UML Guest内核可以支
持更高级别的UML Guest系统。

****** Wine和Cygwin

Wine和Cygwin也是有趣的虚拟化解决方案，Wine实际上是“Wine is Not an
Emulator”的缩写，表示“不是一个模拟器”，是在Linux Host操作系统上运行
Windows应用的一种方式。Wine并不是完全的表现为Windows应用的模拟层，而是
一个DLL（动态链接库）层来表示Windows API。


#+DOWNLOADED: http://images.51cto.com/files/uploadimg/20100506/1019435.jpg @ 2016-02-25 10:21:32
 [[~/Wally/Journal/Figure/.org-download/Journal/1019435_2016-02-25_10:21:32.jpg]]
Wine和Cygwin虚拟化方案

Cygwin是与之相反的解决方案，即在Windows上运行Linux应用，这是由Rat Hat
开发，这是一种模拟的Unix环境，允许在Windows平台上开发Unix应用，比如
POSIX以及其他类Unix工具。

***** Linux虚拟化的未来

在虚拟化领域，Linux虚拟化增长的很快速，不仅仅是对核心组件基于Linux的
hypervisor的开发，还包括Linux虚拟化生态系统中的其他部分，包括工具和管
理应用程序的开发。Linux虚拟化能够延伸出多种虚拟化技术，将不断的推动虚
拟化技术的前进发展。

*** org drawer                                                     :drawer:

[[file:~/Wally/Reference/Manual/OrgManual.pdf::%25PDF-1.4%0D][Org-manual:Drawer]]

*热键*

org-insert-draw C-c C-x d

*Property*

*控制export*

org-export-with-drawers. In that case, drawer contents will appear in
export output.

*LOGBOOK* [[help:org-log-into-drawer]]

存放 TODO state 和 clock time

#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer "LOGBOOK")
#+END_SRC

**** DONE test ok
:LOGBOOK:
- State "DONE"       from ""           [2016-02-25 四 16:19] \\
  测试配置是否正确
:END:

** 2016/02/23
*** 钽电容正负极


#+DOWNLOADED: http://c.hiphotos.baidu.com/zhidao/wh%3D600%2C800/sign=c6a0274c5bb5c9ea62a60be5e5099a38/8601a18b87d6277f6c14237f28381f30e924fc77.jpg @ 2016-02-23 13:41:52
 [[~/Wally/Journal/Figure/.org-download/Journal/8601a18b87d6277f6c14237f28381f30e924fc77_2016-02-23_13:41:51.jpg]]
*** 二极管正负极

- [[http://jingyan.baidu.com/album/ceb9fb10ef5df28cad2ba0a0.html?picindex=1][百度经验]]

方法一：对于普通二极管，可以看管体表面，有白线的一端为负极。

[[/home/wally/Wally/Journal/Figure/scrot/2194lmT.png]]

方法二：对于发光二极管，引脚长的为正极，短的为负极。

[[/home/wally/Wally/Journal/Figure/scrot/2194ywZ.png]]


方法三：如果引脚被剪得一样长了，发光二极管管体内部金属极较小的是正极，
大的片状的是负极。

[[/home/wally/Wally/Journal/Figure/scrot/2194_6f.png]]

方法四：如果眼睛近视看不清，也可打开万用表，将旋钮拨到通断档，将红黑表
笔分别接在两个引脚。若有读数，则红表笔一端为正极；若读数为“1”，则黑
表笔一端为正极。

[[/home/wally/Wally/Journal/Figure/scrot/2194MFm.png]]
*** 网址是否区分大小写

[[http://www.zhihu.com/question/19572705/answer/12255483][知乎]]

*网址的基本结构是：[协议]://[域名]/[路径]*

*协议和域名部分不分大小写。路径部分是否区分大小写则不一定，要看具体网站后台是如何实现的。*

比如，如果服务器是直接将路径映射到文件系统中去找，则
不同平台上有不同实现：Mac OS X 默认的文件系统（HFS case-insensitive)
是不分大小写的、Windows 上的 NTFS 也是。而 Linux 系统常用的 ext3/4 则
是需要区分大小写的。所以如果服务器不做额外的操作，则会根据文件系统不同
有不同效果。而像知乎这种应用服务器则又有不同。此时路径并不指向文件系统
的某个文件，而是作为字符串交有应用来处理。比如，知乎使用的 Tornado 服
务器是使用正则表达式来进行匹配路径。正则表达式可以通过不同写法或者标志
符来控制是否区分大小写。继新提到的很多短链接服务区分路径大小写，这是为
了增加字符基数、缩短地址长度做出的取舍。假设只使用数字和字母做路径部分，
如果不区分大小写，则只有 10+26 = 36 个字符可以使用。 5 个字符长的地址
就只能有 36^5 = 60 466 176 种组合。而若区分大小写，则有 10 + 26 + 26 =
62 个字符可用，同样 5 个字符长的地址就有 62^5 = 916 132 832 种组合。短
链接地址为了尽可能短，必须要增大基数，因此选择了区分大小写。如果网址只
是给机器使用的话，可以不用计较是否大小写。但实际上难免会遇到要将网址通
过手工输入到地址栏的情况（比如将印刷的地址抄写到浏览器中访问）。为了易
用性的考虑，在条件允许的情况下应该尽可能的不区分大小写。如果需要区分，
则尽可能要对不同写法的地址进行重定向。知乎在这一点上就做得不是很好，比
如这个问题如果通过 http://www.zhihu.com/Question/19572705 就无法访问。
应该修改 Tornado 服务器的正则表达式设置，使其能匹配大写、混合大小写的
地址，或者自动将混合大小写的地址重定向到
http://www.zhihu.com/question/19572705

*** Ubuntu 版本升级

- http://www.ithome.com/html/soft/81883.htm

4月17日，开源免费系统Ubuntu 14.04 LTS（代号Trusty Tahr）正式发布下载。
那对于Ubuntu 13.04/13.10用户来说，如何快速升级至Ubuntu 14.04 LTS平台？
是否支持保留当前个人数据？

据国外noobslab网站介绍，Ubuntu任何老版本都可以免费升级至Ubuntu 14.04平
台，整个升级流程也非常便捷，无需下载离线系统镜像安装，只需使用到Ubuntu
的 *软件更新器* 。下面，IT之家也为Ubuntu新老用户整理对应的升级操作步骤，
具体参考如下


*注：升级可能存在各类未知风险，请及时备份本地的数据。*


1、打开Ubuntu左侧面板，搜索并运行软件更新器；

2、打开软件更新器的设置；

3、切换至“其他软件”，禁用或删除当前系统的所有第三方软件源；

4、随后，切换至软件和更新的“更新”页面，将有新版本通知我：更改为适用任何新版本；

5、关闭所有窗口，重新运行Ubuntu软件更新器，立即安装对应的升级更新，即可快速升级至Ubuntu 14.04平台。

*** Ubuntu 内核升级

- http://www.ahlinux.com/start/base/21683.html
- http://os.51cto.com/art/201510/493555.htm

*没有必要为啥要升级内核呢? 好像新的特性你能用上似的!(2016/02/23)*

在google一搜“Ubuntu 内核升级”有366000条结果,
我为什么还要写这么一篇呢？因为搜索结果基本都是针对某一个内核写的文章，
我想写的是无论你是哪一个版本（不过我只确定LTS有效）看到以后都有用的文章。

那么在Ubuntu上升级内核( =跨版本升级= ，安全更新不在本文范围内)有哪些方式呢？
下面就容我一一道来：

**** 1, apt-get升级， 难度☆

Ubuntu的LTS版本都会提供新版本的内核，
而不是像RedHat那样把新内核的代码提取出来放到当前发布的内核中保持主版本号不变，
Ubuntu可能是没有那么大人力物力财力？好吧， 闲话少说， 以14.04为例，
首先我们来看看源列表中存在的可安装内核(LTS支持)：

#+BEGIN_EXAMPLE
    $ apt-cache search linux-generic-lts
    linux-generic-lts-quantal - Generic Linux kernel image and headers
    linux-generic-lts-quantal-eol-upgrade - Complete Generic Linux kernel and headers
    linux-generic-lts-raring - Generic Linux kernel image and headers
    linux-generic-lts-raring-eol-upgrade - Complete Generic Linux kernel and headers
    linux-generic-lts-saucy - Generic Linux kernel image and headers
    linux-generic-lts-saucy-eol-upgrade - Complete Generic Linux kernel and headers
    linux-generic-lts-trusty - Generic Linux kernel image and headers
    linux-generic-lts-utopic - Complete Generic Linux kernel and headers
#+END_EXAMPLE

看最下面， 哦，
目前除了随14.04发布的3.13版本的内核还可以选择安装随utopic发布的3.16版本的内核(更低版本的内核我就不说啦，
嗯， 这里是讲升级内核的嘛)， 所以如果想安装3.16的内核就执行

#+BEGIN_EXAMPLE
    sudo apt-get install linux-generic-lts-utopic
#+END_EXAMPLE

好了， 坐等完成， 重启以后就是了。

**** 2, 自行下载安装， 难度☆☆

Ubuntu官方发布到源里的内核优点就是有安全更新( sudo apt-get dist-upgrade
)， 缺点是总不是最新的， 好吧， 我想体验一下最新内核！

首先访问
[[http://kernel.ubuntu.com/%7Ekernel-ppa/mainline/daily/current/][Ubuntu每日内核更新的站点]]
， 下载三个包：

#+BEGIN_EXAMPLE
    mkdir tmp_kernel
    cd tmp_kernel

    # 一个是linux-headers-xxxxx_amd64.deb结构命名的， 如果你是32位机器就选linux-headers-xxxxx_i386.deb， 下同
    wget http://kernel.ubuntu.com/~kernel-ppa/mainline/daily/current/linux-headers-3.19.0-999-generic_3.19.0-999.201501100206_amd64.deb
    # 这个是 linux-headers-xxxxx_all.deb结构命名的
    wget http://kernel.ubuntu.com/~kernel-ppa/mainline/daily/current/linux-headers-3.19.0-999_3.19.0-999.201501100206_all.deb
    # 这个是linux-image-xxxxx-_amd64.deb结构命名的
    wget http://kernel.ubuntu.com/~kernel-ppa/mainline/daily/current/linux-image-3.19.0-999-generic_3.19.0-999.201501100206_amd64.deb
#+END_EXAMPLE

你可能还看到了 * -lowlatency- * 结构命名的内核， 说实话我没用过， 可以
[[http://askubuntu.com/questions/126664/why-to-choose-low-latency-kernel-over-generic-or-realtime-ones][看这里]]
,
大概是像录音设备之类的需要这种低延迟的[[http://www.ahlinux.com/start/kernel/][内核]]？这个内核更费电，
对于我们笔记本或台式机还是用不着的。

下载过来以后执行 dpkg -i *.deb (你要保证该目录下没有其他.deb，
要不然就一起被安装了), 再执行 sudo up[[http://www.ahlinux.com/start/cmd/9059.html][date]]-grub ,
重启就可以了。

**** 3， 自行编译内核, 难度☆☆☆

这种方式适用于需要高度定制内核(或精简内核)的人群，
但是本文目的是作为一篇通用的文章，
所以这种方法就不多说了。下面我针对几个特定内核给出一些链接吧：

*** Linux 修改卷标

- [[http://blog.chinaunix.net/uid-20321915-id-1966428.html][linux 修改分区卷标 ( Partition Label )]]

傻瓜方式 : Windows 格式化时设置卷标名称.(2016/02/23)

**** Fat16/Fat32格式

#安装
$ sudo apt-get install mtools

#新建配置文件
$ cp /etc/mtools.conf ~/.mtoolsrc

#编辑刚复制的”~/.mtoolsrc”文件,在最後一行加入如下命令行：
drive i: file="/dev/sda2" //里面的”/devsda2”应根据实际情况更改为你要
改的盘

#更改命令提示符路径到”i:”盘：
$ mcd i:

#查看”i:”当前的卷标
$ sudo mlabel -s i:

#更改”i:”盘原始卷标为你喜欢的新卷标名：
$ sudo mlabel i: newLabelName

**** NTFS格式

#安装
$ sudo apt-get install ntfsprogs

#修改
sudo ntfslabel /dev/sda1 newLabelName //里面的"/dev/sda1"应根据实际情况修改

**** ext2/ext3格式

使用内置命令

$ sudo e2label /dev/sda1 newLabelName
** 2016/02/24
*** PIL : Python Image Library                                  :pil:image:

**** overview

[[http://www.pythonclub.org/modules/pil/start][Python 图像处理模块 PIL(Python Image Library)]]

***** 简介

这两天用python写一个程序,需要对各种格式的图片进行一些简单的处理,采用了Python
Imaging Library
(PIL)库,这个库可用于图片的一些常用操作,比如改变图片格式、尺寸、色彩、旋转等。

-  pil站点:
   [[http://www.pythonware.com/products/pil/index.htm][http://www.pythonware.com/products/pil/index.htm]]
-  pil下载:
   [[http://effbot.org/downloads/Imaging-1.1.6.tar.gz][http://effbot.org/downloads/Imaging-1.1.6.tar.gz]]
-  pil文档:
   [[http://www.pythonware.com/library/pil/handbook/index.htm][http://www.pythonware.com/library/pil/handbook/index.htm]]

***** 安装

#+BEGIN_EXAMPLE
    $ gunzip Imaging-1.1.6.tar.gz
    $ tar xvf Imaging-1.1.6.tar
    $ cd Imaging-1.1.6
    $ python setup.py build_ext -i
    $ python selftest.py
    $ python setup.py install
#+END_EXAMPLE

安装完毕后,可在python安装目录下的site-packages找到PIL安装目录。

***** 使用

如果你想使用PIL的Image类，就直接import Image即可，详细的使用方法请阅读其文档。

*** 2016/02/24

**** 像哥一样奋斗

早上六点醒来的时候, 浑身感到令人舒服的

*** uname                                                           :uname:

**** uname命令

http://man.linuxde.net/uname

*uname命令* 用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和
操作系统类型等）。

***** 语法

#+BEGIN_EXAMPLE
    uname(选项)
#+END_EXAMPLE

***** 选项

#+BEGIN_EXAMPLE
    -a或--all：显示全部的信息；
    -m或--machine：显示电脑类型；
    -n或-nodename：显示在网络上的主机名称；
    -r或--release：显示操作系统的发行编号；
    -s或--sysname：显示操作系统名称；
    -v：显示操作系统的版本；
    --help：显示帮助；
    --version：显示版本信息。
#+END_EXAMPLE

***** 实例

使用uname命令查看全部信息：

#+BEGIN_EXAMPLE
    [root@localhost ~]# uname    #单独使用uname命令时相当于uname -s
    Linux

    [root@localhost ~]# uname -a
    Linux localhost 2.6.18-348.6.1.el5 #1 SMP Tue May 21 15:34:22 EDT 2013 i686 i686 i386 GNU/Linux

    [root@localhost ~]# uname -m
    i686

    [root@localhost ~]# uname -n
    localhost

    [root@localhost ~]# uname -r
    2.6.18-4-686

    [root@localhost ~]# uname -s
    Linux

    [root@localhost ~]# uname -v
    #1 SMP Tue May 21 15:34:22 EDT 2013

    [root@localhost ~]# uname -p
    i686

    [root@localhost ~]# uname -i
    i386

    [root@localhost ~]# uname -o
    GNU/Linux

    [root@localhost ~]# uname --version
    uname (GNU coreutils) 5.97
    Copyright (C) 2006 free Software Foundation, Inc.
    这是自由软件。您可以按照 GNU GPL 协议 <http://www.gnu.org/licenses/gpl.html> 的条款再发布此软件的副本，但我们无法保证相关法律不对这一情形进行限制。

    由 David MacKenzie 编写。
#+END_EXAMPLE

最近更新的命令

-  [[http://man.linuxde.net/lsb_release][lsb_release]]
-  [[http://man.linuxde.net/tcpreplay][tcpreplay]]
-  [[http://man.linuxde.net/strings][strings]]
-  [[http://man.linuxde.net/screen][screen]]
-  [[http://man.linuxde.net/speedtest-cli][speedtest-cli]]
-  [[http://man.linuxde.net/clockdiff][clockdiff]]
-  [[http://man.linuxde.net/ntpdate][ntpdate]]
-  [[http://man.linuxde.net/dnf][dnf]]
-  [[http://man.linuxde.net/nethogs][nethogs]]
-  [[http://man.linuxde.net/hping3][hping3]]
-  [[http://man.linuxde.net/trap][trap]]
-  [[http://man.linuxde.net/let][let]]
-  [[http://man.linuxde.net/ifstat][ifstat]]
-  [[http://man.linuxde.net/blkid][blkid]]
-  [[http://man.linuxde.net/ipcrm][ipcrm]]
-  [[http://man.linuxde.net/openssl][openssl]]
-  [[http://man.linuxde.net/chage][chage]]
-  [[http://man.linuxde.net/dstat][dstat]]
-  [[http://man.linuxde.net/cut][cut]]
-  [[http://man.linuxde.net/ssh-copy-id][ssh-copy-id]]
-  [[http://man.linuxde.net/ssh-agent][ssh-agent]]
-  [[http://man.linuxde.net/ssh-add][ssh-add]]
-  [[http://man.linuxde.net/hexdump][hexdump]]
-  [[http://man.linuxde.net/systemctl][systemctl]]
-  [[http://man.linuxde.net/pfctl][pfctl]]
-  [[http://man.linuxde.net/jwhois][jwhois]]
-  [[http://man.linuxde.net/du][du]]
-  [[http://man.linuxde.net/tar][tar]]
-  [[http://man.linuxde.net/iconv][iconv]]
-  [[http://man.linuxde.net/xclip][xclip]]

***** 相关命令

-  [[http://man.linuxde.net/insmod][insmod]]
-  [[http://man.linuxde.net/get_module][get_module]]
-  [[http://man.linuxde.net/sysctl][sysctl]]
-  [[http://man.linuxde.net/kexec][kexec]]
-  [[http://man.linuxde.net/modprobe][modprobe]]
-  [[http://man.linuxde.net/lsmod][lsmod]]
-  [[http://man.linuxde.net/slabtop][slabtop]]
-  [[http://man.linuxde.net/rmmod][rmmod]]
-  [[http://man.linuxde.net/lsb_release][lsb_release]]
-  [[http://man.linuxde.net/depmod][depmod]]
-  [[http://man.linuxde.net/kernelversion][kernelversion]]
-  [[http://man.linuxde.net/bmodinfo][bmodinfo]]
-  [[http://man.linuxde.net/dmesg][dmesg]]

.

**** help                                                           :help:

#+BEGIN_EXAMPLE
用法：uname [选项]...
输出一组系统信息。如果不跟随选项，则视为只附加-s 选项。

  -a, --all			以如下次序输出所有信息。其中若-p 和
				-i 的探测结果不可知则被省略：
  -s, --kernel-name		输出内核名称
  -n, --nodename		输出网络节点上的主机名
  -r, --kernel-release		输出内核发行号
  -v, --kernel-version		输出内核版本
  -m, --machine		输出主机的硬件架构名称
  -p, --processor		输出处理器类型或"unknown"
  -i, --hardware-platform	输出硬件平台或"unknown"
  -o, --operating-system	输出操作系统名称
      --help		显示此帮助信息并退出
      --version		显示版本信息并退出
#+END_EXAMPLE

*** 查看 Linux 发行版本号

http://yp.oss.org.cn/blog/show_resource.php?resource_id=1058

最近碰到一个问题，在Linux终端下怎么查看当前操作系统是什么，版本是什么。
不同的Linux发行版不完全一样，查了一些资料现在总结如下。有以下命令可以
查看：

*第一种方法： lsb_release*

#+BEGIN_EXAMPLE
# lsb_release -a
#+END_EXAMPLE

#+BEGIN_EXAMPLE
LSB Version:    :core-4.0-ia32:core-4.0-noarch:graphics-4.0-ia32:graphics-4.0-noarch:printing-4.0-ia32:printing-4.0-noarch
Distributor ID:    CentOS
Description:    CentOS release 5.7 (Final)
Release:    5.7
Codename:    Final
#+END_EXAMPLE

/test in ubuntu 15.04/
#+BEGIN_EXAMPLE
  wally@ ~ $ lsb_release -a
  No LSB modules are available.
  Distributor ID: Ubuntu
  Description:    Ubuntu 15.04
  Release:        15.04
  Codename:       vivid
#+END_EXAMPLE

这个命令适用于所有遵守LSB规范的的linux，包括Redhat、SuSE、Debian、
Ubuntu、Centos等发行版。

接下来的命令 *uname* 虽不能查看当前系统名和版本，但可以显示系统核心信
息。

/test/
#+BEGIN_EXAMPLE
wally@ ~ $ uname
Linux
wally@ ~ $ uname -a
Linux wally 3.19.0-49-generic #55-Ubuntu SMP Fri Jan 22 02:10:24 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
#+END_EXAMPLE

*以下二种方法适用于RedHat,CentOS*

#+BEGIN_EXAMPLE
root@MyMail ~ # cat /etc/redhat-release
CentOS release 5.7 (Final)
#+END_EXAMPLE

登录到linux执行rpm -q redhat-release

#+BEGIN_EXAMPLE
#rpm -q redhat-release
或CentOS

root@MyMail ~ # rpm -q centos-release
centos-release-5-7.el5.centos.1
#+END_EXAMPLE

第四种方法：

当前centos 版本与redhat对应的版本的命令

这个命令在centos下并不准确，显示的系统和版本也是Red Hat 3.4.6-10。

#+BEGIN_EXAMPLE
# cat /proc/version
Linux version 2.6.9-78.ELsmp (mockbuild@builder16.centos.org) (gcc version 3.4.6 20060404 (Red Hat 3.4.6-10)) #1 SMP Fri Jul 25 00:04:28 EDT 2008
#+END_EXAMPLE

而此命令在Ubuntu上使用，显示中智能看出是Ubuntu，但看不出版本。

最后一种方法： 系统文件

#+BEGIN_EXAMPLE
#cat /etc/issue
#+END_EXAMPLE

在CentOS下执行显示为：

#+BEGIN_EXAMPLE
CentOS release 5.7 (Final)
Kernel \r on an \m
#+END_EXAMPLE

或在Ubuntu下显示为：

#+BEGIN_EXAMPLE
Ubuntu 11.04 \n \l
#+END_EXAMPLE

/test/

#+BEGIN_EXAMPLE
wally@ ~ $ cat /etc/issue
Ubuntu 15.04 \n \l

#+END_EXAMPLE

可以查看当前正在运行的 Ubuntu 的版本号。

*** Chrome 收藏夹

网站做得相当赞!
- Linux 命令分类可以借鉴.
- 可以保存整个站点

*** Linux 无线网手动配置                     :wireless:wifi:wlan:archlinux:

- [[https://wiki.archlinux.org/index.php/Wireless_network_configuration_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)][Wireless network configuration (简体中文)]]

From ArchWiki

配置无线网络一般分两步：第一步是识别硬件、安装正确的驱动程序并进行配置，
安装盘中已经包含驱动，但是通常需要额外安装；第二步是选择一种管理无线连
接的方式。

这篇文章涵盖了这两方面，并提供了无线管理工具的链接地址。

**** 设备驱动

默认的 Arch Linux
内核是*模块化*的，，硬件的设备驱动作为[[/index.php/Kernel_modules][内核模块]]保存在硬盘上。启动时
[[/index.php/Udev][udev]]
会根据硬件加载不同的驱动模块，这就创建了需要的网络接口。

有些无线芯片需要额外的固件，默认安装的
[[https://www.archlinux.org/packages/?name=linux-firmware][linux-firmware]]
提供了很多固件。如果缺失需要的固件，请查看
[[#.E5.AE.89.E8.A3.85_driver.2Ffirmware][#安装 driver/firmware]].

Udev
不是完美的，有些内核模块需要[[/index.php/Kernel_modules#Loading][手动安装]].
有些时候 Udev
会同时加载相互冲突的多个模块，就需要[[/index.php/Kernel_modules#Blacklisting][屏蔽]]
不需要的模块。

***** 检查设备状态

根据设备是 PCI 还是 USB 连接，执行 =lspci -k= 或 =lsusb -v=
检查设备驱动是否已经加载：

#+BEGIN_EXAMPLE
    $ lspci -k
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    06:00.0 Network controller: Intel Corporation WiFi Link 5100
        Subsystem: Intel Corporation WiFi Link 5100 AGN
        Kernel driver in use: iwlwifi
        Kernel modules: iwlwifi
#+END_EXAMPLE

如果是 USB 设备，执行 =dmesg | grep usbcore= 可以看到类似下面的输出
=usbcore: registered new interface driver rtl8187=。

通过 =ip link= 查看无线
([[/index.php/Network_configuration#Device_names][设备名]]，通常是类似
=wlp2s1=) 的设备。启用设备：

#+BEGIN_EXAMPLE
    # ip link set <设备名> up
#+END_EXAMPLE

如果设备加载，接口正常启用，说明不需要安装额外的驱动和固件。

***** 安装 driver/firmware

错误信息=SIOCSIFFLAGS: No such file or directory= 说明需要固件才能工作,

检查内核中的固件信息：

#+BEGIN_EXAMPLE
    $ dmesg | grep firmware
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    [   7.148259] iwlwifi 0000:02:00.0: loaded firmware version 39.30.4.1 build 35138 op_mode iwldvm
#+END_EXAMPLE

如果没有类似的输出，先执行命令，例如=iwlwifi=，然后查找对应的错误信息：

#+BEGIN_EXAMPLE
    $ dmesg | grep iwlwifi
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    [   12.342694] iwlwifi 0000:02:00.0: irq 44 for MSI/MSI-X
    [   12.353466] iwlwifi 0000:02:00.0: loaded firmware version 39.31.5.1 build 35138 op_mode iwldvm
    [   12.430317] iwlwifi 0000:02:00.0: CONFIG_IWLWIFI_DEBUG disabled
    ...
    [   12.430341] iwlwifi 0000:02:00.0: Detected Intel(R) Corporation WiFi Link 5100 AGN, REV=0x6B
#+END_EXAMPLE

根据获得的信息，在下面网址查找硬件支持：

-  [[https://help.ubuntu.com/community/WifiDocs/WirelessCardsSupported][Ubuntu Wiki]] 维护了一个设备被内核和用户空间驱动支持状况的列表。
-  [[http://linux-wless.passys.nl/][Linux 无线支持页面]] 和 [[http://www.linuxquestions.org/hcl/index.php?cat=10][硬件兼容性列表]](HCL) 也维护了一个内核友好的设备列表。
-  [[http://wireless.kernel.org/en/users/Devices][内核页面]] 也有一个支持的硬件矩阵。

如果列表中没有，可能你的设备只提供了 Windows 驱动(比如 Broadcom, 3com等)。这时需要用
[[http://ndiswrapper.sourceforge.net/wiki/index.php/List][ndiswrapper]].

Ndiswrapper 可以在 Linux 中使用 Windows 驱动。兼容性列表在 [[http://ndiswrapper.sourceforge.net/mediawiki/index.php/List][这里]].
需要 Windows 中安装的 =.inf= 和 =.sys= 文件。如果有更新的网卡，请通过
互联网搜索型号名称 + 'linux'以获取更多信息。

**** 无线网络管理

为了管理已经安装好的无线驱动，并且使无线能正常工作，需要安装一个无线连接管理工具。下面章节将帮助您确定一个最佳管理方法。

过程和需要使用的工具，将依赖于下面几个因素:

-  配置方式，从完全手动执行每一步到软件自动管理、自动启动
-  是否使用加密及加密类型
-  是否需要区分网络配置,是否经常切换不同网络（比如手提电脑）。

无论选的那个方案，最好先尝试手动方法。这将有助于您了解不同步骤的意义，并在出问题时解决之。
如果可以的话（比如说你在管理你自己的无线接入点），尝试连接一个开放的无线网络来检查是否所有的配置都在正常工作。然后再尝试加密的无线接入点，比如WEP（更易于配置）或者WPA。

此表列出可以使用的激活和管理无线网络的方法，按照加密和管理方式分类，给
出了需要的工具。虽然还有其他办法，但这些是最常使用的:



这些工具会自动安装手动配置需要的工具。

***** 手动设置

软件包
[[https://www.archlinux.org/packages/?name=wireless_tools][wireless_tools]]
提供了建立无线连接的基础工具。如果你需要使用 WPA/WPA2 加密，还需要
[[https://www.archlinux.org/packages/?name=wpa_supplicant][wpa_supplicant]]。
这些强大的用户空间终端工具提供了完全的控制手段。

这些例子假设无线设备是 =wlan0=, 请将其替换为正确的设备名。

*注意:*
根据硬件和加密方式的不同，下面一些步骤可以省略。有些设备需要在建立关联时激活接口或扫描访问点，并提供
IP 地址。需要进行一些尝试，例如 WPA/WPA2
用户可以直接到第三步激活无线网络。

和其它网络接口一样，无线设备也是通过
[[https://www.archlinux.org/packages/?name=iproute2][iproute2]]
软件包提供的 ip 命令进行。

基本的工具如下，这些用户空间工具可以对无线连接进行完整控制。

-  [[https://www.archlinux.org/packages/?name=iw][iw]] - 当前的 nl80211
   标准，不是所有的芯片都支持。
-  [[https://www.archlinux.org/packages/?name=wireless_tools][wireless_tools]]
   - 已经过时，但是依然广泛使用。
-  [[https://www.archlinux.org/packages/?name=wpa_supplicant][wpa_supplicant]]
   - 提供 WPA/WPA2 加密支持

下面表格给出了 =iw= 和 =wireless_tools= 命令的对比(更多示例参阅
[[http://wireless.kernel.org/en/users/Documentation/iw/replace-iwconfig][这里]]).

*Note:*

-  示例中使用网络接口 =wlan0= 和热点 =your_essid=.
-  大部分命令需要以 [[/index.php/Users_and_groups][root 权限]]执行，否则会无输出就退出。

| /iw/ 命令                                          | /wireless_tools/ 命令                              | 描述                              |
| iw dev wlan0 link                                  | iwconfig wlan0                                     | 获取连接状态                      |
| iw dev wlan0 scan                                  | iwlist wlan0 scan                                  | 扫描可用热点                      |
| iw dev wlan0 set type ibss                         | iwconfig wlan0 mode ad-hoc                         | 设置操作模式为 /ad-hoc/.          |
| iw dev wlan0 connect /your_essid/                  | iwconfig wlan0 essid /your_essid/                  | 连接到开放网络                    |
| iw dev wlan0 connect /your_essid/ 2432             | iwconfig wlan0 essid /your_essid/ freq 2432M       | 连接到开放网络的一个频道          |
| iw dev wlan0 connect /your_essid/ key 0:/your_key/ | iwconfig wlan0 essid /your_essid/ key /your_key/   | 用16进制加密密码访问 WEP 加密网络 |
| iw dev wlan0 connect /your_essid/ key 0:/your_key/ | iwconfig wlan0 essid /your_essid/ key s:/your_key/ | 用 ASCII 密码访问 WEP 加密网络.   |
| iw dev wlan0 set power_save on                     | iwconfig wlan0 power on                            | 启用省电模式                      |

*注意:*
根据硬件和加密设备的不同，有些步骤可以跳过。一些网卡需要在关联到热点前先激活或扫描热点，需要一些实验才能确定。WPA/WPA2
用户可以按照[[#.E5.85.B3.E8.81.94][#关联]]中的步骤激活网络。

****** 获取有用信息

[[http://wireless.kernel.org/en/users/Documentation/iw][iw 官方文档]]
包含更多示例。

-  获取接口名:

#+BEGIN_EXAMPLE
    $ iw dev
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    phy#0
        Interface wlan0
            ifindex 3
            wdev 0x1
            addr 12:34:56:78:9a:bc
            type managed
            channel 1 (2412 MHz), width: 40 MHz, center1: 2422 MHz
#+END_EXAMPLE

-  检查连接状态，未连接时，可以看到：

#+BEGIN_EXAMPLE
    $ iw dev wlan0 link
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Not connected.
#+END_EXAMPLE

连接到 AP 后可以看到：

#+BEGIN_EXAMPLE
    $ iw dev wlan0 link
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Connected to 12:34:56:78:9a:bc (on wlan0)
        SSID: MyESSID
        freq: 2412
        RX: 33016518 bytes (152703 packets)
        TX: 2024638 bytes (11477 packets)
        signal: -53 dBm
        tx bitrate: 150.0 MBit/s MCS 7 40MHz short GI

        bss flags:  short-preamble short-slot-time
        dtim period:    1
        beacon int: 100
#+END_EXAMPLE

-  获取统计数据:

#+BEGIN_EXAMPLE
    $ iw dev wlan0 station dump
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Station 12:34:56:78:9a:bc (on wlan0)
        inactive time:  1450 ms
        rx bytes:   24668671
        rx packets: 114373
        tx bytes:   1606991
        tx packets: 8557
        tx retries: 623
        tx failed:  1425
        signal:     -52 dBm
        signal avg: -53 dBm
        tx bitrate: 150.0 MBit/s MCS 7 40MHz short GI
        authorized: yes
        authenticated:  yes
        preamble:   long
        WMM/WME:    yes
        MFP:        no
        TDLS peer:  no
#+END_EXAMPLE

****** 激活内核接口

(可能需要) 一些无线网卡在使用
[[https://www.archlinux.org/packages/?name=wireless_tools][wireless_tools]]前需要激活内核接口:

#+BEGIN_EXAMPLE
    # ip link set wlan0 up
#+END_EXAMPLE

如果出现错误 =RTNETLINK answers: Operation not possible due to RF-kill=,
请确保硬件开关已经打开。参阅 [[#Rfkill_caveat][#Rfkill caveat]]。

要验证接口确实打开：

#+BEGIN_EXAMPLE
    # ip link show wlan0
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state DOWN mode DORMANT group default qlen 1000
        link/ether 12:34:56:78:9a:bc brd ff:ff:ff:ff:ff:ff
#+END_EXAMPLE

=<BROADCAST,MULTICAST,UP,LOWER_UP>= 中的=UP= 显示接口已经打开。

****** 查看接入点

#+BEGIN_EXAMPLE
    # iw dev wlan0 scan |less
#+END_EXAMPLE

*注意:* 如果显示 "Interface doesn't support
scanning"，可能是忘了安装固件。有时不以 root 运行 =iwlist=
也会产生这个问题。同样无线网络可能被软禁于，请安装
[[https://www.archlinux.org/packages/?name=rfkill][rfkill]] 并运行
=rfkill list all= 进行检查。

The important points to check:

-  *SSID:* the name of the network.
-  *Signal:* is reported in a wireless power ratio in dbm (e.g. from
   -100 to 0). The closer the negative value gets to zero, the better
   the signal. Observing the reported power on a good quality link and a
   bad one should give an idea about the individual range.
-  *Security:* it is not reported directly, check the line starting with
   =capability=. If there is =Privacy=, for example
   =capability: ESS Privacy ShortSlotTime (0x0411)=, then the network is
   protected somehow.

   -  If you see an =RSN= information block, then the network is
      protected by
      [[https://en.wikipedia.org/wiki/Robust_Security_Network][Robust
      Security Network]] protocol, also known as WPA2.
   -  If you see an =WPA= information block, then the network is
      protected by
      [[https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access][Wi-Fi
      Protected Access]] protocol.
   -  In the =RSN= and =WPA= blocks you may find the following
      information:

      -  *Group cipher:* value in TKIP, CCMP, both, others.
      -  *Pairwise ciphers:* value in TKIP, CCMP, both, others. Not
         necessarily the same value than Group cipher.
      -  *Authentication suites:* value in PSK, 802.1x, others. For home
         router, you'll usually find PSK (/i.e./ passphrase). In
         universities, you are more likely to find 802.1x suite which
         requires login and password. Then you will need to know which
         key management is in use (e.g. EAP), and what encapsulation it
         uses (e.g. PEAP). Find more details at
         [[https://en.wikipedia.org/wiki/Authentication_protocol][Wikipedia:Authentication
         protocol]] and the sub-articles.

   -  If you do not see neither =RSN= nor =WPA= blocks but there is
      =Privacy=, then WEP is used.

****** 操作模式

(可能需要)
设置无线网卡的操作模式，如果连接到漫游网络，需要设置操作模式为 *ibss*

#+BEGIN_EXAMPLE
    # iw wlan0 set type ibss
#+END_EXAMPLE

*注意:*
有些网卡需要先关闭无线接口(=ip link set wlan0 down=)才能修改模式。

****** 关联

根据加密方式不同，需要使用密码将无线设备关联到接入点。

假设要使用的接入点 ESSID 为 =MyEssid=:

-  无加密

#+BEGIN_EXAMPLE
    # iw wlan0 connect MyEssid
#+END_EXAMPLE

-  WEP

使用十六进制或 ASCII 密码(格式是自动识别出来的，因为 WEP
密码长度是固定的):

#+BEGIN_EXAMPLE
    # iw dev wlan0 connect your_essid key 0:your_key
#+END_EXAMPLE

使用十六进制或 ASCII 密码，第三个是默认 (从0计数，共四个):

#+BEGIN_EXAMPLE
    # iw dev wlan0 connect your_essid key d:2:your_key
#+END_EXAMPLE

-  *WPA/WPA2*

#+BEGIN_EXAMPLE
    # wpa_supplicant -i interface -c <(wpa_passphrase your_SSID your_key)
#+END_EXAMPLE

假设设备使用 =wext= 驱动。如果无法工作，可能需要调整选项，参见
[[/index.php/WPA_Supplicant][WPA_Supplicant]]。

如果连接成功，在新终端中执行后续命令或(或者通过 =Ctrl+c= 退出并使用 =-B=
参数在后台再次执行上述命令。[[/index.php/WPA_Supplicant][WPA_Supplicant]]
页面包含更多参数和配置文件的信息。

通过下面命令确认是否连接成功：

#+BEGIN_EXAMPLE
    # iw dev wlan0 link
#+END_EXAMPLE

****** 获取 IP 地址

使用 DHCP：

#+BEGIN_EXAMPLE
    # dhcpcd wlan0
#+END_EXAMPLE

或

#+BEGIN_EXAMPLE
    # dhclient wlan0
#+END_EXAMPLE

静态 IP：

#+BEGIN_EXAMPLE
    # ip addr add 192.168.0.2/24 dev wlan0
    # ip route add default via 192.168.0.1
#+END_EXAMPLE

*Tip:* [[/index.php/Dhcpcd][dhcpcd]] contains a hook (enabled by
default) to automatically launch [[/index.php/WPA_supplicant][WPA
supplicant]] on wireless interfaces. It is started only if a
configuration file at =/etc/wpa_supplicant/wpa_supplicant.conf= exists
and no /wpa_supplicant/ process is listening on that interface. In most
cases, you do not need to create any
[[#Manual_wireless_connection_at_boot_using_systemd_and_dhcpcd][custom
service]], just enable =dhcpcd@interface=.

****** Custom startup scripts/services

Although the manual configuration method will help troubleshoot wireless
problems, you will have to re-type every command each time you reboot.
You can also quickly write a shell script to automate the whole process,
which is still a quite convenient way of managing network connection
while keeping full control over your configuration. You can find some
examples in this section.

******* Manual wireless connection at boot using systemd and dhcpcd

This example uses [[/index.php/Systemd][systemd]] for start up,
[[/index.php/WPA_supplicant][WPA supplicant]] for connecting, and
[[https://www.archlinux.org/packages/?name=dhcpcd][dhcpcd]] for
assigning an IP address.

*Note:* Make sure that
[[https://www.archlinux.org/packages/?name=wpa_supplicant][wpa_supplicant]]
is installed and create =/etc/wpa_supplicant/wpa_supplicant.conf=. See
[[/index.php/WPA_supplicant][WPA supplicant]] for details.

Create a systemd unit, e.g
=/etc/systemd/system/network-wireless@.service=:

#+BEGIN_EXAMPLE
    /etc/systemd/system/network-wireless@.service
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    [Unit]
    Description=Wireless network connectivity (%i)
    Wants=network.target
    Before=network.target
    BindsTo=sys-subsystem-net-devices-%i.device
    After=sys-subsystem-net-devices-%i.device

    [Service]
    Type=oneshot
    RemainAfterExit=yes

    ExecStart=/usr/bin/ip link set dev %i up
    ExecStart=/usr/bin/wpa_supplicant -B -i %i -c /etc/wpa_supplicant/wpa_supplicant.conf
    ExecStart=/usr/bin/dhcpcd %i

    ExecStop=/usr/bin/ip link set dev %i down

    [Install]
    WantedBy=multi-user.target
#+END_EXAMPLE

Start and/or enable the unit as described in
[[/index.php/Systemd#Using_units][systemd#Using units]], remember to
pass the name of the interface:

#+BEGIN_EXAMPLE
    # systemctl enable network-wireless@wlan0.service
    # systemctl start network-wireless@wlan0.service
#+END_EXAMPLE

******* Systemd with wpa_supplicant and static IP

*Note:* Make sure that
[[https://www.archlinux.org/packages/?name=wpa_supplicant][wpa_supplicant]]
is installed and create a custom
=/etc/wpa_supplicant/wpa_supplicant.conf=. See
[[/index.php/WPA_supplicant][WPA supplicant]] for details.

First create configuration file for the [[/index.php/Systemd][systemd]]
service, replace =interface= with proper interface name:

#+BEGIN_EXAMPLE
    /etc/conf.d/network-wireless@interface
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    address=192.168.0.10
    netmask=24
    broadcast=192.168.0.255
    gateway=192.168.0.1
#+END_EXAMPLE

Create a systemd unit file:

#+BEGIN_EXAMPLE
    /etc/systemd/system/network-wireless@.service
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    [Unit]
    Description=Wireless network connectivity (%i)
    Wants=network.target
    Before=network.target
    BindsTo=sys-subsystem-net-devices-%i.device
    After=sys-subsystem-net-devices-%i.device

    [Service]
    Type=oneshot
    RemainAfterExit=yes
    EnvironmentFile=/etc/conf.d/network-wireless@%i

    ExecStart=/usr/bin/ip link set dev %i up
    ExecStart=/usr/bin/wpa_supplicant -B -i %i -c /etc/wpa_supplicant/wpa_supplicant.conf
    ExecStart=/usr/bin/ip addr add ${address}/${netmask} broadcast ${broadcast} dev %i
    ExecStart=/usr/bin/ip route add default via ${gateway}

    ExecStop=/usr/bin/ip addr flush dev %i
    ExecStop=/usr/bin/ip link set dev %i down

    [Install]
    WantedBy=multi-user.target
#+END_EXAMPLE

Enable the unit and start it, passing the name of the interface:

#+BEGIN_EXAMPLE
    # systemctl enable network-wireless@wlan0.service
    # systemctl start network-wireless@wlan0.service
#+END_EXAMPLE

****** 自动设置

有许多可选方法，但是注意它们是互斥的，不能同时运行两个守护进程。下面是比较表格：

| 连接管理器 | profiles 支持 | 漫游\\ | (自动连接和重连) | [[https://en.wikipedia.org/wiki/point-to-point_protocol][PPP]] 支持\\ | (3G modem) | 官方\\ | GUI | 控制台工具 |

| [[/index.php/Connman][Connman]]        | Yes | Yes | Yes | No  | =connmanctl=         |
| [[/index.php/Netctl][Netctl]]         | Yes | Yes | Yes | No  | =netctl=,=wifi-menu= |
| [[/index.php/NetworkManager][NetworkManager]] | Yes | Yes | Yes | Yes | =nmcli=              |
| [[/index.php/Wicd][Wicd]]           | Yes | Yes | No  | Yes | =wicd-curses=        |

****** Connman

ConnMan is an alternative to NetworkManager and Wicd, designed to be
light on resources making it ideal for netbooks, and other mobile
devices. It is modular in design takes advandage of the dbus API and
provides proper abstraction on top of wpa_supplicant.

See: [[/index.php/Connman][Connman]]

****** Netctl

/netctl/ is a replacement for /netcfg/ designed to work with systemd. It
uses a profile based setup and is capable of detection and connection to
a wide range of network types. This is no harder than using graphical
tools.

See: [[/index.php/Netctl][Netctl]]

******* Wicd

Wicd 是可以同时处理无线和有线网络的管理器。用 Python 和 Gtk
写成，依赖关系比 NetworkManager
少，所以是轻量级桌面的理想选择。位于[[/index.php/Official_repositories_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)][官方软件仓库]].

参见: [[/index.php/Wicd][Wicd]]

*Note:* [[/index.php/Wicd][wicd]] may cause excessive dropped
connections with some drivers, while
[[/index.php/NetworkManager][NetworkManager]] might work better.

******* NetworkManager

NetworkManager
是高级网络管理工具，在大部分流行发行版中使用。除了能管理有线链接，NetworkManager还提供了一个易于使用的图形界面程序来选择想要的无线移动链接。

*Note:* GNOME's
[[https://www.archlinux.org/packages/?name=network-manager-applet][network-manager-applet]]
also works under [[/index.php/Xfce][Xfce]] if you install
[[https://aur.archlinux.org/packages/xfce4-xfapplet-plugin/][xfce4-xfapplet-plugin]]^{AUR[[[/index.php/ArchWiki:Requests#Broken_package_links][broken
link]]: archived in
[[http://pkgbuild.com/git/aur-mirror.git/tree/xfce4-xfapplet-plugin][aur-mirror]]]}
(available in the [[/index.php/Arch_User_Repository][AUR]]) first.
Additionally, there are applets available for [[/index.php/KDE][KDE]].

详情请见 [[/index.php/NetworkManager][NetworkManager]]。

******* Wifi Radar

WiFi Radar是 一个Python/PyGTK2
的管理无线配置的程序（*只有*无线）。它能够扫描可用的网络,为选择的网络创建新的配置。

详情请见[[/index.php/Wifi_Radar][Wifi Radar]]。

*** sudo passwd root                                          :passwd:root:

可以使用passwd命令来修改用户的密码。passwd命令用于对用户的密码进行管理，
可以设置、修改、删除密码。

用法示例：
修改root用户的密码

#+BEGIN_EXAMPLE
$ sudo passwd root
#+END_EXAMPLE

密码会要求重复输入一次。
*** wifi



自动管理: https://wiki.archlinux.org/index.php/Netctl_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)
手动iw:https://wiki.archlinux.org/index.php/Wireless_network_configuration_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)
WPA WEP : https://wiki.archlinux.org/index.php/WPA_supplicant
network interface Q&A : http://ubuntuforums.org/showthread.php?t=263136&page=9

*** 桌面环境与桌面管理器


桌面环境: gnome, kde, lede
桌面管理器: unity, compiz

http://my.oschina.net/aspirs/blog/607710

GNOME、KDE、XFCE 叫做 DE 全称是 Desktop Environment，也就是桌面环境。
也就是一个整体的环境，包括应用程序、窗口管理器登录管理器，桌面程序，设
置界面等等等等。

unity 是一个桌面的界面。提供你看见的那些东西，但窗口的装饰和一些功能控
制的相关东西，他不提供，需要 compiz 来提供。

你要知道 Linux是一大堆程序组成的，桌面环境也是如此，其实你看到的 GNOME
的工具条，KDE 的 K 菜单面板，其实都是程序，你的桌面也一样，是一个程序
运行提供一个全屏幕的处在最底层的显示，窗口和桌面上的各种面板控件都在他
的上一层显示。

窗口管理器，是提供管理窗口显示隐藏，前后和大小的后台程序，这个才是和
X-server 真正进行交互控制的程序（Xorg 是程序，Linux 的是 C/S 结构）。
所以 compiz 这个东西可以实现窗口的特效。因为是由他告诉 X ，窗口大小，
层次关系和形状的，同时他也告诉被他管理的程序，他们的窗口大小，是否焦点，
是否显示隐藏等等的信息。metacity 并不会自己重新绘制窗口外观，只是忠实
的体现窗口本身的样子。compiz 会根据特效的设置，自己重新绘制窗口所在位
置的图像，告诉 Xorg 服务更多的绘制内容，实现诸如变形，半透明，窗口阴影
等等的特效。

你要是想研究桌面，最好去看看 LXDE ，这个东西是极简化的桌面环境，组成很
简单。

在我的理解上一般说来，可以工作的图形桌面，至少有一个会话程序，一个窗口
管理器，一个面板，一个桌面程序。

会话程序就是保证 X 的正常运行（Xinit 运行他，他就会一直保持运行，直到
你选择注销、重启、关机等等），提供启动另外三个或者更多个程序的运行，作
为他们的主进程。

窗口管理器就是管理所有平面上显示的东西，没有他就没有办法管理程序哪个是
当前操作的窗口，哪个窗口在前，哪个在后，窗口大小，是否隐藏，是否关闭退
出。面板就是你看到的哪个显示任务，的东西，没他你就没办法运行程序，提供
用户交互。桌面程序就是背景显示，的相关功能。

当然这 4 个东西不一定都要有，但是就像我前面说的，没有的话，那么对应的
功能就无法提供了。这些程序也可以整合，不一定非要分成4个，但这 4 部分的
功能却是必须要保证的，你可以用各种其他的方式实现。

你可以认为 unity 其实就是这四部分中的面板功能。而不提供窗口管理器的功
能，所以需要compiz或者metacity。

*** Ubuntu 桌面管理器                        :gnome:kde:lxde:unity:desktop:

http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&tid=5458
https://linux.cn/article-3258-1.html
https://linux.cn/article-3432-1.html

=注意区分桌面环境与桌面管理器=

窗口管理工具是Linux桌面环境的重要组成部分，它可以直接影响到用户的窗口
外观、行为标示、应用程序运行/关闭等多个常用操作，也影响系统效率。

1. *Gnome*

   GNOME 是一种让使用者容易操作和设定电脑环境的工具，也是Linux发行版中
   运用最多的桌面环境之一。GNOME 包含了 Panel (用来启动此程式和显示目
   前的状态)、桌面 (应用程式和资料放置的地方)、及一系列的标准桌面工具
   和应用程式，并且能让各个应用程式都能正常地运作。不管你之前使用何种
   操作系统，你都能轻易地使用 GNOME 功能强大的图形接口工具。

   【转注】最新gnome-shell 3.x变化很大，体现了现代桌面的特性，当然消耗
   也高！

    [[~/Wally/Journal/Figure/.org-download/Journal/1294108860963_2016-02-24_16:41:53.jpg]]

2. *KDE*

   KDE是一款著名的运行于 Linux、Unix 以及FreeBSD 等操作系统上面自由图
   形工作环境，整个系统采用的都是 TrollTech 公司所开发的 Qt 程序库。它
   对于易用桌面的需求而不断探索，例如在 Mac OS 和微软的 Windows 那样的
   桌面环境。

   【转注】消耗较高！

#+DOWNLOADED: http://upload.newhua.com/1/06/1294108852843.jpg @ 2016-02-24 16:42:38
 [[~/Wally/Journal/Figure/.org-download/Journal/1294108852843_2016-02-24_16:42:38.jpg]]

3. *XFCE*

   XFCE的名气并不如前面两个老大哥响亮，但随着XFCE自身逐渐成熟，现在使
   用xfce作桌面的系统已经越来越多了，国外的Xubuntu GNU/Linux、SAM
   Linux Desktop和国内的lucky8k-veket都将xfce作默认的桌面窗口管理器。
   特点是主要由鼠标设定，而它的设定档对于普通用户是不透明的，上手比较
   简单。

   【转注】消耗较底！轻量级桌面环境。

#+DOWNLOADED: http://upload.newhua.com/a/32/1294108860963.jpg @ 2016-02-24 16:43:11
 [[~/Wally/Journal/Figure/.org-download/Journal/1294108860963_2016-02-24_16:43:11.jpg]]

4. Enlightenment (E17)

   E17是X Window系统下的一个窗口管理器。可单独应用，或者与桌面环境如
   GNOME，KDE等一起应用。Enlightenment经常作为桌面环境的替代品。

#+DOWNLOADED: http://upload.newhua.com/1/06/1294108852843.jpg @ 2016-02-24 16:43:34
 [[~/Wally/Journal/Figure/.org-download/Journal/1294108852843_2016-02-24_16:43:34.jpg]]

5. *LXDE* : LXDE 显然是桌面环境中最轻量级的选择

   LXDE是一个自由的桌面环境，旨在提供一个新的轻量、快速的桌面环境。相
   较于功能强大与伴随而来的膨胀性，LXDE注重于实用性和轻巧性，并且尽力
   降低其所耗系统资源。，各元件可独立运作，使用Openbox作为默认的窗口管
   理器。
   【转注】绝对轻量级DE，消耗最低，建议安装，一方不测！

#+DOWNLOADED: http://upload.newhua.com/d/20/1294108843217.jpg @ 2016-02-24 16:43:48
 [[~/Wally/Journal/Figure/.org-download/Journal/1294108843217_2016-02-24_16:43:48.jpg]]

6. Window Maker

   Window Maker是一款X11窗口管理器，其外观和使用感觉类似NeXTSTEP图像用
   户界面。 主要特点有支持ICCCM、可将软件视窗最小化为单一图示、与Gnome
   配合使用、内置个性化主题等。

#+DOWNLOADED: http://upload.newhua.com/2/b9/1294108835270.jpg @ 2016-02-24 16:44:11
 [[~/Wally/Journal/Figure/.org-download/Journal/1294108835270_2016-02-24_16:44:11.jpg]]

7. Fluxbox

   Fluxbox是一个基于GNU/Linux的轻量级图形操作界面，外观界面没有GNOME和
   KDE那样精美，但由于它的运行对系统资源和配置要求极低，所以它被安装到
   很多较旧的或是对性能要求较高的机器上，其菜单和相关配置被保存于用户
   根目录下的.fluxbox目录里，这样使得它的配置极为便利。

#+DOWNLOADED: http://upload.newhua.com/f/1a/1294108825970.jpg @ 2016-02-24 16:44:26
 [[~/Wally/Journal/Figure/.org-download/Journal/1294108825970_2016-02-24_16:44:26.jpg]]

8. AmiWM

   AmiWm是为Amiga喜爱者设计的window管理器。它模仿Amiga’s Workbench的
   外观，支持多屏幕，能象在Amiga中相同随意拖动屏幕，每个屏幕能有不同的
   背景。

#+DOWNLOADED: http://upload.newhua.com/a/f3/1294108815432.jpg @ 2016-02-24 16:44:36
 [[~/Wally/Journal/Figure/.org-download/Journal/1294108815432_2016-02-24_16:44:36.jpg]]

9. Sawfish

   Sawfish是可扩展的 Linux 窗口管理器，使用基于 Lisp 的扩展语言。所有
   窗口的修饰都是可配置的，并可通过 Lisp 来设置用户接口策略。

#+DOWNLOADED: http://upload.newhua.com/4/e6/1294108804826.jpg @ 2016-02-24 16:44:45
 [[~/Wally/Journal/Figure/.org-download/Journal/1294108804826_2016-02-24_16:44:45.jpg]]

10. IceWM

    IceWM是一个超小型的轻量级窗口管理器，其主要特点是迷你和高速，开发
    者充分考虑了速度、可用性和与系统结合的稳定性。

#+DOWNLOADED: http://upload.newhua.com/4/e6/1294108804826.jpg @ 2016-02-24 16:44:55
 [[~/Wally/Journal/Figure/.org-download/Journal/1294108804826_2016-02-24_16:44:55.jpg]]

*** Ubuntu 14.04 LTS: 定制 Unity

虽然Unity桌面管理器自从伴随 Ubuntu 11.10首次发布以来表现出了强劲的性能，
并在可用性上迈进了一大步，但是有人对自定义其外观和行为所带的限制感到反
感。我们现在来看看如何自定义Unity，让你重拾自己掌控桌面的感觉。


**** Unity中的可用定制项目

在ubuntu 14.04中，Unity 有一些以前没有的可定制项。登入你的
Unity，进入“设置”并选择“显示”，你将看到以下画面：

#+DOWNLOADED: https://dn-linuxcn.qbox.me/data/attachment/album/201407/19/214927wplpzfzepl17noog.png @ 2016-02-24 16:50:01
 [[~/Wally/Journal/Figure/.org-download/Journal/214927wplpzfzepl17noog_2016-02-24_16:50:01.png]]

Ubuntu 14.04 LTS 显示和 Unity 设置

你看到的大多数项目相比 Ubuntu 11.01
而言都是新的，而且一些相比较上一个版本的 Ubuntu13.10
也是新的。从Ubuntu13.10开始，Ubuntu加入了可以改变菜单栏和标题栏大小的新特性。

Unity中所特有的一个特性是我们能够打开或者关闭的“粘性边缘”功能，它能让你的鼠标停止在多显示器组的每个屏幕的边缘，它使光标暂时停在边缘，仿佛是鼠标卡住了一样，我们可以选择关闭它。（LCTT译注，其实我觉得挺有用的，可以避免无意中切换到其他工作桌面，不要关闭）

在“设置”中选择“外观”选项，可以看到如下画面。

#+DOWNLOADED: https://dn-linuxcn.qbox.me/data/attachment/album/201407/19/214937kbji4e16jdnbnr66.png @ 2016-02-24 16:50:13
 [[~/Wally/Journal/Figure/.org-download/Journal/214937kbji4e16jdnbnr66_2016-02-24_16:50:13.png]]

Ubuntu 14.04 LTS 显示和Unity设置

这里我们可以看到一个人们最渴望在 Unity
启动器栏中包含的功能-能够改变启动器大小。虽然在Ubuntu
11.10及以后的各种版本中可以通过多种方法实现这个特性，但将其放入外观设置中使其显得更加正式。我喜欢它能将启动器图标缩小直至16的功能（我们接下来所要讲到的工具仅能支持最小调至24）。

**** Unity Tweak Tool-强大!

在Unity首次伴随Ubuntu
11.10发布的几天之内这款工具就跟着出现了，只是你得大费周折去自己把它安装好而且在Unity升级时它可能会损坏。

然而现在它被正式添加进了Ubuntu的默认软件仓库并且会在Unity更新时同时更新。它附带大量的定制项，那么我们就来安装它吧：

#+BEGIN_EXAMPLE
    sudo apt-get install unity-tweak-tool
#+END_EXAMPLE

安装好，启动后你将看到如下画面：

#+DOWNLOADED: https://dn-linuxcn.qbox.me/data/attachment/album/201407/19/214940hlc690qq06ts6ceq.png @ 2016-02-24 16:49:45
 [[~/Wally/Journal/Figure/.org-download/Journal/214940hlc690qq06ts6ceq_2016-02-24_16:49:44.png]]

正式的Unity Tweak Tool

这款工具它集大量Unity桌面定制项目于一体。这些定制项大多能通过默认的Unity设置，命令行操作或者是即使是编辑有时候也很难寻找到的配置文件来实现。

我们可以改变启动器栏，网页小程序和面板的行为，可以在Unity菜单中搜索等等。所有的都通过着一个工具来实现。花些时间去挖掘适合你的选项-Unity
Tweak Tool-学习它，和它一起生活，爱上它（如果你使用Unity，这是起码的）

**** 结尾的一些想法

Ubuntu 14.04 LTS 越来越被人们视作Linux上的典型的Desktop，（对不起，
Canonical，你还没有摆脱Linux身份），Linux Desktop不仅可以作为偶尔使用
Linux的那些人（的确有这样的事）的选择，也适用于骨灰级linux专家。

比之前没有工具，功能可以定制，或是通过配置文件修改定制但是有可能被之后
个更新所破坏，现在对于Unity桌面我们就拥有了更多的控制权。Unity桌面性能
强劲可靠，又通过Unity

Tweak Tool加入一些特色元素，使得它的外观也酷极了!!!

请给我们你的想法或者点击链接发表你对Unity桌面的评论，我们将有兴趣知道
你是如何使用Ubuntu 14.04 LTS 的。

*** ssh server

- [[http://blog.chinaunix.net/uid-22556372-id-1773417.html][ssh 登录出现的几种错误以及解决办法]]

#+BEGIN_EXAMPLE
sudo apt-get install openssh-server
#+END_EXAMPLE

然后确认sshserver是否启动了：

#+BEGIN_EXAMPLE
ps -e |grep ssh
#+END_EXAMPLE

如果看到sshd那说明ssh-server已经启动了。

如果没有则可以这样启动：

#+BEGIN_EXAMPLE
sudo /etc/init.d/ssh start
#+END_EXAMPLE
或 *service*

ssh-server配置文件位于 */etc/ssh/sshd_config* ，在这里可以定义SSH的服
务端口，默认端口是22，你可以自己定义成其他端口号，如222。

然后重启SSH服务：

#+BEGIN_EXAMPLE
sudo /etc/init.d/ssh stop
sudo /etc/init.d/ssh start
#+END_EXAMPLE

然后使用以下方式登陆SSH：

#+BEGIN_EXAMPLE
ssh zhou@192.168.***.** zhou为192.168.***.**机器上的用户，需要输入密码。
#+END_EXAMPLE

断开连接：exit

*** org-random-todo                                                :random:
:PROPERTIES:
:RANDOM:   TODO
:END:
- State "DONE"       from ""           [2016-02-24 三 19:38] \\
  虽然并不会使用 org-element 分析 org-mode 元素, 但是复用代码, 基本实现
  了所需的功能, 能够随机推送需要关注的书籍和电影.
  *至于笔记怎么处理, 还没有相好, 可能不需要*

- State "TODO"       from ""           [2016-02-13 六 19:42] \\
  有了思路，复用 org-random-todo, 但是怎么获取自定义属性

org-random-todo is an installed package.

     Status: Installed in `~/.emacs.d/elpa/org-random-todo-20160208.426/' (unsigned).

  Archive: n/a
    Version: 20160208.426
   Requires: emacs-24.3, alert-1.2
    Summary: notify of random TODO's
   Keywords: org todo notification
    Other versions: 20160208.426 (melpa).

Show a random TODO from your org-agenda-files every so often.
Requires org-element, which was added fairly recently to org-mode
(tested with org-mode version 7.9.3f and later).

#+BEGIN_SRC emacs-lisp
  (require 'org-random-todo)
#+END_SRC

主要函数

#+BEGIN_SRC emacs-lisp
  (defun org-random-todo--update-cache ()
    "Update the cache of TODO's."
    (setq org-random-todo--cache
          (cl-mapcan
           (lambda (file)
             (when (file-exists-p file)
               (with-current-buffer (org-get-agenda-file-buffer file)
                 (org-element-map (org-element-parse-buffer)
                                  'headline
                                  (lambda (hl)
                                    (when (and (org-element-property :todo-type hl)
                                               (not (equal 'done (org-element-property :todo-type hl))))
                                      (cons file hl)))))))
           (or org-random-todo-files org-agenda-files))))
#+END_SRC

(org-random-todo--update-cache)


ORG-property



property 引用格式不对

:todo-type 这是什么？

:Random 不行
"Random" 不行
'("Random" . "reading") 不行

*问题在于怎么使用 org-element-property 读取到自定义的 PROPERTY* (解决, 2016/02/24)

#+BEGIN_SRC emacs-lisp

  (setq file "~/Wally/Journal/Doc/record.org")
  (with-current-buffer (org-get-agenda-file-buffer file)
                 (org-element-map (org-element-parse-buffer)
                                  'headline
                                  (lambda(hl)
                                    (when (and (org-element-property :RANDOM hl) ;
                                               (equal "READING" (org-element-property :RANDOM hl)))
                                      (cons file hl)))))
#+END_SRC

- *冒号* 属性
- *引号* 值
- *#+PROPERTY:* 文件开头
  #+BEGIN_EXAMPLE
    ,#+PROPERTY: READING_ALL 0 1
    ,#+PROPERTY: READING
    ,#+PROPERTY: MOVIE_ALL 0 1
    ,#+PROPERTY: MOVIE
    ,#+PROPERTY: SOULSOUP
    ,#+PROPERTY: SOULSOUP_ALL 1 0
  #+END_EXAMPLE

配置

#+BEGIN_SRC emacs-lisp
  (defun wally-org-random-reading--update-cache ()
    "Update the cache of READING's"
    (interactive)
    (let '(file "~/Wally/Journal/Doc/record.org")
      (setq org-random-todo--cache

            (with-current-buffer (org-get-agenda-file-buffer file)
              (org-element-map (org-element-parse-buffer)
                  'headline
                (lambda(hl)
                  (when (org-element-property :READING hl)
                    (cons file hl)))))))
    )

  (defun wally-org-random-movie--update-cache ()
    "Update the cache of MOVIE's"
    (interactive)
    (let '(file "~/Wally/Journal/Doc/record.org")
      (setq org-random-todo--cache
            (with-current-buffer (org-get-agenda-file-buffer file)
              (org-element-map (org-element-parse-buffer)
                  'headline
                (lambda(hl)
                  (when (org-element-property :MOVIE hl)
                    (cons file hl)))))))
    )


  (global-set-key (kbd "<f8>") '(lambda()
                                  (interactive)
                                  (org-random-todo)
                                  (org-random-todo-goto-current)))

#+END_SRC

*** .gitignore                                            :gitignore:trick:

.gitignore 文件的内容为 "*", 通配所有文件.

只使用 git add -f <FILE> 增加需要跟踪的文件.

这样比逐条添加到 .gitignore 更有针对性.

*** 吋                                                            :吋:英寸:

【汉字】吋
【拼音】cùn(也读作yīng-cùn)

英寸（英美制长度单位，1英尺=12英寸）的简写。1吋=0.762寸

*** 英寸                                                   :英寸:inch:单位:

1 英寸 (吋) = 2.54 厘米
1 英寸 (吋) = 0.0254 米
1 英寸(吋) = 0.762 市寸
1 厘米 =0.39370078740157477 英寸（吋）
1 市寸 = 1.312336英寸(吋)
1 米 = 39.370078740157 英寸 (吋)
