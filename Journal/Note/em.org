# em.org --- Notes for Emacs.


* Fundermental                                                        :EMACS:
** intro
** install                                                         :install:
*** [[http://ergoemacs.org/emacs/building_emacs_on_linux.html][How to Build Emacs on Linux]]                                   :install:

This page shows you how to compile/build latest version of publically
released version of emacs on Linux. It should work for building any
emacs version. I assume you are on Ubuntu Linux.

If you want to build latest development version, see:
[[building_emacs_from_git_repository.html][How to Build Emacs from git
Repository]].

**** Summary

Here's summary of what to do.

① Install essential build tools and dependency first:

#+BEGIN_EXAMPLE
    # install essential build tools
    sudo apt-get install build-essential
#+END_EXAMPLE

② Download emacs dependencies:

#+BEGIN_EXAMPLE
    # get all dependencies of a previous emacs version
    sudo apt-get build-dep emacs24
#+END_EXAMPLE

③ Download emacs source code from [[http://ftp.gnu.org/gnu/emacs/]],
then cd to the emacs source directory.

④ Compile emacs:

#+BEGIN_EXAMPLE
    cd ‹source dir name›
    ./configure
    make
    sudo make install # optional. This basically copy the binary to /usr/local/bin
#+END_EXAMPLE

Following is detailed explanation.

--------------

**** Check Prepared Emacs Packages

On Ubuntu, typically you install by =sudo apt-get install emacs24=,
where the “emacs24” may be other version.

To search for emacs, do: =apt-cache search emacs | grep emacs=.

When emacs has a new version, Ubuntu Linux typically takes half a year
to a year to have a prepared package.

Or, you build it yourself. It's easy.

**** Download Emacs Source Code

Download emacs source code here: [[http://ftp.gnu.org/gnu/emacs/]]

**** Compile Steps

To compile programs on unix, typically the steps are:

#+BEGIN_EXAMPLE
    cd ‹source dir name›
    ./configure
    make
    sudo make install # optional. This basically copy the binary to /usr/local/bin
#+END_EXAMPLE

In the source dir, there's usually a README or INSTALL file.

However, you'll probably fail in the configure step, because emacs
requires lots other libraries, also, you might be missing build tools.

Here's some sample output of failure:

#+BEGIN_EXAMPLE
    checking for libXaw... configure: error: No X toolkit could be found.
    If you are sure you want Emacs compiled without an X toolkit, pass
      --with-x-toolkit=no
    to configure.  Otherwise, install the development libraries for the toolkit
    that you want to use (⁖ Gtk+) and re-run configure.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    configure: error: The following required libraries were not found:
        libXpm libjpeg libpng libgif/libungif libtiff
    Maybe some development libraries/packages are missing?
    If you don't want to link with them give
        --with-xpm=no --with-jpeg=no --with-png=no --with-gif=no --with-tiff=no
    as options to configure
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    configure: error: The required function `tputs' was not found in any library.
    These libraries were tried: libncurses, libterminfo, libtermcap, libcurses.
    Please try installing whichever of these libraries is most appropriate
    for your system, together with its header files.
    For example, a libncurses-dev(el) or similar package.
#+END_EXAMPLE

You can type =./configure --help= to see the options it supports. See
its output here: [[linux_compile_emacs_24_config_help_output.txt]].

**** Install Basic Build Tools

#+BEGIN_EXAMPLE
    # install basic build tools
    sudo apt-get install build-essential
#+END_EXAMPLE

To see info about the package, do:

-  =apt-cache showpkg build-essential=
-  =apt-cache show build-essential=

**** Dependencies

You'll need to install some 30 dependent libraries. The trick is to know
which are they. Took me a couple hours to find out the hard way.

The easiest way is to install all dependencies of a previous version of
the package, like this:

#+BEGIN_EXAMPLE
    sudo apt-get build-dep emacs24
#+END_EXAMPLE

This will install all packages emacs24 depends on.

Here's the output on my machine for emacs23:

#+BEGIN_EXAMPLE
    The following NEW packages will be installed:
      autoconf automake autotools-dev bsd-mailx diffstat imagemagick libasound2-dev libdatrie-dev
      libdbus-1-dev libgconf2-dev libgpm-dev libgtk2.0-dev liblockfile-dev liblqr-1-0 libm17n-dev
      libmagickcore3 libmagickwand3 libncurses5-dev libotf-dev librsvg2-dev libthai-dev libtinfo-dev
      libxml2-dev postfix quilt sharutils texinfo xaw3dg xaw3dg-dev xutils-dev
    0 upgraded, 30 newly installed, 0 to remove and 4 not upgraded.
    Need to get 12.4 MB of archives.
    After this operation, 49.5 MB of additional disk space will be used.
#+END_EXAMPLE

You can see the full bash output here:
[[linux_compile_emacs_23_dependencies.txt]]

**** config, make

=make distclean= to clear files created by configure.

Once you have all the dependencies, you can now run =./configure= and
=make= again.

Here's a sample successful output:

-  [[linux_compile_emacs_24_config_success_output.txt]]
-  [[linux_compile_emacs_24_make_success_output.txt]]

After successful “make”, you should have a binary at =src/emacs= in the
current dir. You can test run it by =src/emacs &=.

Optionally, you can do =sudo make install=, which will basically copy
the binary to =/user/loca/bin/=, and copy various elisp files, info
files, man pages, etc, into various Linux default dirs.

*** 安装                                                          :install:

Reference:
+ http://blog.chinaunix.net/uid-27091459-id-3359118.html


安装Emacs时编译错误
#+BEGIN_EXAMPLE
  You seem to be running X, but no X development libraries
  were found. You should install the relevant development files for X
  and for the toolkit you want, such as Gtk+, Lesstif or Motif. Also make
  sure you have development files for image handling, i.e.
  tiff, gif, jpeg, png and xpm.
  If you are sure you want Emacs compiled without X window support, pass
  --without-x
  to configure.
#+END_EXAMPLE

解决方法：
+ 装GTK+等图形开发库: sudo apt-get install libgtk2.0-dev
+ 几个图像开发库:
  - sudo apt-get install libxpm-dev
  - sudo apt-get install libjpeg62-dev
  - sudo apt-get install libgif-dev
  - sudo apt-get install libtiff4-dev
+ last one: sudo apt-get install libncurses5-dev
*** [[http://blog.chinaunix.net/uid-27091459-id-3359118.html][emacs-24.2 install]]                                               :blog:

when configure the emacs:  error like this!
You seem to be running X, but no X development libraries
were found. You should install the relevant development files for X
and for the toolkit you want, such as Gtk+, Lesstif or Motif. Also
make
sure you have development files for image handling, i.e.
tiff, gif, jpeg, png and xpm.
If you are sure you want Emacs compiled without X window support, pass
--without-x
to configure.

装GTK+等图形开发库
*sudo apt-get install libgtk2.0-dev
*
几个图像开发库
*sudo apt-get install libxpm-dev
sudo apt-get install libjpeg62-dev
sudo apt-get install libgif-dev
sudo apt-get install libtiff4-dev

*last one:
**sudo apt-get install libncurses5-dev

./configure
make
make install

run it in window
**emacs

run it without any window
emacs -nw

*** 启动选项
**** emacs -nw

 emacs --help
 #+BEGIN_EXAMPLE
 --no-window-system, -nw     do not communicate with X, ignoring
                             $DISPLAY
 #+END_EXAMPLE

**** Emacs 仅处理 elisp 脚本，不启动
- State "DONE"       from "TODO"       [2015-12-02 三 15:08] \\
  优先查阅手册和帮助文档，其后再Google

*emacs --script FILE*

#+BEGIN_EXAMPLE
   $ emacs --help
  Usage: emacs [OPTION-OR-FILENAME]...

  Run Emacs, the extensible, customizable, self-documenting real-time
  display editor.  The recommended way to start Emacs for normal editing
  is with no options at all.

  Run M-x info RET m emacs RET m emacs invocation RET inside Emacs to
  read the main documentation for these command-line arguments.

  Initialization options:

  --batch                     do not do interactive display; implies -q
  --chdir DIR                 change to directory DIR
  --daemon                    start a server in the background
  --debug-init                enable Emacs Lisp debugger for init file
  --display, -d DISPLAY       use X server DISPLAY
  --no-desktop                do not load a saved desktop
  --no-init-file, -q          load neither ~/.emacs nor default.el
  --no-shared-memory, -nl     do not use shared memory
  --no-site-file              do not load site-start.el
  --no-site-lisp, -nsl        do not add site-lisp directories to load-path
  --no-splash                 do not display a splash screen on startup
  --no-window-system, -nw     do not communicate with X, ignoring $DISPLAY
  --quick, -Q                 equivalent to:
                                -q --no-site-file --no-site-lisp --no-splash
  --script FILE               run FILE as an Emacs Lisp script
  --terminal, -t DEVICE       use DEVICE for terminal I/O
  --user, -u USER             load ~USER/.emacs instead of your own

  Action options:

  FILE                    visit FILE using find-file
  +LINE                   go to line LINE in next FILE
  +LINE:COLUMN            go to line LINE, column COLUMN, in next FILE
  --directory, -L DIR     prepend DIR to load-path (with :DIR, append DIR)
  --eval EXPR             evaluate Emacs Lisp expression EXPR
  --execute EXPR          evaluate Emacs Lisp expression EXPR
  --file FILE             visit FILE using find-file
  --find-file FILE        visit FILE using find-file
  --funcall, -f FUNC      call Emacs Lisp function FUNC with no arguments
  --insert FILE           insert contents of FILE into current buffer
  --kill                  exit without asking for confirmation
  --load, -l FILE         load Emacs Lisp FILE using the load function
  --visit FILE            visit FILE using find-file

  Display options:

  --background-color, -bg COLOR   window background color
  --basic-display, -D             disable many display features;
                                    used for debugging Emacs
  --border-color, -bd COLOR       main border color
  --border-width, -bw WIDTH       width of main border
  --color, --color=MODE           override color mode for character terminals;
                                    MODE defaults to `auto', and
                                    can also be `never', `always',
                                    or a mode name like `ansi8'
  --cursor-color, -cr COLOR       color of the Emacs cursor indicating point
  --font, -fn FONT                default font; must be fixed-width
  --foreground-color, -fg COLOR   window foreground color
  --fullheight, -fh               make the first frame high as the screen
  --fullscreen, -fs               make the first frame fullscreen
  --fullwidth, -fw                make the first frame wide as the screen
  --maximized, -mm                make the first frame maximized
  --geometry, -g GEOMETRY         window geometry
  --no-bitmap-icon, -nbi          do not use picture of gnu for Emacs icon
  --iconic                        start Emacs in iconified state
  --internal-border, -ib WIDTH    width between text and main border
  --line-spacing, -lsp PIXELS     additional space to put between lines
  --mouse-color, -ms COLOR        mouse cursor color in Emacs window
  --name NAME                     title for initial Emacs frame
  --no-blinking-cursor, -nbc      disable blinking cursor
  --reverse-video, -r, -rv        switch foreground and background
  --title, -T TITLE               title for initial Emacs frame
  --vertical-scroll-bars, -vb     enable vertical scroll bars
  --xrm XRESOURCES                set additional X resources
  --parent-id XID                 set parent window
  --help                          display this help and exit
  --version                       output version information and exit

  You can generally also specify long option names with a single -; for
  example, -batch as well as --batch.  You can use any unambiguous
  abbreviation for a --option.

  Various environment variables and window system resources also affect
  the operation of Emacs.  See the main documentation.

  Report bugs to bug-gnu-emacs@gnu.org.  First, please see the Bugs
  section of the Emacs manual or the file BUGS.

  Journal $ cd /tmp
  tmp $ vi test
  tmp $ emacs -script test
  hello world

#+END_EXAMPLE

** 帮助系统                                                           :help:

GNU的软件大多数有丰富的帮助系统，学习GNU的软件时，首先学习如何使用其帮
助系统，往往事半功倍。Emacs的帮助文档很多，并大部分都在C-h开头的组合键
中。
首先是C-h ?，关于帮助系统的“帮助”。该命令会打开一个新的frame，如下图：
从该文档中摘录常用的帮助功能如下：

|----------+--------------------------+-----------------------------------------------------|
| C-h ?    |                          | 关于帮助系统的帮助，可以通过SPC和DEL键滚动，ESC推出 |
| C-h t    | M-x help-with-tutorial   | 进入《Emacs快速指南》                               |
| C-h r    | M-x info-emacs-manual    | Emacs使用手册                                       |
| C-h i    | M-x info                 | 《Emacs说明》                                       |
| C-h a    | M-x apropos-command      | 搜索命令                                            |
| C-h v    | M-x describe-variable    | 查看变量说明                                        |
| C-h f    | M-x describe-function    | 查看函数说明                                        |
| C-h m    | M-x describe-mode        | 查看当前mode的相关文档，包含mode中的命令、快捷键等  |
| C-h k    | M-x describe-key KYES    | 查看快捷键对应的命令及简要说明                      |
| C-h c    | M-x describe-key-briefly | 查看绑定说明                                        |
| C-h w    | M-x where-is             | 查看某个命令对应的快捷键                            |
| C-h b    | M-x describe-bindings    | 查看当前buffer中的所有的快捷键列表                  |
| KEYS C-c |                          | 查看当前buffer中以某个快捷键序列开头的快捷键列表    |
|          | M-x appropos             | 查看匹配某个关键字的任何东西，如函数，变量，命令，模式等                        |
|----------+--------------------------+---------------------------------------------------------------------------------|


1. C-h t 《Emacs快速指南》是迅速上手最好的文档。
2. 使用帮助时，可能会分割出其它Frame，可以通过C-x 1关闭。

** GUI
*** Frame                                                           :frame:
**** 切换frame
+ C-x 5 o other-frame
+ Alt+`  (Ubuntu)
**** Emacs create frame
+
  http://www.gnu.org/software/emacs/manual/html_node/emacs/Creating-Frames.html


The prefix key C-x 5 is analogous to C-x 4. Whereas each C-x 4 command
pops up a buffer in a different window in the selected frame (see
[[Pop-Up-Window.html#Pop-Up-Window][Pop Up Window]]), the C-x 5 commands
use a different frame. If an existing visible or iconified (“minimized”)
frame already displays the requested buffer, that frame is raised and
deiconified (“un-minimized”); otherwise, a new frame is created on the
current display terminal.

The various C-x 5 commands differ in how they find or create the buffer
to select:

-  C-x 5 2 :: create a new frame (=make-frame-command=).

-  C-x 5 b bufname RET :: Select buffer bufname in another frame. This
   runs =switch-to-buffer-other-frame=.

-  C-x 5 f filename RET :: Visit file filename and select its buffer in
   another frame. This runs =find-file-other-frame=. See
   [[Visiting.html#Visiting][Visiting]].

-  C-x 5 d directory RET :: Select a Dired buffer for directory
   directory in another frame. This runs =dired-other-frame=. See
   [[Dired.html#Dired][Dired]].

-  C-x 5 m :: Start composing a mail message in another frame. This runs
   =mail-other-frame=. It is the other-frame variant of C-x m. See
   [[Sending-Mail.html#Sending-Mail][Sending Mail]].

-  C-x 5 . :: Find a tag in the current tag table in another frame. This
   runs =find-tag-other-frame=, the multiple-frame variant of M-.. See
   [[Tags.html#Tags][Tags]].

-  C-x 5 r filename RET :: Visit file filename read-only, and select its
   buffer in another frame. This runs =find-file-read-only-other-frame=.
   See [[Visiting.html#Visiting][Visiting]].

You can control the appearance and behavior of the newly-created frames
by specifying /frame parameters/. See
[[Frame-Parameters.html#Frame-Parameters][Frame Parameters]].

#+END_HTML
**** frame-maximum
+ toggle-frame-fullscreen <f11>
+ toggle-frame-maximized M-<f10>(Ubuntu系统菜单) ESC <f10>
+ 值得提起是因为在不同平台达到同样的效果真的很复杂

**** winner-undo(Emacs Window管理)
|-------------+-------------|
| C-c <left>  | winner-undo |
| C-c <right> | winner-redo |
|-------------+-------------|


支持连续多次的undo和redo，应该有一个类似yank-ring的机制

*** Window                                                         :window:
**** 移动其它窗口
***** scroll-other-window
C-M-v runs the command scroll-other-window

(scroll-other-window &optional ARG)

Scroll next window upward ARG lines; or near full screen if no ARG.
A near full screen is `next-screen-context-lines' less than a full screen.
The next window is the one below the current one; or the one at the top
if the current one is at the bottom.  Negative ARG means scroll downward.
If ARG is the atom `-', scroll downward by nearly full screen.
When calling from a program, supply as argument a number, nil, or `-'.

If `other-window-scroll-buffer' is non-nil, scroll the window
showing that buffer, popping the buffer up if necessary.
If in the minibuffer, `minibuffer-scroll-window' if non-nil
specifies the window to scroll.  This takes precedence over
`other-window-scroll-buffer'.
(setq other-window-scroll-buffer t)
(setq minibuffer-scroll-window t )
***** other-window
other-window is an interactive compiled Lisp function in `window.el'.

It is bound to C-x o.

(other-window COUNT &optional ALL-FRAMES)

Select another window in cyclic ordering of windows.
COUNT specifies the number of windows to skip, starting with the
selected window, before making the selection.  If COUNT is
positive, skip COUNT windows forwards.  If COUNT is negative,
skip -COUNT windows backwards.  COUNT zero means do not skip any
window, so select the selected window.  In an interactive call,
COUNT is the numeric prefix argument.  Return nil.

If the `other-window' parameter of the selected window is a
function and `ignore-window-parameters' is nil, call that
function with the arguments COUNT and ALL-FRAMES.

This function does not select a window whose `no-other-window'
window parameter is non-nil.

This function uses `next-window' for finding the window to
select.  The argument ALL-FRAMES has the same meaning as in
`next-window', but the MINIBUF argument of `next-window' is
always effectively nil.
**** modeline
1) 字符集 (C-返斜杠 切换)
   + C: Chinese-gbk
   + U: Unicode
2) 文件状态: **-
3) buffer-name
4) 其它等
**** Fonts
+ http://www.douban.com/group/topic/36620961/
+ http://www.iplaysoft.com/top10-programming-fonts.html


#+BEGIN_EXAMPLE
  (set-default-font "Dejavu Sans Mono 11")
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "WenQuanYi Micro Hei Mono" :size 18)))
#+END_EXAMPLE

+ 英文：Dejavu Sans Mono 11号
+ 中文：文泉驿等宽微米黑 18号

主要是用来解决org-mode里table的中英文对齐问题。

**** delete-other-windows
 |-------+----------------------|
 | C-x 1 | delete-other-windows |
 |-------+----------------------|
**** 多窗口
|---------+-------------------------------------+----------------------------------|
| 按键    | 命令                                | 作用                             |
|---------+-------------------------------------+----------------------------------|
| C-x 2   | split-window-vertically             | 垂直拆分窗口                     |
|---------+-------------------------------------+----------------------------------|
| C-x 3   | split-window-horizontally           | 水平拆分窗口                     |
|---------+-------------------------------------+----------------------------------|
| C-x o   | other-window                        | 选择下一个窗口                   |
|---------+-------------------------------------+----------------------------------|
| C-M-v   | scroll-other-window                 | 滚动下一个窗口                   |
|---------+-------------------------------------+----------------------------------|
| C-x 4 b | switch-to-buffer-other-window       | 在另一个窗口打开缓冲             |
|---------+-------------------------------------+----------------------------------|
| C-x 4   | display-buffer                      | 在另一个窗口打开缓冲，但不选中   |
| C-o     |                                     |                                  |
|---------+-------------------------------------+----------------------------------|
| C-x 4 f | find-file-other-window              | 在另一个窗口打开文件             |
|---------+-------------------------------------+----------------------------------|
| C-x 4 d | dired-other-window                  | 在另一个窗口打开文件夹           |
|---------+-------------------------------------+----------------------------------|
| C-x 4 m | mail-other-window                   | 在另一个窗口写邮件               |
|---------+-------------------------------------+----------------------------------|
| C-x 4 r | find-file-read-only-other-window    | 在另一个窗口以只读方式打开文件   |
|---------+-------------------------------------+----------------------------------|
| C-x 0   | delete-window                       | 关闭当前窗口                     |
|---------+-------------------------------------+----------------------------------|
| C-x 1   | delete-other-windows                | 关闭其它窗口                     |
|---------+-------------------------------------+----------------------------------|
| C-x 4 0 | kill-buffer-and-window              | 关闭当前窗口和缓冲               |
|---------+-------------------------------------+----------------------------------|
| C-x ^   | enlarge-window                      | 增高当前窗口                     |
|---------+-------------------------------------+----------------------------------|
| C-x {   | shrink-window-horizontally          | 将当前窗口变窄                   |
|---------+-------------------------------------+----------------------------------|
| C-x }   | enlarge-window-horizontally         | 将当前窗口变宽                   |
|---------+-------------------------------------+----------------------------------|
| C-x -   | shrink-window-if-larger-than-buffer | 如果窗口比缓冲大就缩小           |
|---------+-------------------------------------+----------------------------------|
| C-x +   | balance-windows                     | 所有窗口一样高                   |
|---------+-------------------------------------+----------------------------------|
|         | windmove-right                      | 切换到右边的窗口(类似：up, down, |
|         |                                     | left)                            |
|---------+-------------------------------------+----------------------------------|
**** 标准窗口重构
多数情况下,winner-undo(C-c LEFT)就足够了,自定义的重构窗口函数很少会使
用,所以用不着定义全局快捷键,这样反而会增加记忆负担.

*建议所有自定义的elisp函数均以"my"开头,"-"分隔单词*


#+BEGIN_EXAMPLE
  (defun my-window-layout()
    "重构窗口布局:左上左下右"
    (interactive)
    (delete-other-windows)
    (split-window-horizontally)
    (split-window-vertically)
    )

#+END_EXAMPLE

**** Emacs 字体增城
C-x C--
C-x C-+
**** 等宽字
Org表格,ditaa中文都需要

#+BEGIN_EXAMPLE
    (set-frame-font "DejaVu Sans Mono 15")
    (set-fontset-font "fontset-default" 'unicode"Droid Sans Fallback 15")
    (defun mono-font()
      (interactive)
      (set-frame-font "DejaVu Sans Mono 14")
      (set-fontset-font "fontset-default" 'unicode"Droid Sans Fallback 16")
      )
    (defun de-mono-font()
      (interactive)
      (set-frame-font "DejaVu Sans Mono 15")
      (set-fontset-font "fontset-default" 'unicode"Droid Sans Fallback 15")
      )
    (global-set-key (kbd "C-c f m") 'mono-font)
    (global-set-key (kbd "C-c f d") 'de-mono-font)
#+END_EXAMPLE

**** Emacs F2 F2
<f2> <f2> runs the command 2C-two-columns, which is an interactive

(2C-two-columns &optional BUFFER)

Split current window vertically for two-column editing.
When called the first time, associates a buffer with the current
buffer in *two-column minor mode* (use C-h m once in the mode,
for details.).

It runs `2C-other-buffer-hook' in the new buffer.
When called again, restores the screen layout with the current buffer
first and the associated buffer to its right.

*默认行宽变乍* 关闭当前buffer重新打开文件即可。

***

*** fonts                                                            :font:
**** +字体借鉴 VIM+

不喜欢中文字体（雅黑）。

#+BEGIN_SRC emacs-lisp
;; (set-frame-font "YaHei Consolas Hybird 11.5")
(set-frame-font "DejaVu Sans Mono 12")
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font)
                    charset
                    (font-spec :family "WenQuanYi Micro Hei Mono" :size 15)))
#+END_SRC

**** [[http://blog.csdn.net/hansoft/article/details/1502859][emacs encoding,font]] :blog:encoding:
***** encoding

如果 Emacs 识别的编码是错误的，可以用 =C-x <RET> r CODING-SYSTEM= 来重
新指定

Emacs在内部使用它自己的 Coding system，在读入文件时把该文件使用的
Coding system 转换为内部使用的 Coding sytem，在写入文件时把内部使用的
Coding system转换为该文件使用的coding system。

***** 字体

emacs用fontset指定字体。一个fontset对一组script分别指定字体。用
create-fontset-from-fontset-spec来创建fontset：


#+BEGIN_EXAMPLE
(create-fontset-from-fontset-spec  (concat   "-outline-Courier New-normal-r-*-*-18-*-*-*-c-*-fontset-gbk,"   "han:-outline-新宋体-normal-r-*-*-18-*-*-*-c-*-iso10646-1"))
#+END_EXAMPLE

fontset-gbk就是新创建的fontset的名字，当一个frame使用该fontset作为其font属性，该frame的default
font name就是用iso8859-1替换该fontset名字而得到的字体名。

han是一个script
name，为了向后兼容，也可以使用charset名，emacs通过变量charset-script-alist来映射charset到script

用set-fontset-font来增加或修改某个fontset，如：

#+BEGIN_EXAMPLE
(set-fontset-font "fontset-gbk" 'han
"-outline-新宋体-normal-r-/-/-18-/-/-/-c-/-iso10646-1")
#+END_EXAMPLE

最后用

#+BEGIN_EXAMPLE
(set-default-font "fontset-gbk")
#+END_EXAMPLE

来指定使用该fontset

****** tips

得到指定<frame>的fontset名，若<frame>为nil则为当前选择的frame

#+BEGIN_EXAMPLE
(frame-parameter <frame> 'font)
#+END_EXAMPLE

***** language environment

对于像unicode这种国际化的编码，某些字符是多个script共用的(比如中、日、
韩在unicode里就共用了一些字符)，如果判断这种字符的所属的script有误，就
会出现不期望的结果：


在LC_CTYPE为非中文locale的情况下，使用UTF-8 language environment，打开
一个包含“笔记”两字的utf-8编码的文件，“笔”字将会显示为一个方框(在没
有安装日文字体的情况下)。

这个“笔”字就被emacs判断为日语的字符，而我们没有日文字体，所以就显示
为了一个方框。

你必须告诉把你的语言信息告诉emacs，这可以通过以下方式：

- locale：设置LC_CTYPE=zh_CN就能解决上面的问题
- emacs的language
   environment：如果你不想改变locale，可以改变emacs的language
   environment，事实上language
   environment就是为此目的设立的，改变locale的方法实际上也是间接改变language
   environment---当没有指定language
   enviroment时，emacs会根据当前的locale推测一个language
   environment，这在LC_CTYPE=zh_CN的locale下推测的结果是Chinese-GB，正是我们想要设置的。

language environment还给一些编码相关的变量设置默认值，比较重要的有：

- 优先编码列表
   当读入一个文件时，以该列表的顺序来识别文件的编码，用prefer-coding-system在该列表首插入一个编码
- default-buffer-file-coding-system 新建文件的默认编码

C-h L来查看当前或其他language environment的信息，使用M-x
set-lanaguage-environment来修改。

C-h C查看指定的coding system，如果不指定参数则显示当前所有的coding
system设置，包括优先编码列表

****** troubles

在en_US.UTF-8下推测的language
environment是UTF-8，按理说这时相关的编码变量应该也被设置为UTF-8 language
environment设置的默认值，不过在我的环境下这些变量的值似乎和UTF-8
language environment无关，于是不得不在.emacs下明确设置一下：

#+BEGIN_EXAMPLE
      (if (equal current-language-environment "UTF-8")       (prefer-coding-system 'gb2312)    (prefer-coding-system 'Utf-8)       )      )   )   (add-hook 'set-language-environment-hook 'utf8gbk)   (set-lanaguage-environment 'UTF-8)
#+END_EXAMPLE

在UTF-8这个language
environment下，emacs并不能自动识别gbk编码的文件，因为其缺省设置的优先编码列表没有gbk，上面的lisp对UTF-8
language
environment做了定制，之所以又加了一次utf-8编码是因为希望在UTF-8这个language
environment下首选的编码是utf-8。

***** tips

用C-u C-x =(describe char)查看buffer中某个字符的信息

**** encoding                                                   :encoding:

1.查看当前buffer的编码：M-x describe-coding-system

2.列出所有编码：C-x <RET> r <TAB>

3.以指定编码重读当前buffer：C-x <RET> r utf-8，（revert-buffer-with-coding-system）
4.改变当前buffer的编码：C-x <RET> f utf-8，（set-buffer-file-coding-system）

5.设定下一步操作的编码格式：C-x <RET> c，（universal-coding-system-argument）

***** 乱码问题

不知为何，每次打开 journal.org 文件显示的都是乱码。

解决使用 gedit 强行保存。

*** theme                                                           :theme:
**** color-theme vs customize-theme                                :theme:

***** reference

+ [[http://www.emacswiki.org/emacs/CustomThemes][Emacswiki: customize-theme]]
+ [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html][EmacsManual: customzie themes]]

***** customize-theme

Starting with version 23, vanilla GnuEmacs introduced custom them.

Custom themes are similar to color themes. Though they are newer, they
do not replace color themes –- each approach has its advantages.

#+BEGIN_EXAMPLE
hello world
#+END_EXAMPLE

#+BEGIN_SRC python
print "hello world"
#+END_SRC


fd
+fd+ [1]

_fd_ [[fd]]

/fd/

=fd=

*fd*

***** 小结

customize themes 内置，但没有 color-theme 那么多主题。

暂时使用 light blue theme. 对比度比以前的黑色背景要强一些。

** Games
*** games
1. built-in
   + *tetria* 俄罗斯方块
   + *gomoku*  五子棋
   + *mpuz* 填字游戏
   + *snake*  贪吃蛇
   + *zone*
   + *dunnet*
2. others
   + *2048*

*** tetria
|---------+--------------------|
| key     | binding            |
|---------+--------------------|
| SPC     | tetris-move-bottom |
| n       | tetris-start-game  |
| p       | tetris-pause-game  |
| q       | tetris-end-game    |
| <down>  | tetris-rotate-next |
| <left>  | tetris-move-left   |
| <right> | tetris-move-right  |
| <up>    | tetris-rotate-prev |
|---------+--------------------|

** key bindings
*** XKeymacs
+ http://www.cam.hi-ho.ne.jp/oishi/indexen.html
+ http://www.emacswiki.org/emacs/XKeymacs
+ http://www.v2ex.com/t/67869


1. what

   XKeymacs is a keyboard utility to realize emacs like-useability on
   all windows applications. With XKeymacs you can use emacs
   keybindings with any windows application. You can create a keyboard
   macro and assign any shortcut key too. You also get bash-like
   command completion in your DOS shell.

   XKeymacs is a keyboard utility to realize emacs like-useability on
   all windows applications:

*** custom word with emacs keybindings

参考:
+ [[http://hints.macworld.com/article.php?story=20070215034801484]]

**** MS Word配置和宏
Emacs users get addicted to the standard key bindings (which are also
available in Cocoa apps). Microsoft Word doesn't support these by
default, but you can add them through customization. Here are the ones
I find most useful:

+ StartOfLine: Control-A
+ EndOfLine: Control-E
+ LineUp: Control-P
+ LineDown: Control-N
+ CharLeft: Control-B
+ CharRight: Control-F

To set these up in Word, go to Tools » Customize » Customize
Keyboard. From the Categories panel, choose All commands. Find each of
the entries in the above list, select the Press new shortcut key box
for each, then type the shortcut as shown above and click
Assign. (Word will tell you if any of the shortcuts are currently
assigned to other commands.)

The icing on the cake is to get Control-K working. You can do this
with a macro. Go to Tools » Macro » Macros. Set the macro name to
CtrlK, then click Create. When the macro window appears, add the
following lines just before the End Sub line:
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    Selection.Cut
Hit the W icon on the toolbar to save the macro and go back to
Word. Now go back to the Tools » Customize » Customize Keyboard
window, choose Macros from the Categories pane, and assign your new
macro to Control-K.

**** TODO 插件
- State "TODO"       from ""           [2015-03-10 二 21:05]

*** ABORT [#C] Word快捷键改为Emacs风格
DEADLINE: <2015-03-15 日>
- State "ABORT"      from "TODO"       [2015-03-04 三 01:41]
- State "TODO"       from ""           [2015-03-01 日 12:29]
 Date:<2015-02-28 六>

 Link:
  + http://emacsblog.org/2007/02/18/emacs-key-bindings-in-ms-word/
  + http://sourceforge.net/projects/womacs/
*** DONE [#C] OpenOffice Emacs Key bindings
DEADLINE: <2015-03-15 日>
- State "DONE"       from "START"      [2015-03-04 三 01:28]
- State "START"      from "TODO"       [2015-03-04 三 01:15]
- State "TODO"       from ""           [2015-03-01 日 12:28]
 Date:<2015-02-28 六>


Link:
+ http://www.emacswiki.org/emacs/OpenOffice
+ http://wideaperture.net/blog/?p=4324

*** define-key                                                        :key:
(define-key keymap key def)

in keymap, define key sequence key as def.
keymap is a keymap.

key is a string or a vector of symbols and characters, representing a
sequence of keystrokes and events.  non-ascii characters with codes
above 127 (such as iso latin-1) can be represented by vectors.
two types of vector have special meanings:
 [remap command] remaps any key binding for command.
 [t] creates a default definition, which applies to any event with no
    other definition in keymap.

def is anything that can be a key's definition:
 nil (means key is undefined in this keymap),
 a command (a lisp function suitable for interactive calling),
 a string (treated as a keyboard macro),
 a keymap (to define a prefix key),
 a symbol (when the key is looked up, the symbol will stand for its
    function definition, which should at that time be one of the above,
    or another symbol whose function definition is used, etc.),
 a cons (string . defn), meaning that defn is the definition
    (defn should be a valid definition in its own right),
 or a cons (map . char), meaning use definition of char in keymap map,
 or an extended menu item definition.

*** keybinding prefix
+ http://stackoverflow.com/questions/25232717/emacs-error-key-sequence

1. Question
   #+BEGIN_EXAMPLE
     (global-set-key (kbd "M-- M-u") 'upcase-word)
     (global-set-key (kbd "M-- M-c") 'capitalize-word)

     global-set-key: Key sequence M-- M-u starts with non-prefix key M--
   #+END_EXAMPLE

2. Ans
   + the key is already bound
   + de-keybinding

   #+BEGIN_EXAMPLE
     (global-set-key (kbd "M--") nil)        ; de-keybinding M--(negative-argument)
     (global-set-key (kbd "M-- M-u") 'upcase-word)
     (global-set-key (kbd "M-- M-c") 'capitalize-word)
   #+END_EXAMPLE

*** keybinds
- State "DONE"       from "TODO"       [2015-03-30 一 17:14]
http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html

1. keybinding
   #+BEGIN_SRC emacs-lisp
     ;; redefines C-x C-\ to move down a line.
     (global-set-key (kbd "C-x C-\\") 'next-line)
     (global-set-key [?\C-x ?\C-\\] 'next-line)
     (global-set-key [(control ?x) (control ?\\)] 'next-line)

     (global-set-key [M-mouse-1] 'mouse-set-point)
   #+END_SRC

2. commands
   1) global-set-key

      + (global-set-key key binding)
      + (define-key (current-global-map) key binding)

   2) glabal-unset-key
      + (global-unset-key key)
      + (define-key (current-global-map) key nil)

   3) local-set-key
      + (local-set-key key binding)
      + (define-key (current-local-map) key binding)

   4) local-unset-keybinds
      + (local-unset-key key)
      + (define-key (current-local-map) key nil)

** 快捷键                                                        :shortcuts:
*** 基本编辑
**** 文件与目录

|---------------+----------------------------------+------------------------|
| 快捷键（C-x） | 命令（M-x）                      | 说明                   |
|---------------+----------------------------------+------------------------|
| C-x C-f       | find-file                        | 打开文件或目录         |
| C-x C-c       | save-buffers-kill-emacs          | 保存推出               |
| C-x C-z       | iconify-or-deiconify-fram        | 挂起（最小化）         |
| C-x C-r       | find-file-read-only              | 以只读模式打开         |
| C-x i         | insert-file                      | 插入文件               |
| C-x C-s       | save-buffer                      | 保存                   |
| C-x s         | save-some-buffer                 | 保存所有未保存的缓冲区 |
| C-x C-w       | write-file                       | 另存为文件             |
| C-x RET r     | revert-buffer-with-coding-system | 以制定编码读取文件     |
| C-x RET f     | set-bugger-with-coding-system    | 以制定编码保存文件     |
| C-x d         | dired                            | 进入目录列表模式       |
| C-x C-d       | list-directory                   | 获取文件列表           |
|---------------+----------------------------------+------------------------|

|---------------+-------------------------+-----------------------------|
| 按键          | 命令                    | 作用                        |
|---------------+-------------------------+-----------------------------|
| C-x C-f       | find-file               | 打开文件                    |
|---------------+-------------------------+-----------------------------|
| C-x C-v       | find-alternate-file     | 打开另一个文件              |
|---------------+-------------------------+-----------------------------|
| C-x C-s       | save-buffer             | 保存文件                    |
|---------------+-------------------------+-----------------------------|
| C-x C-w       | write-file              | 另存文件                    |
|---------------+-------------------------+-----------------------------|
| C-q (n)       | quoted-insert           | 插入字符，n表示字符的八进制 |
|               |                         | ASCII码                     |
|---------------+-------------------------+-----------------------------|
| C-x 8         | ucs-insert              | 插入Unicode字符             |
|---------------+-------------------------+-----------------------------|
| C-d           | delete-char             | 删除光标处字符              |
|---------------+-------------------------+-----------------------------|
| Backspace     | delete-backward-char    | 删除光标前字符              |
|---------------+-------------------------+-----------------------------|
| M-d           | kill-word               | 删除光标起单词              |
|---------------+-------------------------+-----------------------------|
| M-Backspace   | backward-kill-word      | 删除光标前单词              |
|---------------+-------------------------+-----------------------------|
| C-k           | kill-line               | 删除光标起当前行            |
|---------------+-------------------------+-----------------------------|
| M-k           | kill-sentence           | 删除光标起句子              |
|---------------+-------------------------+-----------------------------|
| C-x Backspace | backward-kill-sentence  | 删除光标前句子              |
|---------------+-------------------------+-----------------------------|
| (none)        | kill-paragraph          | 删除光标起段落              |
|---------------+-------------------------+-----------------------------|
| (none)        | backward-kill-paragraph | 删除光标前段落              |
|---------------+-------------------------+-----------------------------|
| C-/           | undo                    | 撤销                        |
|---------------+-------------------------+-----------------------------|
| C-_           | undo                    | 撤销                        |
|---------------+-------------------------+-----------------------------|
| C-x u         | undo                    | 撤销                        |
|---------------+-------------------------+-----------------------------|
| C-g           | keyboard-quit           | 撤销命令                    |
|---------------+-------------------------+-----------------------------|
| C-h t         | help-with-tutorial      | 调出Emacs Tutorial          |
|---------------+-------------------------+-----------------------------|
| C-h r         | info-emacs-manual       | 调出Emacs Manual            |
|---------------+-------------------------+-----------------------------|
| C-h k         | describe-key            | 查看对应command帮助         |
| (command)     |                         |                             |
|---------------+-------------------------+-----------------------------|
| C-o           | open-line               | 插入空行                    |
|---------------+-------------------------+-----------------------------|
| C-x C-o       | delete-blank-line       | 删除空行                    |
|---------------+-------------------------+-----------------------------|
| C-x z         | repeat                  | 重复前个命令                |
|---------------+-------------------------+-----------------------------|

**** 光标

|------+------+------+------+------|
|      | 向前 | 向后 | 向下 | 向上 |
|------+------+------+------+------|
| 翻页 |      |      | C-v  | M-v  |
| 字符 | C-f  | C-b  | C-n  | C-p  |
| 单词 | M-f  | M-b  |      |      |
| 句   | M-a  | M-e  |      |      |
| 行   | C-a  | C-e  |      |      |
| 段落 | M-{  | M-}  |      |      |
| 缓冲区 | M-<  | M->  |      |      |
|--------+------+------+------+------|


|---------+---------------------+--------------------------------|
| M-g M-g | goto-line           | 跳转到某行                     |
| M-x     | goto-char           | 跳转到字符位置                 |
| C-M-l   | reposition-window   | 将当前行卷至页面中部           |
| C-l     | recenter            | 刷新页面，将当前行卷至页面中部 |
| M-r M-x | move-to-window-line | 移动光标之页面的中间行         |
|---------+---------------------+--------------------------------|

|---------+---------------------+-------------------------------------------|
| 按键    | 命令                | 作用                                      |
|---------+---------------------+-------------------------------------------|
| C-f     | forward-char        | 向前一个字符                              |
|---------+---------------------+-------------------------------------------|
| C-b     | backward-char       | 向后一个字符                              |
|---------+---------------------+-------------------------------------------|
| C-p     | previous-line       | 上移一行                                  |
|---------+---------------------+-------------------------------------------|
| C-n     | next-line           | 下移一行                                  |
|---------+---------------------+-------------------------------------------|
| M-f     | forward-word        | 向前一个单词                              |
|---------+---------------------+-------------------------------------------|
| M-b     | backward-word       | 向后一个单词                              |
|---------+---------------------+-------------------------------------------|
| C-a     | beginning-of-line   | 移到行首                                  |
|---------+---------------------+-------------------------------------------|
| C-e     | end-of-line         | 移到行尾                                  |
|---------+---------------------+-------------------------------------------|
| M-e     | forward-sentence    | 移到句首                                  |
|---------+---------------------+-------------------------------------------|
| M-a     | backward-sentence   | 移到句尾                                  |
|---------+---------------------+-------------------------------------------|
| M-}     | forward-paragraph   | 下移一段                                  |
|---------+---------------------+-------------------------------------------|
| M-{     | backward-paragraph  | 上移一段                                  |
|---------+---------------------+-------------------------------------------|
| C-v     | scroll-up           | 下移一屏                                  |
|---------+---------------------+-------------------------------------------|
| M-v     | scroll-down         | 上移一屏                                  |
|---------+---------------------+-------------------------------------------|
| C-x ]   | forward-page        | 下移一页                                  |
|---------+---------------------+-------------------------------------------|
| C-x [   | backward-page       | 上移一页                                  |
|---------+---------------------+-------------------------------------------|
| M-<     | beginning-of-buffer | 移到文档头                                |
|---------+---------------------+-------------------------------------------|
| M->     | end-of-buffer       | 移到文档尾                                |
|---------+---------------------+-------------------------------------------|
| M-g g n | goto-line           | 移到第n行                                 |
|---------+---------------------+-------------------------------------------|
| (none)  | goto-char           | 移到第n个字符                             |
|---------+---------------------+-------------------------------------------|
| C-l     | recenter            | 将当前位置放到页面中间(Emacs最喜欢的地方) |
|---------+---------------------+-------------------------------------------|
| M-n     | digit-argument      | 重复下个命令n次                           |
|---------+---------------------+-------------------------------------------|
| C-u n   | universal-argument  | 重复下个命令n次，n默认为4                 |
|---------+---------------------+-------------------------------------------|

**** 删除
|--------------+-----------------------------+------------|
|              | 向前                        | 向后       |
|--------------+-----------------------------+------------|
| 字符         | C-d                         | DEL   |
| 单词         | M-d                         | M-DEL |
| 行           | C-k(删除至行尾)             |       |
| 整行         | C-M-Backspace               |       |
| 按表达式删除 | C-M-k                       |       |
| 区块         | C-w                         |       |
| 删除连续空格 | M-x delete-horizontal-space |       |
|--------------+-----------------------------+-------|

|---------------+-------------------------+-----------------------------------------------|
| C-d           | delete-char             | 删除光标处字符                                |
| Backspace     | delete-backward-char    | 删除光标前字符                                |
| M-\           | delete-horizontal-space | 删除光标处的所有空格和Tab字符                 |
| M-SPC         | just-one-space          | 删除光标处的所有空格和Tab字符，但留下一个     |
| C-x C-o       | delete-blank-lines      | 删除光标周围的空白行，保留当前行              |
| M-^           | delete-indentation      | 将两行合为一行，删除之间的空白和缩进          |
| C-k           | kill-line               | 从光标处起删除该行                            |
| C-S-Backspace | kill-whole-line         | 删除整行                                      |
| C-w           | kill-region             | 删除区域                                      |
| M-w           | kill-ring-save          | 复制到kill 环，而不删除                       |
| M-d           | kill-word               | 删除光标起一个单词                            |
| M-Backspace   | backward-kill-word      | 删除光标前单词                                |
| M-k           | kill-sentence           | 删除光标起一句                                |
| C-x Backspace | backward-kill-sentence  | 删除光标前删一句                              |
| M-z char      | zap-to-char             | 删至字符char为止                              |
|---------------+-------------------------+-----------------------------------------------|

**** 窗口管理
|------------+------------------------------+--------|
|C-x 2       |split-window-vertically       |水平分割|
|C-x 3       |split-window-horizontally     |竖直分割|
|C-x 1       |delete-other-window           |只保留当前窗格|
|C-x 0       |delete-window                 |关闭当前窗格|
|C-x o       |other-window                  |切换窗格|
|C-M-v       |scroll-other-windwo           |滚动下一个窗格|
|------------+------------------------------+--------------|

|---------+-------------------------------------+----------------------------------|
| 按键    | 命令                                | 作用                             |
|---------+-------------------------------------+----------------------------------|
| C-x 2   | split-window-vertically             | 垂直拆分窗口                     |
|---------+-------------------------------------+----------------------------------|
| C-x 3   | split-window-horizontally           | 水平拆分窗口                     |
|---------+-------------------------------------+----------------------------------|
| C-x o   | other-window                        | 选择下一个窗口                   |
|---------+-------------------------------------+----------------------------------|
| C-M-v   | scroll-other-window                 | 滚动下一个窗口                   |
|---------+-------------------------------------+----------------------------------|
| C-x 4 b | switch-to-buffer-other-window       | 在另一个窗口打开缓冲             |
|---------+-------------------------------------+----------------------------------|
| C-x 4   | display-buffer                      | 在另一个窗口打开缓冲，但不选中   |
| C-o     |                                     |                                  |
|---------+-------------------------------------+----------------------------------|
| C-x 4 f | find-file-other-window              | 在另一个窗口打开文件             |
|---------+-------------------------------------+----------------------------------|
| C-x 4 d | dired-other-window                  | 在另一个窗口打开文件夹           |
|---------+-------------------------------------+----------------------------------|
| C-x 4 m | mail-other-window                   | 在另一个窗口写邮件               |
|---------+-------------------------------------+----------------------------------|
| C-x 4 r | find-file-read-only-other-window    | 在另一个窗口以只读方式打开文件   |
|---------+-------------------------------------+----------------------------------|
| C-x 0   | delete-window                       | 关闭当前窗口                     |
|---------+-------------------------------------+----------------------------------|
| C-x 1   | delete-other-windows                | 关闭其它窗口                     |
|---------+-------------------------------------+----------------------------------|
| C-x 4 0 | kill-buffer-and-window              | 关闭当前窗口和缓冲               |
|---------+-------------------------------------+----------------------------------|
| C-x ^   | enlarge-window                      | 增高当前窗口                     |
|---------+-------------------------------------+----------------------------------|
| C-x {   | shrink-window-horizontally          | 将当前窗口变窄                   |
|---------+-------------------------------------+----------------------------------|
| C-x }   | enlarge-window-horizontally         | 将当前窗口变宽                   |
|---------+-------------------------------------+----------------------------------|
| C-x -   | shrink-window-if-larger-than-buffer | 如果窗口比缓冲大就缩小           |
|---------+-------------------------------------+----------------------------------|
| C-x +   | balance-windows                     | 所有窗口一样高                   |
|---------+-------------------------------------+----------------------------------|
|         | windmove-right                      | 切换到右边的窗口(类似：up, down, |
|         |                                     | left)                            |
|---------+-------------------------------------+----------------------------------|

**** frame
- C-x 5 2 :: Create a new frame (=make-frame-command=).

- C-x 5 b bufname RET :: Select buffer bufname in another frame. This
  runs =switch-to-buffer-other-frame=.

- C-x 5 f filename RET :: Visit file filename and select its buffer in
  another frame. This runs =find-file-other-frame=. See
  [[Visiting.html#Visiting][Visiting]].

- C-x 5 d directory RET :: Select a Dired buffer for directory
  directory in another frame. This runs =dired-other-frame=. See
  [[Dired.html#Dired][Dired]].

- C-x 5 m :: Start composing a mail message in another frame. This runs
  =mail-other-frame=. It is the other-frame variant of C-x m. See
  [[Sending-Mail.html#Sending-Mail][Sending Mail]].

- C-x 5 . :: Find a tag in the current tag table in another frame. This
  runs =find-tag-other-frame=, the multiple-frame variant of M-.. See
  [[Tags.html#Tags][Tags]].

- C-x 5 r filename RET :: Visit file filename read-only, and select its
  buffer in another frame. This runs =find-file-read-only-other-frame=.
  See [[Visiting.html#Visiting][Visiting]].

- toggle-frame-fullscreen <f11>

- toggle-frame-maximized M-<f10>(Ubuntu系统菜单) ESC <f10>
**** 缓冲区管理
|---------+------------------+----------------|
| C-x C-b | list-buffers     | 查看缓冲区列表 |
| C-x b   | switch-to-buffer | 切换缓冲区     |
| C-x k   | kill-buffer      | 关闭缓冲       |
|---------+------------------+----------------|

|-----------------+-------------------------------+-----------------------------------|
| 按键            | 命令                          | 作用                              |
|-----------------+-------------------------------+-----------------------------------|
| C-x b           | switch-to-buffer              | 打开或新建一个缓冲                |
|-----------------+-------------------------------+-----------------------------------|
| C-x 4 b         | switch-to-buffer-other-window | 在另一个window中打开或新建一个缓  |
|                 |                               | 冲                                |
|-----------------+-------------------------------+-----------------------------------|
| C-x 5 b         | switch-to-buffer-other-frame  | 在另一个frame中打开或新建一个缓冲 |
|-----------------+-------------------------------+-----------------------------------|
| C-x LEFT        | next-buffer                   | 移动到下一个缓冲                  |
|-----------------+-------------------------------+-----------------------------------|
| C-x RIGHT       | previous-buffer               | 移动到前一个缓冲                  |
|-----------------+-------------------------------+-----------------------------------|
| C-x C-b         | list-buffers                  | 显示所有缓冲                      |
|-----------------+-------------------------------+-----------------------------------|
| C-u C-x C-b     |                               | 显示映射到文件的缓冲              |
|-----------------+-------------------------------+-----------------------------------|
| C-x k           | kill-buffer                   | 关闭缓冲                          |
|-----------------+-------------------------------+-----------------------------------|
|                 | kill-some-buffers             | 关闭多个缓冲                      |
|-----------------+-------------------------------+-----------------------------------|
|                 | clean-buffer-list             | 关闭三天未使用的缓冲              |
|-----------------+-------------------------------+-----------------------------------|
| C-x C-q         | toggle-read-only              | 切换缓冲只读属性                  |
|-----------------+-------------------------------+-----------------------------------|
| C-u M-g M-g num |                               | 跳至前一缓冲num行                 |
|-----------------+-------------------------------+-----------------------------------|
|                 | rename-buffer                 | 重命名缓冲                        |
|-----------------+-------------------------------+-----------------------------------|
|                 | rename-uniquely               | 重命名缓冲，在其名后加数字        |
|-----------------+-------------------------------+-----------------------------------|
|                 | view-buffer                   | 只读方式打开缓冲                  |
|-----------------+-------------------------------+-----------------------------------|
|                 | buffer-menu                   | 打开Buffer Menu                   |
|-----------------+-------------------------------+-----------------------------------|
|                 | make-indirect-buffer          | 建立间接缓冲                      |
|-----------------+-------------------------------+-----------------------------------|
|                 | clone-indirect-buffer         | 建立当前缓冲的间接缓冲            |
|-----------------+-------------------------------+-----------------------------------|

**** 搜索替换
|-----------+-------------------------+------------------------|
| 增量搜索  |                         |                        |
|-----------+-------------------------+------------------------|
| C-s M-x   | isearch-forward         | 向前增量搜索           |
| C-r M-x   | isearch-backward        | 向后增量搜索           |
| C-M-s M-x | isearch-forward-regexp  | 正则表达式向前增量搜索 |
| C-M-r M-x | isearch-backward-regexp | 正则表达式向后增量搜索 |
|-----------+-------------------------+------------------------|
| 一般搜索  |                         |                        |
|-----------+-------------------------+------------------------|
| M-x       | search-forward          | 向前搜索               |
| M-x       | search-backward         | 向后搜索               |
| M-x       | search-forward-regexp   | 正则表达式向前搜索     |
| M-x       | search-backwarg-regexp  | 正则表达式向后搜索     |
|-----------+-------------------------+------------------------|
| 询问替换  |                         |                        |
| M-% M-x   | query-replace           | 询问替换               |
| C-M-% M-x | query-replace-regexp    | 正则表达式询问替换     |
|-----------+-------------------------+------------------------|

|-----------+-------------------------+--------------------------------------------|
| 按键      | 命令                    | 作用                                       |
|-----------+-------------------------+--------------------------------------------|
| C-s       | isearch-forward         | 向前进行增量查找                           |
|-----------+-------------------------+--------------------------------------------|
| C-r       | isearch-backward        | 向后进行增量查找                           |
|-----------+-------------------------+--------------------------------------------|
| M-c       |                         | (查找状态)切换大写敏感                     |
|-----------+-------------------------+--------------------------------------------|
| C-j       | newline-and-indent      | (查找状态)输入换行符                       |
|-----------+-------------------------+--------------------------------------------|
| M-Tab     | isearch-complete        | (查找状态)自动匹配                         |
|-----------+-------------------------+--------------------------------------------|
| C-h C-h   |                         | (查找状态)进入查找帮助                     |
|-----------+-------------------------+--------------------------------------------|
| C-w       |                         | (查找状态)将光标处单词复制到查找区域       |
|-----------+-------------------------+--------------------------------------------|
| C-y       |                         | (查找状态)将光标处直到行尾内容复制到查找区 |
|           |                         | 域                                         |
|-----------+-------------------------+--------------------------------------------|
| M-y       |                         | (查找状态)把kill 环中最后一项复制到查找区  |
|           |                         | 域                                         |
|-----------+-------------------------+--------------------------------------------|
| C-M-w     |                         | (查找状态)删除查找区域最后一个字符         |
|-----------+-------------------------+--------------------------------------------|
| C-M-y     |                         | (查找状态)将光标处字符复制到查找区域最后   |
|-----------+-------------------------+--------------------------------------------|
| C-f       |                         | (查找状态)将光标处字符复制到查找区域最后   |
|-----------+-------------------------+--------------------------------------------|
| C-s RET   | search-forward          | 向前进行简单查找                           |
|-----------+-------------------------+--------------------------------------------|
| C-r RET   | search-backward         | 向后进行简单查找                           |
|-----------+-------------------------+--------------------------------------------|
| M-s w     | isearch-forward-word    | 向前进行词组查找                           |
|-----------+-------------------------+--------------------------------------------|
| M-s w RET | word-search-forward     | 向前进行词组查找（非增量方式）             |
|-----------+-------------------------+--------------------------------------------|
| M-s w C-r | word-search-backward    | 向后进行词组查找（非增量方式）             |
| RET       |                         |                                            |
|-----------+-------------------------+--------------------------------------------|
| C-M-s     | isearch-forward-regexp  | 向前进行正则查找                   |
|-----------+-------------------------+--------------------------------------------|
| C-M-r     | isearch-backward-regexp | 向后进行正则查找                           |
|-----------+-------------------------+--------------------------------------------|
|           | replace-string          | 全文替换                                   |
|-----------+-------------------------+--------------------------------------------|
|           | replace-regexp          | 全文正则替换                               |
|-----------+-------------------------+--------------------------------------------|
| M-%       | query-replace           | 查找替换                                   |
|-----------+-------------------------+--------------------------------------------|
|           | recursive-edit          | 进入递归编辑                               |
|-----------+-------------------------+--------------------------------------------|
|           | abort-recursive-edit    | 退出递归编辑                               |
|-----------+-------------------------+--------------------------------------------|
|           | top-level               | 退出递归编辑                               |
|-----------+-------------------------+--------------------------------------------|

**** 复制与粘贴
|---------------+-------------------------+----------------------------------------------|
| 按键          | 命令                    | 作用                                         |
|---------------+-------------------------+----------------------------------------------|
| C-d           | delete-char             | 删除光标处字符                               |
|---------------+-------------------------+----------------------------------------------|
| Backspace     | delete-backward-char    | 删除光标前字符                               |
|---------------+-------------------------+----------------------------------------------|
| M-\           | delete-horizontal-space | 删除光标处的所有空格和Tab字符                |
|---------------+-------------------------+----------------------------------------------|
| M-SPC         | just-one-space          | 删除光标处的所有空格和Tab字符，但留下一个    |
|---------------+-------------------------+----------------------------------------------|
| C-x C-o       | delete-blank-lines      | 删除光标周围的空白行，保留当前行             |
|---------------+-------------------------+----------------------------------------------|
| M-^           | delete-indentation      | 将两行合为一行，删除之间的空白和缩进         |
|---------------+-------------------------+----------------------------------------------|
| C-k           | kill-line               | 从光标处起删除该行                           |
|---------------+-------------------------+----------------------------------------------|
| C-S-Backspace | kill-whole-line         | 删除整行                                     |
|---------------+-------------------------+----------------------------------------------|
| C-w           | kill-region             | 删除区域                                     |
|---------------+-------------------------+----------------------------------------------|
| M-w           | kill-ring-save          | 复制到kill 环，而不删除                      |
|---------------+-------------------------+----------------------------------------------|
| M-d           | kill-word               | 删除光标起一个单词                           |
|---------------+-------------------------+----------------------------------------------|
| M-Backspace   | backward-kill-word      | 删除光标前单词                               |
|---------------+-------------------------+----------------------------------------------|
| M-k           | kill-sentence           | 删除光标起一句                               |
|---------------+-------------------------+----------------------------------------------|
| C-x Backspace | backward-kill-sentence  | 删除光标前删一句                             |
|---------------+-------------------------+----------------------------------------------|
| M-z char      | zap-to-char             | 删至字符char为止                             |
|---------------+-------------------------+----------------------------------------------|
| C-y           | yank                    | 召回                                         |
|---------------+-------------------------+----------------------------------------------|
| M-y           | yank-pop                | 召回前一个                                   |
|---------------+-------------------------+----------------------------------------------|
| C-M-w         | append-next-kill        | 下一个删掉内容和上次删除合并                 |
|---------------+-------------------------+----------------------------------------------|
| C-h v         | describe-variable       | 显示变量内容                                 |
|---------------+-------------------------+----------------------------------------------|
| (none)        | append-to-buffer        | 将区域中内容加入到一个buffer中               |
|---------------+-------------------------+----------------------------------------------|
| (none)        | prepend-to-buffer       | 将区域中内容加入到一个buffer光标前           |
|---------------+-------------------------+----------------------------------------------|
| (none)        | copy-to-buffer          | 区域中内容加入到一个buffer中，删除该buffer原 |
|               |                         | 有内容                                       |
|---------------+-------------------------+----------------------------------------------|
| (none)        | insert-buffer           | 在该位置插入指定的buffer中所有内容           |
|---------------+-------------------------+----------------------------------------------|
| (none)        | append-to-file          | 将区域中内容复制到一个文件中                 |
|---------------+-------------------------+----------------------------------------------|
| (none)        | cua-mode                | 启用/停用CUA绑定                             |
|---------------+-------------------------+----------------------------------------------|

|-------------------+-----------------------------|
| 变量              | 作用                        |
|-------------------+-----------------------------|
| kill-read-only-ok | 是否在只读文件启用kill 命令 |
|-------------------+-----------------------------|
| kill-ring         | kill环                      |
|-------------------+-----------------------------|
| kill-ring-max     | kill环容量                  |
|-------------------+-----------------------------|

**** 标记
|---------+-------------------------+----------------------|
| 按键    | 命令                    | 作用                 |
|---------+-------------------------+----------------------|
| C-@     | set-mark-command        | 设定标记             |
|---------+-------------------------+----------------------|
| C-x C-x | exchange-point-and-mark | 交换标记和光标位置   |
|---------+-------------------------+----------------------|
| C-w     | kill-region             | 删除区域中内容       |
|---------+-------------------------+----------------------|
| C-x C-u | upcase-region           | 将区域中字母改为大写 |
|---------+-------------------------+----------------------|
| C-x h   | mark-whole-buffer       | 全选                 |
|---------+-------------------------+----------------------|
| C-x C-p | mark-page               | 选取一页             |
|---------+-------------------------+----------------------|
| M-h     | mark-paragraph          | 选取一段             |
|---------+-------------------------+----------------------|
| M-@     | mark-word               | 选取一个单词         |
|---------+-------------------------+----------------------|
| C-@ C-@ |                         | 加入点到标记环       |
|---------+-------------------------+----------------------|
| C-u C-@ |                         | 在标记环中跳跃       |
|---------+-------------------------+----------------------|
| C-x C-@ | pop-global-mark         | 在全局标记环中跳跃   |
|---------+-------------------------+----------------------|
| (none)  | transient-mark-mode     | 非持久化标记模式     |
|---------+-------------------------+----------------------|

|-----------------------------+------------------------|
| 变量                        | 作用                   |
|-----------------------------+------------------------|
| set-mark-command-repeat-pop | 是否使用C-@连续跳跃    |
|-----------------------------+------------------------|
| mark-ring-max               | 标记环最大容量         |
|-----------------------------+------------------------|
| mark-even-if-nonactive      | 是否只使用激活状态标记 |
|-----------------------------+------------------------|

**** 书签
|---------------------+---------------+--------------|
| C-x r m             | bookmark-set  | 设置书签     |
| C-x r b             | bookmark-jump | 跳转到书签   |
| C-x r l             | bookmark-list | 列出所有书签 |
| M-x bookmark-delete |               | 删除书签     |
|         | bookmark-save        | 将书签保存到书签文件中 |
|---------------------+---------------+--------------|

书签列表操作
|-----+--------------|
| d   | 标记删除     |
| u   | 取消删除标记 |
| x   | 执行删除     |
| r   | 重命名       |
| q   | 关闭列表     |
| o   |              |
| C-o |              |
| m   |              |
| u   |              |
| v   |              |
| s   |              |
|-----+--------------|

**** 帮助
|----------+--------------------------+-----------------------------------------------------|
| C-h ?    |                          | 关于帮助系统的帮助，可以通过SPC和DEL键滚动，ESC推出 |
| C-h t    | M-x help-with-tutorial   | 进入《Emacs快速指南》                               |
| C-h r    | M-x info-emacs-manual    | Emacs使用手册                                       |
| C-h i    | M-x info                 | 《Emacs说明》                                       |
| C-h a    | M-x apropos-command      | 搜索命令                                            |
| C-h v    | M-x describe-variable    | 查看变量说明                                        |
| C-h f    | M-x describe-function    | 查看函数说明                                        |
| C-h m    | M-x describe-mode        | 查看当前mode的相关文档，包含mode中的命令、快捷键等  |
| C-h k    | M-x describe-key KYES    | 查看快捷键对应的命令及简要说明                      |
| C-h c    | M-x describe-key-briefly | 查看绑定说明                                        |
| C-h w    | M-x where-is             | 查看某个命令对应的快捷键                            |
| C-h b    | M-x describe-bindings    | 查看当前buffer中的所有的快捷键列表                  |
| KEYS C-c |                          | 查看当前buffer中以某个快捷键序列开头的快捷键列表    |
|          | M-x appropos             | 查看匹配某个关键字的任何东西，如函数，变量，命令，模式等                        |
|----------+--------------------------+---------------------------------------------------------------------------------|

**** 矩形操作
|-----------+----------------------------+-----------------------|
| C-x r c   | clear-rectangle            | 清空一个矩形块,以空格 |
| C-x r d   | delete-rectangle           | 删除一个矩形块,以空白 |
| C-x r k   | kill-rectangle             | 剪切一个矩形块        |
| C-x r r   | copy-rectangle-to register | 复制矩形块到寄存器    |
| C-x r i   | insert-register            |                       |
| C-x r g   | insert-register            |                       |
| C-x r y   | yank-rectangle             | 粘贴一个矩形块        |
| C-x r o   | open-rectangle             | 插入一个矩形块        |
| C-x r t   | string-rectangle           | string-rectangle      |
| C-x r M-w | copy-rectangle-as-kill     |                       |
|-----------+----------------------------+-----------------------|

**** 寄存器
\begin{itemize}
\item \textbf{window and frame configuration}

  \begin{tabular}{l|l|l}
    \hline
    Key & Binding & Comment \\
    \hline
    C-x r w REG & window-configuration-to-register & save configure of the current frame \\
    C-x r f REG & frame-configuration-to-register & save the state of all frams \\
    C-x r j REG & jump-to-register & jump to a register REG\\
    \hline
  \end{tabular}

\item \textbf{save text}

  \begin{tabular}{l|l|l}
    \hline
    Key & Binding & Comment \\
    \hline
    C-x r s REG & copy-to-register & Copy region into register REG \\
    C-x r i REG & insert-register & insert text from register REG \\
    \hline
  \end{tabular}

\item \textbf{rectangle}

  \begin{tabular}{l|l|l}
    \hline
    Key & Binding & Comment \\
    C-x r r REG & copy-rectangke-to-register & copy the region-rectangle\\
    \hline
  \end{tabular}

\item \textbf{position}

    \begin{tabular}{l|l|l}
    \hline
    C-x r SPC REG & point-to-register & record the position fo the point\\
                  && and the current buffer \\
    C-x r j REG & jump-to-register & jump to the position and buffer \\
                  && if the buffer is killed, revisit the file and open the buffer\\
    \hline
    \end{tabular}

  \item \textbf{number}
\end{itemize}
**** 大小写转换
|---------------------------------------------+----------------------|
| 从光标位置开始，处理单词后半部分            |                      |
|---------------------------------------------+----------------------|
| capitalize-word (M-c)                       | 单词首字母转为大写   |
| upcase-word (M-u)                           | 整个单词转为大写     |
| downcase-word (M-l)                         | 整个单词转为小写     |
|---------------------------------------------+----------------------|
| 从光标位置开始，处理单词前半部分            |                      |
|---------------------------------------------+----------------------|
| negtive-argument; capitalize-word (M-- M-c) | 单词首字母转为大写   |
| negtive-argument; upcase-word (M-- M-u)     | 整个单词转为大写     |
| negtive-argument; downcase-word (M-- M-l)   | 整个单词转为小写     |
|---------------------------------------------+----------------------|
| 改变选定区域的大小写                        |                      |
|---------------------------------------------+----------------------|
| downcase-region (C-x C-l)                   | 选定区域全部改为小写 |
| upcase-region (C-x C-u)                     | 选定区域全部改为大写 |
|---------------------------------------------+----------------------|
**** 宏
|-------------+-----------------------|
| f3 or C-x ( | Start recording macro |
| f4 or C-x ) | Stop recording macro  |
| C-x e or f4 | Playback macro        |
|-------------+-----------------------|

|-------------+------------------------------------------------------|
| C-x C-k C-k | Command: kmacro-end-or-call-macro-repeat             |
|             | Execute the keyboard macro at the head of the ring   |
|-------------+------------------------------------------------------|
| C-x C-k C-n | Command: kmacro-cycle-ring-next                      |
|             | Rotate the keyboard macro ring to the next macro     |
|             | (defined earlier).                                   |
|-------------+------------------------------------------------------|
| C-x C-k C-p | Command: kmacro-cycle-ring-previous                  |
|             | Rotate the keyboard macro ring to the previous macro |
|             | (defined later)                                      |
|-------------+------------------------------------------------------|

|-----------+-------------------------------------------------------------|
| C-x C-k n | Command: kmacro-name-last-macr                              |
|           | Give a command name (for the duration of the Emacs session) |
|           | to themost recently defined keyboard macro.                 |
|-----------+-------------------------------------------------------------|
| C-x C-k b | Command: kmacro-bind-to-key                                 |
|           | Bind the most recently defined keyboard macro to a key      |
|           | sequence                                                    |
|-----------+-------------------------------------------------------------|

**** narrowing
|---------+------------------+--------------------------------------------------|
| C-x n n | narrow-to-region | Narrow down to between point and mark            |
| C-x n w | widen            | Widen to make the entire buffer accessible again |
| C-x n p | narrow-to-page   | Narrow down to the current page                  |
| C-x n d | narrow-to-defun  | Narrow down to the current defun                 |
|---------+------------------+--------------------------------------------------|
*** TOOLs
**** git
***** 基本使用
|-------------+-----------------------|
| C-x g c RET | git-commit-all        |
| C-x g c a   | git-commit-all        |
| C-x g c f   | git-commit-file       |
| C-x g c i   | git-commit            |
|-------------+-----------------------|
| C-x g s     | git-status            |
| C-x g a     | git-add               |
| C-x g l     | git-log               |
| C-x g b     | git-branch            |
|             | git-history           |
|-------------+-----------------------|
| C-x g C-l   | git-log-other         |
| C-x g .     | git-cmd               |
| C-x g D     | git--diff-all-map     |
| C-x g L     | git-log-files         |
| C-x g R     | git-reset             |
| C-x g c     | git--commit-map       |
| C-x g d     | git--diff-buffer-map  |
| C-x g g     | git-grep              |
| C-x g h     | git-stash             |
| C-x g i     | git-add-interactively |
| C-x g m     | git-merge-next-action |
|-------------+-----------------------|
| C-x g D RET | git-diff-all-head     |
| C-x g D b   | git-diff-all-baseline |
| C-x g D h   | git-diff-all-head     |
| C-x g D i   | git-diff-all-index    |
| C-x g D o   | git-diff-all-other    |
| C-x g d RET | git-diff-head         |
| C-x g d b   | git-diff-baseline     |
| C-x g d h   | git-diff-head         |
| C-x g d i   | git-diff-index        |
| C-x g d o   | git-diff-other        |
|-------------+-----------------------|

***** git-status
|---------+------------------------------------------|
| p/n     | 在所有文件之间上下移动                   |
| P/N     | 在变更过的文件之间上下移动               |
| </>     | 定位到列表的头部/尾部                    |
| v       | 以只读方式打开文件                       |
| m/u/SPC | 设置/取消/切换标记，标记用于批量处理文件 |
| a       | 将文件加入版本控制                       |
| i       | 将文件加入ignore                         |
| c       | 提交                                     |
|---------+------------------------------------------|

***** 提交

|----------+------|
| C-c C-c  | 提交 |
| C-c C-q  | 取消 |
|----------+------|

***** 标签和分支
M-x git-branch：列出所有分支,在这里可以通过快捷键c/d/RET实现创建/删除/切换分
支。

M-x git-tag可以创建一个标签，以后在git-checkout时可以指定标签的名字，也可以
通过git-checkout-to-new-branch来基于tag创建分支。

**** w3m
|----------+---------------------------------------------------------------|
| q        | 关闭窗口                                                      |
| Q        | 直接离开                                                      |
| C-x-k    | 关闭当前标签页                                                |
| U        | 打开 URL                                                      |
| G        | 在标签页中打开一个网址                                        |
| S        | 用google进行搜索                                              |
| B        | 后退                                                          |
| N        | 前进                                                          |
| H        | 主页                                                          |
| R        | 刷新                                                          |
| C-n      | 下一行                                                        |
| C-p      | 向上一行                                                      |
| C-b      | 向后                                                          |
| C-f      | 向前                                                          |
| C-v      | 向下滚屏                                                      |
| ESC v    | 向上滚屏                                                      |
| 打开链接 | RET                                                           |
| >        | 向右滚屏                                                      |
| <        | 向左滚屏                                                      |
| ,        | 向左移动一格                                                  |
| .        | 向右移动一格                                                  |
| R        | Reload the current page                                       |
| C-t  R   | Reload all the pages                                          |
| r        | Redisplay the current page                                    |
| TAB      | Move to the new anchor                                        |
| C-M-i    | Move to the previous anchor                                   |
| B        | move  back to the previous page in the history                |
| N        | move forward to the next page in the history                  |
| s        | display the history in the session                            |
|          | with the prefic arg, it displays the arrived URLS             |
|----------+---------------------------------------------------------------|
| M-d      | down th url                                                   |
| d        | down load the url under point                                 |
|----------+---------------------------------------------------------------|
| u        | display the url under the point and put it into kill-ring     |
| c        | display the url of the current page and put it into kill-ring |
|----------+---------------------------------------------------------------|
| t        | toggle the visibility of an image under point                 |
| T        | toggle the visibility of all images                           |
| I        | display the image under point in the external viewer          |
| M-i      | save the image under point to a file                          |
| M-左方括号   | zoom in an image on the point                                 |
| M-右方括号   | zoom out an image on the point                                |
|----------+---------------------------------------------------------------|
| \        | display the html source of the current page                   |
| a        | 添加当前页到书签                                              |
| M-a      | add the urls under point to the bookmark                      |
| ESC a    | 添加该URL到书签                                               |
| v        | 显示书签                                                      |
| E        | 编辑书签                                                      |
| C-k      | 删除书签                                                      |
| C-_      | 撤消书签                                                      |
| M        | 用外部浏览器打开当前页面                                      |
| ESC M    | 用外部浏览器打开链接                                          |
|----------+---------------------------------------------------------------|
| C-c C-k  | 停止载入                                                      |
|----------+---------------------------------------------------------------|


|-------------+-------------------------------+--------------|
| Key-binding | Function                      | 备注         |
|-------------+-------------------------------+--------------|
| SPC,C-v     | Forward page                  | 前页         |
| b,ESC v     | Backward page                 | 后页         |
| l,C-f       | Cursor right                  | 光标右移     |
| h,C-b       | Cursor left                   | 光标左移     |
| j,C-n       | Cursor down                   | 光标下移     |
| k,C-p       | Cursor up                     | 光标上移     |
| J           | Roll up one line              | 向上滚屏一行 |
| K           | Roll down one line            | 向下滚屏一行 |
| ^,C-a       | Go to the beginning of line   | 跳转至行首   |
| $,C-e       | Go to the end of line         | 跳转至行尾   |
| w           | Go to next word               | 后一个单词   |
| W           | Go to previous word           | 前一个单词   |
| >           | Shift screen right            | 向右滚屏     |
| <           | Shift screen left             | 向左滚屏     |
| .           | Shift screen one column right | 向右滚屏一列 |
| ,           | Shift screen one column left  | 向左滚屏一列 |
| g,M-<       | Go to the first line          | 跳转至首行   |
| G,M->       | Go to the last line           | 跳转至尾行   |
| ESC g       | Go to specified line          | 跳转至指定行 |
| Z           | Move to the center line       |              |
| z           | Move to the center column     |              |
| TAB         | Move to next hyperlink        |              |
| C-u,ESC TAB | Move to previous hyperlink    |              |
| 左方括号        | Move to the first hyperlink   |              |
| 右方括号        | Move to the last hyperlink    |              |
|-------------+-------------------------------+--------------|


|---------------------------+-------------------------------------------------------------------------+---|
| RET                       | Follow hyperlink                                                        |   |
| a, ESC RET                | Save link to file                                                       |   |
| u                         | Peek link URL                                                           |   |
| i                         | Peek image URL                                                          |   |
| I                         | View inline image                                                       |   |
| ESC I                     | Save inline image to file                                               |   |
| :                         | Mark URL-like strings as anchors                                        |   |
| ESC :                     | Mark Message-ID-like strings as news anchors                            |   |
| c                         | Peek current URL                                                        |   |
| =                         | Display information about current document                              |   |
| C-g                       | Show current line number                                                |   |
| C-h                       | View history of URL                                                     |   |
| F                         | Render frame                                                            |   |
| M                         | Browse current document using external browser (use 2M and 3M to invoke |   |
| second and third browser) |                                                                         |   |
| ESC M                     | Browse link using external browser (use 2ESC M and 3ESC M to invoke     |   |
|                           | second and third browser)                                               |   |
|---------------------------+-------------------------------------------------------------------------+---|

|---+----------------------------------|
| U | Open URL                         |
| V | View new file                    |
| @ | Execute shell command and load   |
| # | Execute shell command and browse |
|---+----------------------------------|

|-------+-----------------------------|
| B     | Back to the previous buffer |
| v     | View HTML source            |
| s     | Select buffer               |
| E     | Edit buffer source          |
| C-l   | Redraw screen               |
| R     | Reload buffer               |
| S     | Save buffer                 |
| ESC s | Save source                 |
| ESC e | Edit buffer image           |
|-------+-----------------------------|
**** tetria
  |---------+--------------------|
  | key     | binding            |
  |---------+--------------------|
  | SPC     | tetris-move-bottom |
  | n       | tetris-start-game  |
  | p       | tetris-pause-game  |
  | q       | tetris-end-game    |
  | <down>  | tetris-rotate-next |
  | <left>  | tetris-move-left   |
  | <right> | tetris-move-right  |
  | <up>    | tetris-rotate-prev |
  |---------+--------------------|
**** shell command
|---------+---------------------|
| M-!     | shell-command       |
| M-&     | async-shell-command |
| M-\vert | shell-command-on-region |
|---------+-------------------------|
**** mew
***** M-x mew
|-------------+---------------------------------------------------------|
| w           | 撰写新邮件                                              |
| a           | 回复邮件，不带引用                                      |
| A           | 回复邮件，带引用                                        |
| f           | 转发邮件                                                |
| E           | 重新编辑邮件                                            |
| r           | 重新发送邮件                                            |
| SPC         | 阅读邮件                                                |
| y           | 保存邮件（可以保存信件全文、信件正文、附件）            |
| C-c C-l     | 转换当前邮件的编码格式                                  |
| C-c C-a     | 加入地址薄                                              |
| C-u C-c C-a | 比 C-c C-a 多加入昵称和名字                             |
| i           | 收信                                                    |
| g           | 跳转邮箱                                                |
| o           | 对邮件进行分类                                          |
| M-o         | 对所有邮件按照设定的规则进行分类                        |
| d           | 把邮件标记为删除                                        |
| *           | 做星号标记                                              |
| m/          | 列出所有有星号标记的邮件                                |
| u           | 清除标记                                                |
| U           | 清除所有带有指定标记的标记                              |
| x           | 对所有标记进行处理(比如标记为D的邮件将真正被删除)       |
| ENTER       | 让阅读的邮件向下滚动一行                                |
| -           | 向上滚动一行                                            |
| n           | 下一封邮件                                              |
| p           | 前一封邮件                                              |
| j           | 跳到某一封邮件                                          |
| N           | 下一封带星号的邮件                                      |
| P           | 上一封带星号的邮件                                      |
| S           | 按某个指定项目对邮件排序                                |
| /           | 按指定条件搜索邮件，并进入虚拟模式                      |
| tt          | 进入虚拟模式，根据线索查看，普通模式下是不可以的        |
| v           | 切换"Summary mode only" 和 "Summary & Message mode"模式 |
| C-c C-m     | 编辑新邮件，放入草稿中                                  |
| Z           | 更新地址簿                                              |
|-------------+---------------------------------------------------------|

***** draft: M-x mew-send
***** 其它
|-----+-----------------------------------|
| C   | 如果设置了多个邮箱，用 C 命令切换 |
| Q   | 退出Mew                           |
|-----+-----------------------------------|
**** pdf-tools
***** pdf-view-mode
|--------+-----------------------------------------|
| RET    | image-next-line                         |
| ESC    | Prefix Command                          |
| SPC    | pdf-view-scroll-up-or-next-page         |
| +      | pdf-view-enlarge                        |
| -      | pdf-view-shrink                         |
| 0      | pdf-view-scale-reset                    |
| 1 .. 9 | digit-argument                          |
| <      | beginning-of-buffer                     |
| =      | pdf-view-enlarge                        |
| >      | end-of-buffer                           |
| ?      | describe-mode                           |
| H      | pdf-view-fit-height-to-window           |
| P      | pdf-view-fit-page-to-window             |
| Q      | kill-this-buffer                        |
| W      | pdf-view-fit-width-to-window            |
| g      | revert-buffer                           |
| h      | describe-mode                           |
| n      | pdf-view-next-page-command              |
| p      | pdf-view-previous-page-command          |
| q      | quit-window                             |
| r      | revert-buffer                           |
|--------+-----------------------------------------|

|------------------------+-----------------------------------------|
| s                      | Prefix Command                          |
| DEL                    | pdf-view-scroll-down-or-previous-page   |
| S-SPC                  | pdf-view-scroll-down-or-previous-page   |
| C-c C-c                | doc-view-mode                           |
| C-c C-d                | pdf-view-dark-minor-mode                |
|------------------------+-----------------------------------------|
| s b                    | pdf-view-set-slice-from-bounding-box    |
| s m                    | pdf-view-set-slice-using-mouse          |
| s r                    | pdf-view-reset-slice                    |
|------------------------+-----------------------------------------|
| M-<                    | pdf-view-first-page                     |
| M->                    | pdf-view-last-page                      |
|------------------------+-----------------------------------------|

***** pdf-annot-minor-mode
|-----------+-------------------------------|
| C-c C-a D | pdf-annot-delete              |
| C-c C-a a | pdf-annot-attachment-dired    |
| C-c C-a l | pdf-annot-list-annotations    |
| C-c C-a t | pdf-annot-add-text-annotation |
|-----------+-------------------------------|

***** pdf-history-minor-mode
|---+----------------------|
| B | pdf-history-backward |
| N | pdf-history-forward  |
|---+----------------------|

***** pdf-links-minor-mode
|---+--------------------------|
| F | pdf-links-action-perform |
| f | pdf-links-isearch-link   |
|---+--------------------------|
***** pdf-misc-context-menu-minor-mode
|----------------+-----------------------------|
| <down-mouse-3> | pdf-misc-popup-context-menu |
|----------------+-----------------------------|
***** pdf-outline-minor-mode

|---+---+-------------|
| o |   | pdf-outline |
|---+---+-------------|
**** 计算器
+ 命令  M-x quick-calc
+ 快捷键  C-x * q
+ MiniBuffer中显示
+ C-g  退出Quick Calculator模式。


|---------+----------------|
| C-x * c | M-x calc       |
| C-x * q | M-x quick-calc |
|---------+----------------|
**** ibuffer
|-------------+-----------------------------------------------|
| M-x ibuffer | 打开ibuffer                                   |
|             | 注:C-x C-b和C-x b被绑定到helm功能             |
| q           | 关闭ibuffer                                   |
|-------------+-----------------------------------------------|
| / m         | 根据模式筛选                                  |
| / /         | 去除筛选条件                                  |
| / g         |                                               |
| / n         | 根据buffer名称筛选                            |
| / c         | 根据内容筛选                                  |
| / f         | 根据文件名筛选                                |
| / >         | 根据buffer大小筛选                            |
| / <         | 根据buffer大小筛选                            |
|-------------+-----------------------------------------------|
| ,           | 在排序方法中循环切换                                    |
| s i         | 倒序                                          |
| s a         | 根据名称排序                                  |
| s f         | 根据文件名排序                                |
| s v         | 根据最后浏览时间排序                          |
| s s         | 根据大小排序                                  |
| s m         | 根据模式排序                                  |
|-------------+-----------------------------------------------|
| o           | 在其它窗口打开当前buffer,并将光标切换到该窗口 |
| C-o         | 在其它窗口打开当前buffer,光标停留在当前窗口   |
| g           | 更新ibuffer                                   |
| m           | 标记当前buffer                                |
| u           | 取消标记                                      |
| A           | 打开标记buffer或当前buffer                    |
| S           | 保存buffer                                    |
| D           | 关闭buffer                                    |
| V           | 放弃buffer的更改                              |
|-------------+-----------------------------------------------|
**** Dired-mode
***** Mark & Flag
|---------------------------------+----------------------------------------|
| d                               | 标记删除                               |
| x                               | 执行删除                               |
| C-u d                           | 去掉标记                               |
| #                               | 标记所有自动保存的文件,e.g. #demo.org# |
| ~                               | 标记所有备份文件(即文件名以~结尾)      |
| &                               | 标记垃圾文件                           |
| dired-garbage-files-regexp      | 查看垃圾文件                           |
|---------------------------------+----------------------------------------|
| **                              | 标记所有可执行文件                     |
| *@                              | 标记所有符号链接                       |
| */                              | 标记所有目录文件,不包括.和..           |
| *s                              | 标记所有文件,不包括.和..               |
| *.                              | 标记具有扩展名的文件                   |
| %m REGEXP RET OR  *% REGEXP RET | 标记正则表达式匹配文件                 |
| %g REGEXP RET                   | 标记文件内容匹配正则表达式的文件       |
|---------------------------------+----------------------------------------|
| u                               | 去除当前行的标记                       |
| DEL                             | 上移一行并去除该行的标记               |
| U                               | 去除所有标记                           |
| *? MARKCHAR                     | 去除所有以MARKCHAR标记的文件           |
| t                               | 交换标记                               |
| M-( OR * OR )                   | 使用断言                               |
|---------------------------------+----------------------------------------|
***** 常用操作
|---------------+------------------------|
| *C(不用加*号) | 拷贝文件               |
| *D            | 删除文件               |
| *R            | 重命名文件             |
| *H            | 创建硬链接             |
| *S            | 创建符号链接           |
| *M            | 修改权限               |
| *G            | 修改属组               |
| *O            | 修改属主               |
| *T            | 修改时间               |
| *P            | 打印                   |
| *Z            | 压缩或解压             |
| *L            | 加载Elisp文件          |
| *B            | 字节编译Elisp文件      |
| *A            | 正则表达式搜索         |
| *Q            | 对文件内容进行交互替换 |
|---------------+------------------------|

***** shell命令
|---+---------------|
| ！ | 执行shell命令 |
|---+---------------|
***** 强大的重命名
*wdired-change-to-wdired-mode* 进入编辑模式
*wdired-allow-to-change-permissions* 设为t可编辑权限

*** org
**** 基本
***** 视图循环
|-------+----------------------------------------------------------|
| TAB   | 子树循环，在FOLDED-CHILDREN-SUBTREE之间循环，C-u使用前缀 |
|-------+----------------------------------------------------------|
| S-TAB | 全局循环                                                 |
|-------+----------------------------------------------------------|

***** 移动
|---------+--------------|
| C-c C-n | 下个标题     |
|---------+--------------|
| C-c C-p | 上个标题     |
|---------+--------------|
| C-c C-f | 下个同级标题 |
|---------+--------------|
| C-c C-b | 上个同级标题 |
|---------+--------------|
| C-c C-u | 回到上层标题 |
|---------+--------------|
***** 结构编辑
|----------------+----------------------------------------------|
| M-TAB          | 插入一个同级标题                             |
|----------------+----------------------------------------------|
| M-S-TAB        | 插入一个和当前标题同级的TODO项               |
|----------------+----------------------------------------------|
| TAB            | 如果新的条目中还没有文字，则调整到合适的级别 |
|----------------+----------------------------------------------|
| M-LEFT/RIGHT   | 将当前标题提升/降低一个等级                  |
|----------------+----------------------------------------------|
| M-S-LEFT/RIGHT | 将当前子树提升/降低一个等级                  |
|----------------+----------------------------------------------|
| M-S-UP/DOWN    | 将当前子树上/下移                            |
|----------------+----------------------------------------------|
| C-c C-w        | 将条目或区域传送到另外一个文件中             |
|----------------+----------------------------------------------|
| C-c n s/w      | 将缓冲区试图局限到当前子树中/再次放宽视图    |
|----------------+----------------------------------------------|
***** 脚注
|-----------+------------------------------------------------------|
| C-c C-x f | 新建一个脚注，当有前缀时，会提供一个菜单以供选择操作 |
|           | 或者在定义和引用之间跳转                             |
|-----------+------------------------------------------------------|
| C-c C-c   | 在定义和引用之间跳转                                 |
|-----------+------------------------------------------------------|

***** 链接
[[link][]]
|---------+------------------------|
| C-c l   | 在当前位置保存一个链接 |
|---------+------------------------|
| C-c C-l | 插入一个链接           |
|---------+------------------------|
| C-c C-o | 打开光标处的链接       |
|---------+------------------------|

|-------+------------------------|
| C-c % | 记录内部链接地址       |
| C-c & | 跳转到已记录的内部链接 |
|-------+------------------------|

***** 标签
添加标签
|---------+--------------|
| C-c C-q | 正文部分使用 |
| C-c C-c | 在标题上使用 |
|---------+--------------|

搜索标签
|---------+----------------------------------------------|
| C-c \   | 按标签搜索标题                               |
| C-c / m | 搜索并按树状结构显示                         |
| C-c a m | 按标签搜索多个文件(需要将文件加入全局agenda) |
|---------+----------------------------------------------|
**** 表格
***** 创建和转换
C-c | *org-table-convert-region* 将活动区域转换为表格，以TAB，逗号或空白
符划分区域。

***** 调整和移动区域
|---------+----------------------------------------|
| C-c C-c | 调整表格，不移动光标                   |
|---------+----------------------------------------|
| TAB     | 将光标移动到下一个区域，必要时新建一行 |
|---------+----------------------------------------|
| S-TAB   | 将光标移动到上一个区域                 |
|---------+----------------------------------------|
| RET     | 将光标移动到下一行，必要时新建一行     |
|---------+----------------------------------------|
***** 编辑行和列
|--------------+------------------------------------------------------------------|
| M-LEFT/RIGHT | 左/右以当前列                                                    |
|--------------+------------------------------------------------------------------|
| M-S-LEFT     | 删除当前列                                                       |
|--------------+------------------------------------------------------------------|
| M-S-RIGHT    | 在光标位置左边添加一列                                           |
|--------------+------------------------------------------------------------------|
| M-UP/DOWN    | 上/下移动当前行                                                  |
|--------------+------------------------------------------------------------------|
| M-S-UP       | 删除当前行                                                       |
|--------------+------------------------------------------------------------------|
| M-S-DOWN     | 在当前行上面添加一行，如果有前缀，则在下面添加一行               |
|--------------+------------------------------------------------------------------|
| C-c -        | 在当前行下面添加一行一个水平线，如有前缀，则在上面添加一行水平线 |
|--------------+------------------------------------------------------------------|
| C-c ^        | 将表格排序，以当前位置所在的列作为依据                           |
|              | 排序在局当前位置最间的两个水平线之间的行（或者整个表）中进行     |
|--------------+------------------------------------------------------------------|
**** sort
|-------+----------|
| C-c ^ | org-sort |
|-------+----------|

**** w3m-copy
  |-------------+---------------------------|
  | C-c C-x C-w | org-w3m-copy-for-org-mode |
  |-------------+---------------------------|

**** refile
|-------------------------+---------+--------------------|
| org-refile              | C-c C-w | 同一文件中移动节点 |
| org-copy                | C-c M-w | 同形文件中复制节点 |
|-------------------------+---------+--------------------|

**** GTD
****** 任务
|---------+---------------|
| C-c C-t | org-todo      |
| S-LEFT  | org-shiftleft |
| S-RIGHT | org-shiftright |
|---------+----------------|
****** 优先级
|--------+---------------+---------------------------------------|
| S-UP   | org-shiftup   | increase priority of current headline |
| S-DOWN | org-shiftdown | decrease priority of current headline |
|--------+---------------+---------------------------------------|
****** 子任务
|---------+----------------|
| C-c C-c | 改变复选框状态 |
| M-S-RET | 增加一个子项   |
|---------+----------------|
****** 搜索
*C-c /            只列出包含搜索结果的大纲，并高亮，支持多种搜索方式*
****** 时间戳
|---------+-------------------------+---------------------------------------------------------------------|
| C-c .   | org-time-stamp          | Prompt for a date/time and insert a time stamp                      |
| C-c <   | org-date-from-calendar  | Insert time stamp corresponding to cursor date in *Calendar* buffer |
| C-c >   | org-goto-calendar       | Go to the Emacs calendar at the current date.                       |
| C-c !   | org-time-stamp-inactive | org-time-stamp-inactive                                             |
|---------+-------------------------+---------------------------------------------------------------------|
| S-UP    | org-shiftup             | Increase item in timestamp                                          |
| S-DOWN  | org-shiftdown           | Decrease item in timestamp                                          |
| S-LEFT  | org-shiftleft           |                                                                     |
| S-RIGHT | org-shifright           |                                                                     |
|---------+-------------------------+---------------------------------------------------------------------|

|---------------+------------------|
| 连续使用C-c . | 可以创建时间段   |
| C-c C-y       | 计算时间段的间隔 |
|---------------+------------------|

|---------+--------------+----------------------|
| C-c C-s | org-schedule | Insert the SCHEDULED |
| C-c C-d | org-deadline | Insert the DEADLINE  |
|---------+--------------+----------------------|
****** org-agenda
|-------+--------------------------+--------------------------------------------------------------|
| C-c [ | org-agenda-file-to-front | Move/add the current file to the top of the agenda file list |
| C-c ] | org-remove-file          | Remove current file from the org-agenda-files                |
|-------+--------------------------+--------------------------------------------------------------|
****** org-capture
|-----------+----------------------|
| C-c c     | org-capture          |
| C-c C-c   | org-capture-finalize |
| C-c C-w   | org-capture-refile   |
| C-c C-k   | org-capture-kill     |
|-----------+----------------------|

**** latex
|---------------------+-----------------------------------|
| C-c C-x C-l         | org-preview-latex-fragment        |
| C-c C-c             | remove overlay                    |
| C-u C-c C-x C-l     | preview everything in the subtree |
| C-u C-u C-c C-x C-l | preview everything in the buffer  |
|---------------------+-----------------------------------|

**** babel
   | C-c C-v t | org-babel-tangle      | tangle the current file |
   | C-c C-v f | org-babel-tangle-file | choose a file to tangle |

*** IDE
**** 基本操作

|-----------+--------------------+----------------------|
| C-M-f     | forward-sexp       | 前向匹配             |
| C-M-b     | backward-sexp      | 后向匹配             |
| C-M-k     | kill-sexp          | 删除匹配之间的区域   |
| C-M-SPC/@ | mark-sexp          | 选中匹配区域         |
| C-M-a     | beginning-of-defun | 将光标移至函数起始处 |
| C-M-e     | end-of-defun       | 将光标移至函数结尾处 |
| C-M-h     | mark-defun         | 选中函数定义         |
|-----------+--------------------+----------------------|

**** cedet

**** function-args

|-----+--------------|
| M-o | moo-complete |
| M-i | fa-show      |
| M-J | fa-jump      |
|-----+--------------|

**** gtags
+ C-c g a helm-gtags-tags-in-this-function
+ C-j helm-gtags-select
+ C-c g . helm-gtags-dwim
+ C-c g , helm-gtags-pop-stack
+ C-c g < helm-gtags-previous-history
+ C-c g > helm-gtags-next-history
+ C-c g f helm-gtags-find-files
+ C-c g s helm-gtags-find-symbol
+ C-c g r helm-gtags-find-reference
**** projectile
|-----------+---------------------------------------------+--------------------------------------------------------------|
| C-c p h   | helm-projectile                             | Helm interface to projectile                                 |
| C-c p p   | helm-projectile-switch-project              | Switches to another projectile project                       |
| C-c p f   | helm-projectile-find-file                   | Lists all files in a project                                 |
| C-c p F   | helm-projectile-find-file-in-known-projects | Find file in all known projects                              |
| C-c p g   | helm-projectile-find-file-dwim              | Find file based on context at point                          |
| C-c p d   | helm-projectile-find-dir                    | Lists available directories in current project               |
| C-c p e   | helm-projectile-recentf                     | Lists recently opened files in current project               |
| C-c p a   | helm-projectile-find-other-file             | Switch between files with same name but different extensions |
| C-c p i   | projectile-invalidate-cache                 | Invalidate cache                                             |
| C-c p z   | projectile-cache-current-file               | Add the file of current selected buffer to cache             |
| C-c p b   | helm-projectile-switch-to-buffer            | List all open buffers in current project                     |
| C-c p s g | helm-projectile-grep                        | Searches for symbol starting from project root               |
| C-c p s a | helm-projectile-ack                         | Same as above but using ack                                  |
| C-c p s s | helm-projectile-ag                          | Same as above but using ag                                   |
|-----------+---------------------------------------------+--------------------------------------------------------------|

**** senator
Senator: SEmatic NavigaTOR.
|---------+--------------------------|
| C-c n   | senator-next-tag         |
| C-c p   | senator-previous-tag     |
| C-c u   | senator-go-up-reference  |
| C-c g   | semantic-symref          |
| C-c M-w | senator-copy-tag         |
| C-c C-w | senator-kill-tag         |
| C-c C-y | senator-yank-tag         |
| C-c r   | senator-copy-to-register |
|         | senator-fold-code-toggle |
|---------+--------------------------|
**** sr-speedbar
   |---------+-------------------------------------------------------------------------------------------------|
   |         | sr-speedbar-open OR  sr-speedbar-toggle                                                         |
   | SPC     | open the children of a node.                                                                    |
   | RET     | open the node in another window.                                                                |
   |         | If node is a file  open that file;                                                              |
   |         | if node is a directory ,  enter that directory;                                                 |
   |         | if node is a tag in a file ,  jump to the location of that tag in the file.                     |
   | U       | go up parent directory.                                                                         |
   | n/p     | moves to next or previous node.                                                                 |
   | M-n/M-p | moves to next or previous node at the current level.                                            |
   | b       | switches to buffer list using Speedbar presentation. You can also open children of each buffer. |
   | f       | switches back to file list.                                                                     |
   |---------+-------------------------------------------------------------------------------------------------|
**** 代码折叠
|-------------+--------------------------------------------|
| C-c @ C-c   | Command: hs-toggle-hiding                  |
|             | Toggle hiding/showing of a block           |
|-------------+--------------------------------------------|
| C-c @ C-h   | Command: hs-hide-block                     |
|             | Select current block at point and hide it  |
|-------------+--------------------------------------------|
| C-c @ C-l   | Command: hs-hide-level                     |
|             | Hide all block with indentation levels     |
|             | below this block                           |
|-------------+--------------------------------------------|
| C-c @ C-s   | Command: hs-show-block                     |
|             | Select current block at point and show it. |
|-------------+--------------------------------------------|
| C-c @ C-M-h | Command: hs-hide-all                       |
|             | Hide all top level blocks, displaying      |
|             | only first and last lines.                 |
| C-c @ C-M-s | Command: hs-show-all                       |
|             | Show everything                            |
|-------------+--------------------------------------------|
**** narrowing
|---------+--------------------------------------------|
| C-x n d | Command: narrow-to-defun                   |
| C-x n r | Command: narrow-to-region                  |
| C-x n n | Narrow buffer to active region             |
| C-x n w | Command: widen                             |
|---------+--------------------------------------------|
**** compile
|------+-------------------------------------------------------------------|
| C-o  | Display matched location, but do not switch point to matched      |
|      | buffer                                                            |
|------+-------------------------------------------------------------------|
| M-n  | Move to next error message, but do not visit error location       |
|------+-------------------------------------------------------------------|
| M-p  | Move to next previous message, but do not visit error location    |
|------+-------------------------------------------------------------------|
| M-g  | Move to next error message, visit error location                  |
| n    |                                                                   |
|------+-------------------------------------------------------------------|
| M-g  | Move to previous error message, visit error location              |
| p    |                                                                   |
|------+-------------------------------------------------------------------|
| RET  | Visit location of error at poiint                                 |
|------+-------------------------------------------------------------------|
| M-{  | Move point to the next error message or match occurring in a      |
|      | different file                                                    |
|------+-------------------------------------------------------------------|
| M-}  | Move point to the previous error message or match occurring in a  |
|      | different file                                                    |
|------+-------------------------------------------------------------------|
| q    | Quit *compilation* buffer                                         |
|------+-------------------------------------------------------------------|
**** python
  \begin{tabular}{l|l}
    \hline
    C-c C-c & py-execute-buffer \\
    C-c | & py-execute-region \\
    C-c TAB & py-indent-region \\
    C-c ! & py-shell \\
    C-c C-v & py-version \\
    C-c C-k & py-mark-block-or-clause \\
    C-c C-e & py-help-at-point \\
    \hline
    C-M-a & py-begining-of-def-or-class\\
    C-M-d & py-down \\
    C-M-e & py-end-of-def-or-class \\
    C-M-h & py-mark-def-or-class \\
    C-M-i & completion-at-point \\
    C-M-u & py-up \\
    C-M-x & py-execute-def-or-class \\
    \hline
  \end{tabular}
**** octave
  \begin{tabular}{lll}
    \hline
    C-h a & octave-lookfor & octave搜索\\
    C-h d & octave-help & octave帮助\\
    C-c C-l & octave-source-file & sour文件 \\
    C-c ; & octave-update-function-file-comment & 更新函数文档 \\
    M+. & octave-find-definition & 查找定义 \\
    C-M-j & octave-indent-new-comment-line & 插入新的注释行\\
    C-M-q & prog-indent-sexp & 块缩进 \\
    C-c / OR ] & smie-indent-sexp & 闭合\\
    C-c TAB (C-)a & octave-send-buffer & 执行缓冲区\\
    C-c TAB (C-)r & octave-send-region & 执行区域\\
    C-c TAB (C-)l & octave-send-line & 执行行\\
    C-c TAB (C-)b & octave-send-block & 执行块\\
    C-c TAB (C-)f & octave-send-function & 执行函数\\
    C-c TAB (C-)k & octave-kill-process & 关闭当前程序\\
    C-c TAB (C-)s & octave-show-process-buffer & 显示程序进程缓冲区\\
    \hline
  \end{tabular}

*** LaTeX
    |-------------+------------------------+------------|
    | C-c C-s     | Entering sectioning    |            |
    | C-c C-e     | Inserting environment  |            |
    | C-c C-m     | Inserting macros       |            |
    | C-c RET     |                        |            |
    |-------------+------------------------+------------|
    | C-c C-f C-b | insert bold face text  | \textbf{*} |
    | C-c C-f C-i | insert italics text    | \textit{*} |
    | C-c C-f C-e | insert emphasized text | \emph{*}   |
    | C-c C-f C-s | insert slanted text    | \textsl{*} |
    | C-c C-f C-r | insert roman text      | \textrm{*} |
    | C-c C-f C-f | insert sans seriftext  | \textsf{*} |
    | C-c C-f C-t | insert typewriter text | \texttt{*} |
    | C-c C-f C-c | insert SMALL CAPS      | \textsc{*} |
    | C-c C-f C-d | ...                    |            |
    |-------------+------------------------+------------|
    | C-c ;       |                        |            |
    | C-c %       |                        |            |
    |-------------+------------------------+------------|
    | C-c C-c     |                        |            |
    |-------------+------------------------+------------|

C-c ],C-c \} latex-close-block

*** fn                                                                 :fn:

- f1 :: help system
- f2 :: StarDict 取词
- f3 :: macro begin
- f4 :: macro end
- f5 :: compile
- f6 :: sdcv
- f7 :: org-tag-view
- f8 :: undefinded
- f9 :: undefinded
- f10 :: undefinded
- f11 :: fullscreen
- f12 :: undefinded

M-<fn> 键组合比较顺手，但注意
- Alt+F4 是“关闭当前应用“的全局热键。
- Alt-F1 显示左侧任务栏
- Alt-F2 运行一个命令 cmd

** others
*** MS word
参考:





*** Emacs Cask
+ http://cask.readthedocs.org/en/latest/
+ https://github.com/cask/cask

Cask 主要是用来维护 elisp project 的，给 Emacs 插件作者使用， 管理插件
的依赖关系。副作用是也可以拿来自动安装 Emacs 插件， 不用在 .emacs 写一
段了。

*** recover-this-file
(recover-this-file)

Recover the visited file--get contents from its last auto-save file. #file#

*** DONE org不使双下划线，一不需要，二与python常用冲突
- State "DONE"       from "TODO"       [2015-11-23 一 16:49] \\
  不可以
CLOCK: [2015-11-23 一 16:42]--[2015-11-23 一 16:49] =>  0:07
CLOCK: [2015-11-23 一 16:38]--[2015-11-23 一 16:42] =>  0:04

a_b
a_{b}
a^{b}
a^b
_ab_
__ab__

#+begin_latex
  \begin{minted}[frame=single, mathescape]{latex}
  a\_b
  a$_{\text{b}}$
  a$^{\text{b}}$
  a\^{}b
  \uline{ab}
  \uline{\uline{ab}}
  \end{minted}
#+end_latex

1. org-export-with-emphasize
2. #+OPTIONS: *:nil
3. 问题是： 加粗为没有用了
4. +折衷办法: 仅在需要的地方设置 *#+OPTIONS: *:nil* （这是不行的）+
5. 那就没有办法的，强调是必须用的

* Editing
** 基本编辑

|---------------+-------------------------+-----------------------------|
| 按键          | 命令                    | 作用                        |
|---------------+-------------------------+-----------------------------|
| C-x C-f       | find-file               | 打开文件                    |
|---------------+-------------------------+-----------------------------|
| C-x C-v       | find-alternate-file     | 打开另一个文件              |
|---------------+-------------------------+-----------------------------|
| C-x C-s       | save-buffer             | 保存文件                    |
|---------------+-------------------------+-----------------------------|
| C-x C-w       | write-file              | 另存文件                    |
|---------------+-------------------------+-----------------------------|
| C-q (n)       | quoted-insert           | 插入字符，n表示字符的八进制 |
|               |                         | ASCII码                     |
|---------------+-------------------------+-----------------------------|
| C-x 8         | ucs-insert              | 插入Unicode字符             |
|---------------+-------------------------+-----------------------------|
| C-d           | delete-char             | 删除光标处字符              |
|---------------+-------------------------+-----------------------------|
| Backspace     | delete-backward-char    | 删除光标前字符              |
|---------------+-------------------------+-----------------------------|
| M-d           | kill-word               | 删除光标起单词              |
|---------------+-------------------------+-----------------------------|
| M-Backspace   | backward-kill-word      | 删除光标前单词              |
|---------------+-------------------------+-----------------------------|
| C-k           | kill-line               | 删除光标起当前行            |
|---------------+-------------------------+-----------------------------|
| M-k           | kill-sentence           | 删除光标起句子              |
|---------------+-------------------------+-----------------------------|
| C-x Backspace | backward-kill-sentence  | 删除光标前句子              |
|---------------+-------------------------+-----------------------------|
| (none)        | kill-paragraph          | 删除光标起段落              |
|---------------+-------------------------+-----------------------------|
| (none)        | backward-kill-paragraph | 删除光标前段落              |
|---------------+-------------------------+-----------------------------|
| C-/           | undo                    | 撤销                        |
|---------------+-------------------------+-----------------------------|
| C-_           | undo                    | 撤销                        |
|---------------+-------------------------+-----------------------------|
| C-x u         | undo                    | 撤销                        |
|---------------+-------------------------+-----------------------------|
| C-g           | keyboard-quit           | 撤销命令                    |
|---------------+-------------------------+-----------------------------|
| C-h t         | help-with-tutorial      | 调出Emacs Tutorial          |
|---------------+-------------------------+-----------------------------|
| C-h r         | info-emacs-manual       | 调出Emacs Manual            |
|---------------+-------------------------+-----------------------------|
| C-h k         | describe-key            | 查看对应command帮助         |
| (command)     |                         |                             |
|---------------+-------------------------+-----------------------------|
| C-o           | open-line               | 插入空行                    |
|---------------+-------------------------+-----------------------------|
| C-x C-o       | delete-blank-line       | 删除空行                    |
|---------------+-------------------------+-----------------------------|
| C-x z         | repeat                  | 重复前个命令                |
|---------------+-------------------------+-----------------------------|
** file                                                             :refile:
*** 根据有无前缀区分find-file和find-file-other-window
- State "DONE"       from "TODO"       [2015-03-22 日 17:23]

 | C-x 4 C-f, C-x 4 f | find-file-other-window |

** Buffer                                                           :buffer:
*** buffer func
#+BEGIN_SRC emacs-lisp
  (buffer-file-name)
#+END_SRC

*** 缓冲区导航
|---------+---------------------+-------------------------------------------|
| 按键    | 命令                | 作用                                      |
|---------+---------------------+-------------------------------------------|
| C-f     | forward-char        | 向前一个字符                              |
|---------+---------------------+-------------------------------------------|
| C-b     | backward-char       | 向后一个字符                              |
|---------+---------------------+-------------------------------------------|
| C-p     | previous-line       | 上移一行                                  |
|---------+---------------------+-------------------------------------------|
| C-n     | next-line           | 下移一行                                  |
|---------+---------------------+-------------------------------------------|
| M-f     | forward-word        | 向前一个单词                              |
|---------+---------------------+-------------------------------------------|
| M-b     | backward-word       | 向后一个单词                              |
|---------+---------------------+-------------------------------------------|
| C-a     | beginning-of-line   | 移到行首                                  |
|---------+---------------------+-------------------------------------------|
| C-e     | end-of-line         | 移到行尾                                  |
|---------+---------------------+-------------------------------------------|
| M-e     | forward-sentence    | 移到句首                                  |
|---------+---------------------+-------------------------------------------|
| M-a     | backward-sentence   | 移到句尾                                  |
|---------+---------------------+-------------------------------------------|
| M-}     | forward-paragraph   | 下移一段                                  |
|---------+---------------------+-------------------------------------------|
| M-{     | backward-paragraph  | 上移一段                                  |
|---------+---------------------+-------------------------------------------|
| C-v     | scroll-up           | 下移一屏                                  |
|---------+---------------------+-------------------------------------------|
| M-v     | scroll-down         | 上移一屏                                  |
|---------+---------------------+-------------------------------------------|
| C-x ]   | forward-page        | 下移一页                                  |
|---------+---------------------+-------------------------------------------|
| C-x [   | backward-page       | 上移一页                                  |
|---------+---------------------+-------------------------------------------|
| M-<     | beginning-of-buffer | 移到文档头                                |
|---------+---------------------+-------------------------------------------|
| M->     | end-of-buffer       | 移到文档尾                                |
|---------+---------------------+-------------------------------------------|
| M-g g n | goto-line           | 移到第n行                                 |
|---------+---------------------+-------------------------------------------|
| (none)  | goto-char           | 移到第n个字符                             |
|---------+---------------------+-------------------------------------------|
| C-l     | recenter            | 将当前位置放到页面中间(Emacs最喜欢的地方) |
|---------+---------------------+-------------------------------------------|
| M-n     | digit-argument      | 重复下个命令n次                           |
|---------+---------------------+-------------------------------------------|
| C-u n   | universal-argument  | 重复下个命令n次，n默认为4                 |
|---------+---------------------+-------------------------------------------|
*** 缓冲区管理
|-----------------+-------------------------------+-----------------------------------|
| 按键            | 命令                          | 作用                              |
|-----------------+-------------------------------+-----------------------------------|
| C-x b           | switch-to-buffer              | 打开或新建一个缓冲                |
|-----------------+-------------------------------+-----------------------------------|
| C-x 4 b         | switch-to-buffer-other-window | 在另一个window中打开或新建一个缓  |
|                 |                               | 冲                                |
|-----------------+-------------------------------+-----------------------------------|
| C-x 5 b         | switch-to-buffer-other-frame  | 在另一个frame中打开或新建一个缓冲 |
|-----------------+-------------------------------+-----------------------------------|
| C-x LEFT        | next-buffer                   | 移动到下一个缓冲                  |
|-----------------+-------------------------------+-----------------------------------|
| C-x RIGHT       | previous-buffer               | 移动到前一个缓冲                  |
|-----------------+-------------------------------+-----------------------------------|
| C-x C-b         | list-buffers                  | 显示所有缓冲                      |
|-----------------+-------------------------------+-----------------------------------|
| C-u C-x C-b     |                               | 显示映射到文件的缓冲              |
|-----------------+-------------------------------+-----------------------------------|
| C-x k           | kill-buffer                   | 关闭缓冲                          |
|-----------------+-------------------------------+-----------------------------------|
|                 | kill-some-buffers             | 关闭多个缓冲                      |
|-----------------+-------------------------------+-----------------------------------|
|                 | clean-buffer-list             | 关闭三天未使用的缓冲              |
|-----------------+-------------------------------+-----------------------------------|
| C-x C-q         | toggle-read-only              | 切换缓冲只读属性                  |
|-----------------+-------------------------------+-----------------------------------|
| C-u M-g M-g num |                               | 跳至前一缓冲num行                 |
|-----------------+-------------------------------+-----------------------------------|
|                 | rename-buffer                 | 重命名缓冲                        |
|-----------------+-------------------------------+-----------------------------------|
|                 | rename-uniquely               | 重命名缓冲，在其名后加数字        |
|-----------------+-------------------------------+-----------------------------------|
|                 | view-buffer                   | 只读方式打开缓冲                  |
|-----------------+-------------------------------+-----------------------------------|
|                 | buffer-menu                   | 打开Buffer Menu                   |
|-----------------+-------------------------------+-----------------------------------|
|                 | make-indirect-buffer          | 建立间接缓冲                      |
|-----------------+-------------------------------+-----------------------------------|
|                 | clone-indirect-buffer         | 建立当前缓冲的间接缓冲            |
|-----------------+-------------------------------+-----------------------------------|
*** save-some-buffers C-x s
It is bound to *C-x s*.

(save-some-buffers &optional ARG PRED)

Save some modified file-visiting buffers.  Asks user about each one.
You can answer `y' to save, `n' not to save, `C-r' to look at the
buffer in question with `view-buffer' before deciding or `d' to
view the differences using `diff-buffer-with-file'.
*** other-buffer                                                   :buffer:

(other-buffer &optional buffer visible-ok frame)

return most recently selected buffer other than buffer.
buffers not visible in windows are preferred to visible buffers, unless
optional second argument visible-ok is non-nil.  ignore the argument
buffer unless it denotes a live buffer.  if the optional third argument
frame is non-nil, use that frame's buffer list instead of the selected
frame's buffer list.

*** 快速切换文件                                                   :buffer:

clock: [2015-11-20 五 11:29]--[2015-11-20 五 11:40] =>  0:11

c-x b ret 键还是多了，而且有helm窗口，有时两个文件之间需要频繁切换。最
好绑定在另外一个快捷键。

快捷键 m-q: m-q 与 m-tab 和 m-～最近。
m-q 被预先绑定在 fill-paragraph

1. 方案1： 定义宏
   1) 可行性： ok
   2) 问题： 中文输入法

2. (other-buffer)
   #+begin_src emacs-lisp
     (define-key global-map "\m-q" nil)
     (define-key global-map "\m-q" '(lambda()
                                      (interactive)
                                      (switch-to-buffer (other-buffer))))
   #+end_src

** delete

|---------------+-------------------------+-----------------------------------------------|
| C-d           | delete-char             | 删除光标处字符                                |
| Backspace     | delete-backward-char    | 删除光标前字符                                |
| M-\           | delete-horizontal-space | 删除光标处的所有空格和Tab字符                 |
| M-SPC         | just-one-space          | 删除光标处的所有空格和Tab字符，但留下一个     |
| C-x C-o       | delete-blank-lines      | 删除光标周围的空白行，保留当前行              |
| M-^           | delete-indentation      | 将两行合为一行，删除之间的空白和缩进          |
| C-k           | kill-line               | 从光标处起删除该行                            |
| C-S-Backspace | kill-whole-line         | 删除整行                                      |
| C-w           | kill-region             | 删除区域                                      |
| M-w           | kill-ring-save          | 复制到kill 环，而不删除                       |
| M-d           | kill-word               | 删除光标起一个单词                            |
| M-Backspace   | backward-kill-word      | 删除光标前单词                                |
| M-k           | kill-sentence           | 删除光标起一句                                |
| C-x Backspace | backward-kill-sentence  | 删除光标前删一句                              |
| M-z char      | zap-to-char             | 删至字符char为止                              |
|---------------+-------------------------+-----------------------------------------------|

** Killing & Yanking                                                  :yank:
*** keybindings

|---------------+-------------------------+----------------------------------------------|
| 按键          | 命令                    | 作用                                         |
|---------------+-------------------------+----------------------------------------------|
| C-d           | delete-char             | 删除光标处字符                               |
|---------------+-------------------------+----------------------------------------------|
| Backspace     | delete-backward-char    | 删除光标前字符                               |
|---------------+-------------------------+----------------------------------------------|
| M-\           | delete-horizontal-space | 删除光标处的所有空格和Tab字符                |
|---------------+-------------------------+----------------------------------------------|
| M-SPC         | just-one-space          | 删除光标处的所有空格和Tab字符，但留下一个    |
|---------------+-------------------------+----------------------------------------------|
| C-x C-o       | delete-blank-lines      | 删除光标周围的空白行，保留当前行             |
|---------------+-------------------------+----------------------------------------------|
| M-^           | delete-indentation      | 将两行合为一行，删除之间的空白和缩进         |
|---------------+-------------------------+----------------------------------------------|
| C-k           | kill-line               | 从光标处起删除该行                           |
|---------------+-------------------------+----------------------------------------------|
| C-S-Backspace | kill-whole-line         | 删除整行                                     |
|---------------+-------------------------+----------------------------------------------|
| C-w           | kill-region             | 删除区域                                     |
|---------------+-------------------------+----------------------------------------------|
| M-w           | kill-ring-save          | 复制到kill 环，而不删除                      |
|---------------+-------------------------+----------------------------------------------|
| M-d           | kill-word               | 删除光标起一个单词                           |
|---------------+-------------------------+----------------------------------------------|
| M-Backspace   | backward-kill-word      | 删除光标前单词                               |
|---------------+-------------------------+----------------------------------------------|
| M-k           | kill-sentence           | 删除光标起一句                               |
|---------------+-------------------------+----------------------------------------------|
| C-x Backspace | backward-kill-sentence  | 删除光标前删一句                             |
|---------------+-------------------------+----------------------------------------------|
| M-z char      | zap-to-char             | 删至字符char为止                             |
|---------------+-------------------------+----------------------------------------------|
| C-y           | yank                    | 召回                                         |
|---------------+-------------------------+----------------------------------------------|
| M-y           | yank-pop                | 召回前一个                                   |
|---------------+-------------------------+----------------------------------------------|
| C-M-w         | append-next-kill        | 下一个删掉内容和上次删除合并                 |
|---------------+-------------------------+----------------------------------------------|
| C-h v         | describe-variable       | 显示变量内容                                 |
|---------------+-------------------------+----------------------------------------------|
| (none)        | append-to-buffer        | 将区域中内容加入到一个buffer中               |
|---------------+-------------------------+----------------------------------------------|
| (none)        | prepend-to-buffer       | 将区域中内容加入到一个buffer光标前           |
|---------------+-------------------------+----------------------------------------------|
| (none)        | copy-to-buffer          | 区域中内容加入到一个buffer中，删除该buffer原 |
|               |                         | 有内容                                       |
|---------------+-------------------------+----------------------------------------------|
| (none)        | insert-buffer           | 在该位置插入指定的buffer中所有内容           |
|---------------+-------------------------+----------------------------------------------|
| (none)        | append-to-file          | 将区域中内容复制到一个文件中                 |
|---------------+-------------------------+----------------------------------------------|
| (none)        | cua-mode                | 启用/停用CUA绑定                             |
|---------------+-------------------------+----------------------------------------------|

|-------------------+-----------------------------|
| 变量              | 作用                        |
|-------------------+-----------------------------|
| kill-read-only-ok | 是否在只读文件启用kill 命令 |
|-------------------+-----------------------------|
| kill-ring         | kill环                      |
|-------------------+-----------------------------|
| kill-ring-max     | kill环容量                  |
|-------------------+-----------------------------|

*** copy without selection

+ http://emacswiki.org/emacs/CopyWithoutSelection


1. built-in
   + C-M-SPC set-mark-command

   + C-M-SPC M-W/C-M

   + C-M-SPC C-M-SPC  mart two elements

2. copy word
   #+BEGIN_EXAMPLE
     (defun copy-word (&optional arg)
      "Copy words at point into kill-ring"
       (interactive "P")
       (copy-thing 'backward-word 'forward-word arg)
       ;;(paste-to-mark arg)
     )
   #+END_EXAMPLE

3. copy line
   #+BEGIN_EXAMPLE
     (defun copy-line (&optional arg)
        "Save current line into Kill-Ring without mark the line "
         (interactive "P")
         (copy-thing 'beginning-of-line 'end-of-line arg)
         (paste-to-mark arg)
       )
   #+END_EXAMPLE

4. copy paragraph
   #+BEGIN_EXAMPLE
     (defun copy-paragraph (&optional arg)
           "Copy paragraphes at point"
            (interactive "P")
            (copy-thing 'backward-paragraph 'forward-paragraph arg)
            (paste-to-mark arg)
          )
   #+END_EXAMPLE

5. copy string
   #+BEGIN_EXAMPLE
     (defun beginning-of-string(&optional arg)
            "  "
            (re-search-backward "[ \t]" (line-beginning-position) 3 1)
                  (if (looking-at "[\t ]")  (goto-char (+ (point) 1)) )
          )
          (defun end-of-string(&optional arg)
            " "
            (re-search-forward "[ \t]" (line-end-position) 3 arg)
                  (if (looking-back "[\t ]") (goto-char (- (point) 1)) )
          )

          (defun thing-copy-string-to-mark(&optional arg)
            " Try to copy a string and paste it to the mark
          When used in shell-mode, it will paste string on shell prompt by default "
            (interactive "P")
            (copy-thing 'beginning-of-string 'end-of-string arg)
            (paste-to-mark arg)
          )
   #+END_EXAMPLE

6. copy parenthesis
   #+BEGIN_EXAMPLE
     (defun beginning-of-parenthesis(&optional arg)
            "  "
            (re-search-backward "[[<(?\"]" (line-beginning-position) 3 1)
                  (if (looking-at "[[<(?\"]")  (goto-char (+ (point) 1)) )
          )
          (defun end-of-parenthesis(&optional arg)
            " "
            (re-search-forward "[]>)?\"]" (line-end-position) 3 arg)
                  (if (looking-back "[]>)?\"]") (goto-char (- (point) 1)) )
          )

          (defun thing-copy-parenthesis-to-mark(&optional arg)
            " Try to copy a parenthesis and paste it to the mark
          When used in shell-mode, it will paste parenthesis on shell prompt by default "
            (interactive "P")
            (copy-thing 'beginning-of-parenthesis 'end-of-parenthesis arg)
            (paste-to-mark arg)
          )
   #+END_EXAMPLE

** mark                                                           :markring:

|---------+-------------------------+----------------------|
| 按键    | 命令                    | 作用                 |
|---------+-------------------------+----------------------|
| C-@     | set-mark-command        | 设定标记             |
|---------+-------------------------+----------------------|
| C-x C-x | exchange-point-and-mark | 交换标记和光标位置   |
|---------+-------------------------+----------------------|
| C-w     | kill-region             | 删除区域中内容       |
|---------+-------------------------+----------------------|
| C-x C-u | upcase-region           | 将区域中字母改为大写 |
|---------+-------------------------+----------------------|
| C-x h   | mark-whole-buffer       | 全选                 |
|---------+-------------------------+----------------------|
| C-x C-p | mark-page               | 选取一页             |
|---------+-------------------------+----------------------|
| M-h     | mark-paragraph          | 选取一段             |
|---------+-------------------------+----------------------|
| M-@     | mark-word               | 选取一个单词         |
|---------+-------------------------+----------------------|
| C-@ C-@ |                         | 加入点到标记环       |
|---------+-------------------------+----------------------|
| C-u C-@ |                         | 在标记环中跳跃       |
|---------+-------------------------+----------------------|
| C-x C-@ | pop-global-mark         | 在全局标记环中跳跃   |
|---------+-------------------------+----------------------|
| (none)  | transient-mark-mode     | 非持久化标记模式     |
|---------+-------------------------+----------------------|

|-----------------------------+------------------------|
| 变量                        | 作用                   |
|-----------------------------+------------------------|
| set-mark-command-repeat-pop | 是否使用C-@连续跳跃    |
|-----------------------------+------------------------|
| mark-ring-max               | 标记环最大容量         |
|-----------------------------+------------------------|
| mark-even-if-nonactive      | 是否只使用激活状态标记 |
|-----------------------------+------------------------|

** 书签                                                           :bookmark:

*** bookmark
[[http://blog.csdn.net/pfanaya/article/details/7068710][CSDN blog]]

书签:保存缓冲区位置
书签保存位置: $HOME/.emacs.d/bookmarks
|---------+----------------------+------------------------|
| C-x r m | bookmark-set         | 设置书签               |
| C-x r l | bookmarks-bmenu-list | 列出书签               |
| C-x r b | bookmark-jump        | 跳转至书签             |
|         | bookmark-delete      | 删除书签,亦可同名覆盖  |
|         | bookmark-save        | 将书签保存到书签文件中 |
|---------+----------------------+------------------------|

书签列表操作
|-----+--------------|
| d   | 标记删除     |
| u   | 取消删除标记 |
| x   | 执行删除     |
| r   | 重命名       |
| q   | 关闭列表     |
| o   |              |
| C-o |              |
| m   |              |
| u   |              |
| v   |              |
| s   |              |
|-----+--------------|

*** [[http://blog.csdn.net/pfanaya/article/details/7068710][Emacs Bookmark 书签]]                                                :blog:

*书到用时方恨少......掌握Emacs的最好办法就是使用，使用，再使用......哈哈......*

*转自：*[[http://www.ibm.com/developerworks/cn/education/aix/au-emacs4/section4.html]]

使用 Emacs 书签

Emacs 提供了保存缓冲区中位置的另一种工具。这些
Emacs /书签/ 的工作方式与寄存器相同，但是它们的标签可以超过一个字符长，而且它们比寄存器更为持久：如果保存了书签，那么您可以在两个不同的会话之间使用它们。它们将一直保留下来，直到您删除它们。正如它们的名称所表示的，对于保存您在缓冲区中的位置，以便您稍后可以返回到该位置（通常是在以后的
Emacs 会话期间），使用书签是非常方便的。

这个部分将向您介绍使用、设置、列出、保存和删除 Emacs 书签。

设置一个书签

对于保存光标位置，书签与寄存器是很相似的，不同之处在于书签能够保持到当前会话之外。对于标记您在文件中的位置，并在稍后返回到该位置，书签是非常方便的，您可以为很多文件设置书签，并且您可以在单个文件中设置很多书签。

要在当前缓冲区中，为您正在访问的文件的当前光标设置一个书签，可以运行 =bookmark-set= 功能，它与 =C-x r m= 进行了绑定。

这一命令后面紧跟您的书签的名称；在缺省情况下，它就是当前缓冲区的名称。

现在，尝试保存一些书签：

1. 启动 Emacs，并使光标定位于您的练习文件中的第 20 行：

   #+BEGIN_EXAMPLE
       $ emacs +20 practice.b

   #+END_EXAMPLE

2. 键入 =C-x r m= 以便将这个光标作为书签保存。

3. 当 Emacs
   请求为这一书签提供相应的名称时，可以按 *Enter* 以使用该缓冲区的名称
   (practice.b)。

4. 键入 =M-<= 以移动到缓冲区的顶部。

5. 保存一个名为 top 的新书签：键入 =C-x r m top=。

列出您的书签

=bookmarks-bmenu-list= 功能可以列出一个由已设置的所有书签组成的菜单。通过键入 =C-x r l= 运行该功能，而您的会话应该与[[http://www.ibm.com/developerworks/cn/education/aix/au-emacs4/section4.html#fig5][图
5]] 中所示类似。


 *图 5. Emacs 的书签菜单*

[[http://www.ibm.com/developerworks/cn/education/aix/au-emacs4/image05.jpg]]

您可以通过按 *Enter* 从该列表中选择一个书签。Emacs
将在一个新的缓冲区（如果尚未在一个缓冲区中打开它）中访问该文件，并将其作为当前缓冲区，同时将光标移动到该书签的位置。

现在，尝试运行这一功能，并使用箭头键选择您的“top”书签。

跳转至一个书签

您可以通过直接/跳转/ 至某个书签来访问它，而无需从您的书签主列表中选择它。要跳转至某个特定的书签，可以使用 =bookmark-jump=功能，=C-x r b=。这一命令将移动到特定文件中的给定位置；如果尚未在缓冲区中打开这个带书签的文件，那么这一命令将打开它。

在迷你缓冲区中会提示您输入要跳转到的书签。这个提示使用了自动完成功能，所以您只需键入该书签名前面足够的字母，以使其能够区别于其他的书签即可，然后按 *Tab* 以选择该书签。

尝试跳转到您的 practice.b
书签：键入 =C-x r b prac=，按 *Tab* 键，然后按 *Enter*。

删除一个书签

当您使用一个现有书签的标签来设置新书签（请参见[[http://www.ibm.com/developerworks/cn/education/aix/au-emacs4/section4.html#seta][设置一个书签]]部分）时，您将使用新的书签取代原来的书签。这是一种“删除”书签的方式，即使用新的值来取代其原来的值。当您在阅读一个大文件时，如果您仅仅保留一个书签以标记您的位置，上述方法是很常见的，因为您每次设置该书签时都替换了它先前的值。

但是您可以同时删除一个书签，那么该标签不再指向任何文件中的任何位置。要实现这一点，可以运行 =bookmark-delete= 功能，并在被询问时，给出要进行删除的书签的名称。

尝试删除您的“top”书签：

1. 键入 =C-x bookmark-delete= 并按 *Enter*。

2. 当被询问时，给出要删除的书签的名称：键入 =top= 并按 *Enter*。

通过使用 =C-x r l= 调出书签列表，您可以验证已经删除了该书签。

保存您的书签

在 Emacs 的新版本中，一旦您生成了任何书签，那么您为当前 Emacs
会话所设置的书签将自动地保存到您的永久书签文件中。您的书签文件是您的
home 目录中的一个名为 .emac.bmk 的隐藏文件。

如果没有配置 Emacs
以使其自动保存您的书签，那么通过运行 =bookmark-save= 功能，可以将它们保存到您的
.emac.bmk 文件中。如果当您退出时没有保存任何新的书签，那么 Emacs
将询问您是否想要保存它们。

Emacs 书签命令表

[[http://www.ibm.com/developerworks/cn/education/aix/au-emacs4/section4.html#table4][表
4]] 列出了使用 Emacs
书签的各种命令和键，给出了它们的功能名，并描述了它们的含义。


 *表 4. 使用书签的 Emacs 命令*

键盘输入

功能

描述

=C-x r m Bookmark=

=bookmark-set=

设置一个名为 /Bookmark/ 的书签。

=C-x r l=

=bookmarks-bmenu-list=

列出所有已保存的书签。



=bookmark-delete=

删除一个书签。

=C-x r b Bookmark=

=bookmark-jump=

跳转至名为 /Bookmark/ 的书签中所设置的位置。

/未定义/

=bookmark-save=

将所有的书签保存到书签文件 ~/.emac.bmk 中。

** search & replace                                                 :search:
|-----------+-------------------------+--------------------------------------------|
| 按键      | 命令                    | 作用                                       |
|-----------+-------------------------+--------------------------------------------|
| C-s       | isearch-forward         | 向前进行增量查找                           |
|-----------+-------------------------+--------------------------------------------|
| C-r       | isearch-backward        | 向后进行增量查找                           |
|-----------+-------------------------+--------------------------------------------|
| M-c       |                         | (查找状态)切换大写敏感                     |
|-----------+-------------------------+--------------------------------------------|
| C-j       | newline-and-indent      | (查找状态)输入换行符                       |
|-----------+-------------------------+--------------------------------------------|
| M-Tab     | isearch-complete        | (查找状态)自动匹配                         |
|-----------+-------------------------+--------------------------------------------|
| C-h C-h   |                         | (查找状态)进入查找帮助                     |
|-----------+-------------------------+--------------------------------------------|
| C-w       |                         | (查找状态)将光标处单词复制到查找区域       |
|-----------+-------------------------+--------------------------------------------|
| C-y       |                         | (查找状态)将光标处直到行尾内容复制到查找区 |
|           |                         | 域                                         |
|-----------+-------------------------+--------------------------------------------|
| M-y       |                         | (查找状态)把kill 环中最后一项复制到查找区  |
|           |                         | 域                                         |
|-----------+-------------------------+--------------------------------------------|
| C-M-w     |                         | (查找状态)删除查找区域最后一个字符         |
|-----------+-------------------------+--------------------------------------------|
| C-M-y     |                         | (查找状态)将光标处字符复制到查找区域最后   |
|-----------+-------------------------+--------------------------------------------|
| C-f       |                         | (查找状态)将光标处字符复制到查找区域最后   |
|-----------+-------------------------+--------------------------------------------|
| C-s RET   | search-forward          | 向前进行简单查找                           |
|-----------+-------------------------+--------------------------------------------|
| C-r RET   | search-backward         | 向后进行简单查找                           |
|-----------+-------------------------+--------------------------------------------|
| M-s w     | isearch-forward-word    | 向前进行词组查找                           |
|-----------+-------------------------+--------------------------------------------|
| M-s w RET | word-search-forward     | 向前进行词组查找（非增量方式）             |
|-----------+-------------------------+--------------------------------------------|
| M-s w C-r | word-search-backward    | 向后进行词组查找（非增量方式）             |
| RET       |                         |                                            |
|-----------+-------------------------+--------------------------------------------|
| C-M-s     | isearch-forward-regexp  | 向前进行正则查找                   |
|-----------+-------------------------+--------------------------------------------|
| C-M-r     | isearch-backward-regexp | 向后进行正则查找                           |
|-----------+-------------------------+--------------------------------------------|
|           | replace-string          | 全文替换                                   |
|-----------+-------------------------+--------------------------------------------|
|           | replace-regexp          | 全文正则替换                               |
|-----------+-------------------------+--------------------------------------------|
| M-%       | query-replace           | 查找替换                                   |
|-----------+-------------------------+--------------------------------------------|
|           | recursive-edit          | 进入递归编辑                               |
|-----------+-------------------------+--------------------------------------------|
|           | abort-recursive-edit    | 退出递归编辑                               |
|-----------+-------------------------+--------------------------------------------|
|           | top-level               | 退出递归编辑                               |
|-----------+-------------------------+--------------------------------------------|

** 矩形操作                                                      :rectangle:

*** 参考

+ [[http://blog.sina.com.cn/s/blog_88b165d301017djg.html][sina blog]]
+ [[http://blog.163.com/vic_kk/blog/static/494705242010428667250/][矩形和寄存器]]

*** keybindings

Emacs以C-x r开头的命令来进行矩形操作.
注: *KEYS C-h* 查看当前buffer中以某个快捷键序列开头的快捷键列表.
|-----------+----------------------------+-----------------------|
| C-x r c   | clear-rectangle            | 清空一个矩形块,以空格 |
| C-x r d   | delete-rectangle           | 删除一个矩形块,以空白 |
| C-x r k   | kill-rectangle             | 剪切一个矩形块        |
| C-x r r   | copy-rectangle-to register | 复制矩形块到寄存器    |
| C-x r i   | insert-register            |                       |
| C-x r g   | insert-register            |                       |
| C-x r y   | yank-rectangle             | 粘贴一个矩形块        |
| C-x r o   | open-rectangle             | 插入一个矩形块        |
| C-x r t   | string-rectangle           | string-rectangle      |
| C-x r M-w | copy-rectangle-as-kill     |                       |
|-----------+----------------------------+-----------------------|

cua-mode支持可视化块模式.

*** rectangle-number-lines(C-x r N) 在region前加上行号,使某些行为失效 :trick_:

*** [[http://blog.sina.com.cn/s/blog_88b165d301017djg.html][emacs 矩形操作]]                                                   :blog:

**** 原始矩形块模式

emacs以C-x
r开头的命令来进行矩形操作。先用C-space或者C-@设一个mark，移动光标到另一点，用以下命令进行列操作：

1. C-x r k 剪切一个矩形块
2. C-x r y 粘贴一个矩形块
3. C-x r o 插入一个矩形块
4. C-x r c 清除一个矩形块(使其变成空白)
5. C-x r t 在选定区域的所有列前插入样的字符

**** cua-mode支持的可视化块模式

除了emacs本身支持的列模式外，emacs还可以通过cua-mode支持一种可视化的列模式。在cua-mode下，按[C-return]会进入
cua
rectangle模式。在这个模式下可以通过鼠标点击确认起点，然后通过光标键来选中一个rect范围，这个rect会用另外的颜色显示出来。

直接输入字符: 在每行前(或后)都插入这个字符



1.  [M-a]: 将rect中的文字左对齐
2.  [M-b]: 用空格(tabs或者spaces)替换所有rect中的字符
3.  [M-c]: 去掉所有行左侧的空格
4.  [M-f]: 用单个字符替换所有rect中的字符(提示输入一个字符)
5.  [M-i]: 对每行中第一个找到的数字进行加1操作(自动把0x开头的当作十六进制数字)
6.  [M-k]: 剪切rect
7.  [M-l]: 把rect中的内容全部转换为小写
8.  [M-m]: 拷贝rect
9.  [M-n]: 用一串自增的数字替换rect中的每一行(这个功能可以用来给每行编号) ### 非常好用的功能
10. [M-o]: rect的内容右移，选中的rect用空格填充
11. [M-r]: 用字符串替换符满足正则表达式的字符串
12. [M-R]: 上下反转
13. [M-s]: 把rect中的每一行替换为一个字符串(提示输入)
14. [M-t]: 把rect整个替换为一个字符串(提示输入)
15. [M-u]: 把rect中的内容全部转换为大写
16. [M-|]: 对rect执行一个shell命令

** Register                                                       :register:
*** 寄存器
#+BEGIN_SRC latex
Emacs \textbf{Register} is similar to CPU register in the sense that it allows quick access to temporal data. Each register has a name that consists of a \textbf{single} character, like 'a', 'A' and '1'.

In Emacs, registers are for quick access to things such as \textbf{a position}, \textbf{a piece of text},\textbf{a rectangle}, \textbf{a number}, \textbf{a file name} or \textbf{a window configure}.

Saving different types of objects has different key bindings, but to jump to a register, you use a single command \textbf{C-c r j REG\footnote{REG is the register of your choice}}

\textbf{Note}: The prefix for register command is \textbf{C-x r}.If you forget the key bindings,\textbf{C-x r C-h} to get the list of key bindings.

\begin{itemize}
\item \textbf{window and frame configuration}

  \begin{tabular}{l|l|l}
    \hline
    Key & Binding & Comment \\
    \hline
    C-x r w REG & window-configuration-to-register & save configure of the current frame \\
    C-x r f REG & frame-configuration-to-register & save the state of all frams \\
    C-x r j REG & jump-to-register & jump to a register REG\\
    \hline
  \end{tabular}

\item \textbf{save text}

  \begin{tabular}{l|l|l}
    \hline
    Key & Binding & Comment \\
    \hline
    C-x r s REG & copy-to-register & Copy region into register REG \\
    C-x r i REG & insert-register & insert text from register REG \\
    \hline
  \end{tabular}

\item \textbf{rectangle}

  \begin{tabular}{l|l|l}
    \hline
    Key & Binding & Comment \\
    C-x r r REG & copy-rectangke-to-register & copy the region-rectangle\\
    \hline
  \end{tabular}

\item \textbf{position}

    \begin{tabular}{l|l|l}
    \hline
    C-x r SPC REG & point-to-register & record the position fo the point\\
                  && and the current buffer \\
    C-x r j REG & jump-to-register & jump to the position and buffer \\
                  && if the buffer is killed, revisit the file and open the buffer\\
    \hline
    \end{tabular}

  \item \textbf{number}
\end{itemize}
#+END_SRC
*** prepend-to-register                                          :register:
(prepend-to-register register start end &optional delete-flag)

prepend region to text in register register.
with prefix arg, delete as well.
called from program, takes four args: register, start, end and delete-flag.
start and end are buffer positions indicating what to prepend.
** Macro                                                             :macro:
*** 录制宏
Macro records your actions in Emacs and play back later.
|-------------+-----------------------|
| f3 or C-x ( | Start recording macro |
| f4 or C-x ) | Stop recording macro  |
| C-x e or f4 | Playback macro        |
|-------------+-----------------------|

+ shorter- cut: Personally, I use f3 and f4 for recording/playback, so
  I don't have to press many keys.
+ repeat:
  + *To repeat a macro many times, use prefix argument.*  For
    example, C-u 10 <f4> executes a macro 10 times.
  + If you want to repeat until the end of file, use prefix argument
    0: *C-u 0 <f4>*
  + Alternatively, highlight the region of remaining lines, and *C-x
    C-k r*: run the last keyboard macro on each line that begins in
    the region (apply-macro-to-region-lines).
+ cancel: If you want to cancel recording, C-g.
+ After a macro is defined, it is saved in the keyboard macro
  ring. There is only one keyboard macro ring, shared by all buffers.
+ All commands which operate on the keyboard macro ring use the same
  C-x C-k prefix. Just remember the prefix *C-x C-k = macro commands*,
  and you won't find macro key bindings difficult to remember.


|-------------+------------------------------------------------------|
| C-x C-k C-k | Command: kmacro-end-or-call-macro-repeat             |
|             | Execute the keyboard macro at the head of the ring   |
|-------------+------------------------------------------------------|
| C-x C-k C-n | Command: kmacro-cycle-ring-next                      |
|             | Rotate the keyboard macro ring to the next macro     |
|             | (defined earlier).                                   |
|-------------+------------------------------------------------------|
| C-x C-k C-p | Command: kmacro-cycle-ring-previous                  |
|             | Rotate the keyboard macro ring to the previous macro |
|             | (defined later)                                      |
|-------------+------------------------------------------------------|

*** 保存宏
|-----------+--------------------------------------------------------------|
| C-x C-k n | Command: kmacro-name-last-macr                               |
|           | Give a command name (for the duration of the Emacs session)  |
|           | to themost recently defined keyboard macro.                  |
|-----------+--------------------------------------------------------------|
| C-x C-k b | Command: kmacro-bind-to-key                                  |
|           | Bind the most recently defined keyboard macro to a key       |
|           | sequence                                                     |
|-----------+--------------------------------------------------------------|

+ Record some keyboard macros.
+ Give the macros names with C-x C-k n.
+ Bind the macros to C-x C-k 1, C-x C-k 2… with C-x C-k b.
+ Create the file ~/.emacs.d/init.el. If you do not have the directory and
  the file, create it with find-file.
+ Create the file ~/.emacs.d/macros with find-file. You should be inside
  the buffer of this file after creating it.
+ Save the macros with *M-x insert-kbd-macro.*
+ To save you trouble of reloading the macro file manually, put this Emacs
  Lisp code inside ~/.emacs.d/init.el:

  (load-file "~/.emacs.d/macros")

*** F4
<f4> runs the command kmacro-end-or-call-macro, which is an
interactive autoloaded compiled Lisp function in `kmacro.el'.

It is bound to <f4>.

(kmacro-end-or-call-macro ARG &optional NO-REPEAT)

End kbd macro if currently being defined; else call last kbd macro.
With numeric prefix ARG, repeat macro that many times.
*With C-u, call second macro in macro ring.*

*** marcos
**** excute-macro-through the buffer
#+BEGIN_SRC emacs-lisp
  (defun tagerill:excute-key-macro-througth-buffer(macro)
    (interactive "sMacro: ")
    (progn (goto-char (point-min))
           (while (< (point) (point-max))
             (macro)))
    )
#+END_SRC
**** macor
*M-x insert-kbd-macro*
#+BEGIN_SRC emacs-lisp
(fset 'rm_html_block
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([19 35 43 66 69 71 73 78 95 69 S-backspace 72 84 77 76 return 1 tab 11] 0 "%d")) arg)))
#+END_SRC
*** kmacro-end-and-call-macro(C-x e )                               :macro:

(kmacro-end-and-call-macro arg &optional no-repeat)

call last keyboard macro, ending it first if currently being defined.
with numeric prefix arg, repeat macro that many times.
*zero* argument means repeat until there is an error.

** Regexp                                                           :regexp:
*** 匹配以"* "开头的行
#+BEGIN_EXAMPLE
+ "^" 匹配行首
+ "\^" (error "Invalid modifier in string")
+ "\\^" 匹配"^"本身

+ "*" 匹配*本身
+ "\*" 匹配本身
+ "\\*" 表重复
+ "^* " 匹配以"* "开头的行
+ ()  匹配括号本身
+ \(\) 还是匹配括号本身
+ \\(\\) 表分组
#+END_EXAMPLE


规则不一致


(org-current-level)
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** 正则表达式
#+BEGIN_EXAMPLE
+ "^" 匹配行首
+ "\^" (error "Invalid modifier in string")
+ "\\^" 匹配"^"本身

+ "*" 表重复匹配*本身
+ "\*" 匹配*本身
+ "\\*"
+ "^* " 匹配以"* "开头的行

+ ()  匹配括号本身
+ \(\) 表索引
+ \\(\\) 无效

+ [0-9] 一位数字
+ [0-9]+ 多位数字
+ [0-9]* 一个或多位数字

+ . 匹配任意字符
+ \. 匹配句点
+ \\. 无效

+ \  无效
+ \\ 匹配反斜线

+ [] 表分组
+ \[ 匹配左中括号


#+END_EXAMPLE

** miscellaneous
*** home目录处理 ~
+ 不同用户的主目录路径名不一致，e.g.
  - /home/ben
  - /home/tiger
+ 符号 ~ 是特定平台下主目录的表示，所以不一定具备移植性
+ 解决：使用 expand-file-name 对 ~ 进行扩展
  #+BEGIN_EXAMPLE
  (load-file (concat (expand-file-name "~/.emacs.d") "/cedet/cedet-devel-load.el"))
  #+END_EXAMPLE

*** flush-lines
Delete lines containing matches for REGEXP.
*** 交换前后字符
| C-t | transpose-chars |

(transpose-chars ARG)

Interchange characters around point, moving forward one character.
With prefix arg ARG, effect is to take character before point
and drag it forward past ARG other characters (backward if ARG negative).
If no argument and at end of line, the previous two chars are exchanged.

*** [[http://blog.sina.com.cn/s/blog_88b165d301017dc2.html][emacs 大小写转换]]                                                 :blog:

- *从光标位置开始，处理单词后半部分*

1. capitalize-word (M-c) ;; 单词首字母转为大写
2. upcase-word (M-u)  ;; 整个单词转为大写
3. downcase-word (M-l)  ;; 整个单词转为小写（注意，这里是 META － l(*
   小写字母 L)）

- *从光标位置开始，处理单词前半部分*

1. negtive-argument; capitalize-word (M-- M-c) ;; 单词首字母转为大写
2. negtive-argument; upcase-word (M-- M-u)  ;; 整个单词转为大写
3. negtive-argument; downcase-word (M-- M-l)  ;; 整个单词转为小写

- *改变选定区域的大小写*



1. downcase-region (C-x C-l) ;; 选定区域全部改为小写
2. upcase-region (C-x C-u)  ;; 选定区域全部改为大写

*** whitespace                                                 :whitespace:
+ http://emacswiki.org/emacs/DeletingWhitespace
**** M-SPC just-one-space
**** *=M-\=* delete-horizontal-space
**** M-x delete-trailing-whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)
**** C-x C-o delete-blank-lines
deletes any extra blank lines between two paragraphs, leaving just one blank line.
**** org-mode delete extra line before haed line
#+BEGIN_SRC emacs-lisp
    ;; delete-blank-lines
    ;; It is bound to C-x C-o.
    ;; (delete-blank-lines)
    ;; On blank line, delete all surrounding blank lines, leaving just one.
    ;; On isolated blank line, delete that one.
    ;; On nonblank line, delete any immediately following blank lines.
  ;; <S-iso-lefttab> runs the command org-shifttab, which is an interactive
  ;; compiled Lisp function in `org.el'.

  ;; It is bound to <backtab>, <S-tab>, <S-iso-lefttab>, <menu-bar> <Tbl>
  ;; <Previous Field>, <menu-bar> <Org> <Show/Hide> <Cycle Global
  ;; Visibility>.

  ;; (org-shifttab &optional ARG)

  ;; Global visibility cycling or move to previous table field.
  ;; Call `org-table-previous-field' within a table.
  ;; When ARG is nil, cycle globally through visibility states.
  ;; When ARG is a numeric prefix, show contents of this level.


    (defun tagerill-org-mode-delete-extra-lines-before-headings()
      "delete extra lines before headings"
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (next-line 2)
        (while (search-forward-regexp "^*+ " nil t)
          (previous-line)
          (delete-blank-lines)
          (next-line 2))
        )
      (org-shifttab 1)
      )
    (define-key 'org-mode-map "\C-ci\C-o" 'tagerill-org-mode-delete-extra-lines-before-headings)
#+END_SRC

**** TODO 将中文全角空格作为Whitespace处理

**** Deleting Whitespace
http://emacswiki.org/emacs/DeletingWhitespace

Emacs has several commands to delete whitespace.

***** Just one space

To make sure two words are separated by /just one space/, use =‘M-SPC’=
(=‘just-one-space’=).

***** Join two words

To /join two words/ (or any non-space characters) together by deleting
all whitespace between them, use any of the following:

-  `=M-\=' (=‘delete-horizontal-space’=)
-  This command:

#+BEGIN_EXAMPLE
            (defun kill-whitespace ()
              "Kill the whitespace between two non-whitespace characters"
              (interactive "*")
              (save-excursion
                (save-restriction
                  (save-match-data
                    (progn
                      (re-search-backward "[^ \t\r\n]" nil t)
                      (re-search-forward "[ \t\r\n]+" nil t)
                      (replace-match "" nil nil))))))
#+END_EXAMPLE

***** Remove trailing whitespace

To /remove trailing whitespace/ from the entire buffer, use any of the
following:

-  =‘M-x delete-trailing-whitespace’=
   ([[http://www.emacswiki.org/emacs/GnuEmacs][GnuEmacs]] version 21 or
   later). You can put this in =‘before-save-hook’= to ensure that your
   files have no trailing whitespace:

#+BEGIN_EXAMPLE
            (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_EXAMPLE

-   :: or you can add this hook locally for particular mode:

-  (add-hook ‘c-mode-hook (lambda () (add-to-list ‘write-file-functions
   ‘delete-trailing-whitespace)))

***** Remove even the last trailing newline

#+BEGIN_EXAMPLE
           (defun my-other-delete-trailing-blank-lines ()
              "Deletes all blank lines at the end of the file, even the last one"
              (interactive)
              (save-excursion
                (save-restriction
                  (widen)
                  (goto-char (point-max))
                  (delete-blank-lines)
                  (let ((trailnewlines (abs (skip-chars-backward "\n\t"))))
                    (if (> trailnewlines 0)
                        (progn
                          (delete-char trailnewlines)))))))
#+END_EXAMPLE

****** With PictureMode

-  [[http://www.emacswiki.org/emacs/PictureModeTrailingWhitespaceTrick][PictureModeTrailingWhitespaceTrick]].
   Simple and quick. Works in all
   [[http://www.emacswiki.org/emacs/GnuEmacs][GnuEmacs]] versions.

****** nuke-trailing-whitespace

-  =‘M-x nuke-trailing-whitespace’=



-   :: *Note:* I've had some corruption problems with
   =‘nuke-trailing-whitespace’= and Unicode files. In addition to the
   trailing newlines getting deleted, a few non-whitespace characters
   get deleted too. I've done a quick fix by replacing the
   =‘delete-region’= with =‘delete-blank-lines’=.



****** whitespace.el

-  =whitespace.el=. --
   [[http://www.emacswiki.org/emacs/GregFenton][GregFenton]]

****** Simple function

-  This commmand (e.g. bind to =‘C-x C-h’=):

#+BEGIN_EXAMPLE
            (defun my-delete-leading-whitespace (start end)
              "Delete whitespace at the beginning of each line in region."
              (interactive "*r")
              (save-excursion
                (if (not (bolp)) (forward-line 1))
                (delete-whitespace-rectangle (point) end nil)))
#+END_EXAMPLE

****** ethan-wspace

-  [[http://github.com/glasserc/ethan-wspace][ethan-wspace]] - keeps
   whitespace clean in clean files while highlighting it in dirty files

****** DeleteNlSpaces

-  [[http://www.emacswiki.org/emacs/DeleteNlSpaces][DeleteNlSpaces]] - a
   non intrusive minor mode for deleting needless spaces

***** Version control friendly options (modify only the lines you have
edited)

When working with version-control, you never want Emacs to modify lines
which you didn't edit, so automatically deleting all trailing whitespace
from a file is a bad idea.

The following libraries automatically remove unwanted trailing
whitespace from the lines you've edited (only).

-  [[ftp://ftp.lysator.liu.se/pub/emacs/ws-trim.el][ws-trim.el]] - an
   old but still very, very good package. Very configurable. My only
   complaint is that it doesn't use the Custom library to set variables.

   -  From the commentary: “This package contains tools to do various
      sorts of whitespace trimming on buffer lines. The main part is WS
      Trim mode, which is a minor mode that automatically trims
      whitespace on text lines. You can control how thorough this mode
      should be, e.g. whether all lines or only lines you edit should be
      trimmed.”
   -  ws-trim has been updated to provide compatibility with Emacs 24
      (support for Emacs 20 and below has been dropped).

-  [[https://github.com/lewang/ws-butler][ws-butler]] - An alternative
   to ws-trim which leverages highlight-changes-mode to track modified
   lines.

***** Show trailing whitespace

To /show/ (highlight) trailing whitespace, see
[[http://www.emacswiki.org/emacs/ShowWhiteSpace][ShowWhiteSpace]]. There
are several ways, depending on what you want and what Emacs version you
have.

***** Remove whitespace at the end of the document

To remove whitespace at the /end of a document/, use any of the
following:

-  =‘C-x C-o’= (=‘delete-blank-lines’=) at the end of the buffer
   (`=M->=').

-   :: however, be aware that if =‘require-final-newline’= is
   non-=‘nil’=, then a (single) newline will be added automatically at
   the end of the file. (The particular non-=‘nil’= value determines
   when it is added -- see =‘C-h v require-final-newline’=.)

-  This code:

#+BEGIN_EXAMPLE
        (defun my-delete-trailing-blank-lines ()
          "Deletes all blank lines at the end of the file."
          (interactive)
          (save-excursion
            (save-restriction
              (widen)
              (goto-char (point-max))
              (delete-blank-lines))))
#+END_EXAMPLE

***** Delete extra blank lines between paragraphs

=‘C-x C-o’= (=‘delete-blank-lines’=) also deletes any extra blank lines
between two paragraphs, leaving just one blank line.

***** Prevent adding newlines at end of buffer

To /prevent adding newlines/ when you move the
[[http://www.emacswiki.org/emacs/cursor][cursor]] forward at the end of
the buffer, customize =‘next-line-add-newlines’= to =‘nil’=.

***** Indent/unindent a block of lines

To /indent/ (or /unindent/) a block of lines together rigidly (adding or
removing whitespace at the line beginning):

1. Select all the lines to indent
2. Ensure the [[http://www.emacswiki.org/emacs/TextCursor][TextCursor]]
   is at the beginning of the last line to indent.
3. =C-u NUM C-x TAB= to indent =NUM= columns. A negative =NUM= (e.g.,
   =C-- 4 C-x TAB=) un-indents, removing a rectangle of whitespace

***** Whitespace Aware `kill-line'

This handles whitespace a little better when having indentation and you
kill a line.

#+BEGIN_EXAMPLE
        (defadvice kill-line (after kill-line-cleanup-whitespace activate compile)
          "cleanup whitespace on kill-line"
          (if (not (bolp))
          (delete-region (point) (progn (skip-chars-forward " \t") (point)))))
#+END_EXAMPLE

***** Delete adjacent whitespace

To delete whitespace from /point to next word/:

#+BEGIN_EXAMPLE
        (defun whack-whitespace (arg)
          "Delete all white space from point to the next word.  With prefix ARG
        delete across newlines as well.  The only danger in this is that you
        don't have to actually be at the end of a word to make it work.  It
        skips over to the next whitespace and then whacks it all to the next
        word."
          (interactive "P")
          (let ((regexp (if arg "[ \t\n]+" "[ \t]+")))
            (re-search-forward regexp nil t)
            (replace-match "" nil nil)))
#+END_EXAMPLE



To delete /adjacent whitespace/ forward:

#+BEGIN_EXAMPLE
        (defun delete-horizontal-space-forward () ; adapted from `delete-horizontal-space'
          "*Delete all spaces and tabs after point."
          (interactive "*")
          (delete-region (point) (progn (skip-chars-forward " \t") (point))))
#+END_EXAMPLE

Backward:

#+BEGIN_EXAMPLE
        (defun backward-delete-char-hungry (arg &optional killp)
          "*Delete characters backward in \"hungry\" mode.
        See the documentation of `backward-delete-char-untabify' and
        `backward-delete-char-untabify-method' for details."
          (interactive "*p\nP")
          (let ((backward-delete-char-untabify-method 'hungry))
            (backward-delete-char-untabify arg killp)))
#+END_EXAMPLE

What is the difference between those two functions and the built-in
=backward-delete-char-untabify-method= and =delete-horizontal-space=? --
c-7e5ae353.131-1-64736c10.cust.bredbandsbolaget.se

‘C-h f' for function reference clears this up.

backward-delete-char-untabify:

Delete characters backward, changing tabs into spaces. The exact
behavior depends on =‘backward-delete-char-untabify-method’=.

delete-horizontal-space:

Delete all spaces and tabs around point. If BACKWARD-ONLY is non-nil,
only delete them before point.

*** Narrowing                                                   :narrowing:
**** narrow

+ 前缀 *c-x n*
c-x n n  narrow-to-region
c-x n w

|---------+------------------+--------------------------------------------------|
| c-x n n | narrow-to-region | narrow down to between point and mark            |
| c-x n w | widen            | widen to make the entire buffer accessible again |
| c-x n p | narrow-to-page   | narrow down to the current page                  |
| c-x n d | narrow-to-defun  | narrow down to the current defun                 |
|---------+------------------+--------------------------------------------------|


the narrowing commands are *disabledcommands* because they can confuse
users who are unfamiliar with narrowing. you can enable them by using
command *‘enable-command’* or by putting the following emacslisp code
in your init file:

#+begin_src emacs-lisp
  (put 'narrow-to-defun  'disabled nil)
  (put 'narrow-to-page   'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+end_src
**** [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html][Narrowing man]] :man:

/Narrowing/ means focusing in on some portion of the buffer, making the
rest temporarily inaccessible. The portion which you can still get to is
called the /accessible portion/. Canceling the narrowing, which makes
the entire buffer once again accessible, is called /widening/. The
bounds of narrowing in effect in a buffer are called the buffer's
/restriction/.

Narrowing can make it easier to concentrate on a single subroutine or
paragraph by eliminating clutter. It can also be used to limit the range
of operation of a replace command or repeating keyboard macro.

- C-x n n :: Narrow down to between point and mark
   (=narrow-to-region=).

- C-x n w :: Widen to make the entire buffer accessible again
   (=widen=).

- C-x n p :: Narrow down to the current page (=narrow-to-page=).

- C-x n d :: Narrow down to the current defun (=narrow-to-defun=).

When you have narrowed down to a part of the buffer, that part appears
to be all there is. You can't see the rest, you can't move into it
(motion commands won't go outside the accessible part), you can't change
it in any way. However, it is not gone, and if you save the file all the
inaccessible text will be saved. The word ‘Narrow' appears in the mode
line whenever narrowing is in effect.

The primary narrowing command is C-x n n (=narrow-to-region=). It sets
the current buffer's restrictions so that the text in the current region
remains accessible, but all text before the region or after the region
is inaccessible. Point and mark do not change.

Alternatively, use C-x n p (=narrow-to-page=) to narrow down to the
current page. See [[Pages.html#Pages][Pages]], for the definition of a
page. C-x n d (=narrow-to-defun=) narrows down to the defun containing
point (see [[Defuns.html#Defuns][Defuns]]).

The way to cancel narrowing is to widen with C-x n w (=widen=). This
makes all text in the buffer accessible again.

You can get information on what part of the buffer you are narrowed down
to using the C-x = command. See
[[Position-Info.html#Position-Info][Position Info]].

Because narrowing can easily confuse users who do not understand it,
=narrow-to-region= is normally a disabled command. Attempting to use
this command asks for confirmation and gives you the option of enabling
it; if you enable the command, confirmation will no longer be required
for it. See [[Disabling.html#Disabling][Disabling]].

*** indent                                                         :indent:
Command: indent-region
+ Keybinding: *C-M-\*
+ Usage: (indent-region START END &optional COLUMN)
+ Function: Indent each nonblank line in the region.
+ Arugment: A numeric prefix argument specifies a column: indent each
  line to that column.
+ Note: With no prefix argument, the command chooses one of these
  methods and indents all the lines with it:
  1) If `fill-prefix' is non-nil, insert `fill-prefix' at the
     beginning of each line in the region that does not already begin
     with it.
  2) If `indent-region-function' is non-nil, call that function
     to indent the region.
  3) Indent each line via `indent-according-to-mode'.

* Modes                                                               :EMACS:
** /minor mode/                                                       :minor:
*** define-minor-mode

#+BEGIN_SRC emacs-lisp
  (define-minor-mode wally-mode
    "Toggle wally-mode
  "
    ;; the initial value
    nil
    ;; The indicator for the mode line
    " wally"
    ;; The minor mode bindings--define-key
    :keymap '(("\C-crj" . emets-jump-to-ros-file))
    :after-hook 'wally-mode-after-hook
    :group 'wally
    )

  (wally-mode t)                          ; not work globally, only current buffer, that is, *scratch*
#+END_SRC

**** global enable minor-mode

+ [[http://stackoverflow.com/questions/12763566/how-to-permanently-enable-the-hs-minor-mode-in-emacs][stackoverflow: how to permanently enbale hs-minor-mode in emacs]]

/define-globalized-minor-mode/  a little tricky

#+BEGIN_SRC emacs-lisp
  (define-globalized-minor-mode global-wally-mode
    wally-mode wally-mode)
#+END_SRC

*** [[http://m.oschina.net/blog/124113][ii]]mage-mode                                               :blog:iimage:

使用iimage-mode可以在buffer里面显示图片，改了一个lisp函数来实现截屏、保存文件并插入到buffer中的功能。参考了这个： http://dreamrunner.org/wiki/public_html/Emacs/org-mode.html#sec-2-3


安装起来很简单：

安装scrot，会用这个工具来截图

创建一个文件夹 ~/.emacs.img ，截屏产生的图片会保存到这里

把下面的lisp放到emacs的配置文件中(我把截屏的快捷键绑定到了C-p上面)

;;;  image for org-mode
; 1. suspend current emacs window
; 2. call scrot to capture the screen and save as a file in $HOME/.emacs.img/
; 3. put the png file reference in current buffer, like this:  [[/home/path/.emacs.img/1q2w3e.png]]

(add-hook 'org-mode-hook 'iimage-mode) ; enable iimage-mode for org-mode
(defun my-screenshot ()
  "Take a screenshot into a unique-named file in the current buffer file
  directory and insert a link to this file."
  (interactive)
  (setq filename
    (concat (make-temp-name
         (concat  (getenv "HOME") "/.emacs.img/" ) ) ".png"))
  (suspend-frame)
  (call-process-shell-command "scrot" nil nil nil nil " -s " (concat
                                "\"" filename "\"" ))
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images)
  )

(global-set-key (kbd "C-p") 'my-screenshot)
** Calendar                                                       :calendar:

*** 配置

#+BEGIN_SRC emacs-lisp
  (setq calendar-holidays '( (holiday-fixed 1 1 "元旦")
                             (holiday-fixed 2 14 "情人节")
                             (holiday-fixed 4 1 "愚人节")
                             (holiday-fixed 12 25 "圣诞节")
                             (holiday-fixed 10 1 "国庆节")
                             (holiday-float 5 0 2 "母亲节")
                             (holiday-float 6 0 3 "父亲节")
                             ;; 农历节日
                             (holiday-lunar 1 1 "春节" 0)
                             (holiday-lunar 1 15 "元宵节" 0)
                             (holiday-solar-term "清明" "清明节")
                             (holiday-lunar 5 5 "端午节" 0)
                             (holiday-lunar 7 7 "七夕情人节" 0)
                             (holiday-lunar 8 15 "中秋节" 0)
                             ;; 生日
                             (holiday-lunar 7 12 "父亲的生日" 0)
                             (holiday-lunar 10 10 "母亲的生日" 0)
                             (holiday-lunar 8 14 "哥哥的生日" 0)
                             (holiday-lunar 6 12 "姐姐的生日" 0)
                             (holiday-lunar 11 27 "我的生日" 0)
                             ))
#+END_SRC

*** 命令

- M-x holidays	在另一个窗口列出近3个月（以今天为中心）的所有节日
- M-x list-holidays	在另一窗口列出设定的若干年内的所有节日

*** 快捷键

1. Calendar模式支持各种方式来更改当前日期

   + q 退出calendar模式
   + C-f 让当前日期向前一天
   + C-b 让当前日期向后一天
   + C-n 让当前日期向前一周
   + C-p 让当前日期向后一周
   + M-} 让当前日期向前一个月
   + M-{ 让当前日期向后一个月
   + C-x ] 让当前日期向前一年
   + C-x [ 让当前日期向后一年
   + C-a 移动到当前周的第一天
   + C-e 移动到当前周的最后一天
   + M-a 移动到当前月的第一天
   + M-e 多动到当前月的最后一天
   + M-< 移动到当前年的第一天
   + M-> 移动到当前年的最后一天

2. Calendar模式支持移动多种移动到特珠日期的方式

   + g d 移动到一个特别的日期
   + o 使某个特殊的月分作为中间的月分
   + . 移动到当天的日期
   + p d 显示某一天在一年中的位置，也显示本年度还有多少天。
   + C-c C-l 刷新Calendar窗口

3. Calendar支持生成LATEX代码。

   + t m 按月生成日历
   + t M 按月生成一个美化的日历
   + t d 按当天日期生成一个当天日历
   + t w 1 在一页上生成这个周的日历
   + t w 2 在两页上生成这个周的日历
   + t w 3 生成一个ISO-SYTLE风格的当前周日历
   + t w 4 生成一个从周一开始的当前周日历
   + t y 生成当前年的日历

4. EMACS Calendar支持配置节日：
   + h 显示当前的节日
   + x 定义当天为某个节日
   + u 取消当天已被定义的节日
   + e 显示所有这前后共三个月的节日。
   + M-x holiday 在另外的窗口的显示这前后三个月的节日。

5. 另外，还有一些特殊的，有意思的命令：

   + S 显示当天的日出日落时间(是大写的S)
   + p C 显示农历可以使用
   + g C 使用农历移动日期可以使用

6. 创建事件的命令：

   + d 显示被选中的日期的所有事件
   + s 显示所有事件，包括过期的，未到期的等等
   + i d 为当天日期添加一个事件
   + i w 为当天周创建一个周事件
   + i m 为当前月创建一个月事件
   + i y 为当前年创建一个年事件
   + i a 为当前日期创建一个周年纪念日
   + i c 创建一个循环的事件

*** cal-china-x                                                :lunar:阴历:

+ [[https://github.com/xwl/cal-china-x][Github]]


This extension mainly adds the following extra features:

- Chinese localizations
- Display holiday, lunar, horoscope, zodiac, solar term info on mode line
- Define holidays using /holiday-lunar/, holiday-solar-term
- Highlight holidays based on different priorities
- Add cal-china-x-chinese-holidays, cal-china-x-japanese-holidays.
- custom week diary(like weeks in school)


#+BEGIN_SRC emacs-lisp
  (require 'cal-china-x)
#+END_SRC

*** Reference

+ [[http://www.cnblogs.com/FelixLee/archive/2011/10/25/2412558.html][Emacs 日历与日记设置]]
+ [[http://blog.163.com/wobutianl@126/blog/static/1335848201291810232827/][Emacs Calendar 快捷键]]

** HELM                                                               :helm:
*** reference

+ [[http://tuhdo.github.io/helm-intro.html][Emacs Minor Manual: helm]]
+ [[https://github.com/emacs-helm/helm][Github]]

*** settings

Minimal config:
#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (helm-mode 1)
#+END_SRC

Extended config:

#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (require 'helm-config)

  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t)

  (helm-mode 1)
#+END_SRC

*** usage

- never use TAB to complete
- /RET/  select
- C-p/n C-v M-v M-< M->
- /C-SPC/  mark
- /M-a/  select all
- /C-c C-i/  insert into current buffer
- C-t  toggle layout

*** Why is Helm powerful?

- Simple and Consistent interface
- Interactivity
- Focus on finding what you want first, decide to do with it later
- Matching mechanism

*** operating on text at point

_If you are already in a Helm session, you can still get input from
the current editing buffer_ by the following key bindings:

- /C-w/ yanks word at point, starting from point to the end of the
  word, into the Helm prompt (the minibuffer).

- /M-n/ yanks symbol at point

*** symbol at point

- /C-h f/, which runs describe-function, automatically takes the
  symbol at point as default for searching function.

- /C-h v/, which runs describe-variable, automatically takes the
  symbol at point as default for searching variable.

- /C-h w/, which runs where-is, automatically takes the symbol at
  point as default for showing key binding for a command.

- /C-h C-h/, get help

*** helm-M-x

not used. /smex/ instead.

*** helm-show-kill-ring  M-y

*** helm-mini  C-x b

*** helm-find-file  C-x C-f

- C-j  narrow to highlighting candicates,  C-l  go back
- C-l  go up one directory level
- _To create a directory, enter a new name that does not exist in the
  current directory and append / at the end._
- ~/  home directory
- /  root directory
- ./  default-directory
- find file at point
- file and directory histories /with prefix/

*** [#A] helm-ff-do-grep  C-s

From within a helm-find-files session, you can invoke
helm-ff-run-grep with /C-s/ to search a file/directory on highlighted
entry in the Helm buffer. With prefix argument C-u, recursively grep a
selected directory.

*** helm-semantic-or-Imenu  C-c h i

find tag, i.e. definition of function or varible

*** [#A] helm-man-woman  C-c h m                                      :man:

With helm-man-woman, you can quickly jump to any man entry using Helm
interface,

*** helm-find  C-c h /                                               :find:

By default, invoking helm-find only searches current directory. With
prefix argument C-u (i.e. C-u C-c h /), a prompt asks for a directory
to find.

*** helm-locate C-c h l                                            :locate:

locate

*** helm-occur C-c h o

As you type, matching lines are updated immediately. This is
convenient when you want to have a list of matches in the current
buffer to jump back and forth.

/TAB to temporary move point to the location of current highlighting
match./

*** helm-apropos  C-c h a                                         :apropos:

*** Command: helm-info-*

- <prefix> h g	Command: helm-info-gnus
- <prefix> h i	Command: helm-info-at-point
- <prefix> h r	Command: helm-info-emacs
- helm-info-gdb.
- helm-info-find.
- helm-info-elisp.
- ...

*** helm-lisp-completion-at-point

*** helm-resume  C-c h b

This command allows you to resume the previous Helm session, along
with your previous patterns in the prompt.

*** helm-all-mark-rings  C-c h C-c SPC

It allows you to view the content of the both the local and global
mark rings in a friendly interface, so you can always jump back to
where you were.

*** [#A] helm-regexp  C-c h r                                      :regexp:

This commands is useful when you want to test out regexp
interactively.

Following actions are available if /C-z/:

- [f1]  Kill regexp as sexp  Saves the regexp as a string in kill-ring

- [f2]  Query Replace Regexp Invoke query-replace with current regexp
  to be replaced

- [f3]  Kill regexp  Saves the regexp as is in the current Helm prompt

*** helm-register C-c h i                                        :register:

By simply executing helm-register, you can view what is in
registers. RET or TAB inserts content of highlighting register.

- [f1]  Insert Register  Insert register content into buffer
- [f2]  Append Region to Register  Append an active region to current content in highlighting register
- [f3]  Prepend Region to Register  Prepend an active region to current content in highlighting register

*** helm-top C-c h t                                                  :top:

This command provides Helm interface for top program. You can interact with each process with the following actions:

- [f1]	kill (SIGTERM)
- [f2]	kill (SIGKILL)
- [f3]	kill (SIGINT)
- [f4]	kill (Choose signal)

helm-top specific commands:

- C-c C-u	Refresh helm-top
- M-C	Sort by shell commands
- M-P	Sort by CPU usage (upcase)
- M-U	Sort by user
- M-M	Sort by memory

*** helm-surfraw  C-c h s                                          :google:

surfraw provides a fast UNIX command line interface to a variety of
popular WWW /search engines/ and other artifacts of power. It reclaims
google, altavista, dejanews, freshmeat, research index, slashdot…

*** helm-google-suggest  C-c h g                                   :google:

This command allows you to interactively enter search terms and get
results from Google in a Helm buffer. Then, you can open one of the
candidates in other services, such as Google, Wikipedia, Youtube,
Imbd, Google Maps, Google News.

*** helm-color  C-c h c                                       :definecolor:

If you want to quickly view and copy hexadecimal values of colors,
helm-color provides such features.

*** helm-eval-expression-with-eldoc  C-c h M-:                      :elisp:

This command allows you to enter Emacs Lisp expressions and get
/instant/ result in a Helm buffer for every character you type.

*** helm-calcul-expression  C-c h C-,                                :calc:

This commands provides a Helm interface for calc command.

*** helm-eshell-history  C-c C-l(eshell-mode)                      :eshell:

helm-eshell-history provides a easy and efficient way to work with
command history.

*** helm-comint-input-ring C-c C-l

Similar to helm-eshell-history, but is used for M-x shell.

*** shortcuts                                                    :shortcut:

|-------------+---------------------------------+-----------------------------------------------------------------------------|
| Key Binding |             Command             |                                 Description                                 |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| M-x         | helm-M-x                        | List commands                                                               |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| M-y         | helm-show-kill-ring             | Shows the content of the kill ring                                          |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-x b       | helm-mini                       | Shows open buffers, recently opened files                                   |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-x C-f     | helm-find-files                 | The helm version for find-file                                              |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-s         | helm-ff-run-grep                | Run grep from within helm-find-files                                        |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h i     | helm-semantic-or-imenu          | Helm interface to semantic/imenu                                            |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h m     | helm-man-woman                  | Jump to any man entry                                                       |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h /     | helm-find                       | Helm interface to find                                                      |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h l     | helm-locate                     | Helm interface to locate                                                    |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h o     | helm-occur                      | Similar to occur                                                            |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h a     | helm-apropos                    | Describes commands, functions, variables, …                                 |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h h g   | helm-info-gnus                  |                                                                             |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h h i   | helm-info-at-point              |                                                                             |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h h r   | helm-info-emacs                 |                                                                             |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h <tab> | helm-lisp-completion-at-point   | Provides a list of available functions                                      |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h b     | helm-resume                     | Resumes a previous helm session                                             |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-h SPC     | helm-all-mark-rings             | Views content of local and global mark rings                                |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h r     | helm-regex                      | Visualizes regex matches                                                    |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h x     | helm-register                   | Shows content of registers                                                  |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h t     | helm-top                        | Helm interface to top                                                       |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h s     | helm-surfraw                    | Command line interface to many web search engines                           |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h g     | helm-google-suggest             | Interactively enter search terms and get results from Google in helm buffer |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h c     | helm-color                      | Lists all available faces                                                   |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h M-:   | helm-eval-expression-with-eldoc | Get instant results for emacs lisp expressions in the helm buffer           |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c h C-,   | helm-calcul-expression          | Helm interface to calc                                                      |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c C-l     | helm-eshell-history             | Interface to eshell history                                                 |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c C-l     | helm-comint-input-ring          | Interface to shell history                                                  |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| C-c C-l     | helm-mini-buffer-history        | Interface to mini-buffer history                                            |
|-------------+---------------------------------+-----------------------------------------------------------------------------|

** pdf-tools                                                  :pdf:pdftools:

*** reference

- [[https://github.com/politza/pdf-tools][Github]]

*** install

Mepla 或 github

**** mepla

install-server-deps failed (optional)

#+BEGIN_EXAMPLE
  E: 软件包 libpoppler-private-dev 没有可供安装的候选者
  Makefile:84: recipe for target 'install-server-deps' failed
  make: [install-server-deps] Error 100 (ignored)
  sudo apt-get install gtklp
  正在读取软件包列表... 完成
  正在分析软件包的依赖关系树
  正在读取状态信息... 完成
  E: 未发现软件包 gtklp
  Makefile:84: recipe for target 'install-server-deps' failed
  make: [install-server-deps] Error 100 (ignored)
  cd server && ./configure -q
  configure: error: cannot find necessary  poppler-private header (see README.org)
  Makefile:63: recipe for target 'server/Makefile' failed
  make: *** [server/Makefile] Error 1
  make: Target 'melpa-build' not remade because of errors.
  make: Leaving directory '/home/wally/.emacs.d/elpa/pdf-tools-20151224.1159/build'
#+END_EXAMPLE

***** 解决

通过 Emacs 编译

#+BEGIN_EXAMPLE
(pdf-tool-install)
#+END_EXAMPLE

问题： 包依赖解决不了，有未发现的包
解决： 修改了 python 的软链至2.7

安装其他东西时也会出现这种问题，不知为何 “dpkg 的依赖会与 python 版本
相关”

*** 使用Emacs阅览PDF文件

1. macro:pdf-layout: 目录+PDF

   (define-key pdf-view-mode-map "L" 'macro:pdf-layout)

2. 使用书签快速打开PDF，一般为手册或书籍

3. 使用org的链接功能保存PDF位置

   - C-c l org-store-link
   - C-c C-l org-insert-link
   - C-c C-o org-open-at-point(加前缀使用Emacs打开)

4. pdf-view-mode的功能

   - - 缩小
   - = 放大

*** pdf-tools

PDF是最常用的文件格式,而Emacs是用的最多的工具,自带的DOC-view对扫描版的
PDF的支持很不好.
参考:  [[help:PDF][PDF Tools Help]] (M-x pdf-tools-help)

/PDF tools 的标注在 FoxitReader中支持/


**** pdf-view-mode

|--------+-----------------------------------------|
| RET    | image-next-line                         |
| ESC    | Prefix Command                          |
| SPC    | pdf-view-scroll-up-or-next-page         |
| +      | pdf-view-enlarge                        |
| -      | pdf-view-shrink                         |
| 0      | pdf-view-scale-reset                    |
| 1 .. 9 | digit-argument                          |
| <      | beginning-of-buffer                     |
| =      | pdf-view-enlarge                        |
| >      | end-of-buffer                           |
| ?      | describe-mode                           |
| H      | pdf-view-fit-height-to-window           |
| P      | pdf-view-fit-page-to-window             |
| Q      | kill-this-buffer                        |
| W      | pdf-view-fit-width-to-window            |
| g      | revert-buffer                           |
| h      | describe-mode                           |
| n      | pdf-view-next-page-command              |
| p      | pdf-view-previous-page-command          |
| q      | quit-window                             |
| r      | revert-buffer                           |
|--------+-----------------------------------------|

|------------------------+-----------------------------------------|
| s                      | Prefix Command                          |
| DEL                    | pdf-view-scroll-down-or-previous-page   |
| S-SPC                  | pdf-view-scroll-down-or-previous-page   |
| C-c C-c                | doc-view-mode                           |
| C-c C-d                | pdf-view-dark-minor-mode                |
|------------------------+-----------------------------------------|
| s b                    | pdf-view-set-slice-from-bounding-box    |
| s m                    | pdf-view-set-slice-using-mouse          |
| s r                    | pdf-view-reset-slice                    |
|------------------------+-----------------------------------------|
| M-<                    | pdf-view-first-page                     |
| M->                    | pdf-view-last-page                      |
|------------------------+-----------------------------------------|

**** pdf-annot-minor-mode
`pdf-annot-minor-mode' is an interactive autoloaded compiled Lisp
function in `pdf-annot.el'.
|-----------+-------------------------------|
| C-c C-a D | pdf-annot-delete              |
| C-c C-a a | pdf-annot-attachment-dired    |
| C-c C-a l | pdf-annot-list-annotations    |
| C-c C-a t | pdf-annot-add-text-annotation |
|-----------+-------------------------------|

**** pdf-cache-prefetch-minor-mode
`pdf-cache-prefetch-minor-mode' is an interactive compiled Lisp
function in `pdf-cache.el'.

(pdf-cache-prefetch-minor-mode &optional ARG)

Try to load images which will probably be needed in a while.
**** pdf-history-minor-mode
|---+----------------------|
| B | pdf-history-backward |
| N | pdf-history-forward  |
|---+----------------------|

**** pdf-isearch-minor-mode
`pdf-isearch-minor-mode' is an interactive autoloaded compiled Lisp
function in `pdf-isearch.el'.

(pdf-isearch-minor-mode &optional ARG)

Isearch mode for PDF buffer.
**** pdf-links-minor-mode
`pdf-links-minor-mode' is an interactive autoloaded compiled Lisp
function in `pdf-links.el'.

(pdf-links-minor-mode &optional ARG)

Handle links in PDF documents.

|---+--------------------------|
| F | pdf-links-action-perform |
| f | pdf-links-isearch-link   |
|---+--------------------------|
**** pdf-misc-context-menu-minor-mode
`pdf-misc-context-menu-minor-mode' is an interactive autoloaded
compiled Lisp function in `pdf-misc.el'.

(pdf-misc-context-menu-minor-mode &optional ARG)

Provide a right-click context menu in PDF buffers.
|----------------+-----------------------------|
| <down-mouse-3> | pdf-misc-popup-context-menu |
|----------------+-----------------------------|
**** pdf-outline-minor-mode
`pdf-outline-minor-mode' is an interactive autoloaded compiled Lisp
function in `pdf-outline.el'.

(pdf-outline-minor-mode &optional ARG)

Display an outline of a PDF document.

This provides a PDF's outline on the menu bar via imenu.
Additionally the same outline may be viewed in a designated
buffer.
|---+---+-------------|
| o |   | pdf-outline |
|---+---+-------------|
**** pdf-view-auto-slice-minor-mode
`pdf-view-auto-slice-minor-mode' is an interactive compiled Lisp
function in `pdf-view.el'.

(pdf-view-auto-slice-minor-mode &optional ARG)

Automatically slice pages according to their bounding boxes.

*** pdftools :pdf-view-goto-page

#+BEGIN_EXAMPLE
- State "DONE"       from ""           [2015-02-27 五 14:50]
#+END_EXAMPLE

[[help:Enabled][remap goto-page]]

#+BEGIN_EXAMPLE
  <remap> <goto-line>             pdf-view-goto-page
#+END_EXAMPLE

|-----------+-------|
| goto-line | M-g g |
|-----------+-------|

*** pdf-tools本身没有提供编辑大纲的功能
*** pdf-view-mode-hook

想法很好，实现不对

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'pdf-view-mode-hook 'emets-pdf-frame)
  (setq pdf-view-mode-hook nil)
#+END_SRC

** make-mode                                                         :make:
http://www.emacswiki.org/emacs/MakefileMode

make-mode

** php-mode                                                            :php:
+ EmacsWiki: http://www.emacswiki.org/emacs/PhpMode
+ Homepage: https://sourceforge.net/projects/php-mode/

** nXhtml-mode                                                        :html:
+ https://github.com/emacsmirror/nxhtml

(load "YOUR-PATH-TO/nxhtml/autostart.el")
*** nxml 关联特定类型文件
#+BEGIN_EXAMPLE
  (add-to-list 'auto-mode-alist '("\\.ui\\'" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.qrc\\'" .nxml-mode))
#+END_EXAMPLE
*注: 正则表达式中的单引号.*

*** 快捷键

*C-c /* finishes the current element by inserting an end-tag.

** asm-mode                                                            :asm:
+ http://www.emacswiki.org/emacs/AssemblyProgramming


1. AsmMode
2. GasMode

** shell-script-mode                                                 :shell:

+ Emacs是自说明的。
+ 默认关联.sh文件, ~/.bashrc也是。
+ 语法高亮
+ 一些快捷输入

** gnuplot-mode                                                    :gnuplot:

*** gnuplot-mode
[[http://astro.berkeley.edu/~mkmcc/software/gnuplot-mode.html#content][Emacs Gnuplot Mode]]

1. Introduction\\
   Gnuplot is an extremely useful program.\\
   Features of gnuplot-mode in Emacs:\\

   -  offer syntax highlighting and basic indentation

   -  run directly a command to plot the file

   -  report errors in a standalone buffer

   Key bindings:

   C-c C-c

   = gnuplot-run-buffer\\
   C-c C-r gnuplot-plot-region\\
   C-c C-b send buffer fot Gnuplot\\

2. Installation Download the file or use MELPA.\\
   Settings:\\

   #+BEGIN_EXAMPLE
       ;; make sure file is visible to emacs (if needed)
       (add-to-list 'load-path "/path/to/your/lisp/files")
       ;; load the file
       (require 'gnuplot-mode)
       ;; specify the gnuplot executable (if other than /usr/bin/gnuplot)
       (setq gnuplot-program "/sw/bin/gnuplot")
       ;; automatically open files ending with .gp or .gnuplot in gnuplot mode
       (setq auto-mode-alist
       (append '(("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)) auto-mode-alist))
   #+END_EXAMPLE

** Graphviz-dot-mode                                          :graphviz:dot:

*** reference                                             :homepage:github:

- [[http://ppareit.github.io/graphviz-dot-mode/][Homepage]]
- [[https://github.com/ppareit/graphviz-dot-mode][Github]]

*** overview                                                     :overview:

Graphviz-dot-mode is an emacs mode for the *DOT* language used by
*graphviz*.

Graphviz-dot-mode是Emacs下编辑graphviz的DOT代码的一种主模式,提供语法高
亮,自动缩进,图像预览等特性.

*** 配置                                                        :configure:

   #+BEGIN_EXAMPLE
       (load-file PAHT/TO/FILE/graphviz-dot-mode.el)
   #+END_EXAMPLE

*** 快捷键                                                       :shortcut:

| TAB,M-j,C-M-q        | 缩进               |
| C-c c, M-x compile   | 编译               |
| C-c p                | 预览               |
| C-c v                | 调用外部程序预览   |

** CMake                                                             :cmake:
*** cmake-mode
http://blog.csdn.net/csfreebird/article/details/7197392
http://www.emacswiki.org/emacs/CMakeMode
+ 安装: mepla
+ 配置:
  - require
  - auto-mode-alist
+ 命令: cmake-help
*** emacs-cmake-project
+ https://github.com/alamaison/emacs-cmake-project

*** [[http://blog.csdn.net/csfreebird/article/details/7197392][Emacs CMake mode使用]] :blog:

CMake mode for emacs
提供了一些好的功能，一直都没有注意到这个mode，今天正式开始使用。

首先，下载cmake-mode.el文件

﻿﻿[[http://www.cmake.org/CMakeDocs/cmake-mode.el]]



放到自己的emacs plugin目录下：

/opt/emacs_plugins/cmake-mode.el



然后在.emacs文件中设置如下：

#+BEGIN_EXAMPLE
    (setq load-path (cons (expand-file-name "/opt/emacs_plugins") load-path))
    (require 'cmake-mode)
    (setq auto-mode-alist
          (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                    ("\\.cmake\\'" . cmake-mode))
                  auto-mode-alist))
#+END_EXAMPLE




重新启动Emacs后，打开我的CMake工程的CMakeLists.txt文件,里面command关键字都已经变成高亮。

M-x 执行 cmake-help-list-commands
后，可以看到所有当前CMake版本支持的命令。

将光标停在某个command（比如AUX_SOURCE_DIRECTORY)之上，运行cmake-help-command
会看到关于AUX_SOURCE_DIRECTORY command的详细介绍。
** Arduino                                                         :arduino:
+ http://emacswiki.org/emacs/arduinosupport


the arduino ide is useful for beginners, but emacs is better.

+ *arduino-mode.el* - major mode for editing .ino and .pde files.

+ *cedet* (collectionofemacsdevelopmentenvironmenttools) supports
  arduino sketch projects, enabling compilation and uploading sketches
  to your microcontroller.

+ *arduino.mk*: to compile sketches outside of the arduino ide, you
  will need to use arduino.mk which is comes with the arduino
  development environment. this enables command line compilation of
  your sketches, and is used by the cedet support.

+ alternately, to use the arduino ide for compilation, but edit in
  emacs, open the preferences in the ide, and choose “use external
  editor”.

*** arduinm.mk
+ http://www.mjoldfield.com/atelier/2009/02/arduino-cli.html

*** emacs arduino
+ http://emacswiki.org/emacs/ArduinoSupport


1. Add yourself to dialout group (whatever group allows access to
   serial port). You will probably need to kill off emacs and re-login
   to have this take effect.

2. Run regular arduino IDE and set up preferences to point to correct
   board type/serial port (arduino.mk reads this for automagically
   populating fields below)

3. Install arduino-mk from your repository/github

4. Create simple Makefile in the same directory as your .ino
   file. Contents can be as simple as this (only the include is truly
   necessary, all other lines can be omitted for simple sketches):

   #+BEGIN_EXAMPLE
     BOARD_TAG = uno   # (see make show_boards)
     ARDUINO_LIBS =    # <space separated list of libs, arduino.mk will try to guess> ros的库需要配置
     MONITOR_PORT = /dev/ttyUSB0   # (will be automatically guessed from IDE prefs)
     include /usr/share/arduino/Arduino.mk   # arduino中安装的，而不是Arduino-Makefile
   #+END_EXAMPLE

5. Call Makefile with *M-x compile* RET *make -k upload*
** octave                                                           :octave:

参考： [[https://www.gnu.org/software/octave/doc/interpreter/Emacs-Octave-Support.html][Emacs文档]]

matlab叫什么？ *矩阵实验室* ，在研究过程中是离不开矩阵的，所以，不能简
单地放弃matlab，而用python代替。

linux(32)可以不使用matlab，而使用octave作为替代。

1. 加载和文件关联

   #+BEGIN_EXAMPLE
       ;(autoload 'octave-mode "octave-mod" nil t)
       (setq auto-mode-alist
             (cons '("\\.m$" . octave-mode) auto-mode-alist))
   #+END_EXAMPLE

   *注:网站的说明可能跟不上,有些对应不上*

2. 关联abbrevs,auto-fill和font-lock子模式

   #+BEGIN_EXAMPLE
       (add-hook 'octave-mode-hook
                 (lambda ()
                   (abbrev-mode 1)
                   (auto-fill-mode 1)
                   (if (eq window-system 'x)
                       (font-lock-mode 1))))
   #+END_EXAMPLE

3. 快捷键

   | C-h a           | octave-lookfor                        | octave搜索           |
   | C-h d           | octave-help                           | octave帮助           |
   | C-c C-l         | octave-source-file                    | sour文件             |
   | C-c ;           | octave-update-function-file-comment   | 更新函数文档         |
   | M+.             | octave-find-definition                | 查找定义             |
   | C-M-j           | octave-indent-new-comment-line        | 插入新的注释行       |
   | C-M-q           | prog-indent-sexp                      | 块缩进               |
   | C-c / OR ]      | smie-indent-sexp                      | 闭合                 |
   | C-c TAB (C-)a   | octave-send-buffer                    | 执行缓冲区           |
   | C-c TAB (C-)r   | octave-send-region                    | 执行区域             |
   | C-c TAB (C-)l   | octave-send-line                      | 执行行               |
   | C-c TAB (C-)b   | octave-send-block                     | 执行块               |
   | C-c TAB (C-)f   | octave-send-function                  | 执行函数             |
   | C-c TAB (C-)k   | octave-kill-process                   | 关闭当前程序         |
   | C-c TAB (C-)s   | octave-show-process-buffer            | 显示程序进程缓冲区   |

4. 在Emacs运行交互式Octave

   *M-x run-octave*命令.

   在Octave-mode中通过相关快捷键也可以打开交互式Octave缓冲区.

*m-x run-octave*

源码编译安装的octave默认没有安装帮助文档，所以在使用help函数以及
octave-help命令时会出现错误，解决的直接途径就是apt-get方式安装。

** emacs matlab                                                     :matlab:

*** matlab-emacs

中止的项目

#+BEGIN_SRC emacs-lisp
  (autoload 'matlab-mode "matlab" "Enter MATLAB mode." t)
  (setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
  (autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)
#+END_SRC

*** matlab-mode

https://github.com/pronobis/matlab-mode

**** configure

+ [[http://www.emacswiki.org/emacs/MatlabMode][EmacsWiki]]

#+BEGIN_SRC emacs-lisp
  (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
  (add-to-list
   'auto-mode-alist
   '("\\.m$" . matlab-mode))
  (setq matlab-indent-function t)
  (setq matlab-shell-command "matlab")
#+END_SRC

**** usage

- *matlab shell* 后台运行 matlab (Note: 不会启动 GUI，但会短暂地弹出一
  个窗口)
- 只能运行，不支持调试，调试还是使用 Matlab GUI

*** matlab IDE 支持 Emacs 基本的编辑快捷键，所以可能不需要集成在 Emacs 中

** Eshell                                                           :eshell:
*** shell-command                                               :shell:cmd:

**** shortcuts
|---------+---------------------|
| M-!     | shell-command       |
| M-&     | async-shell-command |
| M-\vert | shell-command-on-region |
|---------+-------------------------|

**** shell-command

[[help:shell-command]]

1. format

   #+BEGIN_EXAMPLE
   (shell-command COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER)
   #+END_EXAMPLE

2. keybinding

   It is bound to M-!, <menu-bar> <tools> <shell>.

3. Notes

   - With prefix argument, insert the COMMAND's output at point
   - If COMMAND ends in &, execute it asynchronously

*** alias

+ [[http://www.emacswiki.org/emacs/EshellAlias][EmacsWiki Eshell Alias]]

**** Reloading the aliase file
+ stored in a file whose name is in the variable *eshell-aliases-file*
+ this defaults to something like *~/.emacs.d/eshell/alias*
+ *M-x eshell-read-aliases-list* refresh eshell’s cache of the values
+ you can do by typing its name in eshell

**** open file
#+BEGIN_EXAMPLE
  (defalias 'open 'find-file)
  (defalias 'openo 'find-file-other-window)
#+END_EXAMPLE

**** alias ll to 'ls -l'
#+BEGIN_EXAMPLE
  alias ll 'll -l $*'
#+END_EXAMPLE

**** alias 'emacs' to 'find-file'
#+BEGIN_EXAMPLE
  alias emacs "find-file $1"
#+END_EXAMPLE
+ quotes matter
+ $* does not work

**** alias 'w3m' to 'w3-find-file'
The same idea is for checking html files. I generate a lot of html
documentation using Doxygen and want to see the document without
leaving emacs. If you have emacs-w3m and w3m installed; then you may
want to alias w3m to w3m-find-file same as emacs to find-file:
#+BEGIN_EXAMPLE
  alias w3m 'w3m-find-file $1'
#+END_EXAMPLE
**** permanent aliases
The trick is that
+ *all aliases will be stored automatically*
+ *thus you do not need to edit anything equivalent to your
  ".bash_alias" manually*

**** define new eshell commands in .emacs file
You also can define new eshell commands in your .emacs file. There is a
simple example. To define ‘emacs’ command as ‘find-file’ as above you may
write:
#+BEGIN_EXAMPLE
  (defun eshell/emacs (file)
      (find-file file))
#+END_EXAMPLE

*** emacs打开多个eshell
在emacs中如果只是多次运行eshell的话，默认会检测是否有名为eshell的
eshell存在，如果没有则打开一个eshell，如果有则跳转到这个eshell中。

*因此如果要打开多个eshell的话可以先用M-x rename-buffer 重命名现有的
eshell buffer，再启动一个eshell（M-x ehsell）*

*shell也一样.*

*** PS1
+ http://www.emacswiki.org/emacs/EshellPrompt


1. shell PS1 inter
2. eshell  *eshell-prompt-function* (variable)

   The Eshell prompt is generated by the function stored in
   ‘eshell-prompt-function’. When moving through the buffer, eshell
   also needs to know which lines start with a prompt. Therefore,
   whatever ‘eshell-prompt-function’ prints must be matched by
   ‘eshell-prompt-regexp’.

   #+BEGIN_SRC emacs-lisp
     (setq eshell-prompt-function
           (lambda nil
             (let (
                   (prompt-symbol (if (= (user-uid))
                                      " # "
                                    " $ "))
                   (current-path-str (eshell/pwd)))
               (concat (car (reverse
                             (split-string current-path-str "/")))
                       prompt-symbol)
               )))
   #+END_SRC

   + car(first of a list) & cdr(rest of a list)
   + eshell/pwd
   + user-id
   + reverse
   + split-string
*** eshell VS bash,zsh
+ 功能有限, 但基本足够
+ 扩展性强, 可使用eamcs函数
+ 可移植

*** alias
+ 与bash类似, 格式不完全相同
+ 可使用外部命令, 也可使用emacs函数
+ 默认保存在 *~/.eshell/alias*
+ 在eshell中定义时即自动保存

eg.
#+BEGIN_EXAMPLE
  alias ll ls -al $*
  alias dl dpkg -l $1
  alias e find-file $1
  alias v view-file $1
  alias sai sudo aptitude install $1
#+END_EXAMPLE

*** history
bash 中有很多变量控制命令历史，比如: HISTCONTROL、HISTIGNORE 和
HISTFILESIZE.
相对应的, eshell提供变量
+ eshell-hist-ignoredups: 是否忽略重复命令
+ eshell-input-filter: 其实是一个函数,我们每输入一条命令，这条命令会作
  为参数传递给 eshell-input-filter，如果返回 t，这条命令才会被保存到历
  史中。它默认只过滤空白命令，如果要过滤 ls、cd、clear，可以这样修改:
  #+BEGIN_EXAMPLE
    (defvar eshell-histignore
    '("\\`\\(ls\\|ll\\|cd\\|clear\\)\\'"
    "\\`\\s-*\\'"))
    (setq eshell-input-filter
    #'(lambda (str)
    (let ((regex eshell-histignore))
    (not
    (catch 'break
    (while regex
    (if (string-match (pop regex) str)
    (throw 'break t))))))))
  #+END_EXAMPLE
+ eshell-history-size: 历史文件大小

*** cd path
1. 在 bash 里我们可以通过 cd - 回到上一个目录，eshell 同样可以。
   1) *cd -* : 回到上一个目录
   2) *cd -<number>* : 回到倒数第 number个目录
   3) *cd =<REGEXP>* 会回到上一个满足 REGEXP 的目录
2. zsh 中有对路径的别名，cd~X可以进入 ~X 所指代的目录，当目录比较深或
   很常用时非常方便。 eshell也可以实现.
   #+BEGIN_EXAMPLE
     (defvar eshell-path-alist
             `(("e" . ,user-emacs-directory)
               ("t" . "/tmp/")
               ("document" . "~/Documents/")
               ("download" . "~/Downloads/")
               ("v" . "~/video/")
               ("p" . "~/Pictures/")))
   #+END_EXAMPLE

*** [[http://blog.csdn.net/argansos/article/details/6867575][Eshell]] :blog:

eshell 并不是一个真正的 shell，它只能在 emacs 上运行。尽管和 bash、zsh
相比,它的功能很有限，但对大多数人来说已经足够了。此外,由于 eshell 是 由
elisp 编写的，所以它还有其他 shell
所没有的一些特点，比如更强的扩展性和可以使用 emacs 函数。

1. alias

eshell 添加 alias 的方法和 bash 几乎是相同的，并且默认保存在
~/.eshell/alias。不同的是,eshell 中既可以使用外部命令，也可以使用 emacs
函数，比如:

#+BEGIN_EXAMPLE
    alias ll ls -al $*
    alias dl dpkg -l $1
    alias e find-file $1
    alias v view-file $1
    alias sai sudo aptitude install $1
#+END_EXAMPLE



2. histroy

bash 中有很多变量控制命令历史，比如: HISTCONTROL、HISTIGNORE 和
HISTFILESIZE。和它们相对应的 eshell
变量是 eshell-hist-ignoredups、eshell-input-filter
 和 eshell-history-size。eshell-hist-ignoredups
决定是否忽视重复的命令，eshell-history-size 控制历史文件的大小。
eshell-input-filter 的值其实是一个函数,我们每输入一条命令，这条命令会
作为参数传递给 eshell-input-filter，如果返回
t，这条命令才会被保存到历史中。它默认只过滤空白命令，如果要过滤
ls、cd、clear，可以这样修改:

#+BEGIN_EXAMPLE
    (defvar eshell-histignore
    '("\\`\\(ls\\|ll\\|cd\\|clear\\)\\'"
    "\\`\\s-*\\'"))
    (setq eshell-input-filter
    #'(lambda (str)
    (let ((regex eshell-histignore))
    (not
    (catch 'break
    (while regex
    (if (string-match (pop regex) str)
    (throw 'break t))))))))
#+END_EXAMPLE



3. completion

zsh 的补全据说非常强大，安装 bash-completion 后 bash
的补全也变得不错。eshell
的补全虽然没有前两者丰富，但却很灵活,自定义也很简单。eshell 的补全依靠
pcomplete，以定义上面的 sai 的补全函数为例。

首先获取当前符合名称的软件包的列表:

#+BEGIN_EXAMPLE
    (defun pcmpl-package-cache (name)
    "return a list of packages in cache"
    (unless (equal name "")
    (split-string (shell-command-to-string
    (concat "apt-cache pkgnames " name " 2> /dev/null")))))
#+END_EXAMPLE


 其次定义 sai 的补全函数:

#+BEGIN_EXAMPLE
    (defun pcomplete/sai ()
    "completion for `sai'"
    (while
    (pcomplete-here
    (pcmpl-package-cache (pcomplete-arg 'last)))))
#+END_EXAMPLE


 现在在 eshell 里就可以按 TAB 对 sai 进行软件包名字的补全了。
 eshell 的一些补全选项:

#+BEGIN_EXAMPLE
    (setq eshell-cmpl-ignore-case t      ; 补全时忽略大小写
    eshell-cmpl-cycle-completions nil) ; 不要循环补全
#+END_EXAMPLE


 4. cd path

在 bash 里我们可以通过 cd - 回到上一个目录，eshell
同样可以。不仅如此，cd -<number>会回到倒数第 number个目录。cd =<REGEXP>
会回到上一个满足 REGEXP 的目录。zsh 中有对路径的别名，cd~X可以进入 ~X
所指代的目录，当目录比较深或很常用时非常方便。这在 eshell
也可以方便地实现。

首先定义一个别名与路径的关联表:

#+BEGIN_EXAMPLE
    (defvar eshell-path-alist
    `(("e" . ,user-emacs-directory)
    ("t" . "/tmp/")
    ("document" . "~/Documents/")
    ("download" . "~/Downloads/")
    ("v" . "~/video/")
    ("p" . "~/Pictures/")))
#+END_EXAMPLE


 现在直接修改ehsell/cd是可行的，但另外定义一个函数更方便:

#+BEGIN_EXAMPLE
    (defun eshell/d (arg)
    (let ((path (cdr (assoc arg eshell-path-alist))))
    (eshell/cd path)))
#+END_EXAMPLE


 eshell /d 的补全函数也很容易:

#+BEGIN_EXAMPLE
    (defun pcomplete/d ()
    (pcomplete-here
    (mapcar #'car eshell-path-alist)))
#+END_EXAMPLE


 现在直接输入 d t 就可以进入 /tmp
** Pandoc-mode                                                      :pandoc:
*** org
pandoc & insert
(call-process-shell-command "pandoc")

+ 导出文件还是直接插入buffer
+ 标题层级要怎么处理
+ 正则表达式处理无用的多余信息
+ 有必要么？

*** pandoc-mode

** LaTeX                                                             :latex:
*** cdlatex-math-symbol                                     :cdlatex:latex:

1. cdlatex-math-symbol
   #+BEGIN_EXAMPLE
     ` runs the command cdlatex-math-symbol, which is an interactive Lisp
     function in `cdlatex.el'.

     It is bound to `, <menu-bar> <Org> <LaTeX> <Insert math symbol>.

     (cdlatex-math-symbol)

     Read a char from keyboard and insert corresponding math char.
     The combinations are defined in `cdlatex-math-symbol-alist'.  If not in a LaTeX
     math environment, you also get a pair of dollars.
   #+END_EXAMPLE

2. cdlatex-math-symbol-alist

   #+BEGIN_EXAMPLE
     cdlatex-math-symbol-alist is a variable defined in `cdlatex.el'.
     Its value is nil

     Documentation:
     Key characters and math symbols for fast access with the prefix key.
     First element is a character, followed by a number of strings attached to
     this key.  When the string contains a question mark, this is where the
     cursor will be positioned after insertion of the string into the buffer.
     See `cdlatex-math-symbol-alist-default' for an example.  Any entry defined
     here will replace the corresponding entry of the default list.  The
     defaults implement 3 levels of symbols so far: Level 1 for greek letters
     and standard symbols, level 2 for variations of level 1, and level 3 for
     functions and opperators.
   #+END_EXAMPLE

3. cdlatex-math-symbol-alist-default

   #+BEGIN_EXAMPLE
     Default for cdlatex-math-symbol-alist.

     Value: ((97
       ("\\alpha"))
      (65
       ("\\forall" "\\aleph"))
      (98
       ("\\beta"))
      (66
       (""))
      (99
       ("" "" "\\cos"))
      (67
       ("" "" "\\arccos"))
      (100
       ("\\delta" "\\partial"))
      (68
       ("\\Delta" "\\nabla"))
      (101
       ("\\epsilon" "\\varepsilon" "\\exp"))
      (69
       ("\\exists" "" "\\ln"))
      (102
       ("\\phi" "\\varphi"))
      (70
       (""))
      (103
       ("\\gamma" "" "\\lg"))
      (71
       ("\\Gamma" "" "10^{?}"))
      (104
       ("\\eta" "\\hbar"))
      (72
       (""))
      (105
       ("\\in" "\\imath"))
      (73
       ("" "\\Im"))
      (106
       ("" "\\jmath"))
      (74
       (""))
      (107
       ("\\kappa"))
      (75
       (""))
      (108
       ("\\lambda" "\\ell" "\\log"))
      (76
       ("\\Lambda"))
      (109
       ("\\mu"))
      (77
       (""))
      (110
       ("\\nu" "" "\\ln"))
      (78
       ("\\nabla" "" "\\exp"))
      (111
       ("\\omega"))
      (79
       ("\\Omega" "\\mho"))
      (112
       ("\\pi" "\\varpi"))
      (80
       ("\\Pi"))
      (113
       ("\\theta" "\\vartheta"))
      (81
       ("\\Theta"))
      (114
       ("\\rho" "\\varrho"))
      (82
       ("" "\\Re"))
      (115
       ("\\sigma" "\\varsigma" "\\sin"))
      (83
       ("\\Sigma" "" "\\arcsin"))
      (116
       ("\\tau" "" "\\tan"))
      (84
       ("" "" "\\arctan"))
      (117
       ("\\upsilon"))
      (85
       ("\\Upsilon"))
      (118
       ("\\vee"))
      (86
       ("\\Phi"))
      (119
       ("\\xi"))
      (87
       ("\\Xi"))
      (120
       ("\\chi"))
      (88
       (""))
      (121
       ("\\psi"))
      (89
       ("\\Psi"))
      (122
       ("\\zeta"))
      (90
       (""))
      (32
       (""))
      (48
       ("\\emptyset"))
      (49
       (""))
      (50
       (""))
      (51
       (""))
      (52
       (""))
      (53
       (""))
      (54
       (""))
      (55
       (""))
      (56
       ("\\infty"))
      (57
       (""))
      (33
       ("\\neg"))
      (64
       (""))
      (35
       (""))
      (36
       (""))
      (37
       (""))
      (94
       ("\\uparrow"))
      (38
       ("\\wedge"))
      (63
       (""))
      (126
       ("\\approx" "\\simeq"))
      (95
       ("\\downarrow"))
      (43
       ("\\cup"))
      (45
       ("\\leftrightarrow" "\\longleftrightarrow"))
      (42
       ("\\times"))
      (47
       ("\\not"))
      (124
       ("\\mapsto" "\\longmapsto"))
      (92
       ("\\setminus"))
      (34
       (""))
      (61
       ("\\Leftrightarrow" "\\Longleftrightarrow"))
      (40
       ("\\langle"))
      (41
       ("\\rangle"))
      (91
       ("\\Leftarrow" "\\Longleftarrow"))
      (93
       ("\\Rightarrow" "\\Longrightarrow"))
      (123
       ("\\subset"))
      (125
       ("\\supset"))
      (60
       ("\\leftarrow" "\\longleftarrow" "\\min"))
      (62
       ("\\rightarrow" "\\longrightarrow" "\\max"))
      (96
       (""))
      (39
       ("\\prime"))
      (46
       ("\\cdot")))
   #+END_EXAMPLE

4. 层次

   + 这个很好用啊

   + 在默认值的基础上修改
     #+BEGIN_EXAMPLE
     (65 ("\\forall" "\\aleph"))
     #+END_EXAMPLE

   + 层次问题
     - 第一层： 希腊字母和标准符号
     - 第二层： 第一层的变种
     - 第三层： 数学函数与操作
     - 第四层： =自定义= (太深了，还是第一层)

*** bibtex-mode

参考:
+ [[http://www.emacswiki.org/emacs/BibTeX][EmacsWiki]]
+ [[http://www.jonathanleroux.org/bibtex-mode.html][bibtex-mode]]
+ [[http://ar.newsmth.net/thread-4a78ec7c6ce0c1-1.html][水木BibTeX]]
+ http://blog.waterlin.org/articles/bind-emacs-org-mode-with-bibtex.html

*bibtex-mode* , contained in bibtex.el file, is a major mode for
editing and validating BibTeX `.bib’ files. It is part of GnuEmacs,
and is included in XEmacs. Current bibtex.el maintainer is Roland
Winkler.

*BibTeX `.bib’ files contain bibliographical information*. Below is
an example of one entry in such `.bib’ BibTeX database file:
#+BEGIN_EXAMPLE
  @Article{Aamport:1986a,
     author  = "L[eslie] A. Aamport",
     title   = "The Gnats and Gnus Document Preparation System",
     journal = "{G-Animal's} Journal",
     year    = "1986",
     volume  = "41",
     pages   = "73",
  }
#+END_EXAMPLE

**** 使用
我刚刚开始用BibTeX，发现很好用。插入一个适当的模版，
填写完各个需要的项目，（C-j切换到下一个项目。）

填完项目后，按C-c C-c，
它可以清除所有的空项和删除所有的前缀ALT和OPT，
并且给你自动生成一个参考Key。
**** 定制Key
但是BibTeX自动生成的Key很长，也不符合我们课题组的要求。
花了好几个小时，总算把它给搞明白的。（搞明白后发现很简单）。
贴出来供大家参考或修改。偶以后用起来就不用担心Key的问题了。

针对英文的参考文献，我们组的要求是：
1. 如果文章只有一个作者，则是作者的姓_两位数字的年份（Bush_99）
2. 如果是两个作者，则是作者1的姓-作者2的姓_两位数字的年份
   （Bush-Clinton_02）
3. 如果是三位或三位以上的作者，则是作者1的姓-et.al._两位数字的年份
   （Bush-et.al._04）


在.emacs文件中可以用几行语句实现：
#+BEGIN_EXAMPLE
(setq bibtex-autokey-names 1)
(setq bibtex-autokey-names-stretch 1)
(setq bibtex-autokey-name-separator "-")
(setq bibtex-autokey-additional-names "-et.al.")
(setq bibtex-autokey-name-case-convert 'identity)
(setq bibtex-autokey-name-year-separator "_")
(setq bibtex-autokey-titlewords-stretch 0)
(setq bibtex-autokey-titlewords 0)
#+END_EXAMPLE
**** 排序
注意，如果.emacs文件中有下边的语句：
(setq bibtex-maintain-sorted-entries 'plain)

BibTeX-mode下，可以用 *M-x bibtex-sort-buffer* 对参考文献按Key排序。
用起来很方便。但是插入BibTeX的模板时，它会提醒你自己输入Key。
按[Enter]键可以忽略，填写完模版后，再C-c C-c即可。
最爽的是，插入新的文献后，BibTeX自动把文献插入到该排序的地方。

**** 任务
现在还想解决的一个问题是，如果同作者群一年有多篇文章，
Key就是相同的，希望能自动加入后缀a、b、c……
如：Bush-et.al._04a

*** DONE org如何使用参考文献,是否有便捷方式,有的话可以方便使用org写论文
- State "DONE"       from "waiting"    [2015-03-01 日 14:17] \\
  org中可以直接使用latax命令和环境,不须要包裹为SRC块
- State "waiting"    from "START"      [2015-03-01 日 13:21] \\
  有想法,但org中latex源码的导出遇到问题
- State "START"      from "TODO"       [2015-03-01 日 12:56]
 Date:<2015-02-27 五>

hello. \label{Wong15}

\begin{thebibliography}{99}
\bibitem{Wong15} Tiger Wong, 2015
\end{thebibliography}

*** AucTeX
+ 基础
  AucTeX是Emacs的一个功能模块,为LaTeX的编程提供了巨大的便利.
  + why AucTeX
    - 跨平台,Emacs的插件
    - 半WYSWYG, auctex可以对tex文件进行分析,并且提供部分可视化特性,配
      合preview组件,还可以显示tex公式和图片.
    - 可扩展,由Elisp实现
  + Get Started
    |-------------+------------------------+------------|
    | C-c C-s     | Entering sectioning    |            |
    | C-c C-e     | Inserting environment  |            |
    | C-c C-m     | Inserting macros       |            |
    | C-c RET     |                        |            |
    |-------------+------------------------+------------|
    | C-c C-f C-b | insert bold face text  | \textbf{*} |
    | C-c C-f C-i | insert italics text    | \textit{*} |
    | C-c C-f C-e | insert emphasized text | \emph{*}   |
    | C-c C-f C-s | insert slanted text    | \textsl{*} |
    | C-c C-f C-r | insert roman text      | \textrm{*} |
    | C-c C-f C-f | insert sans seriftext  | \textsf{*} |
    | C-c C-f C-t | insert typewriter text | \texttt{*} |
    | C-c C-f C-c | insert SMALL CAPS      | \textsc{*} |
    | C-c C-f C-d | ...                    |            |
    |-------------+------------------------+------------|
    | C-c ;       |                        |            |
    | C-c %       |                        |            |
    |-------------+------------------------+------------|
    | C-c C-c     |                        |            |
    |-------------+------------------------+------------|
  + LaTeX配置
    [[http://blog.sina.com.cn/s/blog_5387071f0100o54e.html#sina_keyword_ad_area2][sinablog]]
    通常情况下,编译tex文件选用的多是LaTeX mode.
    为了使用auctex方便,为LaTeX模式hook自动换行,数学公式,reftex和显示行
    号功能.
    #+BEGIN_EXAMPLE
    (mapc (lambda (mode)
         (add-hook 'LaTeX-mode-hook mode))
         (list 'auto-fill-mode
               'LaTeX-math-mode
               'turn-on-reftex
               'linum-mode))
    #+END_EXAMPLE
    设置变量TeX-engine更换排版引擎为latex
    默认开启PDF mode,即默认使用xelatex直接生成pdf文件.
  + TODO:  编译片段文件,多文件管理,reftex和preview
    http://blog.sina.com.cn/s/blog_5387071f0100o54e.html#sina_keyword_ad_area2

*** LaTeX-mode
#+BEGIN_SRC latex
C-c ],C-c \} latex-close-block
#+END_SRC
*** 使用org-mode结合AucTeX辅助阅读
1. org-mode的标题层次十分实用, 自动断行也实用
2. org-mode的加粗和斜体功能有限
3. AucTeX有良好的高亮功能

C-c w l
C-c w C-b
C-c w C-r
C-c w C-e

*改为使用印象笔记进行辅助阅读*

** [[http://www.emacswiki.org/emacs/MarkdownMode][markdown-mode]]                                                  :markdown:

1. install: melpa

2. settings:

   1) auto-mode-alist

   2) org babel highlighting

   3) extral

   #+BEGIN_SRC emacs-lisp
     (add-hook 'markdown-mode-hook
                (lambda ()
                  (when buffer-file-name
                    (add-hook 'after-save-hook
                              'check-parens
                              nil t))))
   #+END_SRC

** ledger-mode 快速输入                                             :ledger:
参考:
+ http://www.ledger-cli.org/3.0/doc/ledger-mode.html


1. 配置
   #+begin_example
     (autoload 'ledger-mode "ledger-mode" "a major mode for ledger" t)
     (add-to-list 'load-path
                  (expand-file-name "/path/to/ledger/source/lisp/"))
     (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
   #+end_example

2. quick add
   ledger provide two ways to add transactions with minimal
   typing. both are based on the idea that *most transactions are
   repetitions of earlier transaction*

   1) according to payee
      + type the date
      + tyep the first characters of the payee
      + c-c tab
   2) add transaction
      + c-c c-a

   3) convenient month and year
      + c-c ret month
      + c-c c-y year

** Dired-mode                                                        :dired:

*** reference

+ [[http://lifegoo.pluskid.org/wiki/EmacsAsFileManger.html][Emacs 强大的文件管理器]]

*** Mark & Flag

|---------------------------------+----------------------------------------|
| d                               | 标记删除                               |
| x                               | 执行删除                               |
| C-u d                           | 去掉标记                               |
| #                               | 标记所有自动保存的文件,e.g. #demo.org# |
| ~                               | 标记所有备份文件(即文件名以~结尾)      |
| &                               | 标记垃圾文件                           |
| dired-garbage-files-regexp      | 查看垃圾文件                           |
|---------------------------------+----------------------------------------|
| **                              | 标记所有可执行文件                     |
| *@                              | 标记所有符号链接                       |
| */                              | 标记所有目录文件,不包括.和..           |
| *s                              | 标记所有文件,不包括.和..               |
| *.                              | 标记具有扩展名的文件                   |
| %m REGEXP RET OR  *% REGEXP RET | 标记正则表达式匹配文件                 |
| %g REGEXP RET                   | 标记文件内容匹配正则表达式的文件       |
|---------------------------------+----------------------------------------|
| u                               | 去除当前行的标记                       |
| DEL                             | 上移一行并去除该行的标记               |
| U                               | 去除所有标记                           |
| *? MARKCHAR                     | 去除所有以MARKCHAR标记的文件           |
| t                               | 交换标记                               |
| M-( OR * OR )                   | 使用断言                               |
|---------------------------------+----------------------------------------|

*** 常用操作

|---------------+------------------------|
| *C(不用加*号) | 拷贝文件               |
| *D            | 删除文件               |
| *R            | 重命名文件             |
| *H            | 创建硬链接             |
| *S            | 创建符号链接           |
| *M            | 修改权限               |
| *G            | 修改属组               |
| *O            | 修改属主               |
| *T            | 修改时间               |
| *P            | 打印                   |
| *Z            | 压缩或解压             |
| *L            | 加载Elisp文件          |
| *B            | 字节编译Elisp文件      |
| *A            | 正则表达式搜索         |
| *Q            | 对文件内容进行交互替换 |
|---------------+------------------------|

*** shell命令

|---+---------------|
| ！ | 执行shell命令 |
|---+---------------|

*** 强大的重命名

+ /wdired-change-to-wdired-mode/ 进入编辑模式
+ /wdired-allow-to-change-permission/ 设为t可编辑权限

*** 排除过滤

/k/

ired 还有一个 /k/ 用于去掉不想显示出来的文件，它并不删除磁盘上的文件，
只是临 时从 dired 的 buffer 中去掉他们， g 刷新一下它们又会显示出来，
这样，首用强大的标记功能进行标记，然后使用 k 去掉，就实现了过滤的功能。

*** 子目录操作

dired 允许同时操作当前目录和子目录。

在 [[help:dired-listing-switches][dired-listing-switches]] 里面加入 R 选项就可以显示子目录.

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-l")
#+END_SRC

如果只是想临时显示某个子目录的内容，对该目录执 行 /i/ 操作就会把该子目
录的内容添加到 dired 当前 buffer 的末尾并把光标移 动到那里.

dired 在移动之前会先设置一个 mark ，所以可以使用 /C-u C-<SPC>/

*** 其他功能

|-----+-----------------------------------------|
| +   | 创建目录                                |
| *w* | 复制文件名,C-u 0,绝对路径, C-u,相对路径 |
| I   | 以info文档格式打开                      |
| N   | 以man格式打开                           |
| Y   | ...                                     |
|-----+-----------------------------------------|

*** Dired
+ g revert-buffer (revert恢复) 刷新目录buffer
+ ! dired-do-shell-command
+ & dired-do-async-shell-command
** artist-mode                                                      :artist:

真难用！

*** Reference

+ [[http://www.lysator.liu.se/~tab/artist/][artist-mode homepage]]
+ [[http://www.emacswiki.org/emacs/ArtistMode][EmacsWiki]]
+ [[http://emacser.com/artist-mode.htm][Emacs中文网]]

*** What is artist?

Artist is an Emacs lisp package that allow you to draw lines,
rectangles, squared, poly-line, ellisp and circles by use your mouse
and/or keyboard. The shapes are made up with the ascii
characters |,-,/ and \.

artist是一个emacs的内置lisp包。
在artist-mode中，你可以使用鼠标或者键盘来画线(可以带箭头)、矩形、正方形、多
边形、椭圆、圆和一些类似于水蒸气似的不规则图形，当然可以擦除，填出图形，还可
以在其上写字。

*** usage

**** 开启minor mode

*M-x artist-mode* 开启artist-mode(注:该模式下,一些快捷键失效).

**** 三个mouse

|---------------------+----------------------------------------|
| *mouse-2(鼠标中键)* | 弹出选项菜单,选择左键绘图类型,更改设定 |
| *mouse-1(鼠标左键)* | 绘制                                   |
| *S-mouse-1*         | 绘制                                     |
| *mouse-3(鼠标右键)* | 删除鼠标下的字符                       |
| *S-mouse-3*         | 画出矩形框,删除框选字符                |
|---------------------+----------------------------------------|

**** 绘制操作

|------------+--------------------+------------------------|
| 操作       | 无shift            | 有shift                |
|------------+--------------------+------------------------|
| Pen        | 填充符为'.',绘制线 | 填充符为'o',绘制直线   |
| Line       | 任意方向           | 直线                   |
| Rectangle  | 矩形               | 正方形                 |
| Poly-line  | 任意方向的多边形   | 每条线都是直线的多边形 |
| Ellipse    | 椭圆               | 圆                     |
| Text       | 文本               | 覆盖式文本             |
| Spray-can  | 喷雾器             | 设置喷雾器大小         |
| Erase      | 橡皮,擦除一个字符  | 擦除矩形内字符         |
| Vaporize   | 擦除一行           | 擦除所有相连的行       |
| Cut        | 剪切矩形           | 剪切正方形             |
| copy       | 复制矩形           | 复制正方形             |
| paste      | 粘贴               | 粘贴                   |
| Flood-fill | 填充工具，填充 | 填充                   |
|------------+--------------------+------------------------|

**** 设定

|------------+----------------------------------------------------------|
| 设定选项   | 含义                                                     |
|------------+----------------------------------------------------------|
| Set fill   | 设定用来填充矩形和正方形的字符                           |
| Set line   | 设定绘制线的时候使用的字符                               |
| Erase char | 设置擦除的时候使用的字符                                 |
| Trimming   | 开关修剪行尾的功能（一个图画完，一行行尾的空格会被移除） |
| Borders    | 开关在填充图形周围绘制行边界的功能                       |
|------------+----------------------------------------------------------|

**** 命令

***** 基本命令

|---------------------------------------------------+----------------------|
| 命令                                              | 功能                 |
|---------------------------------------------------+----------------------|
| M-x artist-key-set-point                          | 执行以下功能         |
|---------------------------------------------------+----------------------|
| M-x artist-select-operation                       | 选择绘制类型         |
|---------------------------------------------------+----------------------|
| M-x artist-next-line, M-x artist-previous-line,   |                      |
| M-x artist-forward-char and M-x                   | 移动                 |
| artist-backward-char.                             |                      |
|---------------------------------------------------+----------------------|
| M-x artist-select-fill-char                       | 设置填充字符         |
| M-x artist-select-line-char                       | 设置绘制时字符       |
| M-x artist-select-erase-char                      | 设置擦除时使用字符   |
| M-x artist-toggle-rubber-banding                  | 开关 rubber-banding  |
|                                                   | 功能（不知道是什么） |
| M-x artist-toggle-trim-line-endings               | 开关修剪行尾的功能   |
| M-x artist-toggle-borderless-shapes               | 开关在填充图形周围绘 |
|                                                   | 制行边界的功能       |
|---------------------------------------------------+----------------------|

***** artist-key-set-point 执行的功能

|---------------------+----------------------------------------------------|
| 情况                | 作用                                               |
|---------------------+----------------------------------------------------|
| lines/rectangles/   | 设置起始/结束点                                    |
| squares             |                                                    |
|---------------------+----------------------------------------------------|
| poly-lines          | 设置其中一个点， (使用 C-u M-x                     |
|                     | artist-key-set-point 设置结束点)                   |
|---------------------+----------------------------------------------------|
| 擦除字符时          | 开关橡皮功能                                       |
|---------------------+----------------------------------------------------|
| 剪切，复制          | 设置区域/正方形的开始/结束点                       |
|---------------------+----------------------------------------------------|
| 粘贴时              | 粘贴动作                                           |
|---------------------+----------------------------------------------------|

***** 箭头命令

|--------------------------------+--------------------------------|
| M-x artist-toggle-first-arrow  | 设置/取消在线/多线段开头的箭头 |
|--------------------------------+--------------------------------|
| M-x artist-toggle-second-arrow | 设置/取消在线/多线段结尾的箭头 |
|--------------------------------+--------------------------------|

***** 选择操作

|-----------------------------------------+----------------------|
| M-x artist-select-op-line               | 绘制线               |
| M-x artist-select-op-straight-line      | 绘制直线             |
| M-x artist-select-op-rectangle          | 绘制矩形             |
| M-x artist-select-op-square             | 绘制正方形           |
| M-x artist-select-op-poly-line          | 绘制多线段           |
| M-x artist-select-op-straight-poly-line | 绘制直线组成的多线段 |
| M-x artist-select-op-ellipse            | 绘制椭圆             |
| M-x artist-select-op-circle             | 绘制圆               |
| M-x artist-select-op-text-see-thru      | 写字（插入模式）     |
| M-x artist-select-op-text-overwrite     | 写字（覆盖模式）     |
| M-x artist-select-op-spray-can          | 喷雾器               |
| M-x artist-select-op-spray-set-size     | 设置喷雾器的大小     |
| M-x artist-select-op-erase-char         | 擦除字符             |
| M-x artist-select-op-erase-rectangle    | 擦除矩形内字符       |
| M-x artist-select-op-vaporize-line      | 擦除一行             |
| M-x artist-select-op-vaporize-lines     | 擦除所有相连的行     |
| M-x artist-select-op-cut-rectangle      | 剪切矩形             |
| M-x artist-select-op-copy-rectangle     | 复制矩形             |
| M-x artist-select-op-paste              | 粘贴                 |
| M-x artist-select-op-flood-fill         | 填充                 |
|-----------------------------------------+----------------------|

*** 用artist-mode画文本图

artist是一个emacs的内置lisp包。

在artist-mode中，你可以使用鼠标或者键盘来画线(可以带箭头)、矩形、正方
形、多边形、椭圆、圆和一些类似于水蒸气似的不规则图形，当然可以擦除，填
出图形，还可以在其上写字。

这是一个很不错的[[http://www.cinsk.org/emacs/emacs-artist.html][ 绘制单链表的截图flash]]

这是一个[[http://www.lysator.liu.se/~tab/artist/emacs-shapes.html][画了一些形状的截图]],
这幅图画了一个[[http://www.lysator.liu.se/~tab/artist/emacs-a.html][ A]].

这是我工作时的一个绘制结果.

**** 为什么使用Artist-mode

我经常在写程序的时候，希望在文档里画一些类的继承关系、包含关系什么的，
以帮助读这个文件的人能够更好的理解代码，但是此处不能且不适合放一张jpg
（要是h,cpp文件里能插图，那多拉风啊）。

就考虑用plain-text的文本格式来绘图。初始时想用“-|+_”这几个符号来拼
凑，但是工作效率太低，而且容易出错，一修改就几乎整个图作废。将有限的时
间浪费在如此耗时，且没有技术含量的工作上，那还不就等于浪费生命啊，剩下
来的时间多去看看twitter多好！


正如截图中 [[http://www.cinsk.org/emacs/emacs-artist.html][绘制单链表的截图flash]] 所展示，artist-mode来做这件事情，那是
最适合不过了。那么来初探一下emacs的artist-mode能够如何完成任务呢。

**** 怎么使用Mouse 绘制

***** 进入artist-mode

#+BEGIN_EXAMPLE
    M-x artist-mode
#+END_EXAMPLE

***** 离开artist-mode

#+BEGIN_EXAMPLE
    M-x artist-mode-off
#+END_EXAMPLE

***** 三个mouse

****** mouse-2（鼠标中键）,shift mouse-2

弹出一个菜单，从菜单里你可以选择要使用左键画什么[[http://emacser.com/artist-mode.htm#types][类型]]更改一些[[http://emacser.com/artist-mode.htm#setttings][设定]]

****** mouse-1 ( 鼠标左键) , shift-mouse-1

绘制部分由鼠标左键完成，请参考[[http://emacser.com/artist-mode.htm#operations][绘制操作]]。

****** mouse-3 ( 鼠标右键) , shift mouse-3

| mouse-3                | shift mouse-3                  |
| 删除鼠标下的一个字符   | 画出矩形框，删除框选所有字符   |

***** 绘制操作（鼠标左键）

| 操作       | 无shift                                                                                     | shift                                                                             |
| pen        | 单击，在鼠标点填充一个“填充符号”，默认为”.”；按下左键，拖动，抬起，绘制填充符号组成的线 | 单击，在鼠标点填充一个“o”；按下左键，拖动，抬起，绘制一条从初始点到最终点的直线 |
| Line       | 任意方向的线                                                                                | 直线                                                                              |
| Rectangle  | 矩形                                                                                        | 正方形^{[[http://emacser.com/artist-mode.htm#fn.1][1]]}                                                                        |
| Poly-line  | 任意方向的多边形                                                                            | 每条线都是直线的多边形                                                            |
| Ellipses   | 椭圆                                                                                        | 圆^{[[http://emacser.com/artist-mode.htm#fn.2][2]]}                                                                            |
| Text       | 文本                                                                                        | 覆盖式文本                                                                        |
| Spray-can  | 喷雾器^{[[http://emacser.com/artist-mode.htm#fn.3][3]]}                                                                                  | 设置喷雾器的大小                                                                  |
| Erase      | 橡皮，擦掉一个字符                                                                          | 擦掉矩形内字符                                                                    |
| Vaporize   | 擦除一行                                                                                    | 擦除所有相连的行                                                                  |
| Cut        | 剪切矩形                                                                                    | 剪切正方形                                                                        |
| copy       | 复制矩形                                                                                    | 复制正方形                                                                        |
| paste      | 粘贴                                                                                        | 粘贴                                                                              |
| Flood-fill | 填充工具，填充                                                                              | 填充                                                                              |

/直线/：只能是垂直，水平，对角线

箭头：绘制线，或多边形时，可以设置箭头，详细见[[http://emacser.com/artist-mode.htm#arrows][箭头]].

| 设定选项   | 含义                                                     |
| Set fill   | 设定用来填充矩形和正方形的字符                           |
| Set line   | 设定绘制线的时候使用的字符                               |
| Erase char | 设置擦除的时候使用的字符                                 |
| Trimming   | 开关修剪行尾的功能（一个图画完，一行行尾的空格会被移除） |
| Borders    | 开关在填充图形周围绘制行边界的功能                       |

在artist-mode中，有下面两个键

#+BEGIN_EXAMPLE
    < artist-toggle-first-arrow > artist-toggle-second-arrow
#+END_EXAMPLE

就像他们的快捷键所展示，artist-toggle-first-arrow将一条直线的第一个字符变为<，而artist-toggle-second-arrow将一条线的最后一个字符变为>。

| M-x artist-key-set-point                                                                              | [[http://emacser.com/artist-mode.htm#artist-key-set-point][执行以下功能]]                            |
| M-x artist-select-operation                                                                           | 选择绘制类型                            |
| M-x artist-next-line, M-x artist-previous-line, M-x artist-forward-char and M-x artist-backward-char. | 移动                                    |
| M-x artist-select-fill-char                                                                           | 设置填充字符                            |
| M-x artist-select-line-char                                                                           | 设置绘制时字符                          |
| M-x artist-select-erase-char                                                                          | 设置擦除时使用字符                      |
| M-x artist-toggle-rubber-banding                                                                      | 开关 rubber-banding功能（不知道是什么） |
| M-x artist-toggle-trim-line-endings                                                                   | 开关修剪行尾的功能                      |
| M-x artist-toggle-borderless-shapes                                                                   | 开关在填充图形周围绘制行边界的功能      |

****** artist-key-set-point 执行的功能

| lines/rectangles/squares | 设置起始/结束点                                                 |
| poly-lines               | 设置其中一个点， (使用 C-u M-x artist-key-set-point 设置结束点) |
| 擦除字符时               | 开关橡皮功能                                                    |
| 剪切，复制               | 设置区域/正方形 的 开始/结束点                                  |
| 粘贴时                   | 粘贴动作                                                        |

| M-x artist-toggle-first-arrow  | 设置/取消 在线/多线段开头的箭头 |
| M-x artist-toggle-second-arrow | 设置/取消 在线/多线段结尾的箭头 |

| M-x artist-select-op-line               | 绘制线               |
| M-x artist-select-op-straight-line      | 绘制直线             |
| M-x artist-select-op-rectangle          | 绘制矩形             |
| M-x artist-select-op-square             | 绘制正方形           |
| M-x artist-select-op-poly-line          | 绘制多线段           |
| M-x artist-select-op-straight-poly-line | 绘制直线组成的多线段 |
| M-x artist-select-op-ellipse            | 绘制椭圆             |
| M-x artist-select-op-circle             | 绘制圆               |
| M-x artist-select-op-text-see-thru      | 写字（插入模式）     |
| M-x artist-select-op-text-overwrite     | 写字（覆盖模式）     |
| M-x artist-select-op-spray-can          | 喷雾器               |
| M-x artist-select-op-spray-set-size     | 设置喷雾器的大小     |
| M-x artist-select-op-erase-char         | 擦除字符             |
| M-x artist-select-op-erase-rectangle    | 擦除矩形内字符       |
| M-x artist-select-op-vaporize-line      | 擦除一行             |
| M-x artist-select-op-vaporize-lines     | 擦除所有相连的行     |
| M-x artist-select-op-cut-rectangle      | 剪切矩形             |
| M-x artist-select-op-copy-rectangle     | 复制矩形             |
| M-x artist-select-op-paste              | 粘贴                 |
| M-x artist-select-op-flood-fill         | 填充                 |

有了以上的介绍，我将所有artist-mode的命令绘制为一张表格，再参考
artist-mode的键绑定+自己绑定，键盘绘制会像用鼠标绘制一样顺手。
** term-mode                                                         :serial:
*** Serial Terminal

If you have a device connected to a serial port of your computer, you
can communicate with it by typing M-x *serial-term*. This command asks
for a serial port name and speed, and switches to a new Term mode
buffer. Emacs communicates with the serial device through this buffer
just like it does with a terminal in ordinary Term mode.

The speed of the serial port is measured in bits per second. The most
common speed is 9600 bits per second. You can change the speed
interactively by clicking on the mode line.

A serial port can be configured even more by clicking on “8N1” in
the mode line. By default, a serial port is configured as “8N1”,
which means that each byte consists of 8 data bits, No parity check
bit, and 1 stopbit.

If the speed or the configuration is wrong, you cannot communicate
with your device and will probably only see garbage output in the
window.

*** Term Mode

The terminal emulator uses Term mode, which has two input modes. In
line mode, Term basically acts like Shell mode (see Shell Mode). In
char mode, each character is sent directly to the subshell, except for
the Term escape character, normally C-c.

To switch between line and char mode, use these commands:

+ *C-c C-j*
  Switch to line mode (term-line-mode). Do nothing if already in line
  mode.

+ *C-c C-k*
  Switch to char mode (term-char-mode). Do nothing if already in char
  mode.

The following commands are only available in char mode:

+ *C-c C-c*
  Send a literal C-c to the sub-shell.

+ *C-c char*
  This is equivalent to C-x char in normal Emacs. For example, C-c o
  invokes the global binding of C-x o, which is normally
  ‘other-window’.

Term mode has a page-at-a-time feature. When enabled, it makes output
pause at the end of each screenful:

+ *C-c C-q*
  Toggle the page-at-a-time feature. This command works in both line
  and char modes. When the feature is enabled, the mode-line displays
  the word ‘page’, and each time Term receives more than a screenful
  of output, it pauses and displays ‘**MORE**’ in the
  mode-line. Type SPC to display the next screenful of output, or ? to
  see your other options. The interface is similar to the more
  program.

*** 小结                                                           :serial:
1. M-x  serial-term
2. 两种模式
   1) term-char-mode
   2) term-line-mode
** archive-mode                                                  :docx:word:

+ http://superuser.com/questions/116289/word-2007-files-on-emacs

If you want to edit docx files, you can treat them as raw XML (docx
files are a ZIPped bundle of XML files), which can sometimes be
useful, but isn't acceptable for seriously engaing with the
content. This could, I think, in principle, be launched from
archive-mode.

** evernote-mode                                                  :evernote:
*** org-mode evernote                                                :blog:

- why

  - 使用org-mode记笔记绝对要比evernote的编辑方便得多
  - org-mode支持babel、LaTeX等
  - 使用evernote阅读与同步则要比emacs友好得多
  - 顺便解决了本地HTML保存到EVERNOTE的问题

- how

  - org-mode记笔记
  - 使用org-ehtml和emacs-web-server，在浏览器端打开org文件
  - 使用悦读保存到Evernote中，不要使用剪藏，效果不好

- problems

  - 访问太慢，不知为何
  - 不支持图片

** json-mode                                                          :json:

- [[https://github.com/joshwnj/json-mode][GitHub]]
- [[http://www.emacswiki.org/emacs/JSON][EmacsWiki]]


You can decode and encode JSON from Emacs Lisp using json.el. It is
part of GNU Emacs since 23.1 (2008).

Some highlighting support for editing json files is provided by
json-mode.

Major mode for editing JSON files.

Extends the builtin js-mode to add better syntax highlighting for
JSON.

*install*

mepla

M-x package-install json-mode

* Tools
** eww                                                                 :eww:
*** Emacs内置浏览器EWW

**** 概要

EWW, 是 Emacs Web Wowser 的缩写(下边也写作 eww), Wowser
直译是"令人印象深刻的事物"的意思. 是 2013 年出现, Emacs 24.4
开始内置的文本型浏览器. 以下的使用基于 Emacs 24.4 或者以上版本.

不同于传统的 Emacs 常见浏览器方案 w3m 需要外部工具支持, eww
不需要外部工具支持. 另外不支持 js 以及外部引入 css ,
损失了页面效果的同时, 也减少了很多 http 请求, 加载速度非常快.

**** 基本使用

=M-x eww ENTER emacsist.com= 即可访问 Emacs 爱好者站点 Emacsist.com .
打开网页以后, 显示界面上一般按单个字母即可进行操作, 比如 q 为退出,
也支持简单的书签和浏览历史等功能, 如果当前网页用 eww 查看起来实在糟糕,
则可以用按 =&= 调用 =eww-browse-with-external-browser=
在外部浏览器打开当前页面. 更详细的操作指引可以 =C-h m= 查看.

如果默认的按键不符合操作习惯, 可以参考下面的这样的方式去配置修改:

#+BEGIN_EXAMPLE
    (with-eval-after-load 'eww
      (custom-set-variables
       '(eww-search-prefix "https://www.google.com.hk/search?q="))

      (define-key eww-mode-map (kbd "h") 'backward-char)
      (define-key eww-mode-map (kbd "n") 'next-line)
      (define-key eww-mode-map (kbd "s") 'forward-char)
      (define-key eww-mode-map (kbd "t") 'previous-line)

      (define-key eww-mode-map (kbd "H") 'eww-back-url)
      (define-key eww-mode-map (kbd "S") 'eww-forward-url)

      (define-key eww-mode-map (kbd "b") 'eww-history-browse)
      (define-key eww-mode-map (kbd "c") 'eww-browse-with-external-browser)
      (define-key eww-mode-map (kbd "i") 'eww)
      (define-key eww-mode-map (kbd "m") 'eww-lnum-follow)
      (define-key eww-mode-map (kbd "z") 'eww-lnum-universal)

      (define-key eww-mode-map (kbd "M-n") 'nil)
      (define-key eww-mode-map (kbd "M-p") 'nil)

      (define-key eww-mode-map (kbd "<C-S-iso-lefttab>") 'eww-previous-buffer)
      (define-key eww-mode-map (kbd "<C-tab>")           'eww-next-buffer)
      )
#+END_EXAMPLE

实际对比 Emacsist.com 在 chrome 等浏览器效果, 会发现因为使用外部 css
控制页面布局, 变形还是比较大, 不过因为做过特殊适配,
基本能比较整齐的显示. 如果尝试访问我的 blog: blog.hickwu.com ,
由于页面布局简单, 显示效果基本跟 chrome 上差不多. 具体参见 eww1.gif

#+DOWNLOADED: http://www.webrube.com/pics/52/5752_1.gif @ 2016-01-27 13:10:39
 [[~/Wally/Journal/Figure/.org-download/eww/5752_1_2016-01-27_13:10:39.gif]]

默认配置下, 如果 =M-x eww= 回车后输入的内容被检测出来是网址,自动打开,
否则会调用 [[https://duckduckgo.com/][DuckDuckGo]] 进行搜索. 前文的
eww-search-preifx 配置即为修改默认搜索方式. 要打开本地文件用 file://
开头或者 =M-x eww-open-file= .

另外配合 ace-link 等能很方便的切换以 ace-jump 的方式定位和跳转链接,
如下图 eww2.gif 中使用 ace-link-eww 以后, 按 l
即可跳转到文章"ace-jump-mode高效移动光标".

#+DOWNLOADED: http://www.webrube.com/pics/52/5752_2.gif @ 2016-01-27 13:10:46
 [[~/Wally/Journal/Figure/.org-download/eww/5752_2_2016-01-27_13:10:46.gif]]

**** 理解 eww 的工作方式

eww 是基于另外一个项目 shr.el 构建的, 当然也依赖 libxml2 库, 自己编译
Emacs 的时候注意相关选项.

eww 支持 cookie 的, 它的一些网络操作走的是 url.el , 可以通过
=url-cookie-list= 查看 cookie , 更多功能可以参考
[[http://www.gnu.org/software/emacs/manual/html_node/url/index.html#Top][url
package]] . eww 针对图片也有特殊处理, 可以设置 shr-max-image-proportion
定义图片显示尺寸以及 shr-blocked-images 屏蔽部分图片等.

需要设置代理服务器的也是走 url.el 的方式, 可以设置不代理的规则等,
基本用法如下:

#+BEGIN_EXAMPLE
    (setq url-proxy-services '(("no_proxy" . "work\\.com")
                           ("http" . "proxy.somedomain.com:8888")))
#+END_EXAMPLE

url-cookie-list 命令可以列出来 Emacs 保存的 cookie 列表, 定义在
url-cookie.el 中, 其中还有定义 url-cookie-retrieve 等函数, elisp
程序获得可以类似这样 =(url-cookie-retrieve "127.0.0.1" "/")= 的用法.
cookie 实际保存在变量 url-cookie-file 对应的文件, 大概内容如下:

#+BEGIN_EXAMPLE
    (setq url-cookie-storage
     '((".weibo.cn"
      [url-cookie "httponly" nil "28-Apr-2015 15:33:47.00 GMT" "/" ".weibo.cn" nil]
      [url-cookie "_T_WM" "XXXXXXXXXXXXXX" "28-Apr-2015 15:33:47.00 GMT" "/" ".weibo.cn" nil])
     ("192.168.3.222"
      [url-cookie "cookie_id" "142355712384279893" "10-Feb-2016 08:32:03.00 GMT" "/" "192.168.3.222" nil]))
    )
#+END_EXAMPLE

另外根据查找的资料, eww 支持 html 表单的文件上传,
各种平台的体验情况未知, 参考
http://lists.gnu.org/archive/html/bug-gnu-emacs/2013-12/msg01389.html

**** eww 的使用场景

有些 Emacs 爱好者习惯用 gnus 等在 Emacs 里收邮件, 可以配合 eww 去查看
html 邮件.

用来访问一些比较简单的网站比如 hackernews 等效果都还可以,
另外一些编程语言的手册等基本还是可以用 eww 来查看.

对一些纯文本格式比如 org/markdown 转化成 html 的预览效果一般也还能接受.
涉及自动刷新等, 也有人在摸索了, 具体可以参考
[[http://emacs.stackexchange.com/questions/2426/how-do-i-auto-refresh-eww-pages][How do I auto-refresh eww pages?]]

**** 参考资料

-  [[http://www.gnu.org/software/emacs/manual/html_node/eww/Overview.html][EWW Overview]]

-  [[http://www.gnu.org/software/emacs/manual/html_node/eww/Basics.html][EWW Basics]]

-  [[http://www.gnu.org/software/emacs/manual/html_node/eww/Advanced.html][EWW Advanced]]

-  [[http://en.wikipedia.org/wiki/Eww_(web_browser)][eww (web browser)]]

-  [[http://oremacs.com/2014/12/30/ace-link-eww/][Emacs Web Wowser (EWW) got ace-link]]

-  [[http://www.emacswiki.org/emacs/WebKit][emacs-webkit]] 国内 deepin   linux 的王勇同学开发了一个 Emacs 里内嵌的 webkit 浏览器: deepin-emacs
   , 有兴趣的可以试试 https://github.com/linuxdeepin/deepin-emacs .

-  [[http://w3m.sourceforge.net/][w3m]] 整体看起来可能比 eww
   还成熟的项目, 也是很老的项目了. 主要差别是: w3m
   原本是一个独立的类似于 Lynx 的文本型浏览器, Emacs 里的 w3m 需要配合
   w3m 这个外部工具来用. 当然 eww 从 24.4 开始内置也许不算本身的差别,
   也是次生优势.
** w3m                                                                 :w3m:
*** 安装
*Emacs-w3m of this version does not support Emacs 23* try the development version

对Emacs23.2版本，需要使用cvs版本，下载如下：

#+BEGIN_EXAMPLE
  # cvs -d :pserver:anonymous@cvs.namazu.org:/storage/cvsroot co emacs-w3m
  ##下载完成后，将源码拷贝到/usr/local/src目录下，
  # cp -r emacs-w3m /usr/local/src/
  # cd /usr/local/src/emacs-w3m/
  ##然后进入emacs-w3m目录，进行如下操作：
  # autoconf
  # ./configure
  # make
  # sudo make install
  ##如果没有装autoconf，需要先apt安装。
#+END_EXAMPLE

*** 配置
#+BEGIN_EXAMPLE
  ;; set emacs-w3m
  ;;设置emacs-w3m浏览器
  (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-w3m/")
  (require 'w3m)
  (require 'w3m-load)
  ;(require 'mime-w3m)

  ;; 设置w3m主页
  (setq w3m-home-page "http://www.google.com")

  ;; 默认显示图片
  (setq w3m-default-display-inline-images t)
  (setq w3m-default-toggle-inline-images t)

  ;; 使用cookies
  (setq w3m-command-arguments '("-cookie" "-F"))
  (setq w3m-use-cookies t)
  (setq browse-url-browser-function 'w3m-browse-url)
  (setq w3m-view-this-url-new-session-in-background t)

#+END_EXAMPLE

*** 快捷键
|----------+---------------------------------------------------------------|
| q        | 关闭窗口                                                      |
| Q        | 直接离开                                                      |
| C-x-k    | 关闭当前标签页                                                |
| U        | 打开 URL                                                      |
| G        | 在标签页中打开一个网址                                        |
| S        | 用google进行搜索                                              |
| B        | 后退                                                          |
| N        | 前进                                                          |
| H        | 主页                                                          |
| R        | 刷新                                                          |
| C-n      | 下一行                                                        |
| C-p      | 向上一行                                                      |
| C-b      | 向后                                                          |
| C-f      | 向前                                                          |
| C-v      | 向下滚屏                                                      |
| ESC v    | 向上滚屏                                                      |
| 打开链接 | RET                                                           |
| >        | 向右滚屏                                                      |
| <        | 向左滚屏                                                      |
| ,        | 向左移动一格                                                  |
| .        | 向右移动一格                                                  |
| R        | Reload the current page                                       |
| C-t  R   | Reload all the pages                                          |
| r        | Redisplay the current page                                    |
| TAB      | Move to the new anchor                                        |
| C-M-i    | Move to the previous anchor                                   |
| B        | move  back to the previous page in the history                |
| N        | move forward to the next page in the history                  |
| s        | display the history in the session                            |
|          | with the prefic arg, it displays the arrived URLS             |
|----------+---------------------------------------------------------------|
| M-d      | down th url                                                   |
| d        | down load the url under point                                 |
|----------+---------------------------------------------------------------|
| u        | display the url under the point and put it into kill-ring     |
| c        | display the url of the current page and put it into kill-ring |
|----------+---------------------------------------------------------------|
| t        | toggle the visibility of an image under point                 |
| T        | toggle the visibility of all images                           |
| I        | display the image under point in the external viewer          |
| M-i      | save the image under point to a file                          |
| M-左方括号   | zoom in an image on the point                                 |
| M-右方括号   | zoom out an image on the point                                |
|----------+---------------------------------------------------------------|
| \        | display the html source of the current page                   |
| a        | 添加当前页到书签                                              |
| M-a      | add the urls under point to the bookmark                      |
| ESC a    | 添加该URL到书签                                               |
| v        | 显示书签                                                      |
| E        | 编辑书签                                                      |
| C-k      | 删除书签                                                      |
| C-_      | 撤消书签                                                      |
| M        | 用外部浏览器打开当前页面                                      |
| ESC M    | 用外部浏览器打开链接                                          |
|----------+---------------------------------------------------------------|
| C-c C-k  | 停止载入                                                      |
|----------+---------------------------------------------------------------|


|-------------+-------------------------------+--------------|
| Key-binding | Function                      | 备注         |
|-------------+-------------------------------+--------------|
| SPC,C-v     | Forward page                  | 前页         |
| b,ESC v     | Backward page                 | 后页         |
| l,C-f       | Cursor right                  | 光标右移     |
| h,C-b       | Cursor left                   | 光标左移     |
| j,C-n       | Cursor down                   | 光标下移     |
| k,C-p       | Cursor up                     | 光标上移     |
| J           | Roll up one line              | 向上滚屏一行 |
| K           | Roll down one line            | 向下滚屏一行 |
| ^,C-a       | Go to the beginning of line   | 跳转至行首   |
| $,C-e       | Go to the end of line         | 跳转至行尾   |
| w           | Go to next word               | 后一个单词   |
| W           | Go to previous word           | 前一个单词   |
| >           | Shift screen right            | 向右滚屏     |
| <           | Shift screen left             | 向左滚屏     |
| .           | Shift screen one column right | 向右滚屏一列 |
| ,           | Shift screen one column left  | 向左滚屏一列 |
| g,M-<       | Go to the first line          | 跳转至首行   |
| G,M->       | Go to the last line           | 跳转至尾行   |
| ESC g       | Go to specified line          | 跳转至指定行 |
| Z           | Move to the center line       |              |
| z           | Move to the center column     |              |
| TAB         | Move to next hyperlink        |              |
| C-u,ESC TAB | Move to previous hyperlink    |              |
| 左方括号        | Move to the first hyperlink   |              |
| 右方括号        | Move to the last hyperlink    |              |
|-------------+-------------------------------+--------------|


|---------------------------+-------------------------------------------------------------------------+---|
| RET                       | Follow hyperlink                                                        |   |
| a, ESC RET                | Save link to file                                                       |   |
| u                         | Peek link URL                                                           |   |
| i                         | Peek image URL                                                          |   |
| I                         | View inline image                                                       |   |
| ESC I                     | Save inline image to file                                               |   |
| :                         | Mark URL-like strings as anchors                                        |   |
| ESC :                     | Mark Message-ID-like strings as news anchors                            |   |
| c                         | Peek current URL                                                        |   |
| =                         | Display information about current document                              |   |
| C-g                       | Show current line number                                                |   |
| C-h                       | View history of URL                                                     |   |
| F                         | Render frame                                                            |   |
| M                         | Browse current document using external browser (use 2M and 3M to invoke |   |
| second and third browser) |                                                                         |   |
| ESC M                     | Browse link using external browser (use 2ESC M and 3ESC M to invoke     |   |
|                           | second and third browser)                                               |   |
|---------------------------+-------------------------------------------------------------------------+---|

|---+----------------------------------|
| U | Open URL                         |
| V | View new file                    |
| @ | Execute shell command and load   |
| # | Execute shell command and browse |
|---+----------------------------------|

|-------+-----------------------------|
| B     | Back to the previous buffer |
| v     | View HTML source            |
| s     | Select buffer               |
| E     | Edit buffer source          |
| C-l   | Redraw screen               |
| R     | Reload buffer               |
| S     | Save buffer                 |
| ESC s | Save source                 |
| ESC e | Edit buffer image           |
|-------+-----------------------------|

*** w3m-default-save-directory
+ w3m-default-save-directory is a variable defined in `w3m.el'.
+ Its default value is "~/.w3m"
+ Default directory where downloaded files will be saved to.

#+BEGIN_EXAMPLE
(setq w3m-default-save-directory "~/Tiger/Figures/w3m/")
#+END_EXAMPLE

** mew                                                                 :mew:
参考:
+ [[http://www.mew.org/en/][Homepage]]
+ [[http://emacser.com/mew.htm][emacs中文]]
+ http://zerodoo.appspot.com/emacs.mew.1.0001.html

*** What is Mew?
Mew is an acronym for "Messaging in the Emacs World".
Mew is a mail reader for Emacs.

*** 安装
#+BEGIN_EXAMPLE
  $  git clone git://github.com/kazu-yamamoto/Mew.git  # 下载
  $  ./configure
  $  make
  $  sudo make install
#+END_EXAMPLE

*** 配置
**** 基本配置
#+BEGIN_EXAMPLE
  ;; 设置 Mew
  (autoload 'mew "mew" nil t)
  (autoload 'mew-send "mew" nil t)
  ;; 下面的图标路径和安装路径有关，具体请看Mew的安装过程

  (setq mew-use-cached-passwd t)
  ;; mew-pop-size设置成0时，pop邮件大小没有限制
  (setq mew-pop-size 0)
  ;; 不删除服务器上的邮件
  (setq mew-pop-delete nil)
#+END_EXAMPLE


**** 单账号配置
#+BEGIN_EXAMPLE
  (setq mew-name "Corel Chen") ;; (user-full-name)
  (setq mew-user "corel") ;; (user-login-name)
  (setq mew-mail-domain "a8.com")
  (setq mew-smtp-user "corel")
  (setq mew-smtp-server "smtp.a8.com")  ;; if not localhost
  (setq mew-pop-user "corel")  ;; (user-login-name)
  (setq mew-pop-server "pop.a8.com")    ;; if not localhost
  (setq mew-pop-auth 'pass)
  (setq mew-smtp-auth-list '("PLAIN" "LOGIN" "CRAM-MD5"))
#+END_EXAMPLE

**** 多账号配置
#+BEGIN_EXAMPLE
  (setq mew-config-alist
        '(("default"
       ("name"         .  "Corel Chen")
       ("user"         .  "corel")
       ("smtp-server"  .  "smtp.a8.com")
       ("smtp-port"    .  "25")
       ("pop-server"   .  "pop.a8.com")
       ("pop-port"     .  "110")
       ("smtp-user"    .  "corel")
       ("pop-user"     .  "corel")
       ("mail-domain"  .  "a8.com")
       ("mailbox-type" .  pop)
       ("pop-auth"     .  pass)
       ("smtp-auth-list" . ("PLAIN" "LOGIN" "CRAM-MD5"))
       )
       ("gmail"
          ("name"         . "corel")
          ("user"         . "corel.china")
          ("mail-domain"  . "gmail.com")
          ("proto"        . "+")
          ("pop-ssl"      . t)
          ("pop-ssl-port" . "995")
  ;       ("prog-ssl"     . "/usr/sbin/stunnel")
          ("pop-auth"     . pass)
          ("pop-user"     . "corel.china@gmail.com")
          ("pop-server"   . "pop.gmail.com")
          ("smtp-ssl"     . t)
          ("smtp-ssl-port". "465")
          ("smtp-auth-list" . ("PLAIN" "LOGIN" "CRAM-MD5"))
          ("smtp-user"    . "corel.china@gmail.com")
          ("smtp-server"  . "smtp.gmail.com")
          )
  ))

#+END_EXAMPLE

**** 密码管理
有两种方式：
+ 保存密码到内存，而不是写到文件
  #+BEGIN_EXAMPLE
  (setq mew-use-cached-passwd t)
  #+END_EXAMPLE
+ Mew运行时保存密码到内存，退出时加密保存到文件，有主密码
  #+BEGIN_EXAMPLE
  (setq mew-use-master-passwd t)
  #+END_EXAMPLE

**** 编码
缺省情况下，mew发送的邮件都是用的 iso-2022-jp-2 编码发送的，如果用 mew
接收邮件显示是正常的，但其他客户端接收则可能是乱码了。在已发送邮件上按
*C-c TAB* 会显示邮件的详情，可以看到：

Content-Type: Text/Plain; charset=iso-2022-jp-2
Content-Transfer-Encoding: 7bit

要改成用 utf8 发送邮件，查了很多资料并看了下mew的源码，发现要作如下设置，才
会用 utf8 来发送邮件：
#+BEGIN_EXAMPLE
(setq mew-charset-m17n "utf-8")
(setq mew-internal-utf-8p t)
#+END_EXAMPLE

这时再发送邮件时，会看到：
Content-Type: Text/Plain; charset=utf-8
Content-Transfer-Encoding: base64

**** biff设置
设置使用Biff检查邮箱是否有新邮件，默认为5分钟。如果有新邮件，则在
emacs的状态栏显示Mail(n)的提示—n表示新邮件数目。

#+BEGIN_EXAMPLE
  (setq mew-use-biff t)  ;;
  (setq mew-use-biff-bell t)  ;; 设置嘟嘟声通知有新邮件
  (setq mew-biff-interval 10) ;; 设置自动检查新邮件的时间间隔，单位：分钟
#+END_EXAMPLE

特别提示：要使用biff实现通知，需要先启动mew，然后就可以干其他的活了。如果看
到状态栏上有Mail(n)的提示，则切换到mew的buffer，这时是看不到新邮件的（也就是
说新邮件并没有收到本地），需要按 i 按键收取新邮件。

*** 使用
**** M-x mew
|-------------+---------------------------------------------------------|
| w           | 撰写新邮件                                              |
| a           | 回复邮件，不带引用                                      |
| A           | 回复邮件，带引用                                        |
| f           | 转发邮件                                                |
| E           | 重新编辑邮件                                            |
| r           | 重新发送邮件                                            |
| SPC         | 阅读邮件                                                |
| y           | 保存邮件（可以保存信件全文、信件正文、附件）            |
| C-c C-l     | 转换当前邮件的编码格式                                  |
| C-c C-a     | 加入地址薄                                              |
| C-u C-c C-a | 比 C-c C-a 多加入昵称和名字                             |
| i           | 收信                                                    |
| g           | 跳转邮箱                                                |
| o           | 对邮件进行分类                                          |
| M-o         | 对所有邮件按照设定的规则进行分类                        |
| d           | 把邮件标记为删除                                        |
| *           | 做星号标记                                              |
| m/          | 列出所有有星号标记的邮件                                |
| u           | 清除标记                                                |
| U           | 清除所有带有指定标记的标记                              |
| x           | 对所有标记进行处理(比如标记为D的邮件将真正被删除)       |
| ENTER       | 让阅读的邮件向下滚动一行                                |
| -           | 向上滚动一行                                            |
| n           | 下一封邮件                                              |
| p           | 前一封邮件                                              |
| j           | 跳到某一封邮件                                          |
| N           | 下一封带星号的邮件                                      |
| P           | 上一封带星号的邮件                                      |
| S           | 按某个指定项目对邮件排序                                |
| /           | 按指定条件搜索邮件，并进入虚拟模式                      |
| tt          | 进入虚拟模式，根据线索查看，普通模式下是不可以的        |
| v           | 切换"Summary mode only" 和 "Summary & Message mode"模式 |
| C-c C-m     | 编辑新邮件，放入草稿中                                  |
| Z           | 更新地址簿                                              |
|-------------+---------------------------------------------------------|

**** draft: M-x mew-send
**** 其它
|-----+-----------------------------------|
| C   | 如果设置了多个邮箱，用 C 命令切换 |
| Q   | 退出Mew                           |
|-----+-----------------------------------|

*** 地址薄
1. 地址薄
   Mew 提供地址自动完成功能，在输入地址的时候可以使用 TAB 键来进行自动
   完成，自动完成有几个信息来源：
   1) 地址簿中指定的扩展规则
   2) 地址簿中提供的个人信息
   3) 发送邮件的时候自动学习记录下来的地址
2. 位置
   Mew 的地址簿默认是 *~/Mail/Addrbook* 这个文件，里面有两种信息：扩展
   规则和个人信息。
   1) 扩展规则
      #+BEGIN_EXAMPLE
        <shortname>: <address1>[, <address2>, <address3, ...]
      #+END_EXAMPLE
      我们通常不使用这个，不过如果需要一个名称扩展到多个地址的时候可以
      使用这个，例如：
      #+BEGIN_EXAMPLE
        friends: pluskid@mstczju.org, pluskid.zju@gmail.com
      #+END_EXAMPLE
   2) 个人信息
      #+BEGIN_EXAMPLE
        <shortname> <address1>[, <address2>, <address3>, ...] <nickname> <fullname>
      #+END_EXAMPLE
      注意这里没有冒号了。如果使用第一种补全方式，那么可以通过不断地按
      TAB 键来在个人信息里面指定的各个邮件地址之间循环，而不是向扩展规
      则中指定的那样一下子把全部地址扩展出来。另外， nickname 和
      fullname 也是很有用的，例如，在summary-mode 里面可以以 nickname
      来代替发件人地址显示出来。
3. 注释
   注释可以使用
   1) # 用在任何地方
   2) ; 行首
4. 更新
   修改了地址簿之后，可以在 *summary-mode* 里面按 *Z* 提示 mew 读取更
   新后的地址簿的信息。

*** 附件
发送附件

Mew 允许你轻松编辑一个复杂的多媒体邮件。在编辑邮件的时候，按 C-c C-a 即可开
始添加附件，这个时候邮件的末尾会出现如下类似的字样：
#+BEGIN_EXAMPLE
  ------------------------------ attachments ------------------------------
        Multipart/Mixed                                                                   1/
       1  Text/Plain(guess)                                                                 *Cover.txt
       2                                                                                    .
  --------0-1-2-3-4-5-6-7-8-9----------------------------------------------
#+END_EXAMPLE

其中 1/ 是一个用于处理附件的临时目录，默认是 ~/Mail/attach/1 这个目录。默认
已经插入的这个附件 Cover.txt 其实就是邮件的文本内容。这个时候按下 c 即可添加
附件，输入要添加的附件的路径即可把附件拷贝到这个临时目录下面，也可以使用 l
来创建链接，但是如果要编辑附件的话，最好使用 c 来拷贝，免得修改了原来的文件
。

另外，除了添加已经存在的附件以外，还可以使用 F 来打开一个新的文件进行编辑并
添加为附件。随时可以使用 f 命令重新打开一个附件进行编辑，使用=P= 来改名或者
使用 d 进行删除。

m 可以建立子目录，在附件多的时候可以方便对附件进行分类管理。 C-f 和 C-b 可以
在不同层次的目录之间切换。

** web server                                                       :server:

*** [[http://eschulte.github.io/emacs-web-server/tutorials/][emacs-web-server]] :blog:

The following tutorials walk through common usage scenarios including
installing the Emacs web-server and running it behind a proxy. Install
the Emacs web-server and run (info "web-server") to browse the full
manual within Emacs, or view the HTML version at emacs-web-server.

**** 1 Installation and running a server

Most easily installable through the GNU ELPA, run
=M-x package-list-packages= select =web-server= and install.
Alternately, install from the git repository at
[[https://github.com/eschulte/emacs-web-server]] and update your the
load.

1. Ensure that you have Emacs version 24 or greater installed.

   #+BEGIN_EXAMPLE
       emacs --version
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       GNU Emacs 24.3.1
       Copyright (C) 2013 Free Software Foundation, Inc.
       GNU Emacs comes with ABSOLUTELY NO WARRANTY.
       You may redistribute copies of Emacs
       under the terms of the GNU General Public License.
       For more information about these matters, see the file named COPYING.
   #+END_EXAMPLE

2. Download and unpack the zip archive of the Emacs web-server code from
   [[https://github.com/eschulte/emacs-web-server/archive/master.zip][emacs-web-server-master.zip]]
   or clone the source code repository with
   [[http://git-scm.com/][git]].

   #+BEGIN_EXAMPLE
       git clone https://github.com/eschulte/emacs-web-server.git
   #+END_EXAMPLE

3. Move into the root of the =emacs-web-server/= directory and
   optionally run =make= to compile the web-server code, and run
   =make    check= to test your web-server install.

   #+BEGIN_EXAMPLE
       make
       make check
   #+END_EXAMPLE

4. From the root of the =emacs-web-server/= directory, start an instance
   of Emacs with web-server loaded.

   #+BEGIN_EXAMPLE
       emacs -Q -L . -l web-server
   #+END_EXAMPLE

   Alternately, from an already running Emacs instance, add this
   directory to the load path and load the web server with the
   following.

   #+BEGIN_EXAMPLE
       (add-to-list 'load-path "path/to/emacs-web-server")
       (require 'web-server)
   #+END_EXAMPLE

5. Evaluate the following code in =*scratch*= buffer of this Emacs
   instance.

   #+BEGIN_EXAMPLE
       (ws-start
        (lambda (request)
          (with-slots (process headers) request
            (ws-response-header process 200 '("Content-type" . "text/plain"))
            (process-send-string process "hello world")))
        9000)
   #+END_EXAMPLE

6. Browse to [[http://localhost:9000/]] to see that the web-server is
   running.
7. Read the web-server
   [[http://eschulte.github.io/emacs-web-server/index.html#Top][manual]]
   and work through other
   [[http://eschulte.github.io/emacs-web-server/Usage-Examples.html#Usage-Examples][Usage
   Examples]].

**** 2 Running behind a proxy

Public-facing instance of the Emacs web-server should be run behind a
more established web server such as [[http://httpd.apache.org/][Apache]]
or [[http://wiki.nginx.org/][Nginx]] to provide additional robustness
and security.

The following example Apache configuration may be used to have a public
facing Apache server listening on port 80 proxy requests to a local
web-server instance running on port 8888 of the same machine.

#+BEGIN_EXAMPLE
    <VirtualHost *:80>
      ServerName  yourserver.com

      ProxyPass / http://localhost:8888/
    </VirtualHost>
#+END_EXAMPLE

A similar Nginx configuration is available at
[[http://wiki.nginx.org/LoadBalanceExample]].

**** 3 Running behind an https proxy

The following example configurations will cause Apache or Nginx to act
as an HTTPS proxy for an instance of the Emacs web server running on the
same machine. With this setup Apache speaks HTTPS to the outside world,
and communicates with the Emacs web server using HTTP. This allows use
of HTTPS even though the Emacs web server does not implement HTTPS
itself. This setup is recommended for any setup, but should be
considered *required* for sites using BASIC HTTP Authentication.

***** 3.1 Apache

This requires that Apache has =mod_proxy= and =mod_ssl= enabled, and
that the certificate and key files required for SSL are present. This
these requirements satisfied, and assuming the Emacs web server is
listening on port 8888 and is running on the same machine as the Apache
web server an Apache virtual host configuration such as the following.

#+BEGIN_EXAMPLE
    <VirtualHost *:443>
        ProxyPreserveHost On
        ServerName yourserver.com

        SSLEngine On
        SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
        SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

        ProxyPass / http://localhost:8888/
        ProxyPassReverse / http://localhost:8888/
    </VirtualHost>
#+END_EXAMPLE

***** 3.2 Nginx

See the following for instructions configuring Nginx as an HTTPS proxy.

- [[http://wiki.nginx.org/SSL-Offloader#sslproxy.conf]]
- [[http://www.cyberciti.biz/faq/howto-linux-unix-setup-nginx-ssl-proxy/]]

** git                                                                 :git:
*** git-emacs
**** 在Emacs中使用git的选择:
+ Emacs VC(古老)
+ git.el(经典, git项目的官方工具)
+ git-emacs(强大)
+ mgit(新潮)
**** 配置
#+BEGIN_EXAMPLE
    ;;git-emacs
    (add-to-list 'load-path "/path/to/git-emacs/")
    (require 'git-emacs)
#+END_EXAMPLE
**** 基本使用
|-------------+-----------------------|
| C-x g c RET | git-commit-all        |
| C-x g c a   | git-commit-all        |
| C-x g c f   | git-commit-file       |
| C-x g c i   | git-commit            |
|-------------+-----------------------|
| C-x g s     | git-status            |
| C-x g a     | git-add               |
| C-x g l     | git-log               |
| C-x g b     | git-branch            |
|             | git-history           |
|-------------+-----------------------|
| C-x g C-l   | git-log-other         |
| C-x g .     | git-cmd               |
| C-x g D     | git--diff-all-map     |
| C-x g L     | git-log-files         |
| C-x g R     | git-reset             |
| C-x g c     | git--commit-map       |
| C-x g d     | git--diff-buffer-map  |
| C-x g g     | git-grep              |
| C-x g h     | git-stash             |
| C-x g i     | git-add-interactively |
| C-x g m     | git-merge-next-action |
|-------------+-----------------------|
| C-x g D RET | git-diff-all-head     |
| C-x g D b   | git-diff-all-baseline |
| C-x g D h   | git-diff-all-head     |
| C-x g D i   | git-diff-all-index    |
| C-x g D o   | git-diff-all-other    |
| C-x g d RET | git-diff-head         |
| C-x g d b   | git-diff-baseline     |
| C-x g d h   | git-diff-head         |
| C-x g d i   | git-diff-index        |
| C-x g d o   | git-diff-other        |
|-------------+-----------------------|

**** git-status
如果当前打开的文件所在的文件夹处于版本控制中，可以通过 *M-x
git-status* 查看状态

|---------+------------------------------------------|
| p/n     | 在所有文件之间上下移动                   |
| P/N     | 在变更过的文件之间上下移动               |
| </>     | 定位到列表的头部/尾部                    |
| v       | 以只读方式打开文件                       |
| m/u/SPC | 设置/取消/切换标记，标记用于批量处理文件 |
| a       | 将文件加入版本控制                       |
| i       | 将文件加入ignore                         |
| c       | 提交                                     |
|---------+------------------------------------------|

**** 提交
在状态清单中使用“c",或者在任何buffer中运行 *M-x
git-commit/git-commit-all/git-commit-file* ，可以提交index/所有文件/当
前文件。
|----------+------|
| C-c C-c  | 提交 |
| C-c C-q  | 取消 |
|----------+------|

**** 标签和分支
M-x git-branch：列出所有分支,在这里可以通过快捷键c/d/RET实现创建/删除/切换分
支。

M-x git-tag可以创建一个标签，以后在git-checkout时可以指定标签的名字，也可以
通过git-checkout-to-new-branch来基于tag创建分支。

*** magit                                                       :git:magit:
**** intro

Magit is an interface to the version control system Git, implemented
as an Emacs package. Magit aspires to be a complete Git
porcelain. While we cannot (yet) claim that Magit wraps and improves
upon each and every Git command, it is complete enough to allow even
experienced Git users to perform almost all of their daily version
control tasks directly from within Emacs. While many fine Git clients
exist, only Magit and Git itself deserve to be called porcelains.

**** quick tips

+ M-x magit-status switch to the status buffer of that repository 使用这个命令查看Git的状态，在git中的命令为git status
+ s to stage files 把untracked或者unstaged文件的状态改成stage模式，
+ c to commit (type in your commit message then C-c C-c to save the message and commit)  把所有staged文件都commit到索引仓库中
+ P P to do a git push Update remote refs along with associated objects
+ F F to do a git pull Fetch from and merge with another repository or a local branch
+ TAB  Toggle hidden status of current section 用来转换显示当前文件的一些信息
+ i ignore file this will add the filename to the .gitignore file. 忽略当前文件的版本控制，如一些临时文件
+ I ignore file this will add the file to .git/infor/exclude
+ C-h m Magit的使用帮助信息

**** 用以至学

Git 并不是一个简单的工具。 Magit 也如此。

**** reference

+ [[https://github.com/magit/magit][Github]]
+ [[http://magit.vc/][Homepage]]
+ [[http://blog.csdn.net/amuseme_lu/article/details/6931908][CSDN: emacs Magit 简单介绍]]

** emacs gif                                                           :gif:
*** record gif

- [[http://emacs.stackexchange.com/questions/798/recording-a-gif-screencast-of-emacs][stackexchange:Recording a GIF screencast of Emacs ]]
- [[https://github.com/Malabarba/camcorder.el][Github: camcorder.el]]


1. To use it, simply call *M-x camcorder-record*
2. A new smaller frame will popup and recording starts.
3. When you’re finished, hit *F12*.

View screencasts are generated in *ogv* format, and you can even pause
the recording with *F11*! You can also convert the .ogv file to a gif
by issuing the command *M-x camcorder-convert-to-gif*

后台程序

1. 录制
   - recordmydesktop
   - ffmpeg
   - mplayer & imagemagick

2. 转换
   - ffmpeg
   - mplayer & imagemagick

*** view gif

- https://github.com/Fuco1/org-inline-image

#+BEGIN_SRC emacs-lisp
  (require 'org-inline-image)
#+END_SRC

not work 没细看

** image viewer                                                      :image:

+ http://emacs.stackexchange.com/questions/2433/using-emacs-as-an-image-viewer
+ http://emacswiki.org/emacs/ThumbsMode


1. thumbs-mode
   + major-mode
   +
2. emip

   It uses the mogrify utility from ImageMagick to do the actual
   transformations.
   #+BEGIN_EXAMPLE
   (add-hook 'image-mode-hook 'eimp-mode)
   #+END_EXAMPLE

   + (kbd "+") 'eimp-increase-image-size
   + (kbd "-") 'eimp-decrease-image-size
   + (kbd "<") 'eimp-rotate-image-anticlockwise
   + (kbd ">") 'eimp-rotate-image-clockwise
   + (kbd "B +") 'eimp-blur-image
   + (kbd "B -") 'eimp-sharpen-image
   + (kbd "B E") 'eimp-emboss-image
   + (kbd "B G") 'eimp-gaussian-blur-image
   + (kbd "B R") 'eimp-radial-blur-image
   + (kbd "C B +") 'eimp-increase-image-brightness
   + (kbd "C B -") 'eimp-decrease-image-brightness
   + (kbd "C C +") 'eimp-increase-image-contrast
   + (kbd "C C -") 'eimp-decrease-image-contrast
   + (kbd "F ^") 'eimp-flip-image
   + (kbd "F >") 'eimp-flop-image
   + (kbd "F <") 'eimp-flop-image
   + (kbd "N") 'eimp-negate-image
   +
   + ; Commands most relevant to you:
   + (kbd "S f") 'eimp-fit-image-to-window
   + (kbd "S h") 'eimp-fit-image-height-to-window
   + (kbd "S w") 'eimp-fit-image-width-to-window
   +
   + (kbd "<right>") 'eimp-roll-image-right
   + (kbd "<left>") 'eimp-roll-image-left
   + (kbd "<up>") 'eimp-roll-image-up
   + (kbd "<down>") 'eimp-roll-image-down
   + (kbd "<down-mouse-1>") 'eimp-mouse-resize-image
   + (kbd "<S-down-mouse-1>") 'eimp-mouse-resize-image-preserve-aspect
   + (kbd "C-c C-k") 'eimp-stop-all

** scrot                                                             :scrot:

- http://m.oschina.net/blog/124113


#+BEGIN_SRC emacs-lisp
(defun screenshot()
  "Take a screenshot into a unique-named file in the current buffer file"
  (interactive)
  (setq filename
	(concat (make-temp-name
		 (concat (getenv "HOME") "/Picture/scrot/")) ".png"))
  ;;(suspend-frame)
  (call-process-shell-command "scrot" nil nil nil nil " -s" (concat
"\"" filename "\"" )))

(global-set-key (kbd "C-c s") 'screenshot)
#+END_SRC

1. make-temp-name
2. suspend-frame
3. call-process-shell-command
4. get-env

** emms                                                   :emms:audio:music:
*** reference

+ [[https://www.gnu.org/software/emms/index.html][Homepage]]
+ [[http://lifegoo.pluskid.org/wiki/EMMS.html][EMMS 配置与使用]]
+ [[http://www.newsmth.net/nForum/#!article/Emacs/98415][EMMS 中文编码]]

*** intro

Emacs Multimedia System

*** 安装

Mepla

*** 中文编码

+

*** emms-cache-next/playlist

*** emms-add-file

*** [[http://lifegoo.pluskid.org/wiki/EMMS.html][EMMS 配置与使用]]                                              :blog:

**** 简介

EMMS 让你可以在 [[Emacs.html][Emacs]]
里面播放多媒体文件，他被设计的小巧干净，使用外部
播放器进行播放。是一个小巧、可扩展的完全由 [[Elisp]]
写成的多媒体系统，支持
多种音频、视频格式以及流媒体播放(这事实上由你所使用的播放器决定)，可以
进行标签操作、方便的播放列表管理以及打分制度，总之，这正是我想要的。

**** 配置与使用

***** 基本配置

EMMS 提供了一个 =emms-setup.el= 可以方便地进行必要的设置，按照功能需求可
以使用 minimalistic 、standard 、all 以及包括了各种还在测试中的功能的
devel 。可以按照他的文档直接使用 =emms-setup.el= 进行设置。如果对预设的
几个都不满意的话，可以打开 =emms-setup.el= 文件，看看他是怎么设置的，然
后模仿着写出自己的设置。

我并不需要什么 browser 之类的东西，但是我需要一个舒服的播放列表，所以我
对 standard 的设置进行修改，得到我自己的设置：

#+BEGIN_EXAMPLE
    ;;; setup emms
    (add-to-list 'load-path
                 (expand-file-name "~/emacs/packages/emms"))

    (require 'emms-source-file)
    (require 'emms-source-playlist)
    (require 'emms-player-simple)
    (require 'emms-player-mplayer)
    (require 'emms-playlist-mode)
    (require 'emms-info)
    (require 'emms-cache)
    (require 'emms-mode-line)
    (require 'emms-playing-time)
    (require 'emms-score)
    (require 'emms-volume)

    (setq emms-playlist-default-major-mode 'emms-playlist-mode)
    (add-to-list 'emms-track-initialize-functions 'emms-info-initialize-track)
    (add-to-list 'emms-info-functions 'kid-emms-info-simple)
    (setq emms-track-description-function 'kid-emms-info-track-description)
    (when (fboundp 'emms-cache)
      (emms-cache 1))

    (setq emms-player-list
          '(emms-player-mpg321
            emms-player-ogg123
            emms-player-mplayer))

    (setq emms-info-asynchronously nil)
    (setq emms-playlist-buffer-name "*Music*")
    ;; use faster finding facility if you have GNU find
    (setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)

    ;;; My musics
    (setq emms-source-file-default-directory "~/entertainment/music")

    (add-hook 'emms-player-started-hook 'emms-show)

    ;; mode line format
    (setq emms-mode-line-format "[ %s "
          emms-playing-time-display-format "%s ]")
    (setq global-mode-string
          '("" emms-mode-line-string " " emms-playing-time-string))
#+END_EXAMPLE

***** 播放列表

****** 标签解析

mp3 标签的编码问题总是让我很头痛，乱码问题一直没有一个统一的解决办法，
所以我在使用播放器的时候总是设定为直接显示文件名而不是去解析里面的标签，
正好我的音乐整理得也是比较好的，一般都是以歌手作为目录，歌的名字作为文
件名的，所以我决定在 EMMS 里面也这么做。

EMMS 有 info 解析系统，可以通过 mp3info 等外部程序来解析标签，当然可以
配置自己的解析函数，我前面的配置里面有一句：

#+BEGIN_EXAMPLE
    (add-to-list 'emms-info-functions 'kid-emms-info-simple)
#+END_EXAMPLE

这里就是我的 =kid-emms-info-simple= 函数，仅仅根据文件名来解析出歌手和歌
名，其他信息我也不需要而且也无法直接通过我目前的文件名命名约定解析出来。

#+BEGIN_EXAMPLE
    (defun kid-emms-info-simple (track)
      "Get info from the filename.
    mp3 标签的乱码问题总是很严重，幸好我系统里面的音乐文件
    都放得比较有规律，所以我决定直接从文件名获取标签信息。"
      (when (eq 'file (emms-track-type track))
        (let ((regexp "/\\([^/]+\\)/\\([^/]+\\)\\.[^.]+$")
              (name (emms-track-name track)))
          (if (string-match regexp name)
              (progn
                (emms-track-set track 'info-artist (match-string 1 name))
                (emms-track-set track 'info-title (match-string 2 name)))
              (emms-track-set track
                              'info-title
                              (file-name-nondirectory name))))))
#+END_EXAMPLE

****** 列表显示

解析出标签之后 EMMS 会进行相应的格式化再显示出播放列表，当然可以自己定
制播放列表的显示格式，比如通过设定 =emms-track-description-function= 来
指定自己定制的函数：

#+BEGIN_EXAMPLE
    (defun kid-emms-info-track-description (track)
      "Return a description of the current track."
      (let ((artist (emms-track-get track 'info-artist))
            (title (emms-track-get track 'info-title)))
        (format "%-10s +| %s"
                (or artist
                    "")
                title)))
#+END_EXAMPLE

****** 交互使用

使用 =emms-playlist-mode-go= 命令即可进入正在播放的播放列表的 buffer 。
在这里可以方便地控制播放上一首、下一首、随机的某一首歌等。通过 =?= 可以
描述当前 mode ，并得到一份详细的可用命令列表。

我通常使用 =emms-play-find= 或者 =emms-play-directory-tree=
来打开一个播放 列表，然后用 =d= 删除不想要的曲目，并 =C-x C-s=
将其保存起来。

EMMS 还提供了打分机制。并可以设置最低分数，如果分数低于最低分数将不会
被播放。要是能像 Dired 或者 [[Mew.html][Mew]] 的 summary-mode
那样能够方便地贴标签并 进行批量操作就更舒服了！

***** 快捷键

随着越来越多的扩展加到 [[Emacs.html][Emacs]]
中，好用又好记的快捷键是越来越紧张了， EMMS 的快捷键只有绑定到前缀
=C-c e= 上比较合适了，比较难按，不过如果是在 EMMS 的播放列表的 buffer
里面的话，就可以直接使用单个字母的快捷键了，
所以直接定义一个方便的快捷键跳到 EMMS 的播放列表的 buffer 里面也是一个
不错的办法。以前用 Beep media player 的时候我就是把
[[Sawfish.html][Sawfish]] 窗口管理器 里面的 =H-x=
键绑定到显示播放器的窗口上，现在不用它了，这个快捷键自然也解放
出来了。这样，如果操作比较多的话，使用 =H-x= 跳到 EMMS 的播放列表，操作
完之后再 =q= 回到原来的 buffer ，还是比直接使用 =C-c e ...=
这一系列的快捷 键要舒服的。

#+BEGIN_EXAMPLE
    ;; global key-map
    (global-set-key (kbd "H-x") 'emms-playlist-mode-go)

    (global-set-key (kbd "C-c e t") 'emms-play-directory-tree)
    (global-set-key (kbd "C-c e x") 'emms-start)
    (global-set-key (kbd "C-c e v") 'emms-stop)
    (global-set-key (kbd "C-c e n") 'emms-next)
    (global-set-key (kbd "C-c e p") 'emms-previous)
    (global-set-key (kbd "C-c e o") 'emms-show)
    (global-set-key (kbd "C-c e h") 'emms-shuffle)
    (global-set-key (kbd "C-c e e") 'emms-play-file)
    (global-set-key (kbd "C-c e f") 'emms-play-playlist)
    (global-set-key (kbd "C-c e SPC") 'emms-pause)
    (global-set-key (kbd "C-c e a") 'emms-add-directory-tree)

    (global-set-key (kbd "C-c e r")   'emms-toggle-repeat-track)
    (global-set-key (kbd "C-c e R")   'emms-toggle-repeat-playlist)

    (global-set-key (kbd "C-c e s u") 'emms-score-up-playing)
    (global-set-key (kbd "C-c e s d") 'emms-score-down-playing)
    (global-set-key (kbd "C-c e s o") 'emms-score-show-playing)
    ;; playlist-mode-map
    (define-key emms-playlist-mode-map (kbd "SPC") 'emms-pause)
    (define-key emms-playlist-mode-map (kbd "+") 'emms-volume-raise)
    (define-key emms-playlist-mode-map (kbd "-") 'emms-volume-lower)
    (define-key emms-playlist-mode-map (kbd "<right>")
      (lambda () (interactive) (emms-seek +10)))
    (define-key emms-playlist-mode-map (kbd "<left>")
      (lambda () (interactive) (emms-seek -10)))
    (define-key emms-playlist-mode-map (kbd "<up>")
      (lambda () (interactive) (emms-seek +60)))
    (define-key emms-playlist-mode-map (kbd ("<down>"))
      (lambda () (interactive) (emms-seek -60)))
    (define-key emms-playlist-mode-map (kbd "S u") 'emms-score-up-file-on-line)
    (define-key emms-playlist-mode-map (kbd "S d") 'emms-score-down-file-on-line)
    (define-key emms-playlist-mode-map (kbd "S o") 'emms-score-show-file-on-line)
    (define-key emms-playlist-mode-map (kbd "S l") 'emms-score-less-tolerant)
    (define-key emms-playlist-mode-map (kbd "S m") 'emms-score-more-tolerant)
    (define-key emms-playlist-mode-map (kbd "S t") 'emms-score-set-tolerance)
    (define-key emms-playlist-mode-map (kbd "S s") 'emms-score-show-playing)
#+END_EXAMPLE

** ERC                                                             :erc:irc:

- [[~/Wally/Reference/Manual/ERCManual.pdf][ERCManual.pdf]]
- [[http://www.emacswiki.org/emacs/ERC][EmacsWiki:ERC]]


ERC is part of the GNU project. It is included with recent versions of
GNU Emacs.

ERC is included in released versions of GNU Emacs since v22.3.

使用： M-x erc

** Emacs 简体繁体转换

https://groups.google.com/forum/#!topic/cn.bbs.comp.emacs/0nNRwGaN1X8


#+BEGIN_QUOTE
似乎还没人写过，我觉得意义不大，
这种转换造成的问题比起的作用更多，
很多错别字或者读不通的文章都是这种转换造成的，
比如这句话：“国”字的繁体是“國”，
转成繁体后变成了：“國”字的繁體是“國”，意思完全不对了。
其实繁体的文章又不是读不懂，转换它干嘛？多此一举。
#+END_QUOTE

1. 使用 hanconvert ，失败 https://github.com/monkey413/tongwen-emacs

2. 使用谷歌翻译(网页版)

** emacs server evernote web                                        :chrome:

- [[https://www.emacswiki.org/emacs/Edit_with_Emacs][Emacswiki]]
- [[https://github.com/stsquad/emacs_chrome][Github]]

#+BEGIN_SRC emacs-lisp
  (require 'edit-server)
  (edit-server-start)
  (setq edit-server-new-frame t)
#+END_SRC

1. 在网页中大的文本编辑框中右键菜单或工具栏激活
2. Emacs 中会生成一个新的 Buffer
3. 在 Emacs Buffer 中编辑完成后 C-c C-c Post 到 Chrome 中
4. 百度搜索, Evernote 笔记不支持, 经测试
5. 主要是方便编辑 Markdown CPP 等语言

*** [[http://everet.org/chrome-edit-with-emacs.html][Chrome Edit With Emacs]]

大家在浏览器写长篇的东西时，有没觉得那个纯文本编辑框弱爆了？反正我是这
么觉得。像Github、[[http://stackoverflow.com/editing-help][stackoverflow]]、 Wiki等都支持Markdown，对于这种有语法
的文本，最好就是用个语法高亮自动排版的编辑器编辑。

在Firefox有 [[https://addons.mozilla.org/zh-cn/firefox/addon/its-all-text/][It's All Text!]] 这个插件，可以调用外部编辑器。

而在Chrome里面，也有插件，可以调用外部的Emacs进行编辑，而且可以根据规
则自动选择模式，非常方便。它的名字叫 [[http://www.emacswiki.org/emacs/Edit_with_Emacs][Edit With Emacs]]。

安装完插件后，Chrome所有的 *大Textarea* 都会出现一个蓝色的edit按钮，一按，
就可以用Emacs编辑里面的内容了。

[[http://everet.b0.upaiyun.com/imgs/2013-01-05-chrome-edit-with-emacs.markdown_20130105_170235_21731e8F.png%20][http://everet.b0.upaiyun.com/imgs/2013-01-05-chrome-edit-with-emacs.markdown_20130105_170235_21731e8F.png
]]

我们可以通过修改 =edit-server-url-major-mode-alist= 这个Association
List来添加网址规则，如下：


 #+BEGIN_EXAMPLE
     (when (and (require 'edit-server nil t) (daemonp))
     ;  (setq edit-server-new-frame nil)
       (edit-server-start))

     (setq edit-server-url-major-mode-alist
           '(("github\\.com" . markdown-mode)
       ("i\\.everet\\.org" . moinmoin-mode)))
 #+END_EXAMPLE


Edit With Emacs的工作原理是在Emacs里面开一个服务器，监听9292端口，然后
Chrome插件将文本POST到Emacs里面编辑，编辑完再返回回去。

不过它的Emacs端在编辑中文url的textarea会有bug（因为中文在url中被转义成
了%xx%xx这种形式，这个%在format的时候没转义好，于是format的时候就SB了），
提交了issue不过作者暂时没理，我们自己注释掉
=edit-server-find-or-create-edit-buffer=下面的=edit-server-log=就行了
（diff：
[[https://github.com/cedricporter/vim-emacs-setting/commit/a3069e50fd3bce90ca46be6ba784e47cd9d198ca#emacs/.emacs.d/plugins/edit-server.el][edit-server]]
）。

** 临时文件和备份文件                                 :backup:recovery:备份:
*** recover-this-file

Recover the visited file--get contents from its last auto-save file.

(recover-file FILE)

Visit file FILE, but get contents from its last auto-save file.

前者使用更方便。

*** [[http://blog.useasp.net/archive/2014/07/18/emacs-temporary-files-and-backup-files-for-edited-file.aspx][Emacs的临时文件和备份文件]]                                        :blog:

Emacs在编辑文件的时候实际上并非对文件本身进行编辑，而是会将要编辑的文件内容拷贝到[[http://blog.useasp.net/tags/Emacs][Emacs]]的一个临时缓冲区（buffer）内，而我们编辑的时候，也只是对这个缓冲区的内容进行更改。为了便于在需要的时候能够方便的应对，Emacs会自动产生一些其他的辅助文件，其中最常见的有临时文件和备份文件。

[[http://blog.useasp.net/tags/临时文件][临时文件]](Auto-Save file)

Emacs的临时文件的文件名是使用“#”包围，这种文件一般是在Emacs中编辑时，emacs自动保存的文件，他在编辑文件的同一个目录内生成一个以=#file-name#=这样的文件，这个文件会在我们保存文件之后被emacs删除。这个文件的作用是为了防止在进行编辑的时候异常退出造成的损失。

#+BEGIN_EXAMPLE
    1. 在Emacs内使用[C-x,C-f]打开要编辑的文件(test-file.txt)
    2. 在打开的buffer中编辑内容
    3. Emacs自动侦测buffer是否更改，如果更改会自动Auto-Save
    4. 此时我们能够在编辑的文件同一目录下看到临时文件为:
        #test-file.txt#
    5. 使用[C-x,C-s]保存当前buffer
    6. 当前buffer中的内容被写入文件,#test-file.txt#消失——被Emacs自动删除
#+END_EXAMPLE

 如果你不想产生这个临时文件也是有办法的，就是关闭自动保存功能，在你启动的=.emacs=文件内添加下面这行

#+BEGIN_EXAMPLE
    (setq auto-save-default nil) ;; 默认值是t， 要关闭直接用nil更改默认值
#+END_EXAMPLE

 当然，一般是不建议关闭的，因为在异常退出之后，如果你想要恢复自己辛苦编辑的内容，它能帮上大忙，你只要在emacs内打开你要恢复的文件，然后在恢复即可。

#+BEGIN_EXAMPLE
    1. 打开要恢复的文件，如：test.txt
    2. [M-x]
    3. 输入:recover-file 回车
    4. 确认恢复
#+END_EXAMPLE

用起来还是不错的。



[[http://blog.useasp.net/tags/备份文件][备份文件]]（Backup files）

备份文件是在第一次保存的时候，如果保存的文件已经存在，Emacs会自动将当前已经存在的文件重命名作为备份文件，并将当前buffer的内容写入同名的文件中来替代原来的文件。而备份文件使用的是一个“～”作为后缀(如：=file-name~=)。大概的流程如下：

#+BEGIN_EXAMPLE
    1. 打开文件,如:MitchellChu.txt
    2. 编辑...（这涉及到临时文件的问题，忽略）
    3. 在emacs内发出保存指令
    4. emacs先将MitchellChu.txt保存为：MitchellChu.txt~
    5. 保存完成后，Emacs将当前buffer的内容写入MitchellChu.txt
    注意：此时的MitchellChu.txt已经不再是原来的那个文件，但所有连接到原来那个文件的，现在被这个新文件接管。
#+END_EXAMPLE

 当然，上面的这个流程是可以定制的，比如，我们可以要求emacs通过拷贝，而非重命名的方式来备份文件，在=.emacs=或者Emacs内设置个变量就成：

#+BEGIN_EXAMPLE
    ;; 在.emacs文件中添加下面这行表示使用拷贝模式
    (setq backup-by-copying t) ;; 默认是nil，开启之后使用拷贝模式

    ;;;;;;;;;;;;;;;
    ;; 如果是在Emacs中
    ;; 你可以通过直接设置这个变量的值来改变模式
    ;;;;;;;;;;;;;;;

    ;; [M-x]
    ;; set-variable
    ;; backup-by-copying
    ;; t
    ;; 回车，即可修改模式
#+END_EXAMPLE

 这里同上，还是建议不要修改这个值，因为重命名的方式Mitchell个人感觉要优于拷贝模式。

备份文件默认仅会发生在Emacs第一次写入的时候，即，开启Emacs之后，第一次打开文件并保存的时候，编辑期间多次保存并不能产生多次备份动作。然而，下次重新打开Emacs，再次执行同样的动作的时候，同样在第一次保存时，Emacs是会将上次的备份文件覆盖的（如果有）。这也许是你不想要的，这时候你可以通过设置，让每次的备份文件都不同。具体的操作涉及到比较多的参数，这个功能觉得没有太大用处的，这里就不赘述，如果感兴趣，可以参看：=version-control=。

** ediff                                                        :diff:ediff:
*** [[http://www.zzbaike.com/wiki/Emacs/EDIFF#jump-to-nav][Emacs/EDIFF]] :blog:

**** 软件概况

授权协议：免费软件

运行环境：Emacs

官方网站：[[http://www.dirfile.com/freeware/ediff.htm]]

软件下载：[[http://www.dirfile.com/freeware/ediff.htm][官方下载]]

**** 简介

Ediff是Emacs提供的一种实时浏览文件间不同(diff)的工具，它可以比较两个或
三个文件间的不同，分别表示为file-A, file-B 或 file-C，也可以比较两个或
三个emacs-buffer间的不同。Ediff的另一个强有力特性则是可以把正的比较的
文件合并成第三个文件。另外， Ediff还可以对目录进行操作。

Ediff浏览文件的差异是在Emacs的两个Buffer上进行，分别使用不同的颜色表示
所存在的差异，而且Ediff对差异区域的差异进行了“细化”，diff程序只进行
到“行”级别比较，而Ediff则是基于diff程序的输出上，对差异区域进行更细
致的比较，从而得到区域内“单词”级别上的差异比较。从而使比较文件间的细
致不同更加容易。

Ediff的更强功能：Ediff可以“忽略”某些细微的差别，例如有两个程序几乎相
同，但是其中都些变量的命名却不一样，如bar变量在另一个程序中却都foo，这
对程序而言是“相同”，如果用一般的diff程序来查看该两程序的差别，则这种
没有意义的变量名不同将充满了整个差异输出，从而不易找到真正的“程序不
同”，而使用Ediff则可以忽略这类不同，很容易就定位我们真正想要的差异。

Ediff的特点是它与[[/wiki/%E7%BC%96%E8%BE%91%E5%99%A8][编辑器]]（即
Emacs本身）集成在一起，所以在比较的过程可以方便的编辑被比较的文件。例
如语法高亮仍然有效。它还提供了对版本控制工具的支持，例如用
ediff-revision命令可以方便的比较不同版本之间的区别。

**** Ediff命令

- 比较两文件： ‘M-x ediff-files'‘M-x ediff'(以后略去M-x)比较两个
- Buffer： ‘ediff-buffers'比较三个文件： ediff-file3 ediff3比较三个
- Buffer： ediff-buffer3交互式使用一个patch： ediff-patch-file epatch

以上是一些主要的命令，这些命令在运行时可能会提示输入一些参数，如文件名
等，同时都能很智能地提供一些合适的默认值。

Ediff命令被执行后，进行所谓的‘Ediff Session'它接受一些Ediff命令以决定
Ediff的行为。具体的表现是Ediff另外建立一个窗口(称为“Quick Help
window”)，当聚焦在该窗口输入则被认为是Ediff命令，否则仍是一般的Emacs
编辑行为，即还可以实时的编辑你正在比较的文件或Buffer。

在“Quick Help window”上输入“？”使该窗口变大或是缩小，输入q并确认则
完成比较退出Ediff Session。

常用的Session Command：

***** 移动命令

- v ( V )

把文件-A，文件-B，文件-C(如果有)，同步向下(向上)滚动，

- < ( > )

把文件-A，文件-B，文件-C(如果有)，同步向左(向右)滚动，

- j

跳到差异区域，可以先加数值参数，如 ‘3j'则跳到第三个差异区域，‘j'则跳
到第一个差异区域，则‘-2j'跳到倒数第二个差异区域。跳到某区域后，再输入
的编辑命令就是针对该区域执行，即有一个“当前区域”的概念，而‘j'命令则
就是用于使用绝对参数设置当前活动区域。

- n (或 SPC 空格)

跳到下一个差异区域，并设其为当前区域，

- p (或 DEL)

跳到前一个差异区域，并设其为当前区域，

- ga ( gb gc )

根据光标在Buffer-A(或Buffer-B, Buffer-C)中的位置，设置一个离它们最近的
差异区域为当前活动区域

***** 编辑命令

- a

比较模式：把Buffer-A的内容复制到Buffer-B，可以使用‘rb'恢复Buffer-B的
内容，

合并模式： 把Buffer-A的内容复制到合并Buffer. 可以使用‘r'恢复旧内容，

- b

比较模式：把Buffer-B的内容复制到Buffer-A，可以使用‘ra'恢复Buffer-A的
内容，

合并模式： 把Buffer-B的内容复制到合并Buffer. 可以使用‘r'恢复旧内容，

- ra ( rb rc )

分别用于恢复 Buffer-A Buffer-B Buffer-C 差异区域中的被修改的内容。

***** 三方比较的编辑命令

- ab

把Buffer-A的内容复制到Buffer-B，可以使用‘rb'恢复Buffer-B的内容，

- ac

把Buffer-A的内容复制到Buffer-C，可以使用‘rc'恢复Buffer-C的内容，

- ba bc ca cb

分别把Buffer-B(C)的内容复制到相应的Buffer-ABC，同时仍可以使用‘ra(bc)'
恢复相应的被修改的内容。

***** Buffer属性设置命令

- A ( B C )

改变Buffer-A, buffer-B, buffer-C的只读属性，是Toggle命令。

*** [[http://caobeixingqiu.is-programmer.com/posts/6783.html#article_wrap][Emacs 之 ediff 学习]] :blog:

**** diff

使用 /Unix/ 的 =diff=
工具程序，你可以找到两个文件的不同之处。所比较的两个文件可能是：

-  原始文件与更改之后的文件
-  不同的两个人编辑的同一个文件(譬如，一个项目中协同工作的两个人编辑的文件)
-  不同机器上的两个文件(譬如，你的 =.emacs=
   文件可能在家和工作场合各有一份拷贝)

对于后面两种文件，两个要比较的文件共有一个原始的文件。此种情况下,
=diff3=
程序会轻松的帮你创建一个文件，文件内容是对原始文件所做的修改记录。

**** Ediff

除非两个文件的不同之处很少，否则 =diff= 的输出将会很难阅读。幸运的是,
=Emacs= 提供了一个 =diff= 的接口，称为 =Ediff= ,将此工作变得简单。不仅将
=diff= 的输出变得可读之外， =Emacs=
还提供了合并文件函数以及其他的应用补丁，更多的细节信息，可以参考 =Ediff=
的 =info= 文档。 =Emacs=
还能比较不同文件夹下的两个文件，若你在不同地方工作，这个功能可能会非常有用(如你的Lisp配置文件。

**** 用 Ediff 来比较文件

=Ediff= 比较的项目有：( 可用 M-x 来启动 )

比较项目

说明

ediff-regions-linewise, ediff-regions-

询问两个缓冲区的名字，然后比较相应的区域。不过你只能在每一个缓冲区中选定一个区域，而不能比较一个文件缓冲区的两个区域。(
TODO: 第15个小时的内容 "了解文件"
，会提供一个比较同一个文件中的两个区域的方法。)

ediff-buffers

询问两个缓冲区的名字，然后比较

ediff-files

询问两个文件的名字，加载之，然后比较

ediff-windows-linewise, ediff-windows-wordwise

让你选两个窗口，然后比较窗口的内容。 =-linewise-= 函数比 =-wordwise-=
函数要快，但另一方面， =-wordwise-= 工作方式更好，尤其是小区域作业时。
=-linewise-= 一行一行地比较， =-wordwise-= 一个单词一个单词地比较。

**** 一些Ediff 控制命令

在 control buffer 中，按键。

快捷键

命令

说明

q

ediff-quit

关闭 ediff control buffer， 并退出 ediff

Space 或 n

ediff-next-difference

下一个差异处

Del 或 p

ediff-previous-difference

上一个差异处

[n]j

ediff-jump-to-difference

有数字前缀 [n] 修饰，第n个差异处,n可为负数

v 或 C-v

ediff-scroll-vertically

所有缓冲区同步向下滚动

V 或 M-v

ediff-scroll-vertically

所有缓冲区同步向上滚动

<

ediff-scroll-horizontally

所有缓冲区同步向左滚动

>

ediff-scroll-horizontally

所有缓冲区同步向右滚动

(vertical bar)

ediff-toggle-split

切换缓冲区布局方式, 水平和竖直

m

ediff-toggle-wide-display

在正常 frame 大小和最大化之间切换

a

ediff-copy-A-to-B

把Buffer-A的内容复制到Buffer-B

b

ediff-copy-B-to-A

把Buffer-B的内容复制到Buffer-A

r a 或 r b

ediff-restore-diff

恢复 Buffer-A 或 Buffer-B 差异区域中的被修改的内容

A 或 B

ediff-toggle-read-only

切换 Buffer-A 或 Buffer-B 的只读状态

g a 或 g b

ediff-jump-to-difference-at-point

根据光标在缓冲区中的位置，设置一个离它们最近的差异区域为当前活动区域

C-l

ediff-recenter

恢复先前的所有缓冲区比较的高亮差异区。

!

ediff-update-diffs

重新比较并高亮差异区域

w a 或 w b

ediff-save-buffer

保存 Buffer-A 或 Buffer-B 到磁盘

E

ediff-documentation

打开 Ediff 文档

z

ediff-suspend

关闭 ediff control buffer, 只是挂起，可在以后恢复 ediff 状态

**** 比较三个文件

此种需要大都发生在两个文件共有一个原始的文件。假设 C ---> A, C ---> B.
A与B可能都对C进行了修改，你需要知晓，究竟A和B哪个对C做了什么修改。此时就需要比较三个文件了。

假如A有一部分内容，而在B中不存在，可能是下列两种情况之一：

-  A 中增添了这部分内容
-  B 中删除了这部分内容

你就应该比较A B C 三个文件来确定究竟是哪种情况。

***** 操作

有两个函数

函数

说明

ediff-files3

比较三个文件

ediff-buffers3

比较三个缓冲区

***** 具体操作

比较两个文件或缓冲区的所有操作，几乎都适于三个比较。不过在进行缓冲区差异区从A到B拷贝的操作略有不同：

快捷键

说明

cb

将 Buffer-C 拷贝到 Buffer-A

ab

将 Buffer-A 拷贝到 Buffer-B

以此类推，在 Buffer-A , Buffer-B, Buffer-C之间的操作可以很容易猜出。

**** Ediff Session

你可能同时要比较好多对文件，你可以同时拥有多个 =Ediff= =Session= 。按
=z= 挂起当前 =Ediff= =session= ,然后启动另一个 =Ediff= =session=
就可以了。 此时，在 =control= =buffer= 中按 =R= 或是按下 M-x eregistry,
将会打开一个 =*Ediff= =Registry*= 的缓冲区，此缓冲区包含当前运行的所有
=Ediff= =Sessions=.可以选择一个 =Ediff= =session= 来进入。

**** 合并文件

**** 比较文件目录

**** 与版本控制系统(VC) 一块儿工作
** smex                                                               :smex:
- State "DONE"       from "TODO"       [2015-03-21 六 19:12]
https://github.com/nonsequitur/smex/blob/master/README.markdown

1. 安装配置
   安装: MEPLA
   配置:
   #+BEGIN_EXAMPLE
     (require 'smex)
     (smex-initialize)
     (global-set-key (kbd "M-X") 'smex-major-mode-commands)
   #+END_EXAMPLE

2. Feature
   + smex-major-mode-commands runs Smex, limited to commands that are
     relevant to the active major mode.
   + *C-h f* while Smex is active, runs describe-function on the
     currently selected command.
   + *M-.*  jumps to the definition of the selected command
   + *C-h w* shows the key bindings for the selected command. (Via
     where-is.)
   + Smex keeps a file to save its state betweens Emacs sessions. The
     default path is "~/.smex-items"; you can change it by setting the
     variable *smex-save-file*
   + Set smex-history-length to change the number of recent commands
     that Smex keeps track of.

** ibuffer                                                         :ibuffer:
|-------------+-----------------------------------------------|
| M-x ibuffer | 打开ibuffer                                   |
|             | 注:C-x C-b和C-x b被绑定到helm功能             |
| q           | 关闭ibuffer                                   |
|-------------+-----------------------------------------------|
| / m         | 根据模式筛选                                  |
| / /         | 去除筛选条件                                  |
| / g         |                                               |
| / n         | 根据buffer名称筛选                            |
| / c         | 根据内容筛选                                  |
| / f         | 根据文件名筛选                                |
| / >         | 根据buffer大小筛选                            |
| / <         | 根据buffer大小筛选                            |
|-------------+-----------------------------------------------|
| ,           | 在排序方法中循环切换                                    |
| s i         | 倒序                                          |
| s a         | 根据名称排序                                  |
| s f         | 根据文件名排序                                |
| s v         | 根据最后浏览时间排序                          |
| s s         | 根据大小排序                                  |
| s m         | 根据模式排序                                  |
|-------------+-----------------------------------------------|
| o           | 在其它窗口打开当前buffer,并将光标切换到该窗口 |
| C-o         | 在其它窗口打开当前buffer,光标停留在当前窗口   |
| g           | 更新ibuffer                                   |
| m           | 标记当前buffer                                |
| u           | 取消标记                                      |
| A           | 打开标记buffer或当前buffer                    |
| S           | 保存buffer                                    |
| D           | 关闭buffer                                    |
| V           | 放弃buffer的更改                              |
|-------------+-----------------------------------------------|

** 计算器                                                             :calc:

*** Quick Calculator模式
+ 命令  M-x quick-calc
+ 快捷键  C-x * q
+ MiniBuffer中显示
+ C-g  退出Quick Calculator模式。

*** programmable calculator
命令M-x Calc
1) 数学计算
   如果要计算1 + 2的值，输入”1 回车 2 回车 +”即可。
2) 在二进制、八进制、十进制与十六进制之间进行转换
   输入”10 回车  *d2* ，这个d2会把窗口中的所有数字显示为二进制形式，所
   有的数字都会以”2#”开头，以表示它们是二进制形式。如果要重新用十进
   制显示，则输入 *d0* 即可。
   同样，也可以用 *d8*，*d6* 来显示八进制和十六进制的格式。同样，输入
   八进制数以”8#”开头，输入十六进制以”16#”开头。
3) 温度单位转换
   如果你想知道40 F°是多少C°，输入40 回车 ut dF 回车 dC 回车即可，

如果要退出programmable calculator这个计算器，则输入”q”即可。

总的来说，这个programmable calculator风格有点怪异，不是太复杂的功能，
还是不要用为好。

*** calc
****  概述
   “Calc” 是 emacs 自带的一个计算器，提供了许多方便的数值计算功能，
   可以让你在不离开 emacs 的情况下进行计算。但 calc 与 gnome 环境下的
   gcalctool 或者 windows 自带的计算器不同，它不是一个掌上计算器的模拟
   程序，操作不像上述两个计算器那样直观，需要记忆一些指令，相应的，提
   供的功能也更加强大了一些。
**** 打开计算器
   *C-x * c* ： 打开计算器。
   *C-x * t* ： 打开计算器，同时也打开 calc 的在线帮助。
**** 基本运算
***** 逆波兰表达式
calc 按照逆波兰表达式的方式进行计算。比如，你要计算2+3的结果，要按照如
下顺序在 calc 的 buffer 中输入：
2 <RET> 3 <RET> + (<RET> 表示回车)
假设，你当前输入了：
1 <RET> 2 <RET> 3 <RET>
然后，输入加号 ‘+’，那么 calc 将会计算 2+3 的结果， 并保持数字1不变，
calc 的 buffer 中会剩下 1,5两个数字。此时，再次输入’+'， calc 会计算
1+5 的结果，此时 calc 的 buffer 中只剩下一个数字 ‘6’。

很多时候，可以省略一个<RET>，比如计算2+3时，你可以省略第二个<RET>，只
输入：
2 <RET> 3 +

***** 基本运算符号
‘+’：加号
‘-’：减号
‘*’：乘号
‘/’：除号
‘%’：取余，比如6%5=1, 30%4=2
‘&’：取倒数
‘^’：幂运算，当然也可以用做开方运算，比如4^0.5=2

***** 代数运算
当我们只是想简单的对一系列数字进行代数运算时，使用逆波兰表达式不是很直
观，因此， calc 提供了一个更加直接的指令：

*‘* （就是分号旁边的那个按键）
比如，在 calc 中按’，然后输入算式：
(3^2 + 4^2) ^ 0.5
calc 会直接给出答案：5。

**** 数制转换
在 calc 中使用指令 *d2,d8,d0,d6* 可以在2进制，8进制，10进制，16进制之间切
换（d2 就是先按’d'，再按’2′，其他也以此类推）。calc 默认是使用10进
制进行计算。当进入2进制，8进制，16进制模式时，mode line上会给
出’Bin’，’Otc’，’Hex’字样的提示，默认的10进制模式是不会有任何提
示的。当进入任何一种进制模式的时候，输入的数字都是以10进制模式输入的。
比如在16进制模式下，输入：
10 <RET>
此时，calc中显示的数字是’A'，而不是16进制的10。
如果你想按照当前的进制输入数字，需要在键入数字前按‘#’，比如，在16进制模式下输入：
#10 <RET>
此时，calc中显示的数字就是16进制的10,而不是A。

**** 三角运算
***** 逆波兰表达式下的运算符
S：正弦
C：余弦
T：正切
比如，想计算30度角的正弦值，输入：
30 <RET> S（可以省略 <RET>）
calc 会给出答案：0.5
***** 在代数模式下的运算符
sin：正弦
cos：余弦
tan：正切
比如，输入
’sin(30)2+cos(30)2
我这里的calc给出答案：
0.999999999999
***** 弧度制和角度制的转换
*m r* ：进入弧度制（mode line 上显示 Rad）
*m d* ：进入角度制（mode line 上显示 Deg）

**** 向量运算与矩阵运算
输入向量与矩阵的方法很简单, *方括号* 。
比如，输入一个三维向量：
[ 1 <RET> 2 <RET> 3 <RET> ]
此时，calc 中就会显示：
[1, 2, 3]
（实际上最后一个<RET>可以省略）
输入矩阵的方法与向量类似，比如，我们输入一个2×2的矩阵：
[ [ 1 <RET> 2 <RET> ] [ 3 <RET> 4 <RET> ] ]
此时， calc 中会显示：
[ [ 1, 2 ]
[ 3, 4 ] ]
calc中专门的矩阵运算法则我没有研究过，我自己平常会用到的，也就是矩阵求
逆。只需输入一个矩阵，然后按 *&* 就可以了（还记得“&”么？如果对数字使
用“&”运算，就是求倒数，对于矩阵，就是求逆）。

**** 复制，删除，撤销
输入一个数字（或矩阵），然后按<RET>，可以复制该数字（或矩阵）到整个运
算 *堆栈的最顶部*

Backspace 或 Del 可以删除运算堆栈最顶部的数字（或矩阵）。

用 *U* 或者 *C-_* 或者 *M-x calc-undo* 可以在计算器中执行撤销操作
**** 定义函数
在 calc 中你可以定义自己的函数。定义函数的指令是：
Z F
比如，先输入一个公式：
‘a + 2b
然后键入：
Z F m
再回答几个 minibuffer 中提出的问题，就定义了一个以 ‘z m’为快捷键的函数了。
此时，再输入两个数字：
1 <RET> 2 <RET>
然后按：
z m
就会按照公式计算出1+2*2的结果，也就是5。

使用指令：
Z P
可以把函数保存到文件，这样在以后的 emacs 会话中都可以使用这个函数。
比如，输入：
Z P m
可以把刚才定义的函数’z m’保存到由变量 calc-settings-file 指定的文件中。以后每次进入 calc 时，保存在这只文件中的函数也会被自动加载。calc-settings-file 的默认值是”~/.calc.el”，我通常喜欢把它挪到.emacs.d 里面：
*** 小结
|---------+----------------|
| C-x * c | M-x calc       |
| C-x * q | M-x quick-calc |
|---------+----------------|
*** [[http://blog.163.com/wobutianl@126/blog/static/1335848201293033635805/][emacs 计算器  ]] :blog:


1. Quick Calculator模式

在Emacs23里，可以用命令M-x quick-calc或快捷键C-x * q来启动Quick Calculator模式。这是一个非常小巧的工具，启动后会在minibuffer里提示输入数学计算式，回车就显示结果。这个模式能非常方便地用来做一些基本的数学运算，比用系统自带的计算器来得方便、快捷一些。

用C-g可以退出Quick Calculator模式。

2. programmable calculator

在Emacs23里，用命令M-x Calc或是通过菜单”Tools –> Programmable Calculator“就可以启用programmable calculator模式。总的来说，programmable calculator模式可以有以下三方面的用途：

(1) 数学计算

如果要计算1 + 2的值，输入”1 回车 2 回车 +”即可。

(2) 在二进制、八进制、十进制与十六进制之间进行转换

输入”10 回车 d2″，这个d2会把窗口中的所有数字显示为二进制形式，所有的数字都会以”2#”开头，以表示它们是二进制形式。如果要重新用十进制显示，则输入”d0″即可。

同样，也可以用”d8″，”d6″来显示八进制和十六进制的格式。

如果要把1010这样的二进制数转成十进制数，则输入”2#1010 回车”，然后再输入”d0″就可以显示该数字的十进制格式。

同样，输入八进制数以”8#”开头，输入十六进制以”16#”开头。

(3) 温度单位转换

如果你想知道40 F°是多少C°，输入”40 回车 ut dF 回车 dC 回车”即可，这下就不会再为这些温度单位换算弄得晕头转向了吧！

如果要退出programmable calculator这个计算器，则输入”q”即可。

总的来说，这个programmable calculator风格有点怪异，不是太复杂的功能，还是不要用为好。
** google-translate                                                 :google:

+ https://github.com/atykhonov/google-translate
+ https://github.com/atykhonov/google-translate/issues/24

** define-minor-mode
+
  http://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Minor-Modes.html


define-minor-mode is an autoloaded Lisp macro in `easy-mmode.el'.

(define-minor-mode MODE DOC &optional INIT-VALUE LIGHTER KEYMAP &rest
BODY)

Define a new minor mode MODE.
This defines the toggle command MODE and (by default) a control variable
MODE (you can override this with the :variable keyword, see below).
DOC is the documentation for the mode toggle command.

The defined mode command takes one optional (prefix) argument.
Interactively with no prefix argument, it toggles the mode.
A prefix argument enables the mode if the argument is positive,
and disables it otherwise.

When called from Lisp, the mode command toggles the mode if the
argument is `toggle', disables the mode if the argument is a
non-positive integer, and enables the mode otherwise (including
if the argument is omitted or nil or a positive integer).

If DOC is nil, give the mode command a basic doc-string
documenting what its argument does.

Optional INIT-VALUE is the initial value of the mode's variable.
Optional LIGHTER is displayed in the mode line when the mode is on.
Optional KEYMAP is the default keymap bound to the mode keymap.
  If non-nil, it should be a variable name (whose value is a keymap),
  or an expression that returns either a keymap or a list of
  arguments for `easy-mmode-define-keymap'.  If you supply a KEYMAP
  argument that is not a symbol, this macro defines the variable
  MODE-map and gives it the value that KEYMAP specifies.

BODY contains code to execute each time the mode is enabled or disabled.
  It is executed after toggling the mode, and before running MODE-hook.
  Before the actual body code, you can write keyword arguments, i.e.
  alternating keywords and values.  These following special keywords
  are supported (other keywords are passed to `defcustom' if the minor
  mode is global):

:group group	custom group name to use in all generated `defcustom' forms.
		Defaults to MODE without the possible trailing "-mode".
		Don't use this default group name unless you have written a
		`defgroup' to define that group properly.
:global GLOBAL	If non-nil specifies that the minor mode is not meant to be
		buffer-local, so don't make the variable MODE buffer-local.
		By default, the mode is buffer-local.
:init-value VAL	Same as the INIT-VALUE argument.
		Not used if you also specify :variable.
:lighter SPEC	Same as the LIGHTER argument.
:keymap MAP	Same as the KEYMAP argument.
:require SYM	Same as in `defcustom'.
:variable PLACE	The location to use instead of the variable MODE to store
		the state of the mode.	This can be simply a different
		named variable, or a generalized variable.
		PLACE can also be of the form (GET . SET), where GET is
		an expression that returns the current state, and SET is
		a function that takes one argument, the new state, and
		sets it.  If you specify a :variable, this function does
		not define a MODE variable (nor any of the terms used
		in :variable).

:after-hook     A single lisp form which is evaluated after the mode hooks
                have been run.  It should not be quoted.

For example, you could write
  (define-minor-mode foo-mode "If enabled, foo on you!"
    :lighter " Foo" :require 'foo :global t :group 'hassle :version "27.5"
    ...BODY CODE...)

#+BEGIN_SRC emacs-lisp
  (define-minor-mode tagerill-mode
    "tagerill minor mode"
    :init-value nil
    :lighter tagerill
    ;; :keymap tagerill-mode-map
    :group 'tagerill)
#+END_SRC

** epub                                                               :epub:
*** ebook -> org-mode
Calibre -> htmlz -> unzip -> [[anchor:pandoc][pandoc]]:

#+BEGIN_EXAMPLE
$ cp ~/Calibre\ Library/Metz*/Practi*/*.htmlz ./book.htmlz
$ unzip -q book.htmlz
$ pandoc ./index.html -o book.org
#+END_EXAMPLE
*** org-mode -> ebook
pandoc
*** epub-mode
#+BEGIN_EXAMPLE
;;; epub-mode.el --- Minor mode for reading epub e-books in Emacs

;; Copyright (C) 2011 Jayson Williams

;; Author: Jayson Williams <williams.jayson@gmail.com>
;; Last update: 2011-10-26
;; Version: 0.1 (early development)
;; Keywords: epub
;; URL: https://sourceforge.net/projects/epubmode/
;; Contributors:
;;

;; epub-mode is a minor mode for viewing epub documents in Emacs

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth floor,
;; Boston, MA 02110-1301, USA.

;; Installation

;; While in early development, install by visiting epubmode.el and
;; evaluating the buffer.

;; To use epubmode do:
;; M-x get_epub

;; Ener the path to the epub document, and epub mode will open a text
;; version of the document in Emacs

(defun get_epub (epub_file)
  "Read epub files in emacs"
  (interactive "fname of epub: ")
  (message "%s" epub_file)
  (setq working_folder (concat epub_file "-working"))
  (setq mk_working_dir_cmd (concat "mkdir " working_folder))

  (if (file-directory-p working_folder)
      (message "working folder present")
    (progn
     (shell-command mk_working_dir_cmd)
     (setq unzip_epub_cmd (concat "unzip " epub_file " -d " working_folder))
     (shell-command unzip_epub_cmd)))

  (setq directories (directory-files working_folder nil "[^.]"))
  (setq directories (delete "META-INF" directories))
  (setq count (length directories))
  (setq index 0)
  ;;; create html_files & book_txt after storing existing directories
  (shell-command (concat "mkdir " working_folder "/htm_files"))
  (shell-command (concat "mkdir " working_folder " /book_text"))

  (while (/= index count)
    ;;;need to find the folders with html docs in it
    (setq folder (elt directories index))
    (setq index (1+ index)) ;;;for next iteration
    (setq inner_folder_path (concat working_folder "/" folder))

    (if (file-directory-p inner_folder_path)
        (progn
          (message inner_folder_path)
          (sleep-for 2)
          (shell-command (concat "cp " inner_folder_path "/*.htm* " working_fol)
      (message "not a folder")))
  (shell-command (concat "touch " working_folder "/book.txt"))

  ;;;Get listing of htm-files , convert to txt, place in book.txt
  (setq index 0)
  (setq htm_files (directory-files (concat working_folder "/htm_files") nil "[^.]")
  (setq htm_files_count (length htm_files))
  ;;;(message "%d files in htm_folder" htm_files_count)

  (while (/= index htm_files_count)
    (setq htm_file (elt htm_files index))
    (message "on htm_files %d: %s" index htm_file)
    (setq index (1+ index))
    (setq source (concat working_folder "/htm_files/" htm_file))
    (setq convert_to_txt (concat "html2text -ascii -nobs " source ">>" working_)
    (shell-command convert_to_txt))
  (find-file (concat working_folder "/book.txt"))

  )
#+END_EXAMPLE

*** read-epub
#+BEGIN_EXAMPLE
;;;;;;;;;;;;;;;;; begin read-epub
;; read-epub
;; Read an epub in Emacs.

;; Requires Calibre package, to provide ebook-convert.

;; M-x read-epub
;; and give the path to the epub you want to read.

;; Inspired by epub-mode, but much simpler because it
;; depends on the Calibre package to do the work.

;; No error checking :) see the *messages* buffer if
;; it doesn't work.

;; 2014-06-08 Bob Newell (bobnew...@bobnewell.net),
;;            Honolulu, Hawai`i

;; Released into the public domain.

(defun read-epub (epub-file)
  "Read epub files in emacs"
  (interactive "fname of epub: ")
  (message "Converting %s, this may take some time" epub-file)
  (shell-command (concat "ebook-convert " epub-file " " epub-file".txt" ))
  (find-file (concat epub-file ".txt"))
  (mark-whole-buffer)
  (fill-paragraph nil 1)
  (save-buffer)
  (delete-other-windows)
  (goto-char (point-min))
)

;;;;;;;;;;;;;;; end read-epub
#+END_EXAMPLE

** Serial Port                                                      :serial:
*** Serial Terminal                                              :terminal:

if you have a device connected to a serial port of your computer, you
can communicate with it by typing m-x *serial-term*. this command asks
for a serial port name and speed, and switches to a new term mode
buffer. emacs communicates with the serial device through this buffer
just like it does with a terminal in ordinary term mode.

the speed of the serial port is measured in bits per second. the most
common speed is 9600 bits per second. you can change the speed
interactively by clicking on the mode line.

a serial port can be configured even more by clicking on “8n1” in
the mode line. by default, a serial port is configured as “8n1”,
which means that each byte consists of 8 data bits, no parity check
bit, and 1 stopbit.

if the speed or the configuration is wrong, you cannot communicate
with your device and will probably only see garbage output in the
window.

*** Term Mode                                                        :term:

the terminal emulator uses term mode, which has two input modes. in
line mode, term basically acts like shell mode (see shell mode). in
char mode, each character is sent directly to the subshell, except for
the term escape character, normally c-c.

to switch between line and char mode, use these commands:

+ *c-c c-j*
  switch to line mode (term-line-mode). do nothing if already in line
  mode.

+ *c-c c-k*
  switch to char mode (term-char-mode). do nothing if already in char
  mode.

the following commands are only available in char mode:

+ *c-c c-c*
  send a literal c-c to the sub-shell.

+ *c-c char*
  this is equivalent to c-x char in normal emacs. for example, c-c o
  invokes the global binding of c-x o, which is normally
  ‘other-window’.

term mode has a page-at-a-time feature. when enabled, it makes output
pause at the end of each screenful:

+ *c-c c-q*
  toggle the page-at-a-time feature. this command works in both line
  and char modes. when the feature is enabled, the mode-line displays
  the word ‘page’, and each time term receives more than a screenful
  of output, it pauses and displays ‘**more**’ in the
  mode-line. type spc to display the next screenful of output, or ? to
  see your other options. the interface is similar to the more
  program.

** EasyPG: 加密                                                 :easypg:gpg:
*** 参考:

+ http://www.baidu.com/link?url=ej9AHfY5QR5sRKUofHUYRnu8U-G2A5BO5SghohjAKGLTVnlD2luM0JUO7Fa5mijPnVioLyZV4Xbxb5GkEQr9XINO1YRyYXavf0EtjUZckre&wd=emacs%20%E5%8A%A0%E5%AF%86&issp=1&f=8&ie=utf-8&tn=baiduhome_pg
+ [[http://www.emacswiki.org/emacs/EasyPG][EmacsWiki]]

*** overview

对于一些比较隐私的文件，比如说帐号、密码等，如果不用文件记下来则容易忘
记；而用普通文件记下来，总是觉得有点不放心，哪天电脑丢了怎么办？

Emacs 支持加密文件的操作，总的来说，比较好用的有下面这些方法.

*** ange-crypt

最简单的可能是 ange-crypt 包：

把下面的代码添加到 .emacs 文件里

用命令 *M-x ange-crypt-mode* 来启动这个模式。

*** EasyPG

应该是比较好用的，EmacsWiki 上也专门有相关的讨论
配置:

#+BEGIN_EXAMPLE
  (require 'epa-file)
  (epa-file-enable)
#+END_EXAMPLE

这样，打开或是保存以 .gpg 为后缀的文件，Emacs 就会提示输入加密用的
关键字。
注:

1) 如果希望在打开以 .gpg 为后缀的加密文件时，也能进入相应的 mode，
   我们只需要把 .gpg 作为普通文件的后缀添加到普通文件名后面。比如说，
   一个使用 org mode 文件原来应该命名为 test.org，现在我希望通过
   Emacs 来对它进行加密处理，则我可以把它保存为 test.org.gpg，这样
   下次打开该文件时，Emacs 会自动进入相应的 org mode。

2) 如果在使用 EasyPG 的时候，提示下面的错误byte-code: Opening
   output file: Searching for program, no such file or directory,
   gpg, 则表示没有安装 gpg 这个程序，可以下载安装。

   [[https://www.gnupg.org/][gpg]]: GnuPG is a complete and free implementation of the OpenPGP
   standard as defined by RFC4880 (also known as PGP).

3) 如果希望使用minibuffer输入passphrase，而不是弹出对话框的话，可以
   将环境变量 GPG_AGENT_INFO 清空。

   #+BEGIN_EXAMPLE
   (setenv "GPG_AGENT_INFO" nil)
   #+END_EXAMPLE

4) 默认使用对称加密

   每次保存加密文件，Emacs 都会弹出来问你要用什么方式来加密，很烦人！

   #+BEGIN_EXAMPLE
   (setq epa-file-encrypt-to nil)
   #+END_EXAMPLE

   这样就可以让 Emacs 每次都使用对称加密。

5) 保存时不提示加密

   每次保存加密文件的时候，Emacs 都要让你输一遍密码。我相信你不想每
   次保存文件的时候，都让你输一遍密码

   用下面的代码可以让 Emacs 记住密码并自动保存文档：
   #+BEGIN_EXAMPLE
     (setq epa-file-cache-passphrase-for-symmetric-encryption t)
     (setq epa-file-inhibit-auto-save nil)
   #+END_EXAMPLE

当然，不用担心，Emacs 只是在当前这次 Session 记住密码，下次你重启
Emacs 要再次打开这个文件的时候，Emacs 依然会向你要一次密码的。

*** note
使用 gpg 需要新建文件，在首次保存时设置密码，不能直接重命名为gpg文件，否则打开失败

** ediff                                                             :ediff:
- State "DONE"       from "TODO"       [2015-02-27 五 17:50]
- State "TODO"       from ""           [2015-02-27 五 15:48]

参考:
+ [[http://caobeixingqiu.is-programmer.com/posts/6783.html#article_wrap][emacs之ediff]]
+ [[http://www.zzbaike.com/wiki/Emacs/EDIFF#jump-to-nav][ediff]]

*** diff
使用 Unix 的 diff 工具程序，你可以找到两个文件的不同之处。所比较的两个文
件可能是：
+ 原始文件与更改之后的文件
+ 不同的两个人编辑的同一个文件(譬如，一个项目中协同工作的两个人编辑的
  文件)
+ 不同机器上的两个文件(譬如，你的 .emacs 文件可能在家和工作场合各有一
  份拷贝)
对于后面两种文件，两个要比较的文件共有一个原始的文件。此种情况下, *diff3*
程序会轻松的帮你创建一个文件，文件内容是对原始文件所做的修改记录。

*** ediff
除非两个文件的不同之处很少，否则 diff 的输出将会很难阅读。幸运的是,
Emacs 提供了一个 *diff 的接口* ，称为 *Ediff* ,将此工作变得简单。不仅
将 diff的输出变得可读之外， Emacs 还提供了合并文件函数以及其他的应用补
丁，更多的细节信息，可以参考 Ediff 的 info 文档。 Emacs 还能比较不同文
件夹下的两个文件，若你在不同地方工作，这个功能可能会非常有用(如你的
Lisp配置文件。

Ediff是Emacs集成的比较与合并（merge）文本文件内容的工具。有了
它，你可以方便地比较两个（或三个）不同文件、文件夹。
+ 实时浏览文件间不同(diff)
+ 比较两个或三个文件间的不同
+ 比较两个或三个emacs-buffer间的不同
+ 正在比较的文件合并成第三个文件
+ 对目录进行操作

**** 用ediff比较文件
|-------------------------+--------------------------------------------|
|        比较项目         |                    说明                    |
|-------------------------+--------------------------------------------|
|                         | 询问两个缓冲区的名字，然后比较相应的区域。 |
| ediff-regions-linewise, | 不过你只能在每一个缓冲区中选定一个区域，而 |
| ediff-regions-          | 不能比较一个文件缓冲区的两个区域。( TODO:  |
|                         | 第15个小时的内容 "了解文件" ，会提供一个比 |
|                         | 较同一个文件中的两个区域的方法。)          |
|-------------------------+--------------------------------------------|
| ediff-buffers           | 询问两个缓冲区的名字，然后比较             |
|-------------------------+--------------------------------------------|
| ediff-files             | 询问两个文件的名字，加载之，然后比较       |
|-------------------------+--------------------------------------------|
|                         | 让你选两个窗口，然后比较窗口的内容。       |
| ediff-windows-linewise, | -linewise- 函数比 -wordwise- 函数要快，但  |
| ediff-windows-wordwise  | 另一方面， -wordwise- 工作方式更好，尤其是 |
|                         | 小区域作业时。 -linewise- 一行一行地比较， |
|                         | -wordwise- 一个单词一个单词地比较。        |
|-------------------------+--------------------------------------------|
**** ediff控制命令
|-----------+-----------------------------------+----------------------|
| 快捷键    | 命令                              | 说明                 |
|-----------+-----------------------------------+----------------------|
| q         | ediff-quit                        | 关闭 ediff control   |
|           |                                   | buffer，并退出 ediff |
|-----------+-----------------------------------+----------------------|
| Space 或  | ediff-next-difference             | 下一个差异处         |
| n         |                                   |                      |
|-----------+-----------------------------------+----------------------|
| Del 或 p  | ediff-previous-difference         | 上一个差异处         |
|-----------+-----------------------------------+----------------------|
|           |                                   | 有数字前缀 n 修饰    |
| C-n j     | ediff-jump-to-difference          | ，第n个差异处,n可为 |
|           |                                   | 负数                 |
|-----------+-----------------------------------+----------------------|
| v 或 C-v  | ediff-scroll-vertically           | 所有缓冲区同步向下滚 |
|           |                                   | 动                   |
|-----------+-----------------------------------+----------------------|
| V 或 M-v  | ediff-scroll-vertically           | 所有缓冲区同步向上滚 |
|           |                                   | 动                   |
|-----------+-----------------------------------+----------------------|
| <         | ediff-scroll-horizontally         | 所有缓冲区同步向左滚 |
|           |                                   | 动                   |
|-----------+-----------------------------------+----------------------|
| >         | ediff-scroll-horizontally         | 所有缓冲区同步向右滚 |
|           |                                   | 动                   |
|-----------+-----------------------------------+----------------------|
| (vertical | ediff-toggle-split                | 切换缓冲区布局方式,  |
| bar)      |                                   | 水平和竖直           |
|-----------+-----------------------------------+----------------------|
| m         | ediff-toggle-wide-display         | 在正常 frame 大小和  |
|           |                                   | 最大化之间切换       |
|-----------+-----------------------------------+----------------------|
| a         | ediff-copy-A-to-B                 | 把Buffer-A的内容复制 |
|           |                                   | 到Buffer-B           |
|-----------+-----------------------------------+----------------------|
| b         | ediff-copy-B-to-A                 | 把Buffer-B的内容复制 |
|           |                                   | 到Buffer-A           |
|-----------+-----------------------------------+----------------------|
| r a 或 r  |                                   | 恢复 Buffer-A 或     |
| b         | ediff-restore-diff                | Buffer-B 差异区域中  |
|           |                                   | 的被修改的内容       |
|-----------+-----------------------------------+----------------------|
| A 或 B    | ediff-toggle-read-only            | 切换 Buffer-A 或     |
|           |                                   | Buffer-B 的只读状态  |
|-----------+-----------------------------------+----------------------|
|           |                                   | 根据光标在缓冲区中的 |
| g a 或 g  | ediff-jump-to-difference-at-point | 位置，设置一个离它们 |
| b         |                                   | 最近的差异区域为当前 |
|           |                                   | 活动区域             |
|-----------+-----------------------------------+----------------------|
| C-l       | ediff-recenter                    | 恢复先前的所有缓冲区 |
|           |                                   | 比较的高亮差异区。   |
|-----------+-----------------------------------+----------------------|
| !         | ediff-update-diffs                | 重新比较并高亮差异区 |
|           |                                   | 域                   |
|-----------+-----------------------------------+----------------------|
| w a 或 w  | ediff-save-buffer                 | 保存 Buffer-A 或     |
| b         |                                   | Buffer-B 到磁盘      |
|-----------+-----------------------------------+----------------------|
| E         | ediff-documentation               | 打开 Ediff 文档      |
|-----------+-----------------------------------+----------------------|
|           |                                   | 关闭 ediff control   |
| z         | ediff-suspend                     | buffer, 只是挂起，可 |
|           |                                   | 在以后恢复 ediff 状  |
|           |                                   | 态                   |
|-----------+-----------------------------------+----------------------|



**** 比较三个文件
|----------------+----------------|
|      函数      |      说明      |
|----------------+----------------|
| ediff-files3   | 比较三个文件   |
|----------------+----------------|
| ediff-buffers3 | 比较三个缓冲区 |
|----------------+----------------|

比较两个文件或缓冲区的所有操作，几乎都适于三个比较。不过在进行缓冲区差异
区从A到B拷贝的操作略有不同：
|--------+-----------------------------|
| 快捷键 | 说明                        |
|--------+-----------------------------|
| cb     | 将 Buffer-C 拷贝到 Buffer-A |
|--------+-----------------------------|
| ab     | 将 Buffer-A 拷贝到 Buffer-B |
|--------+-----------------------------|
**** ediff session
你可能同时要比较好多对文件，你可以同时拥有多个 Ediff Session 。按 *z*
挂起当前 Ediff session ,然后启动另一个 Ediff session 就可以了。此时，
在control buffer 中按 R 或是按下 M-x eregistry, 将会打开一个 *Ediff
Registry* 的缓冲区，此缓冲区包含当前运行的所有 Ediff Sessions.可以选择
一个 Ediff session 来进入。

**** 合并文件
**** 比较文件目录
**** 与版本控制系统一起工作

** sdcv                                                               :sdcv:

+ [[http://www.emacswiki.org/emacs/Sdcv][emacswiki]]

*** sdcv history

*$(HOME)/.sdcv_history*

** DONE CAJ文件链接打开                                           :caj:wine:
- State "DONE"       from ""           [2015-12-07 一 14:00]

#+BEGIN_SRC emacs-lisp
  (setq org-file-apps '((auto-mode . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . default)
                        ;; ("\\.pdf\\'" . "evince %s")
                        ("\\.pdf\\'" . "wine \'C:\\Program Files\\Foxit Software\\Foxit Reader\\FoxitReader.exe\' ../../../../%s")
                        ("\\.caj\\'" . "wine \'C:\\Program Files\\TTKN\\CAJViewer 7.1\\CAJViewer.exe\' ../../../../%s")
                        ("\\.nh\\'" . "wine \'C:\\Program Files\\TTKN\\CAJViewer 7.1\\CAJViewer.exe\' ../../../../%s")
                        ))
#+END_SRC

测试OK， 只是使用 CAJ 不是很开心，但是没办法， /不要想着转换成PDF/ ,
不实用，既麻烦，又不方便。

** BBDB: 通讯录管理                                        :bbdb:vcf:通讯录:
*** Reference

- [[http://savannah.nongnu.org/projects/bbdb/][Homepage]]
- [[http://bbdb.sourceforge.net/][Sourceforge(旧的项目主页)]]
- [[http://www.emacswiki.org/emacs/CategoryBbdb][EmacsWiki: Bddb category]]
- [[https://github.com/emacs-china/hello-emacs/blob/master/bbdb%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.org][Github 上的中文教程]]

*** Intro

BBDB is the Insidious =Big Brother Database= for GNU Emacs. It provides
_an address book for email and snail mail addresses, phone numbers and
the like_. It can be linked with various Emacs mail clients (Message
and Mail mode, Rmail, Gnus, MH-E, and VM). BBDB is fully customizable.

#+BEGIN_QUOTE
big brother DB, 用来管理数据的，比如mailing address book等等，和Gnus搭
配着用。Zawinski写的。

BBDB我主要是用来做通讯录管理， 它与gnus发邮件互通， 效果十分好。

BBDB里， 头像支持图片。 然后写一小段lisp代码， 它BBDB的数据转成vCard通
讯录格式， 定期同步到手机上。

#+END_QUOTE
*** 概念

- [[http://baike.baidu.com/link?url=WuKUitPM002pg1xs8GguhXm4nV8pqZcnY47opo6WmnfAz3QmGv3nMdJ3kDst5yP8_dv2pe3sBv7_dkCoopOFmK][vCard]]: 电子名片
- csv：网络交易平台商品信息数据包

*** 安装

1. 源码方式
2. Melpa

   #+BEGIN_EXAMPLE
     I bbdb               20151114.... available  melpa      The Insidious Big Brother Database for GNU Emacs
     I bbdb-android       20150705.... available  melpa      Android phone contacts import/export for BBDB
     I bbdb-china         20150615.... available  melpa      BBDB utils, which let Chinese BBDB users feel easy
     I bbdb-vcard         20150713.... available  melpa      vCard import/export for BBDB
   #+END_EXAMPLE

*** 使用

1. M-x bbdb-xxxx
2. M-x bbdb-vcard-xxx

*** bbdb简单使用教程

#  Github 上使用 org-mode 写的教程，相当不错

**** 配置

最简单的配置方法就是将下面的语句放入Emacs初始化文件中

#+BEGIN_SRC emacs-lisp
  (require 'bbdb)
  (bbdb-initialize)
#+END_SRC

这里的`bbdb-initialize'会初始化bbdb,并开启最基本的查询/维护记录功能.

除了最基本的查询/维护记录功能外,bbdb还有一些与其他package联合使用的特性,要开启这些特性,则需要在调用`bbdb-initialize'时传入其他的参数.

`bbdb-initialize'可以接收一系列的symbol作为参数,这些symbol决定了bbdb初始化时会开启与哪些package交互的特性. 这些symbol的说明如下表所示:
#+NAME: bbdb-initialize参数说明
| symbol  | meaning                                                               |
|---------+-----------------------------------------------------------------------|
| gnus    | Gnus mail/news reader. *should probably also pass the message symbol* |
| mh-e    | MH-E mail reader.                                                     |
| rmail   | Rmail mail reader.                                                    |
| vm      | VM mail reader.                                                       |
| mail    | Mail (M-x mail).                                                      |
| message | Message mode.                                                         |
| anniv   | Anniversaries in Emacs diary.                                         |
| sc      | Supercite.                                                            |
| pgp     | PGP support:                                                          |

***** 为其他package增加BBDB支持
bbdb提供了一系列的`bbdb-insinuate-xxxx'函数来为xxxx package提供BBDB的支持. 这些函数为package增加了默认的快捷键,并且配置这些package当收到新message时,通知bbdb.

例如:为了給gnus增加bbdb的支持,我们可以添加下面的语句到Emacs初始化文件中
#+BEGIN_SRC emacs-lisp
  (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
#+END_SRC
**** BBDB基础
***** BBDB数据库结构
BBDB数据库由一系列的记录组成,每条记录对应一个联系人或组织. 每条记录由多种域组成,每种域对应联系人/组织的一个属性.

BBDB内置支持一些类型的域:
| type        | Description                              | Notes                                           |
|-------------+------------------------------------------+-------------------------------------------------|
| NAME        | 联系人的名称,若该记录表示一个组织,则为空         | 一条记录只能有一个该类型的域,一个域只能有一个值 |
| orgnization | 联系人所在的组织,可以为空                     | 一条记录只能有一个该类型的域,一个域只能有一个值 |
| AKA         | 联系人的别名                                | 一个域可以有多个值,以逗号分隔                  |
| mail        | 联系人的email地址                           | 一个域可以有多个值,以逗号分隔                  |
| Phone       | 联系人的电话                                | 一条记录可以有多个该类型的域,一个域只能有一个值 |
| address     | 联系人的地址                                | 一条记录可以有多个该类型的域,一个域只能有一个值 |
| Notes       | 其他说明                                   |  一条记录可以有多个该类型的域,一个域只能有一个值 |
****** 自定义类型
除了上面BBDB内置的域类型,我们还可以自定一些域类型. BBDB处理大多数自定义类型的域时,与Notes类型域一样,但是对有一些特殊名称的域类型,BBDB会进行特殊处理:
+ aka :: 用于存储指定记录的non-primary names
+ finger-host :: Address used in place of the listed net address for fingering the entity indicated by the record
+ gnus-score :: Gnus scoring adjustment for this person.
+ mail-alias :: Value used instead of name for completion
+ mail-name ::  Used for the storage of non-default names to be used in the reporting of new mail by Reportmail.
+ mark-char :: The field containing the character to be used for marking a given poster in the Gnus Summary Buffer
+ tex-name :: The value of this field is used in place of the name field when printing the database using bbdb-print
+ www :: This field contains the URL associated with the BBDB record.
***** BBDB相关命令
****** 搜索记录
******* bbdb

执行该命令后,输入一个正则表达式,则bbdb会列出任何域中的值符合该正则表达式的记录

******* bbdb-search-name/bbdb-search-organization/bbdb-search-address/bbdb-search-mail/bbdb-search-notes/bbdb-search-phone

执行该命令后,输入一个正则表达式,则bbdb会列出指定域中的值符合该正则表达式的记录

******* bbdb-timestamp-older

执行该命令后,输入一个`yyyy-mm-dd'格式的日期,则bbdb会列出在指定日期之前修改过的记录

******* bbdb-timestamp-newer

执行该命令后,输入一个`yyyy-mm-dd'格式的日期,则bbdb会列出在指定日期之后修改过的记录

******* bbdb-creation-older

执行该命令后,输入一个`yyyy-mm-dd'格式的日期,则bbdb会列出在指定日期之前创建的记录

******* bbdb-creation-newer

执行该命令后,输入一个`yyyy-mm-dd'格式的日期,则bbdb会列出在指定日期之后创建的记录

******* bbdb-creation-no-change

执行该命令后,bbdb会列出自创建以来,从未修改过的记录

****** 增加记录
******* bbdb-create

执行该命令后,bbdb会以此提示输入各个内置域的相关信息,然后根据这些相关信息新建一条记录

******* bbdb-snarf

该命令可以根据一定规则将选中的字符串转换成bbdb格式的记录. 默认的转换规则由变量`bbdb-snarf-rule-default'决定. 详细参见`bbdb-snarf-rule-alist'

***** BBDB Mode使用说明
使用BBDB的查询命令后,会弹出一个名为`*BBDB*'的buffer,该buffer处于bbdb mode下.

bbdb mode下拥有许多维护BBDB记录的各种命令,常用的命令有:

****** e (bbdb-edit-field)

修改记录中当前域的值

****** ; (bbdb-edit-foo)

若不带前置参数执行该命令,则修改`(car bbdb-edit-foo)'所表示的域(默认为notes)

若代前置参数执行该命令,则修改`(cdr bbdb-edit-foo)'所表示的域(默认为current-fields)

****** d / C-k (bbdb-delete-field-or-record)

删除光标所在的域,若光标所处的域为bbdb记录的第一个行,则会提示删除整个记录.

This may also be applied to multiple records at once by *.

****** i (bbdb-insert-field)

为当前记录添加新域,该新域的类型可以是BBDB的内置类型,也可以是新的用户自定义类型.

****** C-x C-t (bbdb-transpose-fields)

交换光标所在的field与上一行field的位置

若带参数0执行该命令,则光标所在的域与mark标记的域进行交换

With non-zero numeric argument ARG, the previous field is moved past ARG fields.

交换的field必须在同一条记录中,且具有相同的类型

****** n (bbdb-next-record)/ p (bbdb-prev-record)

移动到下一个/上一个记录,若带前缀参数N,则下移/上移N条记录

****** t (bbdb-toggle-records-layout)


切换是否显示记录中具体域的说明.

若带参数0调用该函数,则强制光标所在记录不显示记录域说明,此时,所有的域信息都压缩到一行内显示.

当待其他参数调用该函数时,则强制光标所在记录显示记录中的域说明时,此时,当前记录使用多行样式显示.

若使用`*t'而不是`t',则buffer内所有的记录都同时切换显示样式

****** T (bbdb-display-record-completely)

谢换是否展示当前记录的所有域,这时平时隐藏不显示的`creation-date'和`timestamp'都会显示出来.

****** o (bbdb-omit-record)

隐藏当前记录,但并不会将当前记录从BBDB数据库中删除掉.

若带参数N执行该命令,则会隐藏下面N条记录,N可以为负数

****** m (bbdb-mail)

发送电子邮件給当前的联系人. 默认邮件地址为记录中的第一个email地址.

若带参数N调用该函数,则表示邮件地址使用记录周公的第N个email地址

若使用`*m'而不是`m',则表示給该buffer中的所有联系人发送电子邮件

****** s /C-x C-s (bbdb-save)

保存BBDB数据库到文件中

****** M-d (bbdb-dial)

该命令会尝试着去拨打光标所在的数字. 若光标处于一条记录的开头,则会拨打第一个phone域.

具体原理不明...

****** q (quit-window)

退出bbdb窗口,但不会kill bbdb buffer

****** ? (bbdb-help)

在minibuffer中显示简易帮助信息

****** h (bbdb-info)

显示bbdb的info文档

若bbdb的info文档没有安装在标准的info目录下,可以通过设置`bbdb-info-file'变量来明确指明bbdb info文件的路径

****** (bbdb-print)

将BBDB记录导出到Tex文件中.

****** c (bbdb-create)

创建新记录保存新的联系人信息

****** C (bbdb-copy-records-as-kill)

将当前记录拷贝到kill ring中

若使用`* C'则拷贝buffer中的所有记录到kill ring中

****** b (bbdb)

重新查询bbdb数据库

****** / m (bbdb-search-mail)

搜索mail域

****** / a (bbdb-search-address)

搜索address域

****** / c (bbdb-search-changed)

搜索至上次保存后,改变过的bbdb记录

****** / d (bbdb-search-duplicates)

搜索具有相同域的记录

****** / n (bbdb-search-name)

搜索name域

****** / o (bbdb-search-organization)

搜索organization域

****** / p (bbdb-search-phone)

搜索phone域

****** / x (bbdb-search-xfields)

搜索xfield域(该域存什么?我也不知道...)

****** * (bbdb-do-all-records)

该命令用于修改紧接之后的命令的作用域,让其作用于buffer中的所有记录.(Command prefix for operating on all records currently displayed.)

但只对某些特定的命令有效

**** 配置

***** 配置项
+ bbdb-file

  bbdb数据库的存储路径,默认为`~/.bbdb'

+ bbdb-default-area-code

  当输入新电话好吗时,使用的默认区号.

  该变量的值也会影响到拨打电话时的行为

+ bbdb-address-format-list

  用于编辑/显示BBDB地址信息时的规则列表.

+ bbdb-continental-postcode-regexp

  该正则表达式决定了BBDB的address是否为欧洲格式的地址.

  若address域的值匹配该正则表达式,则表示该address为欧洲格式的地址,否则认为是美国格式的地址

+ bbdb-case-fold-search

  当使用bbdb系列的搜索命令进行搜索时,是否大小写敏感

+ bbdb-auto-revert

  若在Emacs中没有修改bbdb buffer中的信息,而此时,bbdb-file发生了改变,则自动重新加载bbdb-file的新内容

+ bbdb-pop-up-layout

  pop-up BBDB buffer时使用的默认布局(mail,news...). 默认为'pop-up-multi-line

+ bbdb-pop-up-window-size

  pop-up BBDB buffer时的高度.

  若为整数N,则表示高度为N行

  若为一个介于0到1之间的小数N,则拆分拥有最高高度的window,并且BBDB buffer占据N倍的高度

  若为t,则表示使用 `display-buffer'/`pop-to-buffer' 创建BBDB window??(貌似会占据next-window来显示BBDB buffer)

+ bbdb-completion-list

  控制`bbdb-complete-mail'的补全方式. 该函数用于在mail buffer中补全联系人信息

  该值可以为一个symbol list,用来指明补全哪些域的值. 这些symbol可以是:

  - fl-name :: first and last name

  - lf-name :: last and first name

  - organization ::

  - aka ::

  - mail :: all email address of each record

  - primary :: first email address of each record

  该值也可以为t,表示所有上面symbol的集合

  若该值为nil,则表示不提供补全

+ bbdb-complete-mail-allow-cycling

  当调用`bbdb-complete-mail'补全email地址时,是否允许循环展示补全项

+ bbdb-user-mail-address

  该变量的值为一个正则表达式,该正则表达式用于标识某email地址是否是用户自己的email地址.

  多数BBDB的命令根据变量`bbdb-message-headers'从消息中抽取出发送方和接收方的email地址. 但若发送方的email地址匹配上了`bbdb-user-mail-address-re',则该email地址依然被认为是接收方的email地址.

  改变量的默认值为`(user-login-name)'

+ bbdb-add-mails

  该变量指明了当收到某个联系人从新的email地址发来的消息后,是否增加该新email到联系人信息中.

  可选值有:

  - t :: 自动添加该新的email地址

  - query :: 询问用户是否添加该新的email地址

  - nil :: 忽略新的email地址

  - 数字N :: 在N秒内,BBDB显示该新的email地址,但只在当前session有效

  - 函数fn :: 使用record和新email地址作为参数来调用fn,fn需要返回t,'query,nil或一个数字

  - 正则表达式re :: 若新的email地址符合该正则,则忽略该新的email地址,否则询问用户是否添加该email地址

+ bbdb-new-mails-primary

  为联系人新增email地址时,该新email地址是否作为primary mail address(即该新email地址排在其他email地址的前面).

  可选值为:

  - t :: 让该新增的email地址自动称为primary mail address

  - query :: 询问用户是否作为primary mail address

  - nil :: 不作为primary mail address,会将新email地址放到列表最后面.

  - 函数fn :: 该函数接收两个参数:record和新email地址. 该函数需要返回t,'query或nil

  - 正则表达式re :: 若新email地址匹配该re,则不作为primary mail address,否则询问用户是否作为primary mail address

+ bbdb-ignore-redundant-mails

  当增加新mail地址时,若联系人中的旧mail地址是新mail地址的更一般形式(例如,已有的mail地址为darksun@baz.com,而新mail地址为darksun@foo.baz.com)时,是否覆盖原mail地址.

  可选的值为为:

  - t :: 自动忽略新email地址

  - query :: 询问用户是否忽略新email地址

  - nil :: 使用新email地址,覆盖原email地址

  - 数字N :: 在接下来的N秒内,保留新email地址

  - 函数fn :: fn接收两个参数:record及新email地址,fn需要返回t,'query,nil或数字

  - 正则表达式re :: 符合该正则表达式的email地址会替代原email地址,否则询问用户是否忽略新email地址

+ bbdb-check-auto-save-file

  若值为t,则BBDB会检查它的auto-save file,若auto-save file比`bbdb-file'要新,则BBDB会恢复auto-save file

+ bbdb-ignore-message-alist

  描述哪些message不允许触发自动新建BBDB联系人记录.

+ bbdb-accept-message-alist

  描述哪些message允许触发自动新建BBDB联系人记录.

+ bbdb-mua-auto-update-p

  决定了`bbdb-mua-auto-update'如何自动更新BBDB记录. 可选值:

  - nil :: 什么也不做

  - search :: 搜索匹配ADDRESS的记录

  - update :: 搜索匹配ADDRESS的记录,如有必要,会更新name和mail域

  - query :: 搜索匹配ADDRESS的记录,若记录不存在,提示用户是否创建新记录

  - create :: 搜索匹配ADDRESS的记录,若记录不存在,则创建新记录

  - t :: 搜索匹配ADDRESS的记录,若记录不存在,则创建新记录

  - 函数fn :: bbdb调用该函数,该函数需要返回nil,search,update,query,create或t

***** hooks

| hook                             | 调用hook的时机                                     | 调用hook时的参数                       | 其他说明                                                          |
|----------------------------------+----------------------------------------------------+----------------------------------------+-------------------------------------------------------------------|
| bbdb-display-hook                | 展示*BBDB* buffer后                                |                                        |                                                                   |
| bbdb-create-hook                 | 在BBDB创建新联系人记录前                           | 新增的record                           | bbdb-change-hook也会被触发                                        |
| bbdb-change-hook                 | *BBDB* buffer发生改变前                            | 修改的record                           |                                                                   |
| bbdb-mode-hook                   | 进入bbdb mode后                                    |                                        |                                                                   |
| bbdb-notice-record-hook          | 当发现message中的email地址包含在某个联系人记录中后 | 包含message中email的联系人记录         | 若某message中包含同一联系人的多个email地址,该hook也只会被触发一次 |
| bbdb-notice-mail-hook            | 当发现message中的email地址包含在某个联系人记录中后 | 包含message中email的联系人记录         | 若某message中包含同一联系人的多个email地址,该hook也会被触发多次   |
| bbdb-after-read-db-hook          | 当`bbdb-file'被读取之后                            |                                        | 当BBDB buffer revert之后还会再次触发该hook                        |
| bbdb-initialize-hook             | BBDB的初始化函数`bbdb-initialize'被调用之后        |                                        |                                                                   |
| bbdb-canonicalize-mail-functioin | 当BBDB notice a message后                          | message中的corresponding email address | 该函数用于对message中的对应email地址作一次转换,转换后的结果才拿来与BBDB中的记录进行对比,或添加入BBDB. 若该函数返回nil,则BBDB认为该message中无email address |

**** 其他
***** 函数
****** (bbdb-display-records records )

在bbdb buffer中显示records中的记录

****** (bbdb-record-field RECORD FIELD)

返回记录中的指定域的值. 域的说明为:
| firstname    | Return the first name of RECORD                   |
| lastname     | Return the last name of RECORD                    |
| name         | Return the full name of RECORD (first name first) |
| name-lf      | Return the full name of RECORD (last name first)  |
| affix        | Return the list of affixes                        |
| organization | Return the list of organizations                  |
| aka          | Return the list of AKAs                           |
| aka-all      | Return the list of AKAs plus mail-akas.           |
| mail         | Return the list of email addresses                |
| mail-aka     | Return the list of name parts in mail addresses   |
| mail-canon   | Return the list of canonical mail addresses.      |
| phone        | Return the list of phone numbers                  |
| address      | Return the list of addresses                      |
| xfields      | Return the list of all xfields                    |
| 其他         | 指定label的xfields                                   |

****** (bbdb-get-records PROMPT)

若在*BBDB* buffer中,则返回光标所在的记录,若在其他buffer中,则询问用户想要返回哪个记录

****** (bbdb-update-records ADDRESS-LIST &optional UPDATE-P SORT)

返回匹配ADDRESS-LIST的BBDB记录列表

其中ADDRESS-LIST是一个由email地址组成的列表


参数UPDATE-P的可选值为:

+ nil :: 使用变量`bbdb/MUA-update-records-p'中的值, 若该值依然为nil,则`bbdb-update-records'返回nil

+ search :: 搜索匹配ADDRESS的记录

+ update :: 搜索匹配ADDRESS的记录,如有必要,会更新name和mail域

+ query :: 搜索匹配ADDRESS的记录,若记录不存在,提示用户是否创建新记录

+ create :: 搜索匹配ADDRESS的记录,若记录不存在,则创建新记录

+ t :: 搜索匹配ADDRESS的记录,若记录不存在,则创建新记录

+ 函数fn :: bbdb调用该函数,该函数需要返回search,update,query,create或t

若参数SORT为非nil,则返回的记录列表中的记录会经过`bbdb-record-lessp'排序;若SORT为nil,则记录的顺序与参数ADDRESS-LIST中的邮件地址的顺序对应.

****** (bbdb-get-mail-aliases)

返回BBDB中使用的mail aliases列表

****** (bbdb-search-read &optional FIELD)

提示用户输入一个正则表达式re,并从BBDB数据库中搜索出指定的FIELD符合该re的记录

****** (bbdb-search RECORDS &optional NAME-RE ORG-RE MAIL-RE XFIELD-RE PHONE-RE ADDRESS-RE)

从RECORDS中搜索出符合指定域的指定正则表达式的记录. 其中

+ NAME-RE匹配FIRST_LAST,LAST_FIRST和AKA域

+ XFIELD-RE匹配xfiled notes域

+ XFIELD-RE也以格式为(LABEL . RE)表示label为xfield的正则表达式,其中若LABEL为`*'则表示任一个xfield

****** (bbdb-display-records-with-layout RECORDS LAYOUT)

使用LAYOUT形式来展示RECORDS,其中LAYOUT参见`bbdb-layout-alist'中的值

****** (bbdb-pop-up-window &optional SELECT HORIZ-P)

****** (bbdb-display-records RECORDS &optional LAYOUT APPEND SELECT HORIZ-P)

使用LAYOUT形式来显示RECORDS

若参数APPEND为非nil,则会在当前已经显示的记录后,再多显示这些RECORDS;若APPEND为nil,则会用RECORDS的显示结果代替已有的显示结果

参数SELECT与参数HORIZ-P的意义参见`bbdb-pop-up-window'

****** (bbdb-display-record RECORD LAYOUT NUMBER)

在当前buffer的光标所在处,插入格式化好的RECORD表示文本.

LAYOUT是`bbdb-layout-alist'中描述的layout符号,若为nil则表示`bbdb-layout'

NUMBER is the number of RECORD among the displayed records.

****** (bbdb-read-record &optional FIRST-AND-LAST)

提示用户输入联系人信息,并创建一个新的BBDB联系人记录.

*但该函数不会将新产生的BBDB记录存入数据库,也不会更新BBDB hashtable*

*该函数会检查新输入的联系人是否和已存在的联系人记录相冲突*

****** (bbdb-read-string PROMPT &optional INIT COLLECTION REQUIRE-MATCH)

读取用户输入的字符串,会取出字符串中的空格和text properties

参数PROMPT为提示说明

参数INIT为预设值,当编辑已存在记录时常用到

参数COLLECTION与REQUIRE-MATCH的意义与`completing-read'中的意义一致

****** (bbdb-record-set-field RECORD FIELD VALUE &optional MERGE CHECK)

设置RECORD中的FIELD域的值为VALUE.

该函数的返回值为VALUE

若参数MERGE为非nil,则将参数VALUE合并到FIELD的当前值中

若参数CHECK为非nil,则会检查FIELD是否能够存储VALUE

*该函数会更新bbdb hashtable,但不会保存RECORD到bbdb数据库中*. 一般使用函数`bbdb-change-record'来保存RECORD到bbdb数据库中.

其中参数FIELD的说明,参见`bbdb-record-field'中的FIELD说明

****** (bbdb-change-record RECORD &optional NEED-TO-SORT NEW)

该函数保存RECORD到BBDB数据库中,若参数RECORD中的值与BBDB数据库中的值相比发生了变化,则该函数返回RECORD,否则该函数返回nil

当RECORD中的联系人名称发生改变,或RECORD为新建的联系人记录时,NEED-TO-SORT参数需要为t

当RECORD为新建的联系人记录时,参数NEW需要为t. 若RECORD为新建联系人记录则该RECORD会自动更新入BBDB hashtable,否则需要手工更新BBDB hashtable

****** (bbdb-current-record &optional FULL)

返回光标所处的RECORD

若参数FULL为非nil,则返回包含RECORD和显示格式(layout)的一个list
#+BEGIN_SRC emacs-lisp
  (bbdb-current-record t)
  ;; ([nil "darksun" nil nil nil (["home" "(+86)15820984397"] ["work" "(0794)6593346"]) nil nil ((creation-date . "2015-03-30 09:46:57 +0000") (timestamp . "2015-03-30 13:17:00 +0000")) ["darksun" "darksun" nil nil "darksun" #<marker at 64 in bbdb>]] multi-line #<marker at 1 in *BBDB*>)
  (bbdb-current-record)
  ;; [nil "darksun" nil nil nil (["home" "(+86)15820984397"] ["work" "(0794)6593346"]) nil nil ((creation-date . "2015-03-30 09:46:57 +0000") (timestamp . "2015-03-30 13:17:00 +0000")) ["darksun" "darksun" nil nil "darksun" #<marker at 64 in bbdb>]]

#+END_SRC

****** (bbdb-current-field)

返回光标所处的当前域
#+BEGIN_SRC emacs-lisp
  (bbdb-current-field)
  ;; (name "darksun")
#+END_SRC

****** bbdb-record-set-xxx系列函数

置record中指定field的值

***** 变量
****** bbdb-records

该变量的值为当前bbdb buffer中的record列表

****** bbdb-search-invert

若值为t,则会反转`bbdb-search'的搜索结果
**** FAQ

***** 如何修改BBDB创建联系人的流程

使用`bbdb-create'新建联系人时,会以此提示你输入一系列的联系人的信息,包括姓名,所属机构,电子邮件,地址,电话,备注. 但若想让BBDB在创建联系人时也提示你输入其他额外的信息该如何作呢?

下面是一个例子,它让`bbdb-create'新建联系人时,还会提示你输入生日信息:
#+BEGIN_SRC emacs-lisp
  (defun bbdb-read-record-advise-function(record)
    "提示存储生日,QQ,微信号"
    (bbdb-record-set-field record 'birthdate
                           (bbdb-read-string "Birthdate (YYYY.MM.DD): "))
    (bbdb-record-set-field record 'QQ
                           (bbdb-read-string "QQ:"))
    (bbdb-record-set-field record 'WeChat
                           (bbdb-read-string "WeChat:"))
    record)

  (advice-add 'bbdb-read-record :filter-return #'bbdb-read-record-advise-function)

#+END_SRC

***** 如何将bbdb中保存的联系人信息导入到手机中

最简单的方法,就是使用"bbdb-to-outlook.el"将bbdb导出为.csv文件. 然后在手机上导入该.csv文件

1. 加载"bbdb-to-outlook.el"
2. 使用`bbdb'显示bbdb联系人信息
3. 键入`O'会运行`bbdb-to-outlook'命令,输入保存的csv文件路径即可.

** ispell
*** [[http://hahack.com/tools/ispell-and-flyspell/][ispell与emacs的拼写检查]] :blog:

介绍ispell以及emacs里的拼写检查功能。

**** 了解Ispell

***** Ispell vs Aspell

Ispell是Unix下的一个拼写检查工具，支持多种语言（见：[[http://lasr.cs.ucla.edu/geoff/ispell-dictionaries.html][ispell
dictionaries]]），并且提供很多接口，其中包括了Emacs。另外一个比较出名的拼写检查工具是Aspell，两者的区别是Aspell不仅为拼错的单词提供形近的单词列表，还同时提供读音相似的单词的建议，e.g.如果你拼了一个错词“trubble”，Ispell只会建议“rubble”，而Aspell还会建议“trouble”、“dribble”、
“rubble”之类的词。不过Aspell的这种匹配算法只能用在英语单词上，而且在速度上以及指令的简单程度上不及Ispell。我使用的是Ispell，Aspell的配置可以参考[[http://aspell.net/0.61/man-html/Using-Aspell-with-other-Applications.html#Using-Aspell-with-other-Applications][这里]]。

***** 安装和配置Ispell

Ubuntu安装Ispell：

| #+BEGIN_EXAMPLE                                                   |
|     1                                                             |
| #+END_EXAMPLE                                                     |
|                                                                   |
| #+BEGIN_EXAMPLE                                                   |
|     $ sudo apt-get install ispell iamerican dictionaries-common   |
| #+END_EXAMPLE                                                     |


Arch安装Ispell：

| #+BEGIN_EXAMPLE                         |
|     1                                   |
| #+END_EXAMPLE                           |
|                                         |
| #+BEGIN_EXAMPLE                         |
|     $ sudo pacman -S ispell aspell-en   |
| #+END_EXAMPLE                           |


你可以试着在shell里直接使用ispell命令对一份文件进行拼写检查：

| #+BEGIN_EXAMPLE     |
|     1               |
| #+END_EXAMPLE       |
|                     |
| #+BEGIN_EXAMPLE     |
|     $ ispell FILE   |
| #+END_EXAMPLE       |


注意上面的FILE得你自己指定一个文件，建议是一份有英文单词的文件。如果能输出检查结果，说明此时Ispell运作正常。

如果提示找不到default.hash，那可能是没有把iamerican设为预设辞典的原因，解决方法如下：

| #+BEGIN_EXAMPLE                                               |
|     1                                                         |
| #+END_EXAMPLE                                                 |
|                                                               |
| #+BEGIN_EXAMPLE                                               |
|     $ cd /usr/lib/ispell/ sudo cp iamerican.hash default.sh   |
| #+END_EXAMPLE                                                 |


**** Emacs中的拼写检查（使用Ispell）

有些编辑器可以自动对我们输入的英语单词进行拼写检查，甚至还能给出拼写建议（比如Microsoft
Word），Emacs当然也可以做到这个功能，甚至更加强大。不过，Emacs本身并不提供这个功能，幸运的是像Ispell和Aspell这样的拼写检查工具都提供了Emacs相应接口，因此，通过在Emacs中调用Ispell的命令，我们可以一边编辑文件一边进行拼写检查。

Ispell和Aspell现在在Emacs已经内置支持，通常不需要自己安装。如果你发现Emacs里确实没有Ispell的支持，或者你想升级到最新的ispell.el，那就请参见[[http://www.kdstevens.com/stevens/ispell-faq.html#install][这里]]。

***** ispell-minor-mode：实时拼写检查

要让Flyspell随时根据你的输入提示错误拼写，可以打开*ispell-minor-mode辅模式*。在ispell-minor-mode 模式下，
当你输完一个单词时，Ispell
会自动帮您在辞典里查询这个单词，如果找不到这个单词，它就会/哔/一声来提醒您。

要启动或关闭这模式，请键入指令：

| #+BEGIN_EXAMPLE                      |
|     1                                |
| #+END_EXAMPLE                        |
|                                      |
| #+BEGIN_EXAMPLE                      |
|     M-x ispell-minor-mode <Return>   |
| #+END_EXAMPLE                        |


***** ispell-buffer：全文拼写检查

在emas中，可以使用*ispell-buffe*r命令，对光标之后的单词逐个进行拼写检查：

| #+BEGIN_EXAMPLE                  |
|     1                            |
| #+END_EXAMPLE                    |
|                                  |
| #+BEGIN_EXAMPLE                  |
|     M-x ispell-buffer <Return>   |
| #+END_EXAMPLE                    |


如果全文拼写正确，就会提示检查完成。如果发现不认识的单词，此时ispell将会把光标定在该单词的位置，在文本的上方会显示修改建议，如图1：

[[/images/ispell-and-flyspell/Evrd5.png]]

此时ispell会等待用户的进一步的指令：

| 键盘指令   | C-h 或者 ?       | 空格               | a/A                                            | r/R            | i/I                      | u                                    | q/Q            |
| 功能       | 获得进一步帮助   | 忽略这个错误拼写   | 在全文中都忽略这个单词（只在这个缓冲区有效）   | 修改这个单词   | 将这个单词加入个人辞典   | 将这个单词以小写的形式加入个人辞典   | 退出单词检查   |

如果文档中有多处相同的拼写错误，可以使用“R”进入查询替换，输入要替换的单词，当查找到第二个匹配的单词时，按下“!”将自动将接下来所有的单词替换成正确的单词。

[[/images/ispell-and-flyspell/iqdSB.png]]

[[/images/ispell-and-flyspell/bmhjf.png]]

使用Ispell要注意以下两点：

1. *Ispell是根据你所指定的辞典里的单词来确定这个词是否拼写正确的*。换句话说，如果某个单词没有在选定的辞典里有定义的话，即使它的拼写是正确的，Ispell也会把它当成错误的拼写。如果光标不在文章开头的第一个位置，要进行全文检查的话就得先使用M-<将光标移动到文章开头。
2. *同一个单词的不同形式，比如复数、过去式、过去分词等，在进行拼写检查时需要分别进行*。比如，如果你把receive拼成了“recieve”，Ispell会把“recieved”当成另外一个单词，所以这个拼写检查器会把它当作另外一个拼写错误找出来。

***** C-r：递归编辑

我们经常会遇到这种情况：当我们在查找修改某段文本的时候，可能会意外发现当前的查找结果周围有个地方需要修改，但因为现在正在进行查找修改，如果不想中断当前的工作，我们就只好等着完成查找修改工作后再找到刚刚那个位置，但却记不起来在那里了。拼写检查也可以看成一类查找（对错误拼写的查找），为了解决这个问题，Emacs给我们提供了一个贴心的编辑方法------递归编辑。

什么是递归编辑呢？我们可以把递归编辑看成一种中断：当你在进行某个查找任务的时候，还能够暂时中断当前的查找工作，去进行其他的编辑工作，完成后再跑回刚刚的中断的地方，继续未完成的查找。这和“递归”有什么联系呢？这是因为，这种中断可以嵌套！你可以在查找单词A的时候中断A的查找，进入一个递归编辑，在这个位置开始对B进行查找，突然在某个B的查找位置你又看到周围有个单词C要修改，你又可以暂时中断对B的查找，而进入另一个递归编辑。等你修改完C后，你可以回到上一个查找的中断位置，继续对B进行查找。等你查找完B之后，你又可以回到再上一个查找的中断位置，继续对A进行查找。说起来很复杂，其实道理非常简单。我还是“一图以蔽之”吧：

[[/images/ispell-and-flyspell/Gmot9.png]]

使用方法：

| C-r            | C-M-c                        | C-] (命令：top-level)          |
| 进入递归编辑   | 结束递归编辑并继续拼写检查   | 结束递归编辑，并退出拼写检查   |

例如，在在修改“xmas”的时候，突然发现要修改“newyear.”

[[/images/ispell-and-flyspell/Y088c.png]]

C-r进入递归编辑，使用replace-string命令将“newyear.”改成“new year!”

[[/images/ispell-and-flyspell/N9Ow2.png]]

***** Ispell-word：检查单个单词

有时候我们拼写某个单词脑袋壳突然卡住了：“哎，这个词怎么拼啊？”或者“我好像拼得不对”。这时，我们可以利用Ispell来单独检查光标所在的这个单词，如果想对光标位置上的单词进行检查，请按下
=M-$=
（命令名是ispell-word）组合键，或者从【Spell】拼写菜单里选择执行“Check
Word”（检查单词）操作，Ispell将对那个单词进行检查，并给出检查结果。

| #+BEGIN_EXAMPLE                      |
|     1                                |
| #+END_EXAMPLE                        |
|                                      |
| #+BEGIN_EXAMPLE                      |
|     M-$ (M-x ispell-word <Return>)   |
| #+END_EXAMPLE                        |


[[/images/ispell-and-flyspell/SltMB.png]]

***** ispell-complete-word：单词补全

有时我们想不起来要怎么拼一个单词，这就到Ispell的单词补全功能大展身手的时候了。敲击ESC-tab（命令名是ispell-complete-word），将获得一个可供选择的列表。

| #+BEGIN_EXAMPLE                            |
|     1                                      |
| #+END_EXAMPLE                              |
|                                            |
| #+BEGIN_EXAMPLE                            |
|     ESC-tab（M-x ispell-complete-word ）   |
| #+END_EXAMPLE                              |


[[/images/ispell-and-flyspell/gCBFZ.png]]

***** ispell-kill-ispell：终止Ispell进程

只要启用了Ispell，它就将一直在后台运行等待再次启用。如果觉得它使得系统变慢了，可以输入
=M-x ispell-kill-ispell <Return>=
杀掉这个进程，或是从“Spell”菜单里选择执行“Kill
Process（终止进程）”操作。

| #+BEGIN_EXAMPLE               |
|     1                         |
| #+END_EXAMPLE                 |
|                               |
| #+BEGIN_EXAMPLE               |
|     M-x ispell-kill-ispell    |
| #+END_EXAMPLE                 |


**** Emacs中的高亮错误拼写

***** 什么是Flyspell

Flyspell是Ispell的增强工具，Ispell只能够在缓冲区里逐个提示错误的拼写，如果想要用下划线的形式标记出所有错误的拼写，可以使用Flyspell。这样的好处是你可以继续编辑你的文本，而不需要进入查找模式。很多高级的编辑器都是采用这样的方式来提醒用户可能存在的错误拼写。

***** flyspell-mode：实时高亮提醒错误拼写

要让Flyspell随时根据你的输入提示错误拼写，可以打开*flyspell-mode*模式：

| #+BEGIN_EXAMPLE          |
|     1                    |
| #+END_EXAMPLE            |
|                          |
| #+BEGIN_EXAMPLE          |
|     M-x flyspell-mode    |
| #+END_EXAMPLE            |


例如，打开Flyspell辅模式后，在缓冲区中输入“applle.”之后，Flyspell将对applle高亮显示。

[[/images/ispell-and-flyspell/2Awhx.png]]

flyspell-mode和ispell-minor-mode的区别主要是flyspell的错误拼写提醒方式是用下划线，而ispell-minor-mode则会在消息窗口进行提示，并/哔/一声进行提醒，有时候会让人厌烦（当然，可以通过设置关闭声音提醒）。因此，flyspell显得比较“安静”，因此更受人喜欢。

***** flyspell-buffer：查找错误拼写并高亮

如果只需要检查一下缓冲区现有的文本，可以使用*flyspell-buffer*：

| #+BEGIN_EXAMPLE            |
|     1                      |
| #+END_EXAMPLE              |
|                            |
| #+BEGIN_EXAMPLE            |
|     M-x flyspell-buffer    |
| #+END_EXAMPLE              |


[[/images/ispell-and-flyspell/1n2zn.png]]

flyspell-buffer和ispell-buffer的区别：*ispell-buffer是进入对错误拼写的查找，并逐个提示错误的拼写，而flyspell-buffer会在检查完所有拼写后，一次性将所有找到的错误以下划线的形式标记出来。*

要对Flysepll高亮的文本进行修改，可以将鼠标移到该单词上，点击 *鼠标中键 *，将弹出一个菜单。（什么？没有鼠标中键？听我的，你真的需要去买一个新鼠标了
:tounge:
）如果要在当前编辑的缓冲区中接受这个拼写，可以在弹出菜单中选择Accept(session)；如果要在本次Emacs运行期间打开的所有缓冲区中接受这个拼写，可以选择Accept(buffer)；如果要永久记住这个拼写，可以选择Save
this word。

还有一种专门为程序员提供的辅模式flyspell-prog-mode，Emacs将只在注释和字符串里高亮错误的拼写。

| #+BEGIN_EXAMPLE               |
|     1                         |
| #+END_EXAMPLE                 |
|                               |
| #+BEGIN_EXAMPLE               |
|     M-x flyspell-prog-mode    |
| #+END_EXAMPLE                 |


**** 其他定制

***** 让Emacs自动开启flyspell-mode

对于很多打字员来说，*flyspell-mode*是一个非常实用的辅模式，如果想要让Emacs启动时自动打开flyspell-mode，可以在.emacs文件里添加这一行：

| #+BEGIN_EXAMPLE                               |
|     1                                         |
| #+END_EXAMPLE                                 |
|                                               |
| #+BEGIN_EXAMPLE                               |
|     (setq-default flyspell-mode t) <Return>   |
| #+END_EXAMPLE                                 |


***** 选择Ispell预设辞典

如果你为Ispell安装了不止一个辞典，你可以设定Emacs，使之在开始载入某一文件时，便自
动选择所需的辞典（你可以选择好几个）。预设辞典(main dictionary)
即主要辞典，是与
Ispell一起发行的辞典。您可以选择您所需要的语言。第二个即是你的个人辞典(personal
dictionary)，你可以设定要
Ispell将您在主要辞典里所找不到的字放到这里。假如您要将
Ispell里的法文辞典设为预设辞典，并想用你主目录 (home directory)下的
‘.ispell-dico-perso' 文档作为个人辞典，可以在 ‘.emacs'
文档里加入下列指令：

| #+BEGIN_EXAMPLE                                                                                                                                               |
|     12345                                                                                                                                                     |
| #+END_EXAMPLE                                                                                                                                                 |
|                                                                                                                                                               |
| #+BEGIN_EXAMPLE                                                                                                                                               |
|     (setq sgml-mode-hook'(lambda () "Defauts for SGML mode."(setq ispell-personal-dictionary "~/.ispell-dico-perso")(ispell-change-dictionary "francais")))   |
| #+END_EXAMPLE                                                                                                                                                 |


***** 为特定文件设定个别的辞典

在每一个文档的结尾，只要将下列指令加入作为注释，你都可以指定您现行的文档要使用哪一辞典。
Ispell 开始拼字检查时即可应用所指定的辞典：

| #+BEGIN_EXAMPLE                                                                                |
|     12                                                                                         |
| #+END_EXAMPLE                                                                                  |
|                                                                                                |
| #+BEGIN_EXAMPLE                                                                                |
|     <!-- Local IspellDict: english --><!-- Local IspellPersDict: ~/emacs/.ispell-english -->   |
| #+END_EXAMPLE                                                                                  |


**** 本文参考资料

1. [[http://www.google.com.hk/url?sa=t&rct=j&q=Learning+GNU+Emacs&source=web&cd=1&ved=0CCwQFjAA&url=http%3A%2F%2Fbook.douban.com%2Fsubject%2F1431970%2F&ei=Npr1Ttv4OeaziQeg4KXuAw&usg=AFQjCNGR0JeJmtslTGgFcY3le75a1jIIhA&sig2=CvEr-ea6iU4hRy06oFG2Sg][Learning
   GNU Emacs, 3rd Edition(Debra Cameron, James Elliott, Marc Loy)]]
2. [[http://man.chinaunix.net/linux/how/LinuxDoc+Emacs+Ispell-HOWTO-5.html][LinuxDoc+Emacs+Ispell-HOWTO中文版(Philippe
   MARTIN, Sébastien Blondeel, 李安珊)]]
*** Aspell                                                         :aspell:
参考:
+ [[
][IBM developwork]]
+ [[http://aspell.net/][Aspell homepage]]
+ [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][flyspell manual]]
+ [[http://hahack.com/tools/ispell-and-flyspell/][ispell使用]]

如果经常使用Emacs来写英文文章和邮件,那么拼写检查的功能则必不可少.Emacs
提供了 *flyspell* 模式来对拼写作出检查. flyspell只是Emacs的一个前端,提
供了桥接Emacs与其它拼写检查程序如 *Aspell*, *Ispell* 和 *Hunspell* 交
互的管道.

推荐使用 *Aspell*.

**** 安装Aspell及词典
*$ sudo apt-get install aspell*   # 没有必要一定要源码安装
**** Emacs的配置
1) 设置flyspell使用Aspell,并配置语言环境为英语
   #+BEGIN_EXAMPLE
     (setq-default ispell-program-name "aspell")
     (ispell-change-dictionary "american" t)
   #+END_EXAMPLE
2) 模式关联
   #+BEGIN_EXAMPLE
     (setq text-mode-hook '(lambda ()
                             (flyspell-mode t)))
   #+END_EXAMPLE
   注:从速度角度考虑,不推荐进行模式关联,推荐使用 *M-x flyspell-mode*
   来启动aspell的拼写检查功能.
**** flyspell模式使用与技巧
 |----------------------+------------------------------------------------------------|
 | ispell-word(M-$)     | check and correct the word at point/regioin                |
 | ispell               | check all the words in the buffer/region                   |
 | ispell-buffer        | check spelling in the buffer                               |
 | ispell-region        | check spelling in the region                               |
 | ispell-message       | check spelling in a draft mail message                     |
 | flyspell-mode        | Enable flyspell-mode,which highlights all misspelled words |
 | flyspell-prog-mode   | Enable flyspell-mode for comments and strings only         |
 | ispell-kill-ispell   | kill the aspell/ispell/Hunspell subprocess                 |
 | ispell-complete-word | complete the world, bindding to M-TAB                      |
 |----------------------+------------------------------------------------------------|

 *ispell-local-dictionary* 变量指定词典.
 *M-x ispell-change-dictionary* sets the dictionary and restart
 *subprocess.
 *ispell-personal-dictionary* 变量指定个人词典.
 *ispell-complete-word-dict* 变量指定单词补全使用的词典.

 Flyspell mode is a minor mode that performs automatic spell checking
 as you type. When it finds a word that it does not recognize, it
 highights that word. Type *M-x flyspell-mode* to toggle Flyspell mode
 in the current buffer.
 When Flyspell mode highlights a word as missspelled, you can click on
 it with *Mouse-2* to display a menu of possible corrections and
 actions.

 并不推荐on the fly的使用方法(Emacs与外部程序的通信和数据交换总是要浪
 费大量时间).最好的方法是,平时不开flymode,等写完了文章使用命令 M-x
 ispell-regoin 进行拼写检查.

|--------+----------------------------------------------------------------------|
| 命令   | 解释                                                                 |
|--------+----------------------------------------------------------------------|
| digit  | 屏幕的一半会显示出可以替换的正确单词，并用数字编号，输入这个数字编号 |
|        | 就可以选择提示单词，并且用来替换当前错误拼写的单词。                 |
| <SPC>  | 跳过当前单词的拼写检查，承认其错误，但是在这里并不改正。             |
| r new  | 用一个新输入的单词替换当前拼写错误的单词                             |
| <RET>  |                                                                      |
| R new  | 用一个新输入的单词替换当前拼写错误的单词，并且 flyspell 会提示是否替 |
| <RET>  | 换文章中其它地方出现的类似拼写错误。                                 |
| a      | 在当前编辑区域里，把当前提示错误的拼写当作正确的拼写。               |
| A      | 在当前的 buffer 里，把当前提示错误的拼写当作正确的拼写。             |
| i      | 把当前的单词插入到你的私人字典文件里，这样以后 Aspell 或 Ispell 或   |
|        | Hunspell 就会把它当作正确的单词来对待了。                                                                     |
| m      | 与 i 命令的操作相同，但是我们可以提供更多的补充信息                  |
| u      | 插入当前单词的小写形式到字典里。                                     |
| l word | 在词典里查找与该单词匹配的单词，这些单词会成为新的候选单词，我们可以 |
| <RET>  | 通过数字来选择它们中的其中一个作为替换。可以用 * 号来作为通配符。    |
| C-g    | 退出交互式的拼写检查操作，鼠标停留在当前被检查的单词上，可以用命令   |
| X      | C-u M-$ 来重新进行单词拼写检查。                                     |
| x      | 退出单词拼写检查并把光标返回到拼写检查开始前的位置。                 |
| q      | 退出交互式拼写检查，并且结束 Aspell/Ispell/Hunspell 等子进程。       |
| ?      | 显示帮助信息                                                         |
|--------+----------------------------------------------------------------------|
**** TODO 给flyspell添加自定义的词典
参考Aspell手册.
** antiword                                                  :word:antiword:

+ http://superuser.com/questions/116289/word-2007-files-on-emacs

Antiword is a free MS-Word reader for GNU/Linux, RISC OS, and DOS. It
converts the documents from Word 2, 6, 7, 97, 2000, 2002, and 2003 to
text, Postscript, and XML/DocBook. Antiword tries to keep the layout
of the document intact.

#+BEGIN_EXAMPLE
  (defun no-word ()
        "Run antiword on the entire buffer."
        (shell-command-on-region (point-min) (point-max) "antiword - " t t))
  (add-to-list 'auto-mode-alist '("\\.doc\\'" . no-word))
#+END_EXAMPLE
** gnu go                                                    :go:围棋:gnugo:

*** reference

- [[http://www.gnu.org/software/gnugo/gnugo.html][Homepage]]
- [[https://zh.wikipedia.org/wiki/GNU_Go][Wikipedia]]
- [[http://www.emacswiki.org/emacs/GoMode][EmacsWiki: GoMode]]
- [[http://www.gnuvola.org/software/gnugo/][gnugo.el]]

*** overview

GNU Go是自由软体基金会所研发的围棋软件。它的源代码具有可移植性，能够轻
易的编译成GNU/Linux的软件，也可移植到类 Unix 系统或Microsoft Windows和
Mac OS X上运行。GNU Go等级分为 0~10 级，0 是最弱，10 是最强，程序与玩
家对弈围棋，在9x9棋盘，约有 5 到 7 级的强度，并且支持从 5x5 到 19x19
多种棋盘大小。

在级别的性能上，2009年，GNU Go曾与最顶尖的商业软件在良好的硬件运行下一
起比较，大约弱6到7子，但是此时一起比较的最强软件，并非使用蒙地卡罗方法。

GNU Go在许多电脑围棋竞赛表现出色。例如它拿下2003年和2006年的奥林匹亚电脑竞赛。

虽然是ASCII界面，GNU Go支持两种协议——围棋调制解调器协议（Go Modem
Protocol）和围棋文字协议（Go Text Protocol），且可转成图形用户界面对弈，
目前存在许多GNU Go的图形用户界面。GTP也可在围棋服务器进行在线对弈（原
先用在桥牌软件上），在NNGS、KGS和其它平台，也有它的复制品在运行。

*** emacs gnugo

https://gongyiliao.wordpress.com/2009/11/07/fun-with-gnugo-in-emacs/

Once you install GNU Go, you will have access to gnugo.el. Use ‘M-x
gnugo’ to play.

Mepla install *gnugo* not /go-mode/

#+BEGIN_SRC emacs-lisp
  (require 'gnugo)
#+END_SRC

i 切换为图片背景, 原始为 ASCII界面

#+BEGIN_EXAMPLE
gnugo-xmps unset
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(setq 'gnugo-xpms ???)
#+END_SRC

不折腾这些设置

https://github.com/ligi/gobandroid-ai-gnugo/blob/master/src/main/jni/project/gnugo-3.8/interface/gnugo-xpms.el

#+BEGIN_SRC emacs-lisp
  ";;; generated file --- do not edit!
  ;;; This is GNU Go, a Go program. Contact gnugo@gnu.org, or see
  ;;; http://www.gnu.org/software/gnugo/ for more information.
  ;;;
  ;;; Copyright (C) 2003, 2004 by the Free Software Foundation.
  ;;;
  ;;; This program is free software; you can redistribute it and/or
  ;;; modify it under the terms of the GNU General Public License
  ;;; as published by the Free Software Foundation - version 3
  ;;; or (at your option) any later version.
  ;;;
  ;;; This program is distributed in the hope that it will be
  ;;; useful, but WITHOUT ANY WARRANTY; without even the implied
  ;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  ;;; PURPOSE.  See the GNU General Public License in file COPYING
  ;;; for more details.
  ;;;
  ;;; You should have received a copy of the GNU General Public
  ;;; License along with this program; if not, write to the Free
  ;;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
  ;;; Boston, MA 02111, USA.
  "(defconst gnugo-xpms
    (mapcar
     (lambda
       (pair)
       (cons
        (car pair)
        (find-image
         (list
          (list :type 'xpm :data
                (cdr pair)
                :ascent 'center)))))
     '(((bmoku . 1)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"                              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" ............................ \",\n\" ............................ \",\n\" .............................\",\n\" .............................\",\n\" ............................ \",\n\" ............................ \",\n\" ............................ \",\n\"  ..........................   \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bmoku . 2)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"                              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" ............................ \",\n\" ............................ \",\n\"..............................\",\n\"..............................\",\n\" ............................ \",\n\" ............................ \",\n\" ............................ \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bmoku . 3)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"                              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" ............................ \",\n\" ............................ \",\n\"............................. \",\n\"............................. \",\n\" ............................ \",\n\" ............................ \",\n\" ............................ \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bmoku . 4)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" ............................ \",\n\" ............................ \",\n\" .............................\",\n\" .............................\",\n\" ............................ \",\n\" ............................ \",\n\" ............................ \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bmoku . 5)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" ............................ \",\n\" ............................ \",\n\"..............................\",\n\"..............................\",\n\" ............................ \",\n\" ............................ \",\n\" ............................ \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bmoku . 6)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" ............................ \",\n\" ............................ \",\n\"............................. \",\n\"............................. \",\n\" ............................ \",\n\" ............................ \",\n\" ............................ \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bmoku . 7)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" ............................ \",\n\" ............................ \",\n\" .............................\",\n\" .............................\",\n\" ............................ \",\n\" ............................ \",\n\" ............................ \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"                              \"};\n\n")
       ((bmoku . 8)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" ............................ \",\n\" ............................ \",\n\"..............................\",\n\"..............................\",\n\" ............................ \",\n\" ............................ \",\n\" ............................ \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"                              \"};\n\n")
       ((bmoku . 9)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" ............................ \",\n\" ............................ \",\n\"............................. \",\n\"............................. \",\n\" ............................ \",\n\" ............................ \",\n\" ............................ \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"                              \"};\n\n")
       ((bpmoku . 1)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 6 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"+ c #FFFFFFFFFFFF\",\n\"                              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" .............OO............. \",\n\" ............O++O............ \",\n\" ...........O++++O............\",\n\" ...........O++++O............\",\n\" ............O++O............ \",\n\" .............OO............. \",\n\"  ........................... \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bpmoku . 2)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 6 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"+ c #FFFFFFFFFFFF\",\n\"                              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" .............OO............. \",\n\" ............O++O............ \",\n\" ...........O++++O............\",\n\" ...........O++++O............\",\n\" ............O++O............ \",\n\" .............OO............. \",\n\"  ........................... \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bpmoku . 3)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 6 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"+ c #FFFFFFFFFFFF\",\n\"                              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" .............OO............. \",\n\" ............O++O............ \",\n\"............O++++O........... \",\n\"............O++++O........... \",\n\" ............O++O............ \",\n\" .............OO............. \",\n\"  ........................... \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bpmoku . 4)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 6 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"+ c #FFFFFFFFFFFF\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" .............OO............. \",\n\" ............O++O............ \",\n\" ...........O++++O............\",\n\" ...........O++++O............\",\n\" ............O++O............ \",\n\" .............OO............. \",\n\"  ........................... \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bpmoku . 5)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 6 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"+ c #FFFFFFFFFFFF\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" .............OO............. \",\n\" ............O++O............ \",\n\"............O++++O............\",\n\"............O++++O............\",\n\" ............O++O............ \",\n\" .............OO............. \",\n\"  ........................... \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bpmoku . 6)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 6 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"+ c #FFFFFFFFFFFF\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" .............OO............. \",\n\" ............O++O............ \",\n\"............O++++O........... \",\n\"............O++++O........... \",\n\" ............O++O............ \",\n\" .............OO............. \",\n\"  ........................... \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((bpmoku . 7)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 6 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"+ c #FFFFFFFFFFFF\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" .............OO............. \",\n\" ............O++O............ \",\n\" ...........O++++O............\",\n\" ...........O++++O............\",\n\" ............O++O............ \",\n\" .............OO............. \",\n\"  ........................... \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"                              \"};\n\n")
       ((bpmoku . 8)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 6 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"+ c #FFFFFFFFFFFF\",\n\"              ..              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" .............OO............. \",\n\" ............O++O............ \",\n\"............O++++O............\",\n\"............O++++O............\",\n\" ............O++O............ \",\n\" .............OO............. \",\n\"  ........................... \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"                              \"};\n\n")
       ((bpmoku . 9)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 6 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"+ c #FFFFFFFFFFFF\",\n\"                              \",\n\"           ........           \",\n\"         ............         \",\n\"       ................       \",\n\"      ..........XXX.....      \",\n\"     ..........XXXXXX....     \",\n\"    ..........XXooooXX....    \",\n\"   ...........XooOOOooX....   \",\n\"   ...........XooOOOoXX....   \",\n\"  ............XoooOoooX.....  \",\n\"  .............XXoooXX......  \",\n\" ...............XXXXX........ \",\n\" .............OO............. \",\n\" ............O++O............ \",\n\" ...........O++++O............\",\n\" ...........O++++O............\",\n\" ............O++O............ \",\n\" .............OO............. \",\n\"  ........................... \",\n\"  ..........................  \",\n\"  ..........................  \",\n\"   ........................   \",\n\"   ........................   \",\n\"    ......................    \",\n\"     ....................     \",\n\"      ..................      \",\n\"       ................       \",\n\"         ............         \",\n\"           ........           \",\n\"              ..              \"};\n\n")
       ((empty . 1)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"              ................\",\n\"              ................\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \"};\n\n")
       ((empty . 2)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"..............................\",\n\"..............................\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \"};\n\n")
       ((empty . 3)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"................              \",\n\"................              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \"};\n\n")
       ((empty . 4)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ................\",\n\"              ................\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \"};\n\n")
       ((empty . 5)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"..............................\",\n\"..............................\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \"};\n\n")
       ((empty . 6)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"................              \",\n\"................              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \"};\n\n")
       ((empty . 7)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ................\",\n\"              ................\",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \"};\n\n")
       ((empty . 8)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"..............................\",\n\"..............................\",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \"};\n\n")
       ((empty . 9)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"................              \",\n\"................              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \",\n\"                              \"};\n\n")
       ((hoshi . 5)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * bmoku1_xpm[] = {\n\"30 30 5 1\",\n\"       c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #618561856185\",\n\"o c #9E799E799E79\",\n\"O c #CF3CCF3CCF3C\",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"             ....             \",\n\"..............................\",\n\"..............................\",\n\"             ....             \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \",\n\"              ..              \"};\n\n")
       ((wmoku . 1)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"                              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXXXO++@@@@@++OOXo \",\n\" %%%%$$$$ooooXXOO+++@@+++OXXo \",\n\" &%%%%$$$$oooXXXOOO++++OOOXXo.\",\n\" &&&%%%$$$ooooXXXXOOOOOOOOXoo.\",\n\" &&&%%%%$$$ooooXXXXXOOOOXXXoo \",\n\" &&&&%%%$$$$ooooXXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wmoku . 2)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"                              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXXXO++@@@@@++OOXo \",\n\" %%%%$$$$ooooXXOO+++@@+++OXXo \",\n\".&%%%%$$$$oooXXXOOO++++OOOXXo.\",\n\".&&&%%%$$$ooooXXXXOOOOOOOOXoo.\",\n\" &&&%%%%$$$ooooXXXXXOOOOXXXoo \",\n\" &&&&%%%$$$$ooooXXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wmoku . 3)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"                              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXXXO++@@@@@++OOXo \",\n\" %%%%$$$$ooooXXOO+++@@+++OXXo \",\n\".&%%%%$$$$oooXXXOOO++++OOOXXo \",\n\".&&&%%%$$$ooooXXXXOOOOOOOOXoo \",\n\" &&&%%%%$$$ooooXXXXXOOOOXXXoo \",\n\" &&&&%%%$$$$ooooXXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wmoku . 4)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXXXO++@@@@@++OOXo \",\n\" %%%%$$$$ooooXXOO+++@@+++OXXo \",\n\" &%%%%$$$$oooXXXOOO++++OOOXXo.\",\n\" &&&%%%$$$ooooXXXXOOOOOOOOXoo.\",\n\" &&&%%%%$$$ooooXXXXXOOOOXXXoo \",\n\" &&&&%%%$$$$ooooXXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wmoku . 5)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXXXO++@@@@@++OOXo \",\n\" %%%%$$$$ooooXXOO+++@@+++OXXo \",\n\".&%%%%$$$$oooXXXOOO++++OOOXXo.\",\n\".&&&%%%$$$ooooXXXXOOOOOOOOXoo.\",\n\" &&&%%%%$$$ooooXXXXXOOOOXXXoo \",\n\" &&&&%%%$$$$ooooXXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wmoku . 6)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXXXO++@@@@@++OOXo \",\n\" %%%%$$$$ooooXXOO+++@@+++OXXo \",\n\".&%%%%$$$$oooXXXOOO++++OOOXXo \",\n\".&&&%%%$$$ooooXXXXOOOOOOOOXoo \",\n\" &&&%%%%$$$ooooXXXXXOOOOXXXoo \",\n\" &&&&%%%$$$$ooooXXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wmoku . 7)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXXXO++@@@@@++OOXo \",\n\" %%%%$$$$ooooXXOO+++@@+++OXXo \",\n\" &%%%%$$$$oooXXXOOO++++OOOXXo.\",\n\" &&&%%%$$$ooooXXXXOOOOOOOOXoo.\",\n\" &&&%%%%$$$ooooXXXXXOOOOXXXoo \",\n\" &&&&%%%$$$$ooooXXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"                              \"};\n")
       ((wmoku . 8)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXXXO++@@@@@++OOXo \",\n\" %%%%$$$$ooooXXOO+++@@+++OXXo \",\n\".&%%%%$$$$oooXXXOOO++++OOOXXo.\",\n\".&&&%%%$$$ooooXXXXOOOOOOOOXoo.\",\n\" &&&%%%%$$$ooooXXXXXOOOOXXXoo \",\n\" &&&&%%%$$$$ooooXXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"                              \"};\n")
       ((wmoku . 9)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXXXO++@@@@@++OOXo \",\n\" %%%%$$$$ooooXXOO+++@@+++OXXo \",\n\".&%%%%$$$$oooXXXOOO++++OOOXXo \",\n\".&&&%%%$$$ooooXXXXOOOOOOOOXoo \",\n\" &&&%%%%$$$ooooXXXXXOOOOXXXoo \",\n\" &&&&%%%$$$$ooooXXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"                              \"};\n")
       ((wpmoku . 1)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"                              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXX&&++@@@@@++OOXo \",\n\" %%%%$$$$oooo&..&+++@@+++OXXo \",\n\" &%%%%$$$$oo&....&O++++OOOXXo.\",\n\" &&&%%%$$$oo&....&OOOOOOOOXoo.\",\n\" &&&%%%%$$$oo&..&XXXOOOOXXXoo \",\n\" &&&&%%%$$$$oo&&XXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wpmoku . 2)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"                              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXX&&++@@@@@++OOXo \",\n\" %%%%$$$$oooo&..&+++@@+++OXXo \",\n\".&%%%%$$$$oo&....&O++++OOOXXo.\",\n\".&&&%%%$$$oo&....&OOOOOOOOXoo.\",\n\" &&&%%%%$$$oo&..&XXXOOOOXXXoo \",\n\" &&&&%%%$$$$oo&&XXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wpmoku . 3)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"                              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXX&&++@@@@@++OOXo \",\n\" %%%%$$$$oooo&..&+++@@+++OXXo \",\n\".&%%%%$$$$oo&....&O++++OOOXXo \",\n\".&&&%%%$$$oo&....&OOOOOOOOXoo \",\n\" &&&%%%%$$$oo&..&XXXOOOOXXXoo \",\n\" &&&&%%%$$$$oo&&XXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wpmoku . 4)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXX&&++@@@@@++OOXo \",\n\" %%%%$$$$oooo&..&+++@@+++OXXo \",\n\" &%%%%$$$$oo&....&O++++OOOXXo.\",\n\" &&&%%%$$$oo&....&OOOOOOOOXoo.\",\n\" &&&%%%%$$$oo&..&XXXOOOOXXXoo \",\n\" &&&&%%%$$$$oo&&XXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wpmoku . 5)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXX&&++@@@@@++OOXo \",\n\" %%%%$$$$oooo&..&+++@@+++OXXo \",\n\".&%%%%$$$$oo&....&O++++OOOXXo.\",\n\".&&&%%%$$$oo&....&OOOOOOOOXoo.\",\n\" &&&%%%%$$$oo&..&XXXOOOOXXXoo \",\n\" &&&&%%%$$$$oo&&XXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wpmoku . 6)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXX&&++@@@@@++OOXo \",\n\" %%%%$$$$oooo&..&+++@@+++OXXo \",\n\".&%%%%$$$$oo&....&O++++OOOXXo \",\n\".&&&%%%$$$oo&....&OOOOOOOOXoo \",\n\" &&&%%%%$$$oo&..&XXXOOOOXXXoo \",\n\" &&&&%%%$$$$oo&&XXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"              ..              \"};\n")
       ((wpmoku . 7)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXX&&++@@@@@++OOXo \",\n\" %%%%$$$$oooo&..&+++@@+++OXXo \",\n\" &%%%%$$$$oo&....&O++++OOOXXo.\",\n\" &&&%%%$$$oo&....&OOOOOOOOXoo.\",\n\" &&&%%%%$$$oo&..&XXXOOOOXXXoo \",\n\" &&&&%%%$$$$oo&&XXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"                              \"};\n")
       ((wpmoku . 8)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXX&&++@@@@@++OOXo \",\n\" %%%%$$$$oooo&..&+++@@+++OXXo \",\n\".&%%%%$$$$oo&....&O++++OOOXXo.\",\n\".&&&%%%$$$oo&....&OOOOOOOOXoo.\",\n\" &&&%%%%$$$oo&..&XXXOOOOXXXoo \",\n\" &&&&%%%$$$$oo&&XXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"                              \"};\n")
       ((wpmoku . 9)
        . "/* XPM */\n/* Copyright 2004 by the Free Software Foundation. See COPYING */\nstatic char * wmoku5_xpm[] = {\n\"30 30 11 1\",\n\"      c #E79DB2CA4924\",\n\". c #000000000000\",\n\"X c #CF3CCF3CCF3C\",\n\"o c #C71BC71BC71B\",\n\"O c #D75CD75CD75C\",\n\"+ c #DF7DDF7DDF7D\",\n\"@ c #E79DE79DE79D\",\n\"# c #EFBEEFBEEFBE\",\n\"$ c #BEFBBEFBBEFB\",\n\"% c #B6DAB6DAB6DA\",\n\"& c #AEBAAEBAAEBA\",\n\"              ..              \",\n\"           XXoooXOX           \",\n\"         oXXXXXXOOOOX         \",\n\"       XoXXXXXXOOOOOOXX       \",\n\"      XooXXXXXOO++++++OX      \",\n\"     XoooXXXXOO+++@@@++OX     \",\n\"    ooooooXXXOO++@@@@@+++O    \",\n\"   XooooooXXXOO+@@###@@+++X   \",\n\"   Xoo$oooXXXOO+@@####@@++O   \",\n\"  ooo$$$oooXXOO+@@#####@++OO  \",\n\"  o$$$$$oooXXOO++@####@@++OO  \",\n\" %$$$$$$$oooXXOO+@@@#@@@++OXo \",\n\" %%%%$$$$oooXX&&++@@@@@++OOXo \",\n\" %%%%$$$$oooo&..&+++@@+++OXXo \",\n\".&%%%%$$$$oo&....&O++++OOOXXo \",\n\".&&&%%%$$$oo&....&OOOOOOOOXoo \",\n\" &&&%%%%$$$oo&..&XXXOOOOXXXoo \",\n\" &&&&%%%$$$$oo&&XXXXXXXXXXXoo \",\n\" &&&&&%%%$$$$oooooXXXXXXXXooo \",\n\"  &&&&&%%$$$$$oooooooXXXXXXo  \",\n\"  &&&&&%%%$$$$$ooooooooooXXX  \",\n\"   &&&&&&%%%%$$$$$oooooooXX   \",\n\"   %&&&&&%%%%%$$$$$$$$oooXX   \",\n\"    &&&&&&%%%%%$$$$$$$ooXX    \",\n\"     &&&&&&%%%%%%%%%$$ooX     \",\n\"      &&&&&&&&%%%%%%%$oo      \",\n\"       &&&&&&&&&&%%%%$o       \",\n\"         &&&&&&&&&%%$         \",\n\"           &&&&&&%%           \",\n\"                              \"};\n")))
    "Alist of XPM images suitable for use by gnugo.el.\nKeys are (TYPE . PLACE), where TYPE is one of:\n  bmoku bpmoku empty hoshi wmoku wpmoku\nand PLACE is an integer describing a visible location:\n  1 2 3\n  4 5 6\n  7 8 9.\nThe image values are the result of `find-image'.")
  (provide 'gnugo-xpms)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'gnugo-xpms)
#+END_SRC

* Org-mode                                                        :EMACS:ORG:
** OrgModeTutorials
*** brief manual
$ turn-on-font-lock    # 语法高亮
**** Visibility cycling(视图循环)
|-----------------+----------------------------------------------|
| TAB             | Subtree cycling: FOLDED->CHILDREN->SUBTREE   |
| S-TAB           | Global cycling: OVERVIEW->CONTENTS->SHOW ALL |
| C-u C-u C-u TAN | show all, include drawers                    |
|-----------------+----------------------------------------------|
$ org-startup-folded    # variable to determine the initial behaviour
元数据: #+STARTUP: content    # overview/content/showall
**** Motion(标题间移动)
|---------+----------------------------------|
| C-c C-n | Next heading                     |
| C-c C-p | Previous heading                 |
| C-c C-f | Next heading the same level      |
| C-c C-b | Previous heading the same level  |
| C-c C-u | Backward to higher level heading |
|---------+----------------------------------|
**** Structure editing
|-----------------+-----------------------------------------------------|
| M-RET           | Insert new heading with the same level              |
| M-S-RET         | Insert new TODO entry with the same level           |
| M-LEFT/RIGHT    | Promote/demote current heading by one level         |
| M-S-LEFT/RIGHT  | Promote/demote the current subtree                  |
| M-S-UP/DOWNLOAD | Move subtree up/down                                |
| C-c C-w         | Refile entry ot region to a different location      |
| C-x n s/w       | Narrow buffer to the current subtree/widen it again |
|-----------------+-----------------------------------------------------|
**** Sparse trees
**** Plain list
*unordered list items start with:- + **
*Ordered list items start with: 1. or 1)*
*Description list use '::' to separate the term from the
description*
|-----------------+-------------------------------------------------------|
| TAB             | Fold or unfold current item                           |
| M-RET           | Insert new item at the current level                  |
| M-S-RET         | Insert a new item with a checkbox *?*                 |
| M-S-UP/DOWNLOAD | Move the item up/down                                 |
| M-LEFT/RIGHT    | Decrease/increase the indentation of an item          |
| M-S-LEFT/RIGHT  | Decrease/increase the indentation, including subitems |
| C-c C-c         | toggle the state of the checkbox if existing          |
|                 | also verify bullets and indentation consistency       |
| C-c -           | Cycle the entire list level through the diffent       |
|                 | itemize/enumerate bullet('-' '+' '*' '1.' '1)')       |
|-----------------+-------------------------------------------------------|
**** Footnotes(脚注)
*[fn:*]*   # a footnote marker, replace * with any number or label

|-----------+------------------------------------------|
| C-c C-x f | create a new footnote                    |
|           | or jump between definition and reference |
| C-c C-c   | jump between definitin and reference     |
|-----------+------------------------------------------|
**** Tables
*|-*  # considered to be a horizontal separator
C-c |  Convert the active region to table
|--------------+-----------------------------------------------------------|
| C-c C-c      | Re-align the tabel                                        |
| TAB          | Re-align, and move to the next field                      |
| S-TAB        | Re-align, and move previous field                         |
| RET          | Re-align, and move down to new row                        |
|--------------+-----------------------------------------------------------|
| M-LEFT/RIGHT | Move the current column left/right                        |
| M-S-LEFT     | Kill the current column                                   |
| M-S-RIGHT    | Insert a new column to the left of the cursor position    |
| M-UP/DOWN    | Move the current row up/down                              |
| M-S-UP       | Kill the current row or horizontal line                   |
| M-S-Down     | Insert a new row above the current row                    |
| C-c -        | Insert a horizontal line between the current row          |
| C-c RET      | move down to next row, and insert a horizontial separator |
| C-c ^        | sort the table lines in the region                        |
|--------------+-----------------------------------------------------------|
**** Hyperlinks
#+BEGIN_EXAMPLE
   [[link][description]]  / [link]
#+END_EXAMPLE

|---------+----------------------|
| C-c C-l | edit the 'link' part |
| 你好    | hello                |
|---------+----------------------|
*** GTD管理

  Org mode takes TODO items as an intergral part to the notes file,
  and provides medthods to give you an overview of all the things
  that you have to do.

**** Basic TODO functionality
|-----------------+-------------------------+-----------------------------------------------|
| C-c C-t         | org-todo                | rotate the TODO state of the current item     |
| S-right /S-left |                         | select the following/preceding TODO state     |
| C-c / t         | org-show-todo-tree      | view TODO items in a  sparse tree             |
| C-u C-c / t     | C-c / T                 | view iemts with specific TODO                 |
| C-c a t         | org-todo-list           | show the glabal TODO list                     |
| S-M-RET         | org-insert-todo-heading | insert a new TODO entry below the current one |
|-----------------+-------------------------+-----------------------------------------------|
**** Extended use of TODO keywords
Default states: TODO and DONE.(TODO keywords stored
in *org-todo-keywords*)
***** *TODO* keywords as workflow states
#+BEGIN_EXAMPLE
  (setq org-todo-keywords
        '((sequence "TODO" "FEEDBACK" "VERITY" "|" "DONE" "DELEGATED")))
#+END_EXAMPLE

***** *TODO* keywords as types
The second possibility is to use TODO keywords to indicate different
types of action items.
#+BEGIN_EXAMPLE
  (setq org-todo-keys
        '((type "Fred" "Sara" "Lucy" "|" "DONE")))
#+END_EXAMPLE
***** Multiple keyword sets in one file
#+BEGIN_EXAMPLE
  (setq org-todo-keywords
        '((sequence "TODO" "|" "DONE")
          (sequence "REPORT" "BUG" "KNOWnCAUSE" "|" "FIXED")))
#+END_EXAMPLE
C-u C-u C-c C-t
C-S-right
C-S-left
***** Fast access to TODO states
set up keys for single-letter access to the states
#+BEGIN_EXAMPLE
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d)")
          (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
          (sequence | "CANCELED(c)")))
#+END_EXAMPLE
Note: SPC can be used to remove any TODO keyword from an entry.
***** Setting up keywords for individual files
#+BEGIN_EXAMPLE
  ,#+TODO: TODO FEEDBACK VERITY | DONE CANCELED
  ,#+TYPE_TODO: Fred Sara Lucy Mike | DONE

  ,#+TODO: TODO | DONE
  ,#+TODO: REPORT BUG KNOWNCAUSE | FIXED
  ,#+TODO: | CANCELED
#+END_EXAMPLE
Note: the keywords after the vertical bar (or the last keyword if no
bar is there) must always means that the item is DONE.

***** Faces for TODO keywords
#+BEGIN_EXAMPLE
  (setq org-todo-keyword-faces
        '(("TODO" . org-warning) ("STARTED" . "yellow")
          ("CANCELED" . (:foreground "blue" :weight bold))))
#+END_EXAMPLE
**** 元数据
文档元数据"#+TODO:"或"#+SEQ_TODO:",可以在文档的任何地方定义,但是建议统一定义在文档头部.
C-c C-c 使其生效.

+ !     切换该状态时会自动增加时间戳
+ @     切换到该状态时要求输入文字说明
+ @/!   同时设定以上两者

**** 任务优先级
Org-mode针对任务设定了A,B,C三种优先级,在安排日程时可按照优先级进行排序.
快捷键: S-UP/DOWN
**** 跟踪子任务
在上级标题的任意位置插入 [%] 或 [/],当任务状态变化时会自动更新其值
注意：
 1. 当改变子任务状态时，只更新上一级任务的完成情况，不可级联。
 2. 即使所有的子任务都完成，也只是标记上一级任务的完成情况为100%，而不能自动更新
    上级任务的完成状态。如果需要自动设定为完成，可以在.emacs中增加如下配置：
    #+BEGIN_EXAMPLE
       (defun org-summary-todo (n-done n-not-done)
           "Switch entry to DONE when all subentries are done, to TODO otherwise."
           (let (org-log-done org-log-states)   ; turn off logging
                 (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

       (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
    #+END_EXAMPLE
**** 用复选框标记非标题类型的子任务
对于任何以"[ ]"开头的列表,会被当作复选框,形成子任务.
快捷键:
+ C-c C-c 改变状态
+ M-S-RET 增加一个子项
***** 一个任务 [0%]
- [-] 步骤一 [2/3]
  - [X] 步骤1.1
  - [X] 步骤1.2
  - [ ] 步骤1.3
- [-] 步骤2 [33%]
  - [X] 步骤2.1
  - [ ] 步骤2.2
  - [ ] 步骤2.3

**** 查询任务
C-c /
**** 时间
在ORG中,还可以设置任务的计划时间(SCHEDULED)和截止时间(DEADLINE).
***** 时间戳

在ORG中,将带有日期和时间信息的特定格式的字符串称为时间戳,时间戳使用"< >"进行标记.

1) 时间点

   #+BEGIN_EXAMPLE
     <2005-10-01 Tue>
     <2003-09-20 六 09:40>
     <2003-09-17 三 12:00-12:30>
   #+END_EXAMPLE

2) 周期

   #+BEGIN_EXAMPLE
     <2007-05-16 Wed 12:30 +1y>
   #+END_EXAMPLE

3) 时间段: 两个时间戳用 "--" 连接起来就定义了一个时间段

   #+BEGIN_EXAMPLE
     <2015-02-25 三>--<2015-02-27 五>
   #+END_EXAMPLE

快捷键
|--------------+----------------------|
| 手工输入     |                      |
| C-c .        | 选择日期插入         |
| C-c <        | 插入当前日期         |
| C-c >        | 查看日历             |
| C-c !        | 输入日期,与任务无关  |
| S-left/right | 按天调整时间戳       |
| S-up/S-down  | 高速光标所在时间单位 |
|--------------+----------------------|

注: 改变时间戳中光标下的项。光标可以处在年、月、日、时或者分之上。当时间戳包含一个
时间段时，如 “15:30-16:30”，修改第一个时间，会自动同时修改第 DOWN 二个时间，以保
持时间段长度不变。想修改时间段长度，可以修改第二个时间。
***** 计划时间和截止时间
|---------+----------|
| C-c C-s | 计划时间 |
| C-c C-d | 截止时间     |
|---------+--------------|
**** 全局任务文件清单
预定义清单
#+BEGIN_EXAMPLE
  (setq org-agenda-files (list "~/.todos/work.org"
                                   "~/.todos/projects.org"
                                   "~/.todos/home.org"
                                   "~/Documents/todo/"
                                 ))
#+END_EXAMPLE
|---------+----------------------|
| C-c [   | 将当前文件加入清单   |
| C-x ]   | 将当前文件移出清单   |
| C-c ' / | 循环打开所有清单文件 |
|---------+----------------------|

**** 全局TODO列表
C-c a t   全局TODO列表
如果提示C-c a快捷键未定义，是因为Org-mode的快捷键没有启用，需要在.emacs中增加配
置：
#+BEGIN_EXAMPLE
      (global-set-key "\C-cl" 'org-store-link)
      (global-set-key "\C-cc" 'org-capture)
      (global-set-key "\C-ca" 'org-agenda)
      (global-set-key "\C-cb" 'org-iswitchb)
#+END_EXAMPLE
**** 日程表
C-c a a
** Babel & Source code                                               :babel:
*** block                                                           :block:
**** org mode 冒号开头的行

http://orgmode.org/guide/Literal-examples.html

: like this what?

For simplicity when using small examples, you can also start the
example lines with a colon followed by a space. There may also be
additional whitespace before the colon.

*** 代码按语法高亮
org-mode在导出成HTML时,可以对代码按照各自的语法进行高亮,只要在
#begin_src后面声明的语言是emacs所支持的,即其对应的major mode存在.
编辑的时候也可以高亮
*(setq org-src-fontify-natively t)*
e.g.
#+BEGIN_EXAMPLE
;; fontify code in code blocks
(setq org-src-fontify-natively t)
#+END_EXAMPLE

*** Org-babel
参考:
+ [[docview:~/Document/tutorials/A%20Multi-Language%20Computing%20Environment%20for][A Multi-Language Computing Environment for Literate Programming and Reproducible Research]]
+ [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel: Introduction]]
+ [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html][C, C++, D Source Code Blocks in Org Mode]]

*** code block in org
Code blocks can be entered directly into the org-mode file, but if is
often easier to enter code with the function *org-edit-src-code*,
which is called with the keyboard shortcut *C-c '**. This places the
code block in a new buffer with the appropriate mode activated.
*** code block in Babel
Babel adds some new elements to code blocks.The basic structure
becomes:
#+BEGIN_EXAMPLE
  ,#+BEGIN_SRC language org-switches header-arguments
  ,body
  ,#+END_SRC
#+END_EXAMPLE
+ *language*
  Valid values must be members of *org-babel-interpreters*
+ *header-arguments*
  Header arguments control many facets of the evaluation and output of
  souce-code blocks
+ *body*
*** session
The *:session* header argument starts a session for an *interpreted
language* where the state is preserved.

By default, a session is not started.

A string passed to the :session header argument will give session the
name. This make it possible to run concurrent sessions for each
interpreted language.

#+BEGIN_SRC sh :session exam_session :exports both
  cd /etc
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :session exam_session :exports both
  pwd
#+END_SRC

#+RESULTS:

*** tangle
1. Header arguments
   1) :tangle no

      The default.

   2) :tangle yes

      Include the code in the tangled output with the same name of the
      org file

   3) :tangle filename

      Specify the filename of the tangled output

2. Function
   | C-c C-v t | org-babel-tangle      | tangle the current file |
   | C-c C-v f | org-babel-tangle-file | choose a file to tangle |
**** #+header: :tangle
+ :tangle no  --- default, tangle nothing
+ :tangle yes --- tangle output to file with the same name of the org-file
+ :tangle filename --- tangle output  the specified name

**** cmd
1. org-babel-tangle
   + tangle the current file
   + C-c C-v t
   + With prefix argument only tangle the current code block
2. org-babel-tanle-file
   + choose a file to tangle
   + C-c C-v f

*** :padline
**** what
Control in insertion of padding lines around code block bodies in
tangled code files. The default value is yes which results in
insertion of newlines before and after each tangled code block. The
following arguments are accepted.
+ yes: Insert newlines before and after each code block body in tangled
  code files.
+ no: Do not insert any newline padding in tangled output.
**** why
The  *org-babel-tangle-jump-to-org* function provides this jumping
from code to Org-mode functionality.

Two header arguments are required for jumping to work,
+ first the padline option must be set to true ,
+ second the comments header argument must be set to links, which will
  insert comments into the source code buffer which point back to the
  original Org-mode file.

*** :results

|-----------------+--------------------------+-------------------------------------|
|                 | Non-session              | session                             |
|-----------------+--------------------------+-------------------------------------|
| :results value  | value of last expression | value of last expression            |
| :results output | contents of STDOUT       | concatenation of interperter output |
|-----------------+--------------------------+-------------------------------------|

Note: With *:results value*, the result in both :session and
non-session is return to the Org mode as *a table* when appropriate.

*** org-src-lang-mode
org-src-lang-modes: Alist mapping languages to their major mode.

org-src-lang-modes is a variable defined in `org-src.el'.
Its value is shown below.

Documentation:
Alist mapping languages to their major mode.
The key is the language name, the value is the string that should
be inserted as the name of the major mode.  For many languages this is
simple, but for language where this is not the case, this variable
provides a way to simplify things on the user side.

*** cmake                                                           :cmake:
以cmake-mode进行语法高亮，其它功能不需要
**** settings
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("html" . nxhtml))
  (add-to-list 'org-src-lang-modes '("browser" . nxhtml))
  (add-to-list 'org-src-lang-modes '("php" . php))
  (add-to-list 'org-src-lang-modes '("cmake" . cmake))
#+END_SRC

*** org-emphasis-alist
**** org-emphasis=alist
Alist of characters and faces to emphasize text.

+ abc
+ /abc/
+ _abc_
+ *abc*
+ @abc@ (nothing)
+ =abc= (不断行)
+ ~abc~ (verb)
+ +abc+

#+BEGIN_EXAMPLE
  \begin{itemize}
  \item abc
  \item \emph{abc}
  \item \uline{abc}
  \item \textbf{abc}
  \item @abc@ (nothing)
  \item \texttt{abc} (不断行)
  \item \verb~abc~ (verb)
  \item \sout{abc}
  \end{itemize}
#+END_EXAMPLE

+ for local file

**** for local file
#+BEGIN_EXAMPLE
  # Local Variables:
  # org-emphasis-alist: (everything but strike through)
  # End:
#+END_EXAMPLE

**** 注： 前后最好有空格，不能有中文字符
*** php                                                               :php:
+ https://github.com/steckerhalter/ob-php


+ prequist
  - php : sudo apt-get install php5-cli
  - session prequist: boris
+ install and settings
+ demo
  #+begin_src php :var x="bear" :var y="mordor"
    4 + 4;
    print "dude\n";
    print $x;
    return $y;
  #+end_src

  #+results:
  : mordor

*** html                                                             :html:
+ https://github.com/krisajenkins/ob-browser


1. what?

   o write html blocks in org-mode and have them automagically
   rendered as screenshots

2. install and setting

   + mepla
   + path to phantmjs exec

3. mode

   默认关联html-mode，可以通过配置 *org-src-lang-modes* 变量进行修改

4. org babel argument

   :out path/to/screenshot

5. demo
   #+begin_src browser :out 201504282212.png
     <!doctype html>
     <html>
         <head>
             <link href="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.2/css/bootstrap.min.css" rel="stylesheet" media="screen">
         </head>
         <body>
             <div class="row">
                 <div class="span6 offset1">
                     <h1>rendered png</h1>

                     <button class="btn btn-primary">you can't press this</button>
                 </div>
             </div>
         </body>
     </html>
   #+end_src

   #+results:
   [[file:/tmp/demo.png]]

*** sh                                                                 :sh:
http://stackoverflow.com/questions/29163164/how-can-i-load-bash-as-opposed-to-sh-in-org-babel-to-enable-begin-src-bash


org babel的shell块默认使用sh执行，ubuntu默认使用的是bash，sh和bash大同
小异，但毕竟差异是存在的。

设置org babel通过bash执行shell代码块，方法有二
1. 在.emacs中更改变量 *org-babel-sh-command* 为 bash
   #+begin_src emacs-lisp
     (setq org-babel-sh-command "bash")
   #+end_src

   org-babel-sh-command is a variable defined in `ob-sh.el'. its value
   is "sh"

2. 在shell代码块前设置头参数 *:shebang* "#!/bin/bash"

*** gnuplot error                                                 :gunplot:

org-babel-execute:gnuplot: cannot open load file: no such file or
directory, gnuplot

ans: installing gnuplot.el (to drive gnuplot inside emacs)[mepla]
*** lstlisting                                                   :listings:
org-latex-listings-langs:

alist mapping languages to their listing language counterpart.
the key is a symbol, the major mode symbol without the "-mode".
the value is the string that should be inserted as the language
parameter for the listings package.  if the mode name and the
listings name are the same, the language does not need an entry
in this list - but it does not hurt if it is present.

*** listing                                                      :listings:
1. org-latex-listings

   non-nil means export source code using the listings package.

2. org-latex-listings-langs

   alist mapping languages to their listing language counterpart. the
   key is a symbol, the major mode symbol without the "-mode". the
   value is the string that should be inserted as the language
   parameter for the listings package.  if the mode name and the
   listings name are the same, the language does not need an entry in
   this list - but it does not hurt if it is present.

3. org-latex-listings-options

   association list of options for the latex listings package.

   these options are supplied as a comma-separated list to the
   \textbackslash{}lstset command.  each element of the association
   list should be a list containing two strings: the name of the
   option, and the value.  for example,
   #+begin_example
     (setq org-latex-listings-options
         '(("basicstyle" "\\small")
           ("keywordstyle" "\\color{black}\\bfseries\\underbar")))
   #+end_example

*** org source highlight
以cmake-mode进行语法高亮，其它功能不需要
**** org-src-lang-modes

org-src-lang-modes is a variable defined in `org-src.el'.
Its value is shown below.

Documentation:
Alist mapping languages to their major mode.
The key is the language name, the value is the string that should
be inserted as the name of the major mode.  For many languages this is
simple, but for language where this is not the case, this variable
provides a way to simplify things on the user side.

**** settings
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("html" . nxhtml))
  (add-to-list 'org-src-lang-modes '("browser" . nxhtml))
  (add-to-list 'org-src-lang-modes '("php" . php))
  (add-to-list 'org-src-lang-modes '("cmake" . cmake))
#+END_SRC
*** DONE org babel minted是否可能
- State "DONE"       from "TODO"       [2015-11-23 一 20:26]

1. 变量： *org-latex-listings*
   #+BEGIN_SRC emacs-lisp
     ;; version lstlisting
     ;; (setq org-latex-listings t)
     ;; (setq org-latex-listings-options
     ;;       '(
     ;;         ("numbers" "\left")
     ;;         ("xleftmargin" "17pt")
     ;;         ("frame" "single")
     ;;         ("breaklines" "true")
     ;;         ("breakautoindent" "true")
     ;;         ("numberstyle" "\\tiny")
     ;;         ("tabsize" "4")
     ;;         ("showspaces" "false")
     ;;         ))



     (require 'ox-latex)
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-latex-listings 'minted)
     (setq org-latex-listings-options
           '(("frame" "single")))

     (add-to-list 'org-latex-listings-langs '(sh "bash")) ;
     (add-to-list 'org-latex-listings-langs '(cpp "cpp"))

   #+END_SRC

2. org-latex-listings-option 不要过多的选项了
   These options are supplied as a comma-separated list to the
   \textbackslash{}lstset command.
   所以对 minted 无效

3. org-latex-listings-langs
   (add-to-list 'org-latex-listings-langs '(sh "bash"))
   前者产LaTeX宏包选项，后者是Emacs mode选项，用于语法高亮

4. 参考
   +
     [[https://app.yinxiang.com/shard/s52/nl/11551545/3a446fb2-846d-41b1-bb43-7b3df39f5121/?csrfBusterToken=U%3Db04339%3AP%3D%2F%3AE%3D1513455a069%3AS%3Dac803e9b3af5432a7cb467ac0240b297][babel minted]]

*** gunplot org babel                                             :gnuplot:

**** 参考
+ http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html
+ file:~/Document/Emacs/Org/org-babel-gnuplot.org

**** Requiremens
+ gnuplot
+ gnuplot.el, an Emacs major mode
**** Alternative
*org-plot*
**** Setup
#+BEGIN_EXAMPLE
  ;; active Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t)))
  ;; add additional languages with '((language . t)))
#+END_EXAMPLE
**** Example
***** Function plot
#+tblname: data-table-150328-1
| x | y1 | y2 |
|---+----+----|
| 0 |  3 |  6 |
| 1 |  4 |  7 |
| 2 |  5 |  8 |


#+header: :file /home/ben/tiger/figures/1503282138.pdf
#+header: :exports code
#+header: :tangle /home/ben/Tiger/Journal/src/gnuplot_150328-2.gpt
#+header: :var data=data-table-150328-1
#+BEGIN_SRC gnuplot
  reset

  set title "Putting it all together"

  set xlabel "X"
  set xrange [-8:8]
  set xtics -8,2,8

  set ylabel "Y"
  set yrange [-20:70]
  set utics -20,10,70

  f(x) = x**2
  g(x) = x**3
  h(x) = 10*sqrt(abs(x))

  plot f(x) w lp lw 1, g(x) w p lw 2,h(x)w l lw 3
#+END_SRC

\begin{figure}[ht]
\centering
\includegraphics[width=0.8\linewidth]{/home/wally/Wally/Journal/Figure/1503282138.pdf}
\end{figure}

***** Data table plot
#+tblname: data-table-1503282142
|-----+------------+------------|
|   x |         y1 |         y2 |
|-----+------------+------------|
| 0.1 |      0.425 |      0.375 |
|-----+------------+------------|
| 0.2 |     0.3125 |     0.3375 |
|-----+------------+------------|
| 0.3 | 0.24999993 | 0.28333338 |
|-----+------------+------------|
| 0.4 |      0.275 |    0.28125 |
|-----+------------+------------|
| 0.5 |       0.26 |       0.27 |
|-----+------------+------------|
| 0.6 | 0.25833338 | 0.24999993 |
|-----+------------+------------|
| 0.7 | 0.24642845 | 0.23928553 |
|-----+------------+------------|
| 0.8 |    0.23125 |     0.2375 |
|-----+------------+------------|
| 0.9 | 0.23333323 |  0.2333332 |
|-----+------------+------------|
|   1 |     0.2225 |       0.22 |
|-----+------------+------------|


#+header: :file /home/wally/Wally/Journal/Figure/1503282142.pdf
#+header: :exports code
#+header: :tangle /home/ben/Tiger/Journal/src/gnuplot_1503282142.gpt
#+header: :var data=data-table-1503282142
#+BEGIN_SRC gnuplot
  reset

  set title "Putting it all together"

  set xlabel "X"
  set xrange [0:1]
  set xtics 0,0.1,1

  set ylabel "Y"
  set yrange [0.2:0.5]
  set ytics 0.2,0.05,0.5

  plot data u 1:2 w p lw 2 title "x vs. y1", \
       data u 1:3 w lp lw 1 title "x vs. y2"
#+END_SRC

\begin{figure}[ht]
\centering
\includegraphics[width=0.8\linewidth]{/home/wally/Wally/Journal/Figure/1503282142.pdf}
\end{figure}

**** Header Arguments
  * :var data=data-table
      + When data is to be plotted from a table, it is helpful to use a
        heading right above the table in the form #+tblname=data-table,
        where "data-table" is replaced with some short name to identify the
        table to gnuplot.
  * :exports {code, results, both, none}
      + When the code is run and the document exported (e.g. to HTML or \
        LaTeX PDF), what should appear? Just the code block itself? Only the
        produced output (in this case a plot of some sort)? Both the code
        and the accompanying results? Or nothing?
  * :file foo.{png,eps,etc.}
      + This option specifies where the resulting output should be put. If
        no option is given, a gnuplot window will open with the resultant
        plot. NOTE: Certain plot options may not output properly to gnuplot
        directly and thus must have the :file filename option in the header.
        If the error "Code block produced no output" recurs, try outputting
        to a file instead of directly to gnuplot.
**** gnuplot plot
*Plot* is the heart of gnuplot. It is broken into several section:
1. plot what
   either be a function or data
   + plot sin(x)
   + plot data using x:y
     + using can be abbreviated with simply "u"
     + x:y specify the column numbers x and y

   #+BEGIN_EXAMPLE
   plot sin(x)
   #+END_EXAMPLE
2. Plot how
   customize the look of the table
   + points(p)
   + lines(l)
   + dots(d)
   + impulses(i)
   + linespoints(lp)
   + steps
   + boxes
   #+BEGIN_EXAMPLE
     plot sin(x) with l lw 2
   #+END_EXAMPLE
3. Call it what
   *title TITLE*
   *notitle*

   #+BEGIN_EXAMPLE
     plost data u 1:2 w lines lw 2 title 'Data Set 1'
   #+END_EXAMPLE
**** HALT Above and Beyond
- State "HALT"       from ""           [2015-03-09 一 17:26]

** image                                                             :image:
*** (org-display-inline-images)
- State "DONE"       from ""           [2015-12-07 一 13:52]

Normally only links without a description part are inlined, because
this is how it will work for export.

**** reference
[[help:org-display-inline-images][help:org-display-inline-image]]

**** key note

1. inline

   Normally only *links* /without a description part/ are inlined,
   because this is how it will work for export.

   #+BEGIN_EXAMPLE
   [[path/to/image]]  # OK
   file: path/to/image
   #+END_EXAMPLE

**** key-bindings

由于常用，所以定制一个快捷键还是必须的

#+BEGIN_SRC emacs-lisp
  ;; toggle display of inline image links like [[path/to/figure]]
  (define-key org-mode-map "\C-zi" 'org-display-inline-images)
#+END_SRC

*** org-mode 不显示图片                                             :image:
(iimage-mode)

*** ditaa in org-babel                                              :ditaa:

**** [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-ditaa.org.html][Introduction]] :intro:

=Ditaa= is a command-line utility that converts diagrams drawn using
ASCII art into bitmap graphics.

***** Requirements and Setup

=Ditaa= is distributed with =Org mode=. The file =ditaa.jar= can be found
in =contrib/scripts=.

Activate evaluation of =ditaa= source code blocks by adding =ditaa= to
=org-babel-load-languages=.

#+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((ditaa . t))) ; this line activates ditaa
#+END_SRC

***** Org Mode Features for =ditaa= Source Code Blocks

****** Header Arguments

   - file :: =ditaa= source code blocks require that an output file
              be specified.
   - cmdline :: specify command line arguments for =ditaa=
   - java :: arguments for the =java= runtimes (JRE)

****** Sessions

   =ditaa= does not support sessions.
****** Result Types

=Ditaa= source code blocks return a link to a png bitmap file.

***** Examples of Use

The obligatory Hello World! example in =ditaa=:

#+BEGIN_EXAMPLE
#+BEGIN_SRC ditaa :file images/ditaa/hello-world.png
+--------------+
|              |
| Hello World! |
|              |
+--------------+
#+END_SRC
#+END_EXAMPLE


Now, round all corners by passing =ditaa= the =-r,--round-corners=
command line switch.

#+BEGIN_EXAMPLE
  ,#+BEGIN_SRC ditaa :file images/hello-world-round.png :cmdline -r
  +--------------+
  |              |
  | Hello World! |
  |              |
  +--------------+
  ,#+END_SRC
#+END_EXAMPLE





**** 配置

#+BEGIN_EXAMPLE
  (org-babel-do-load-languages
       'org-babel-load-languages
       '((ditaa . t)))

  (setq org-ditaa-jar-path "~/.emacs.d/pkgs/ditaa/ditaa0_9.jar")
#+END_EXAMPLE

Note: apt-get 安装的 ditaa 不用设置变量 org-ditaa-jar-path

**** usage

#+header: :file ~/Wally/Journal/Figure/ditaa/1956.png
#+header: :exports none
#+BEGIN_SRC ditaa
  /--+
  |  |
  +--/
#+END_SRC

#+RESULTS:
[[file:~/Wally/Journal/Figure/ditaa/1956.png]]


#+header: :exports none
#+BEGIN_SRC ditaa
  /--+
  |  |
  +--/
#+END_SRC

***** error: (error "ditaa code block requires :file header argument") :error:

**** 相关变量和函数

*M-x aprospos* 查看匹配某个关键字的任何东西.


1) org-babel-default-header-args:ditaa

   Default arguments for evaluating ditaa

2) org-babel-ditta-java-cmd

   Java executable to use

3) org-ditaa-jar-path

   path to the ditaa jar executable

4) org-ditaa-eps-jar-path

   Path to the DitaaEps.jar executable

5) org-ditaa-jar-option

   Option for the ditaa jar file

6) org-babel-execute:ditaa

   Function to execute ditaa

**** Emacs中绘图 － ditaa篇                                         :blog:

***** emacs中的图

emacs用途多多，编辑代码、文档、演示文稿，记日志等等。在这些应用中有一
个共同点，也是广大emacser很可能需要的一点功能，画图，对于大多数使用
emacs的都是死宅死宅技术男，主要的用途还就是流程图，框图之流。

[[http://en.wikipedia.org/wiki/A_picture_is_worth_a_thousand_words][一图胜千言]] 图能够用简单的方式表达出可能需要很复杂的语言才能描述清的想
法。一个广泛的认识就是人更容易理解图片。人们喜欢玩界面华丽的游戏，而同
样的游戏如果是文本的，就会让人失去兴趣。一篇博客如果内容较多，有那么几
张图片，怎么也会比全部长篇的文字要容易阅读。


那么emacs如何来插入一个给力的图片呢？

使用 [[http://www.latex-project.org/][Latex]] 的graphicx包。[[http://www.latex-project.org/][Latex ]]的排版与图片功能相当的强大，但是它的门
槛更高，使用比较复杂，应用场合主要在科学论文。一般的应用，博客，日志啥
的话，投入产出比太低了。


[[http://mwolson.org/projects/EmacsWikiMode.html][wiki-mode ]],[[http://mwolson.org/projects/EmacsMuse.html][Muse-mode ]]和 [[http://orgmode.org/][org-mode]] 这样的写作工具，使用[image]标签，插入
本地图片，然后生成html、pdf；或者插入图片的url地址，也是一种使用较多的
方式。

这种方式比较普遍，方便，但不快捷。画一张合适的、给力的图片需要什么？？

*一个软件，熟练的操作。*

软件候选者：[[http://www.photoshop.com/][Photoshop]]， 收费，咱学习之用，使用绿色版
。一个 [[http://photoshop.com/][Photoshop ]]的使用那就是N本书，想真正的学会使用 [[http://photoshop.com/][Photoshop]] 来绘制
流程图，也并不满足方便，快捷两个条件。[[http://office.microsoft.com/en-us/visio/][Microsoft Visio]]，同样，收费，咱
学习之用，使用绿色版，学习[[http://office.microsoft.com/en-us/visio/][ Microsoft Visio]] 同样是需要一定的周期滴，也
同样不满足方便，快捷两个条件。而且这两个软件有大缺点，跨平台不好，使用
过程繁琐。

所以，我最衷爱的，ASCII图就闪亮登场了，当当当当~~~，大家鼓掌。


ASCII图可以在任何文本适用的地方存在，如Internet Relay
Chat（[[http://emacser.com/erc.htm][IRC）]], E-mail,
论坛，BBS，非图形界面，同时可以在源代码中表示公司或产品的logo，或流程
图。甚至有geeker将整个程序直接写成一坨ASCII图，看起来是相当的给力

介绍了什么是ASCII图，它的好处。那么下一步，就讨论下如何绘制ASCII图。我
们肯定不会是一个字符一个字符的去敲，然后拼起来，将简单的事情复杂化，是
我的专长，但是我却从不做愚蠢的事情。画ASCII图，我们有专门、专业的软件

但是既然我们是emaser，我们当然要看一下，emacs能不能做这件事情呢？答案
肯定是YES。

emacs中有两个mode处理ASCII图，[[http://www.emacswiki.org/emacs/PictureMode][picture-mode ]]和 [[http://www.lysator.liu.se/~tab/artist/][artist-mode ]]。
[[http://www.emacswiki.org/emacs/PictureMode][picture-mode]] 请参考emacswiki，而前边我们介绍过[[http://www.lysator.liu.se/~tab/artist/][ artist-mode]]，没看过的童鞋
[[http://emacser.com/artist-mode.htm][请进时光穿梭机]]。

介绍完了背景知识，我们来一个真实的例子。

我们有大批的cpp，h这样的源文件，每天和他们打交道。有一天我们想要给人演
示对于源文件，我们都能做些什么。我们可以使用编辑器编辑它们，以使他们完
成我们需要的功能；编译器编译他们，生成可执行文件；doxygen处理他们，生
成源代码的文档...，其它用途还用很多，比如把程序写成下面的样子，成功的
完成zhuangbility这样艰巨的任务：


#+BEGIN_EXAMPLE
    #include                                     <math.h>
    #include                                   <sys/time.h>
    #include                                   <X11/Xlib.h>
    #include                                  <X11/keysym.h>
                                              double L ,o ,P
                                             ,_=dt,T,Z,D=1,d,
                                             s[999],E,h= 8,I,
                                             J,K,w[999],M,m,O
                                            ,n[999],j=33e-3,i=
                                            1E3,r,t, u,v ,W,S=
                                            74.5,l=221,X=7.26,
                                            a,B,A=32.2,c, F,H;
                                            int N,q, C, y,p,U;
                                           Window z; char f[52]
                                        ; GC k; main(){ Display*e=
     XOpenDisplay( 0); z=RootWindow(e,0); for (XSetForeground(e,k=XCreateGC (e,z,0,0),BlackPixel(e,0))
    ; scanf("%lf%lf%lf",y +n,w+y, y+s)+1; y ++); XSelectInput(e,z= XCreateSimpleWindow(e,z,0,0,400,400,
    0,0,WhitePixel(e,0) ),KeyPressMask); for(XMapWindow(e,z); ; T=sin(O)){ struct timeval G={ 0,dt*1e6}
    ; K= cos(j); N=1e4; M+= H*_; Z=D*K; F+=_*P; r=E*K; W=cos( O); m=K*W; H=K*T; O+=D*_*F/ K+d/K*E*_; B=
    sin(j); a=B*T*D-E*W; XClearWindow(e,z); t=T*E+ D*B*W; j+=d*_*D-_*F*E; P=W*E*B-T*D; for (o+=(I=D*W+E
    *T*B,E*d/K *B+v+B/K*F*D)*_; p<y; ){ T=p[s]+i; E=c-p[w]; D=n[p]-L; K=D*m-B*T-H*E; if(p [n]+w[ p]+p[s
    ]== 0|K <fabs(W=T*r-I*E +D*P) |fabs(D=t *D+Z *T-a *E)> K)N=1e4; else{ q=W/K *4E2+2e2; C= 2E2+4e2/ K
     *D; N-1E4&& XDrawLine(e ,z,k,N ,U,q,C); N=q; U=C; } ++p; } L+=_* (X*t +P*M+m*l); T=X*X+ l*l+M *M;
      XDrawString(e,z,k ,20,380,f,17); D=v/l*15; i+=(B *l-M*r -X*Z)*_; for(; XPending(e); u *=CS!=N){
                                       XEvent z; XNextEvent(e ,&z);
                                           ++*((N=XLookupKeysym
                                             (&z.xkey,0))-IT?
                                             N-LT? UP-N?& E:&
                                             J:& u: &h); --*(
                                             DN -N? N-DT ?N==
                                             RT?&u: & W:&h:&J
                                              ); } m=15*F/l;
                                              c+=(I=M/ l,l*H
                                              +I*M+a*X)*_; H
                                              =A*r+v*X-F*l+(
                                              E=.1+X*4.9/l,t
                                              =T*m/32-I*T/24
                                               )/S; K=F*M+(
                                               h* 1e4/l-(T+
                                               E*5*T*E)/3e2
                                               )/S-X*d-B*A;
                                               a=2.63 /l*d;
                                               X+=( d*l-T/S
                                                *(.19*E +a
                                                *.64+J/1e3
                                                )-M* v +A*
                                                Z)*_; l +=
                                                K *_; W=d;
                                                sprintf(f,
                                                "%5d  %3d"
                                                "%7d",p =l
                                               /1.7,(C=9E3+
                                  O*57.3)%0550,(int)i); d+=T*(.45-14/l*
                                 X-a*130-J* .14)*_/125e2+F*_*v; P=(T*(47
                                 *I-m* 52+E*94 *D-t*.38+u*.21*E) /1e2+W*
                                 179*v)/2312; select(p=0,0,0,0,&G); v-=(
                                  W*F-T*(.63*m-I*.086+m*E*19-D*25-.11*u
                                   )/107e2)*_; D=cos(o); E=sin(o); } }
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    //程序在linux下使用以下命令编译：
    //cc banks.c -o banks -DIT=XK_Page_Up -DDT=XK_Page_Down \
    //  -DUP=XK_Up -DDN=XK_Down -DLT=XK_Left -DRT=XK_Right \
    //  -DCS=XK_Return -Ddt=0.02 -lm -lX11 -L/usr/X11R6/lib
#+END_EXAMPLE

但是本文中，我们只关注对cpp源文件的前三点应用：编辑，编译，生成文档。

***** ASCII图

好吧，我们的第一个演示版本。

#+BEGIN_EXAMPLE
    +----------+ edit +----------+   input +----------+ compile +----------+
    | refined  |<-----+ h,cpp    +-------->+ compiler,+-------->+Executable|
    |   h,cpp  |      |          |         | linker   |         |   File   |
    +----------+      +----+-----+         +----------+         +----------+
                           | input
                           v
                      +----------+
                      | doxygen  |
                      |          |
                      +----+-----+
                           | process
                           v
                      +----------+
                      | Doxgen   |
                      | Document |
                      +----------+
#+END_EXAMPLE

第一个版本，作为一种可嵌入文本的ASCII图，绘制简单，简单，大方，实用（情人眼里出西施？）......

但是，有童鞋说过（主要是我自己感觉）实用性不强，很多人是不接受ASCII图的，文章里夹了这么一个ASCII图，别人抵触情绪马上起来，这无关技术，只是习惯。

那么，如果这是一幅图，看起来或许更爽....。这样可以吗？好吧，我们试一下，把上面的ASCII图变为图片。

[[Emacs中绘图%20－%20ditaa篇%20%20Emacs中文网_files/Image.png]]

OMG，这个如何做到的？:)，我们使用的是如下代码，将ASCII图转化为png(org-mode中)。

#+BEGIN_EXAMPLE
    #+BEGIN_DITAA  asciiExample.png -o -r -S

           +----------+ edit +----------+   input +----------+ compile +----------+
           | refined  |<-----+ h,cpp    +-------->+ compiler,+-------->+Executable|
           |   h,cpp  |      |          |         | linker   |         |   File   |
           +----------+      +----+-----+         +----------+         +----------+
                                  | input
                                  v
                             +----------+
                             | doxygen  |
                             |          |
                             +----+-----+
                                  | process
                                  v
                             +----------+
                             | Doxgen   |
                             | Document |
                             +----------+

    #+END_DITAA
#+END_EXAMPLE

这里使用的是 [[http://ditaa.sourceforge.net/][ditaa ]]，第一次听说 [[http://ditaa.sourceforge.net/][ditaa ]]这个玩意是在从punchagan的博客，即[[http://punchagan.wordpress.com/2010/07/21/ditaa-and-org-mode/][这里]]
，当时我问了一个 [[http://orgmode.org/][org-mode ]]中怎样嵌入ASCII图的问题，他就给了我这么大一个鱼杆！！

好，言归正传。看起来，还不错。但是精益求精是我们的特点，嘿嘿。我们希望
区分一下，源用红色表示，处理过程用绿色表示，结果呢，我们用黑色表示，这
样看起来或许更美观一些，美观也就是用 [[http://photoshop.com/][Photoshop]] 或者 [[http://office.microsoft.com/en-us/visio/][Microsoft
Visio]]画图追求的效果嘛。GO.

着色的代码如下：

#+BEGIN_EXAMPLE
    #+BEGIN_DITAA  asciiExampleWithColor.png -o -r -S

           +----------+ edit +----------+   input +----------+ compile +----------+
           |  cPNK    |      |  cRED    |         |   cGRE   |         |  cPNK    |
           | refined  |<-----+ h,cpp    +-------->+ compiler,+-------->+Executable|
           |   h,cpp  |      |          |         | linker   |         |   File   |
           |          |      |          |         |          |         |          |
           +----------+      +----+-----+         +----------+         +----------+
                                  | input
                                  v
                             +----------+
                             |  cGRE    |
                             | doxygen  |
                             |          |
                             +----+-----+
                                  | process
                                  v
                             +----------+
                             |  cPNK    |
                             | Doxgen   |
                             | Document |
                             |          |
                             +----------+

    #+END_DITAA
#+END_EXAMPLE

***** 完整而优雅的图案

看起来，到现在，我们做的还不错。但是，作为一个喜欢把简单事情复杂化的geek，显然我们还不能不满足。这个图没有区分度，h,cpp是输入，Excutable
file是磁盘文件，Doxygen
Document是文档，但是图中，它们看起来没有区分开，我们需要在休息前，再来点小的修葺。

代码如下：

#+BEGIN_EXAMPLE
    #+BEGIN_DITAA  asciiExampleWithColorAndType.png -o -r -S

           +----------+ edit +----------+   input +----------+ compile +----------+
           |  cPNK    |      |  cRED    |         |   cGRE   |         |  cPNK    |
           | refined  |<-----+ h,cpp    +-------->+ compiler,+-------->+Executable|
           |   h,cpp  |      |          |         | linker   |         |   File   |
           | {s}      |      |  {io}    |         |          |         |    {s}   |
           +----------+      +----+-----+         +----------+         +----------+
                                  | input
                                  v
                             +----------+
                             |  cGRE    |
                             | doxygen  |
                             |          |
                             +----+-----+
                                  | process
                                  v
                             +----------+
                             |  cPNK    |
                             | Doxgen   |
                             | Document |
                             |    {d}   |
                             +----------+

    #+END_DITAA
#+END_EXAMPLE

Done！该喝杯咖啡了。哦，不，对我来说，该去睡会觉了，Zzzzzz

能使用中文也算是基本需求了，那么最后来一个试验用图。

#+BEGIN_EXAMPLE
    #+BEGIN_DITAA  asciiExampleWithColorAndTypeUtf8.png -e gb2312

                  +------------+     +------------+
                  | 中文        |---->|    中文    |
                  |            |     |            |
                  +------------+     +------------+

    #+END_DITAA

    正确显示中文需要文章使用的编码和ditaa指定的编码一致。
#+END_EXAMPLE

但是在加入中文的时候，边框的对齐很难做到，不得不说是个让人很不爽的地方。

***** [[http://ditaa.sourceforge.net/][ditaa]]

尽管我们是emacser，但是我们不能忽略了这次的主角，也就是 [[http://ditaa.sourceforge.net/][ditaa]]
~~~~。我们能玩这么多的花样，还有赖于[[http://ditaa.sourceforge.net/][ditaa]] 。好吧，我们介绍主角出场吧。

[[http://ditaa.sourceforge.net/][ditaa ]]的作者是Stathis
Sideris，是一个java程序(做为一个c++程序员，我表示鸭梨很大)，想要使用diataa的话，你的电脑
*必须* 安装java，并且使java的bin目录在emacs的path内。

可以去 [[http://ditaa.sourceforge.net/][这里]] 下载，具体的语法请参考 [[http://ditaa.sourceforge.net/][ditaa]] 的主页，本文使用的例子用到了
大部分、而不是全部特性。

***** 不算小结的小结

[[http://orgmode.org/][org-mode]] + [[http://www.lysator.liu.se/~tab/artist/][artist-mode ]]+ [[http://ditaa.sourceforge.net/][ditaa ]]是一个emacs中使用图片的很好的办法，但不
是万能的。实际上，主要画流程图，框图比较好用。下面我列举了两个可以在
emacs中胜任绘图需求的方法：

-  [[http://users.skynet.be/ppareit/projects/graphviz-dot-mode/graphviz-dot-mode.html][graphviz]]
-  python + matlablib

[[http://users.skynet.be/ppareit/projects/graphviz-dot-mode/graphviz-dot-mode.html][graphviz]] 已然非常强大，而 matlab 绘制科学图形是更胜一筹，鉴于篇幅，本
文不再展开。

更多........敬请期待。

** Structure Editing
*** 视图循环
|-------+----------------------------------------------------------|
| TAB   | 子树循环，在FOLDED-CHILDREN-SUBTREE之间循环，C-u使用前缀 |
|-------+----------------------------------------------------------|
| S-TAB | 全局循环                                                 |
|-------+----------------------------------------------------------|

*** 移动
|---------+--------------|
| C-c C-n | 下个标题     |
|---------+--------------|
| C-c C-p | 上个标题     |
|---------+--------------|
| C-c C-f | 下个同级标题 |
|---------+--------------|
| C-c C-b | 上个同级标题 |
|---------+--------------|
| C-c C-u | 回到上层标题 |
|---------+--------------|
*** 结构编辑
|----------------+----------------------------------------------|
| M-TAB          | 插入一个同级标题                             |
|----------------+----------------------------------------------|
| M-S-TAB        | 插入一个和当前标题同级的TODO项               |
|----------------+----------------------------------------------|
| TAB            | 如果新的条目中还没有文字，则调整到合适的级别 |
|----------------+----------------------------------------------|
| M-LEFT/RIGHT   | 将当前标题提升/降低一个等级                  |
|----------------+----------------------------------------------|
| M-S-LEFT/RIGHT | 将当前子树提升/降低一个等级                  |
|----------------+----------------------------------------------|
| M-S-UP/DOWN    | 将当前子树上/下移                            |
|----------------+----------------------------------------------|
| C-c C-w        | 将条目或区域传送到另外一个文件中             |
|----------------+----------------------------------------------|
| C-c n s/w      | 将缓冲区试图局限到当前子树中/再次放宽视图    |
|----------------+----------------------------------------------|
*** 行内源码 inline source code
+ http://stackoverflow.com/questions/16186843/inline-code-in-org-mode

**** = embedded code =
This is a =\inline \source \code=. The exported latex code is
embedded in =\texttt=, instead of =\verb=. And the result shows that
the =\= is converted to =\textbackslash{}= even followed by
"reasonable" command name.

**** inline code syntax
inline code blocks have the form src_LANG[headers]{your code}

+ note: 在行内和单独成段导出latex的行为不一样，很奇怪。

*** org-structure-template-alist 快速扩展
http://orgmode.org/manual/Include-files.html


用org-mode写文章的时候,经常需要引用代码片段,这就需要输入#+BEGIN_SRC
... #+END_SRC 或者 #+BEGIN_EXAMPLE ... #+END_EXAMPLE。可以用
宏,elisp,yasnippets,或者skeleton来实现自动化.
org-mode内置了快速输入的方法
+ *输入<s,再键入TAB*,就会自动展开成#+BEGIN_SRC #+END_SRC
+ *输入>s,再键入TAB*,就会自动展开成#+BEGIN_EXAMPLE  #+END_EXAMPLE

#+BEGIN_EXAMPLE
<l -> begin_src latex
<p -> \begin{python}
<c -> \begin{cpp}
<[ -> \left[\right] [不行，改成k
<{ -> \left\{\right\} 同样，
<a -> \begin{algorithm}[ht]
#+END_EXAMPLE

This is a list of abbreviation keys and values.  The value gets inserted
if you type `<' followed by the key and then press the completion key,
usually `M-TAB'.

+ %file will be replaced by a file name after prompting for the file
  using completion.
+ The cursor will be placed at the position of the `?` in the
  template.

#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist
        '(("s" "#+BEGIN_SRC ?\n\n#+END_SRC" "<src lang=\"?\">\n\n</src>")
         ("e" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE" "<example>\n?\n</example>")
         ("q" "#+BEGIN_QUOTE\n?\n#+END_QUOTE" "<quote>\n?\n</quote>")
         ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
         ("V" "#+BEGIN_VERBATIM\n?\n#+END_VERBATIM" "<verbatim>\n?\n</verbatim>")
         ;; ("c" "#+BEGIN_CENTER\n?\n#+END_CENTER" "<center>\n?\n</center>")
         ("l" "#+BEGIN_LaTeX\n?\n#+END_LaTeX" "<literal style=\"latex\">\n?\n</literal>")
         ("L" "#+LaTeX: " "<literal style=\"latex\">?</literal>")
         ("h" "#+BEGIN_HTML\n?\n#+END_HTML" "<literal style=\"html\">\n?\n</literal>")
         ("H" "#+HTML: " "<literal style=\"html\">?</literal>")
         ;; ("a" "#+BEGIN_ASCII\n?\n#+END_ASCII" "")
         ("A" "#+ASCII: " "")
         ("i" "#+INDEX: ?" "#+INDEX: ?")
         ("I" "#+INCLUDE: %file ?" "<include file=%file markup=\"?\">")
         ("p" "#+begin_latex\n\\begin{python}\n?\n\\end{python}\n#+end_latex")
         ("c" "#+begin_latex\n\\begin{cpp}\n?\n\\end{cpp}\n#+end_latex")
         ("k" "\\left[?\\right]")
         ("K" "\\left\{?\\right\}")
         ("a" "#+begin_latex\n\\begin{algorithm}\n?\n\\end{algorithm}\n#+end_latex")
         )
        )
#+END_SRC

*** org-mode 不要吝啬使用标题，吝啬使用多级列表
*** Include files                                                 :include:

During export, you can include the content of another file. For
example, to include your .emacs file, you could use:
#+BEGIN_EXAMPLE
  ,#+INCLUDE: "~/.emacs" src emacs-lisp
#+END_EXAMPLE

The optional second and third parameter are the markup (i.e.,
‘example’ or ‘src’), and, if the markup is ‘src’, the language
for formatting the contents. The markup is optional; if it is not
given, the text will be assumed to be in Org mode format and will be
processed normally.

Contents of the included file will belong to the same structure
(headline, item) containing the INCLUDE keyword. In particular,
headlines within the file will become children of the current
section. That behavior can be changed by providing an additional
keyword parameter, :minlevel. in that case, all headlines in the
included file will be shifted so the one with the lowest level reaches
that specified level. For example, to make a file become a sibling of
the current top-level headline, use
#+BEGIN_EXAMPLE
  ,#+INCLUDE: "~/my-book/chapter2.org" :minlevel 1
#+END_EXAMPLE


默认情况下，被包含org文件的标题会依次升/降级，使最高级标题为当前化位点
(point)的次级子标题，文件层级关系保持不变。

注：是 :minlevel 而还是 :minilevel

You can also include a portion of a file by specifying a lines range
using the :lines parameter. The line at the upper end of the range
will not be included. The start and/or the end of the range may be
omitted to use the obvious defaults.
#+BEGIN_EXAMPLE
  ,#+INCLUDE: "~/.emacs" :lines "5-10"   Include lines 5 to 10, 10 excluded
  ,#+INCLUDE: "~/.emacs" :lines "-10"    Include lines 1 to 10, 10 excluded
  ,#+INCLUDE: "~/.emacs" :lines "10-"    Include lines from 10 to EOF
#+END_EXAMPLE

#+TITLE: Tiger
#+AUTHOR: Tiger D Wong
#+EMAIL: buaaben@163.com

C-c ' --- Visit the include file at point.

*** reverse headlines 标题逆序                                       :sort:

[[http://stackoverflow.com/questions/12874595/reverse-notes-order-in-org-mode][stackoverflow]]

*利用宏和寄存器*

i don't think there is a predefined command you are looking for. you
can implement it by yourself.

if it's a one-time task i would use emacs macro:

you show only top-level headlines. then you go to the first headline
and start macro c-x ( . you select the line c-space c-n and you type
*c-u m-x prepend-to-register .* c-u deletes the line as well. you stop
the macro c-x ) .

now you repeat the macro for all top-level headlines *m-0 c-x e* .

and you insert the register *c-x r i .*

*prepend-to-register* 压入寄存器，有点像入栈。

栈的思想。

** Table                                                         :table:
*** 创建和转换
C-c | *org-table-convert-region* 将活动区域转换为表格，以TAB，逗号或空白
符划分区域。

*** 调整和移动区域
|---------+----------------------------------------|
| C-c C-c | 调整表格，不移动光标                   |
|---------+----------------------------------------|
| TAB     | 将光标移动到下一个区域，必要时新建一行 |
|---------+----------------------------------------|
| S-TAB   | 将光标移动到上一个区域                 |
|---------+----------------------------------------|
| RET     | 将光标移动到下一行，必要时新建一行     |
|---------+----------------------------------------|
*** 编辑行和列
|--------------+------------------------------------------------------------------|
| M-LEFT/RIGHT | 左/右以当前列                                                    |
|--------------+------------------------------------------------------------------|
| M-S-LEFT     | 删除当前列                                                       |
|--------------+------------------------------------------------------------------|
| M-S-RIGHT    | 在光标位置左边添加一列                                           |
|--------------+------------------------------------------------------------------|
| M-UP/DOWN    | 上/下移动当前行                                                  |
|--------------+------------------------------------------------------------------|
| M-S-UP       | 删除当前行                                                       |
|--------------+------------------------------------------------------------------|
| M-S-DOWN     | 在当前行上面添加一行，如果有前缀，则在下面添加一行               |
|--------------+------------------------------------------------------------------|
| C-c -        | 在当前行下面添加一行一个水平线，如有前缀，则在上面添加一行水平线 |
|--------------+------------------------------------------------------------------|
| C-c ^        | 将表格排序，以当前位置所在的列作为依据                           |
|              | 排序在局当前位置最间的两个水平线之间的行（或者整个表）中进行     |
|--------------+------------------------------------------------------------------|
*** org表格中使用"|"
http://www.newsmth.net/nForum/#!article/Emacs/109231

\textbackslash{}vert

*** DONE [#C] org中如何使用 "|"
DEADLINE: <2015-03-15 日>
- State "DONE"       from "TODO"       [2015-03-17 二 11:29]
- State "TODO"       from ""           [2015-03-04 三 14:20]
 Date:<2015-02-26 四>

 只要行首不是 | 就可以了, 就像这样 |.

*** error: (void-function org-table-begin)                          :error:

#+BEGIN_SRC emacs-lisp
(require 'org-table)
#+END_SRC

*** +-- 是什么高亮

表格相关

|-+-+-|
|a|b|c|

|-+ 展开为表格

|   |   |   |   |   |
|---+---+---+---+---|
|   |   |   |   |   |

+-- fdsfsd  what's this？ 其后还不能回车

*** org-table-transpose-table-at-point

(org-table-transpose-table-at-point)

Transpose Org table at point and eliminate hlines.
** List
** Link
*** org-download                                                 :download:

- https://github.com/abo-abo/org-download


#+BEGIN_SRC emacs-lisp
  (require 'org-download)
  (setq org-download-method 'directory)
  (setq-default org-download-image-dir
                (concat (getenv "JOURNAL-WS") "/Figure/.org-download")) ; org-down 文件命名有时会比较丑，所以放在隐藏文件夹下
  (setq org-download-heading-lvl nil)
  (setq org-download-timestamp "_%Y-%m-%d_%H:%M:%S")
  ;; (define-key org-mode-map "\C-c\M-s" 'org-download-screenshot)
  (define-key org-mode-map "\C-c\M-y" 'org-download-yank)
  (setq org-download-backend "wget \"%s\" -O \"%s\"")
  (setq org-download-backend "curl")
#+END_SRC

1. 从 chrome 中拖拽不管用

   委曲求全： 右键图片，复制图片网址， *org-download-image*

   #+BEGIN_EXAMPLE
     org-download-image is an interactive compiled Lisp function in
     `org-download.el'.

     (org-download-image LINK)

     Save image at address LINK to `org-download--dir'.
   #+END_EXAMPLE

2. 从 Firefox 中拖拽起作用
3. 从系统的文件管理器中拖拽起作用

*** 内部链接                                                       :anchor:
Org-mode支持内部链接：
#+BEGIN_EXAMPLE
  定义锚点 #<<my-anchor>>
  [[my-anchor][内部链接]]
#+END_EXAMPLE
*** 外部链接
对于符合链接规则的内容，org-mode会自动将其视为链接，包括括文件、网页、邮
箱、新闻组、BBDB 数据库项、IRC 会话和记录等。下面是一些例子：
#+BEGIN_EXAMPLE
  http://www.astro.uva.nl/~dominik            on the web
  file:/home/dominik/images/jupiter.jpg       file, absolute path
  /home/dominik/images/jupiter.jpg            same as above
  file:papers/last.pdf                        file, relative path
  file:projects.org                           another Org file
  docview:papers/last.pdf::NNN                open file in doc-view mode at page NNN
  id:B7423F4D-2E8A-471B-8810-C40F074717E9     Link to heading by ID
  news:comp.emacs                             Usenet link
  mailto:adent@galaxy.net                     Mail link
  vm:folder                                   VM folder link
  vm:folder#id                                VM message link
  wl:folder#id                                WANDERLUST message link
  mhe:folder#id                               MH-E message link
  rmail:folder#id                             RMAIL message link
  gnus:group#id                               Gnus article link
  bbdb:R.*Stallman                            BBDB link (with regexp)
  irc:/irc.com/#emacs/bob                     IRC link
  info:org:External%20links                   Info node link (with encoded space)
#+END_EXAMPLE

对于文件链接，可以用::后面增加定位符的方式链接到文件的特定位置。定位符可
以是行号或搜索选项。如：
#+BEGIN_EXAMPLE
  file:~/code/main.c::255                     进入到 255 行
  file:~/xx.org::My Target                    找到目标‘<<My Target>>’
  file:~/xx.org/::#my-custom-id               查找自定义 id 的项
#+END_EXAMPLE

除了上述的自动链接外，还可以显示指定链接，采用如下格式：
#+BEGIN_EXAMPLE
  [[link][description]]
  [[link]]
#+END_EXAMPLE

显示指定的链接可以不显示原始的URL而是显示对该链接的描述。这种方式可以用
相对路径链接本地文件。
*** 快捷键
|---------+-------------------+--------------------------------------|
| C-c l   |                   | 保存链接                             |
| C-c C-l | org-insert-link   | 创建或修改链接，可以引用已保存的链接 |
| C-c C-o | org-open-at-point | 打开链接                             |
|---------+-------------------+--------------------------------------|

|-------+------------------------|
| C-c % | 记录内部链接地址       |
| C-c & | 跳转到已记录的内部链接 |
|-------+------------------------|
*** org-open-at-point
+ It is bound to C-c C-o
+ (org-open-at-point &optional ARG REFERENCE-BUFFER)
+ Open link at or after point.
+ If there is no link at point, this function will search forward up
  tothe end of the current line.
+ Normally, files will be opened by an appropriate application.
+ If the optional prefix argument ARG is non-nil, Emacs will visit the
  file.

*** org中想要使插入的图片显示以及生成的PDF带有图片,需要使用方括号括起的链接形式,而非file等开头的链接形式.
#+BEGIN_EXAMPLE
[[~/Picture/demo.png]]   OK
file:~/Picture/demo.png  Not OK
#+END_EXAMPLE

file:~/Temp/1335.org
[[~/Temp/1335.org]]
file:~/Temp/1335.org::2

*** 脚注
|-----------+------------------------------------------------------|
| C-c C-x f | 新建一个脚注，当有前缀时，会提供一个菜单以供选择操作 |
|           | 或者在定义和引用之间跳转                             |
|-----------+------------------------------------------------------|
| C-c C-c   | 在定义和引用之间跳转                                 |
|-----------+------------------------------------------------------|

*** org link                                                         :link:

|---------+-------------------|
| C-c l   | org-store-link    |
| C-c C-l | org-insert-link   |
| C-c C-o | org-open-at-point |
|---------+-------------------|

**** org-store-link
org-store-link is an interactive autoloaded compiled Lisp function in
`org.el'.

It is bound to C-c l.

(org-store-link ARG)

Store an org-link to the current location.

**** org-insert-link
C-c C-l runs the command org-insert-link, which is an interactive
compiled Lisp function in `org.el'.

It is bound to C-c C-l, <menu-bar> <Org> <Hyperlinks> <Insert Link>.

(org-insert-link &optional COMPLETE-FILE LINK-LOCATION
DEFAULT-DESCRIPTION)

Insert a link.  At the prompt, enter the link.

**** org-open-at-point
C-c C-o runs the command org-open-at-point, which is an interactive
compiled Lisp function in `org.el'.

It is bound to C-c C-o, <menu-bar> <Org> <Hyperlinks> <Follow Link>.

(org-open-at-point &optional ARG REFERENCE-BUFFER)

Open link at or after point.
If there is no link at point, this function will search forward up to
the end of the current line.
Normally, files will be opened by an appropriate application.  If the
optional prefix argument ARG is non-nil, Emacs will visit the file.
With a double prefix argument, try to open outside of Emacs, in the
application the system uses for this file type.

*** org-return-follows-link

修改回车键的作用为打开point处的链接，与C-c C-o行为相同

Its value is t
Original value was nil

Documentation:
Non-nil means on links RET will follow the link.
In tables, the special behavior of RET has precedence.

#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC

*** org open link programs                                       :pdf:wine:

why *使用 wine foxitreader 打开 PDF 链接*
**** *org-file-apps*
#+BEGIN_EXAMPLE
  Its value is ((auto-mode . emacs)
   ("\\.mm\\'" . default)
   ("\\.x?html?\\'" . default)
   ("\\.pdf\\'" . default))


  Documentation:
  External applications for opening `file:path' items in a document.
  Org-mode uses system defaults for different file types, but
  you can use this variable to set the application for a given file
  extension.  The entries in this list are cons cells where the car identifies
  files and the cdr the corresponding command.  Possible values for the
  file identifier are
   "string"    A string as a file identifier can be interpreted in different
                 ways, depending on its contents:

                 - Alphanumeric characters only:
                   Match links with this file extension.
                   Example: ("pdf" . "evince %s")
                            to open PDFs with evince.

                 - Regular expression: Match links where the
                   filename matches the regexp.  If you want to
                   use groups here, use shy groups.

                   Example: ("\.x?html\'" . "firefox %s")
                            ("\(?:xhtml\|html\)" . "firefox %s")
                            to open *.html and *.xhtml with firefox.

                 - Regular expression which contains (non-shy) groups:
                   Match links where the whole link, including "::", and
                   anything after that, matches the regexp.
                   In a custom command string, %1, %2, etc. are replaced with
                   the parts of the link that were matched by the groups.
                   For backwards compatibility, if a command string is given
                   that does not use any of the group matches, this case is
                   handled identically to the second one (i.e. match against
                   file name only).
                   In a custom lisp form, you can access the group matches with
                   (match-string n link).

                   Example: ("\.pdf::\(\d+\)\'" . "evince -p %1 %s")
                       to open [[file:document.pdf::5]] with evince at page 5.

   `directory'   Matches a directory
   `remote'      Matches a remote file, accessible through tramp or efs.
                 Remote files most likely should be visited through Emacs
                 because external applications cannot handle such paths.
  `auto-mode'    Matches files that are matched by any entry in `auto-mode-alist',
                 so all files Emacs knows how to handle.  Using this with
                 command `emacs' will open most files in Emacs.  Beware that this
                 will also open html files inside Emacs, unless you add
                 ("html" . default) to the list as well.
   t             Default for files not matched by any of the other options.
   `system'      The system command to open files, like `open' on Windows
                 and Mac OS X, and mailcap under GNU/Linux.  This is the command
                 that will be selected if you call `C-c C-o' with a double
                 C-u C-u prefix.

  Possible values for the command are:
   `emacs'       The file will be visited by the current Emacs process.
   `default'     Use the default application for this file type, which is the
                 association for t in the list, most likely in the system-specific
                 part.
                 This can be used to overrule an unwanted setting in the
                 system-specific variable.
   `system'      Use the system command for opening files, like "open".
                 This command is specified by the entry whose car is `system'.
                 Most likely, the system-specific version of this variable
                 does define this command, but you can overrule/replace it
                 here.
   string        A command to be executed by a shell; %s will be replaced
                 by the path to the file.
   sexp          A Lisp form which will be evaluated.  The file path will
                 be available in the Lisp variable `file'.
#+END_EXAMPLE

**** setting
#+BEGIN_SRC emacs-lisp
  (setq org-file-apps '((auto-mode . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . default)
                        ;; ("\\.pdf\\'" . "evince %s")
                        ("\\.pdf\\'" . "wine \'C:\\Program Files\\Foxit Software\\Foxit Reader\\FoxitReader.exe\' ../../../../%s")
                        ))
#+END_SRC

*wine必须的路径必须相对于wine启动路径，支持 .. , 不支持 ~ 和绝对路径。*

../../../../是从journal.org到时/的相对路径。



**** 测试

[[/usr/local/texlive/2014/texmf-dist/doc/latex/minted/minted.pdf]]

[[/media/ben/Reserch/Document/Programming/C++/Boost/Boost库学习指南.pdf]]

[[/media/ben/Reserch/Document/嵌入式系统/ARM/ARM Architecture Reference Manual.pdf]]

太繁琐！！！

文件中有空格也可以。

*** DONE Emacs后台进程管理
- State "DONE"       from "TODO"       [2015-11-25 三 14:07] \\
  proced

*M-x proced*

*** 使用 chromuium 打开 org-mode 中的网页链接                 :link:chrome:

1. why
   + 良好的可视化
   + 双显示器

2. how

   1) browse-url-browser-funtion
      #+BEGIN_SRC emacs-lisp
        (setq browse-url-browser-function 'browse-url-generic
              browse-url-generic-program "chromium-browser")
      #+END_SRC

   2) org-file-apps: External applications for opening *=file:path=* items in a document.

      #+BEGIN_SRC emacs-lisp
        (setq org-file-apps '((auto-mode . emacs)
                              ("\\.mm\\'" . default)
                              ("\\.x?html?\\'" . default)
                              ;; ("\\html\\'" . "chromium-browser %s")
                              ;; ("\\.pdf\\'" . "evince %s")
                              ("\\.pdf\\'" . "wine \'C:\\Program Files\\Foxit Software\\Foxit Reader\\FoxitReader.exe\' ../../../../%s")
                              ("\\.chm\\'" . "xchm %s")
                              ))
      #+END_SRC

      将浏览 html 链接的方式改为 'system' 和 'chromium-browser %s' 均
      无效.

3. test

   OK，鼠标焦点依然停留在 Emacs 上。

4. reference

   + [[http://stackoverflow.com/questions/4506249/how-to-make-emacs-org-mode-open-links-to-sites-in-google-chrome][stackoverflow: how to make emacs org-mode open links to sites in Google chrome]]

   + [[help:org-file-apps][help: org-file-apps]]

*** 去Link化，只保留description, pandoc ROS 文档的问题

- State "DONE"       from "TODO"       [2015-12-08 二 13:35]

1. /正则替换/ ，很简单

2. 没有必要，网页的可视化比 ORG 要好，所以 *除非必要不要使用pandoc将网
   页转换为PDF*

** Tag                                                               :tag:
*** why tag?
对于信息的管理，有两种方式:
+ 分类(category)
+ 标签(tag)

|---------+----------------------------------------|
| C-c C-q | 为当前标题输入标签 前缀C-u可以对齐标签 |
|---------+----------------------------------------|

*** 标签作用
这两种方式各有特点:通常分类是固定的，很少变化，而tag随时可以增加。分类
通常表现为树状结构，比较清晰，但是树状结构过于简单，不能表达复杂的信息。
比如，如果有多个分类树，处理起来就会比较麻烦。

所以，这两种方式通常结合起来使用。比如blog系统中，通常既支持文章的分类
（树），又支持为每篇文章作tag标记。

org-mode作为最好的文档编辑利器 ，在支持文内大纲（也是树状结构）的同时，
还方便的支持tag功能。tag可以在多篇文档中共用。

*** 标记tag
**** tag格式

在Org-mode中，可以对 *标题* 增加tag标记。标记的格式如下：
#+BEGIN_EXAMPLE
  跟特留尼西特握手                    :苦差:薪水:逃不掉:
#+END_EXAMPLE

**** 继承

而且Org-mode的标签自动按照大纲树的结构 *继承* 。即子标题自动继承父标题的标
签。比如：
#+BEGIN_EXAMPLE
  ,* Meeting with the French group     :work:
  ,** Summary by Frank                 :boss:notes:
  ,*** TODO Prepare slides for him     :action:
#+END_EXAMPLE

则最后一行标题具有 work, boss, notes, action 四个标签。

**** 元数据 *FILETAGS*

如果希望文档中的所有标题都具有某些标签，只需要定义文档元数据：
#+BEGIN_EXAMPLE
  ,#+FILETAGS: :peter:boss:secret:
#+END_EXAMPLE

**** 快捷键
*** 预定义标签
上面提到，除了可以输入标签外，还可以从预定义的标签中进行选择。预定义的
方式有两种：
**** 元数据 *TAGS*
这种方式预定义的标签只能在当前文件中使用。使用#+TAGS元数据进行标记，如：
#+BEGIN_EXAMPLE
  ,#+TAGS: { 桌面(d) 服务器(s) }  编辑器(e) 浏览器(f) 多媒体(m) 压缩(z)
#+END_EXAMPLE

+ 每项之间必须用 *空格分隔*
+ 可以在括号中定义一个 *快捷键*
+ 花括号里的为 *标签组* ，只能选择一个
+ 对标签定义进行修改后，要在标签定义的位置按 *C-c C-c* 刷新才能生效。

**** 全局配置
 在配置文件中定义上面的标签定义只能在当前文件生效，如果要在所有的.org
 文件中生效，需要在 Emacs 配置文件 .emacs 中进行定义：
 #+BEGIN_EXAMPLE
   (setq org-tag-alist '(

                       (:startgroup . nil)
                            ("桌面" . ?d) ("服务器" . ?s)
                       (:endgroup . nil)
                       ("编辑器" . ?e)
                       ("浏览器" . ?f)
                       ("多媒体" . ?m)
                       ))
 #+END_EXAMPLE

默认情况下，org会动态维护一个Tag列表，即当前输入的标签若不在列表中，则
自动加入列表以供下次补齐使用。

为了使这几种情况（默认列表、文件预设tags，全局预设tags）同时生效，需要
在文件中增加一个空的TAGS定义：
#+BEGIN_EXAMPLE
  ,#+TAGS:
#+END_EXAMPLE

*** 按标签搜索
|---------+----------------------------------------------|
| C-c \   | 按标签搜索标题                               |
| C-c / m | 搜索并按树状结构显示                         |
| C-c a m | 按标签搜索多个文件(需要将文件加入全局agenda) |
|---------+----------------------------------------------|

可使用逻辑表达式限制条件
|------+------+--------+--------------------------------|
| +    | 和   | a+b    | 同时有这两个标签               |
| -    | 排除 | a-b    | 有 a 但没有 b                  |
| 竖线 | 或   | a竖线b | 有 a 或者有 b                  |
| &    | 和   | a&b    | 同时有 a 和 b，可以用“+”替代 |
|------+------+--------+--------------------------------|

*** 标签全部改为小写字母

1. 方便搜索与定制
2. 正则替换
3. 末尾冒号

正则替换大小写， +不会+
使用Eamcs键盘宏解决
*** 关于尊重博客作者

1. 技术博客的博文不仅有质有量, 而且逻辑通顺, 值得尊重与借鉴
2. 排版良好, 因而可以使用 pandoc 将博文转换为 org-mode
3. 为了表示敬意, 使用 *blog_博客名* 作为 org 标签
   - 其中"博客名简写", 最好是单字或双字或一个英文单词

*** 关键词标签

- 出发点(why)
*** org-tag-view

搜索标签常用。

绑定在 C-c a m 太慢

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "<f7>") 'org-tags-view)
#+END_SRC

** GTD                                                                 :gtd:
*** GTD overview
**** GTD精要

GTD(Getting Things Done) 是一种将繁重超负荷的工作生活方式变成无压力高效
的时间管理系统（David Allen，《Getting Things Done-The Art of
Stress-Free Productivity》。其核心是把所有要做的事情都记录下来，然后整理
组织，并逐一执行。也就是 *收集*, *整理*, *组织*, *回顾*, *执行* 五个过
程，如下图：

+ 收集：把接收到的各种事件集中在一起；
+ 整理：对事件做出快速判断，决定直接抛弃、留存归档或是产生一个任务；
+ 组织：根据任务的不同属性将其归入不同的工作清单；
+ 回顾：定期检查工作清单，如果条件成熟就进行处理；
+ 执行：对于可以处理的任务进行处理，并归档。

GTD的核心理念概括一句话，就是：你必须记录下来你要做的事，然后整理，并
安排自己去逐一执行。

整理和组织
***** 收集
一个交易系统，如果存储了大量的历史信息，就会负担过重，甚至无法有效处理新
的交易。同样，如果大脑中存放了大量的“杂事”，不但会增加焦虑感，甚至会排挤
掉真正有意义的思考，徒然损耗精力。清空大脑，可让人气定神闲，总是处于一切
就绪的状态，从容高效的提升决策的品质和做事的效率。所以需要把每一个悬而未
决的杂事都从大脑中拿出来，存储在外部的收集系统。
***** 整理
但是仅仅收集还不够，如果这些事情没有安排妥当，还是会让人感觉不安。当杂事
收集到一定程度是，要对其进行整理。抛弃掉没用的垃圾和暂时不用考虑的参考信
息，剩下的就是需要关注的任务。对于收集到的杂事，应该定期整理以便尽量控制
其数量，最好达到清空的状态。在整理的时候，要做到以下两点：

+ 从头到尾：平等对待所有杂事，逐一处理，不避不拖。
+ 一次一事：专注于每一件杂事，心无旁骛的判断当前杂事的实质，不要同时考
  虑下一件。

进一步，可以快速判断这个任务的特征：是否可以在2分钟内解决？如果可以就马
上解决掉。如果不能，还需要进一步判断任务的重要程度，谁来做，什么时候做，
在哪里做，并根据这些特征将任务分配到不同的工作列表。最后，如果这个任务属
于一个很多任务组成的“项目”，还需要为其打上该项目的标签。

大概80%以上的任务都可以如上略作思考就可得知下一步行动，15%的项目只要简单
的借助辅助手段（如MindMap等工具）稍加记录即可，只有5%重大复杂的项目任务
 需要通盘筹算。

**** 如何进行GTD
任何需要关注的事件，如mail, 电话，IM，口头交流，网页，文档，想法等，都有
可能产生新的任务。收集环节要把这些需要关注的事件都记录下来。
***** 收集
任何需要关注的事件，如mail, 电话，IM，口头交流，网页，文档，想法等，都有
可能产生新的任务。收集环节要把这些需要关注的事件都记录下来。

*所以需要一个收集箱（Inbox)，能够随时快速启用，记录需要的信息* 。
***** 整理
在合适的时间梳理收件箱中的信息，抛弃掉没用的垃圾和暂时不用考虑的参考信息
，剩下的就是需要关注的任务。整理阶段的三种处理方式是：
  + 既不需要处理又无保留价值的信息，直接舍弃
  + 不需要处理但有保留价值的信息，归档留存
     比如，一篇有用的资料，以后可能会用到，需要归档已被查阅；一个很好的想
    法但由于时间、前提条件、考虑程度等因素不能马上投入行动，需要记录下来
    等等。
  + 需要处理的信息，创建一个任务

根据以上三种情况，整理阶段需要实现 ：
+ 删除无用的信息
+ 将信息归档
+ 创建任务

***** 组织
创建任务时，要有一个快速的判断，包括what（做什么），who（谁来做），when
（什么时候做），where（什么地点处理），why（为什么要做，可以用原始消息作
为原因），how（如何做），how much（需要多长时间）。这个判断要非常迅速，
并根据判断的结果对任务进行组织，以便后来的处理和查询，通常按照可以这样的
步骤分析：
1. 该任务是否属于一个项目？如果是，首先打上项目标记
2. 该任务能否在2分钟完成？如果是，马上处理，然后将任务标记为“已完成”
3. 根据重要性和紧迫性，为该任务划分优先级
4. 该任务是否需要别人处理？如果是，通知对方，然后将任务标记为“等待中”
5. 需要自己处理的任务，马上判断处理的地点/场合，并标记
6. 对于能够确定时间的任务（日程安排），标记计划处理时间，如果有截止日期
   ，也标记上

根据上述步骤，组织阶段需要的功能包括 ：
+ *将任务归入不同的工作清单*
+ *为任务增加标记*
+ *定义任务的完成状态*
+ *为任务定义优先级*
+ *为任务设定时间点*

***** 回顾
在合适的时机检查所有的任务，根据实际情况进行处理。建议的做法包括：

+ 每日回顾每天早上首先查看当日的日程表，然后检查待办任务清单，根据实际
  情况和当日的时间安排，以及当日的行程（地点），决定一天的工作计划。
+ 周期性回顾可以是每周，每月或更长的时间周期。回顾一段时间内所完成的事
  情，做出总结；同时根据实际情况的变化，调整下一阶段的计划。
+ 项目回顾项目是一系列任务的组合，并且任务之间存在依赖关系。根据项目的
  时间点，在适当的时机回顾整个项目的相关任务，进行总结或计划。

可以遵循”六个高度检视法“：
+ 5万英尺+：人生目的和价值观（面临重大变化和转折时）
+ 4万英尺：3~5年的展望（建议每年检视）
+ 3万英尺：1~2年的目标（建议每季检视）
+ 2万英尺：责任范围（建议每月检视）
+ 1万英尺：当前的项目（建议每周检视）
+ 跑道：下一步行动（建议每日检视）

3个较低层次的内容大多是针对事物当前状态（行动、项目、职责），再向上的
层次则主要涉及指导方向、目标取向等方面，需要在恰当的时机去关注需要关注的
方面，长远规划，掌控愿景，保持全方位的平衡。

回顾阶段需要 ：
+ *按时间段检索任务*
+ *按项目检索任务*
+ *处理任务间的依赖关系*
***** 执行
根据 情境是否合适 、 时间是否够用 、 精力是否充沛 、 任务是否重要 四个原
则来决定要进行哪项任务。因为经过前面的步骤已经周密严谨系统地考量过各项任
务，所以此时只需要用直觉判断即可。可以参考”四象限法则“：

 1. 给出任务的定性：重要/不重要，紧急/不紧急
 2. 按照”先轻重，再缓急“的原则，将任务按照”重要且紧急-重要不紧急-不重要
    但紧急-不重要不紧急“的顺序排序
 3. 对于划分到同一类型的任务，人为区分”高、中、低“的优先级
 4. 处理原则：
    + 重要且紧急：尽早动手，缓解压力
    + 重要不紧急：尽早计划，逐步完成
    + 不重要但紧急：寻求帮助，设定截止时间
    + 不重要不紧急: 冷却处理

每完成一项任务，就将该任务标记为“已完成”，并归档。

*为了帮助判断，需要支持任务的筛选、搜索和排序* 。

**** 使用ORG实现GTD
***** 定义任务
Org-mode认为，每一个任务通常会需要附带一些文字说明。所以Org-mode将标题作
为任务的载体。通过在标题上增加状态标记，来定义任务。由于大纲是分级的，所
以将标题定义为任务 *天然支持了子任务* ：可以在子标题上标记子任务。

|---------+---------------|
| C-c C-t | org-todo      |
| S-LEFT  | org-shiftleft |
| S-RIGHT | org-shiftright |
|---------+----------------|
***** 定义任务状态
Org-mode内置的任务状态只有两种： *TODO* 和 *DONE* 。如果需要更多的状态，
需要自己定义。
****** 元数据定义 *SEQ_TODO* or *TODO*
可以在文件内部定义任务状态：关键字应该各不相同，这样对于一个选项 Org 才
知道该用哪个状态序列（集合）。例子中也给出了快速使用一个关键字的方法，就
是在关键字后面括号中给出快捷字母——当用 C-c C-t时，会询问，让你输入一个字
母。

要自定义任务状态，可以使用文档元数据“#+SEQ_TODO：”，可以在文档的任何地方
定义，但是 *建议统一定义在文档头部*.

将光标放在这些内容上，输入 C-c C-c 可以直接生效。

#+BEGIN_EXAMPLE
  ,#+SEQ_TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)
  ,#+SEQ_TODO: TODO(T!) | DONE(D@)3  CANCELED(C@/!)
#+END_EXAMPLE

+ 可以定义多组状态序列，每个“#+SEQ[TODO”行定义一组]
+ 状态之间用空格分隔
+ 可以在（）中定义附加选项，包括：
  - 字符：该状态的快捷键
  - ！：切换到该状态时会自动增加时间戳
  - @ ：切换到该状态时要求输入文字说明
  - 如果同时设定@和！，使用“@/!”
+ 用“|”分隔未完成状态和已完成状态。未完成状态在查询待办事项时会列出。
+ 如果不存在"|",则默认最后一个关键字为完成状态





****** 全局配置 org-todo-keywords
#+BEGIN_EXAMPLE
  (setq org-todo-keywords
      '((sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "TODO(T!)" "|" "DONE(D@)3" "CANCELED(C@/!)")
       ))
#+END_EXAMPLE

****** TYPE_TODO
除了状态序列外，还可以定义type，来标记任务的分类。可以参考[[http://orgmode.org/manual/TODO-types.html#TODO-types][这里]] 。

***** 设置任务优先级
在Org-mode中，还针对任务设定了A，B，C三种优先级，在安排日程的时候可以按
照优先级进行排序。为任务设定优先级是通过快捷键 *S-UP/DOWN*
|--------+---------------+---------------------------------------|
| S-UP   | org-shiftup   | increase priority of current headline |
| S-DOWN | org-shiftdown | decrease priority of current headline |
|--------+---------------+---------------------------------------|
***** 跟踪子任务
对于有多个子任务的上级任务，很常见的一个需求是随时跟踪子任务的完成情况。
Org-mode支持在上级任务上增加标记，当子任务的状态发生改变时自动更新上级任
务的完成情况。支持百分比和分数两种形式，类似[66%] 或者 [2/3]。

可以在上级任务标题中的任意位置插入 [%] 或者 [/], 当子任务的状态发生变化时
，会自动更新该位置的值。

注:
 1) 当改变子任务状态时，只更新上一级任务的完成情况，不可级联。
 2) 即使所有的子任务都完成，也只是标记上一级任务的完成情况为100%，而不能
    自动更新上级任务的完成状态。如果需要自动设定为完成，可以在.emacs中增
    加如下配置：
    #+BEGIN_EXAMPLE
      (defun org-summary-todo (n-done n-not-done)
        "Switch entry to DONE when all subentries are done, to TODO otherwise."
        (let (org-log-done org-log-states)   ; turn off logging
          (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

      (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
    #+END_EXAMPLE
***** 用复选框标记非标题类型的子任务
Org-mode还支持非标题形式的子任务。对于以
”[ ]“(*注意空格*)开头的列表，会被当作复选框。这样就形成了局部的子任
务，适用于将一个任务划分成几个简单的步骤。
pp#+BEGIN_EXAMPLE
  ,*** 一个任务 [0/2]
  该任务包含几个步骤：
  - [-] 步骤1 [1/2]
    - [X] 步骤1.1
    - [ ] 步骤1.2
  - [-] 步骤2 [1/2]
    - [X] 步骤2.1
    - [ ] 步骤2.2
#+END_EXAMPLE

|---------+----------------|
| C-c C-c | 改变复选框状态 |
| M-S-RET | 增加一个子项   |
|---------+----------------|


***** 查询任务
*C-c /            只列出包含搜索结果的大纲，并高亮，支持多种搜索方式*
***** 时间
Org-mode中的任务还可以设置计划时间(*SCHEDULED*)和截止时间(*DEADLINE*)，
方便任务的管理和排程。
****** 时间戳

在Org-mode中，将带有日期和时间信息的特定格式的字符串称为 *时间戳*。时
间戳使用”< >“进行标记，比如：

#+BEGIN_EXAMPLE
  <2005-10-01 Tue>
  <2003-09-16 Tue 09:39>
  <2003-09-16 Tue 12:00-12:30>
#+END_EXAMPLE

时间戳分为两种，上面的例子中的时间戳都标记了一个 *时间点*,另外一种时
间戳标记 *重复出现的多个时间点* 。使用时间点+ 间隔（天（d）、周（w）、
月（m）或者年（y））来表示。比如：

#+BEGIN_EXAMPLE
  <2007-05-16 Wed 12:30 +1y>
#+END_EXAMPLE
表示从2007-05-16 12:30开始，每周重复一次。

时间戳可以放在标题或正文的任何部分。

时间戳输入:
+ 可以手工输入符合格式的标记，
+ 可以使用快捷键 C-c . 来创建
+ 如果要快速输入日期无需选择，可以直接用C-c <
+ C-c > 可以查看日历
+ 如果仅仅想输入一个日期/时间，与任务没有任何关系，可以用C-c !。

S-left/S-right 以天为单位调整时间戳时间 S-up/S-down 调整光标所在时间单
位；如果光标在时间戳之外，调整时间戳类型（是否在日程表中显示） S-LEFT/
将光标处理的时间戳改变一天。

S-UP/ 改变时间戳中光标下的项。光标可以处在年、月、日、时或者分之上。当时
间戳包含一个时间段时，如 “15:30-16:30”，修改第一个时间，会自动同时修改第
DOWN 二个时间，以保持时间段长度不变。想修改时间段长度，可以修改第二个时
间。

|---------+-------------------------+---------------------------------------------------------------------|
| C-c .   | org-time-stamp          | Prompt for a date/time and insert a time stamp                      |
| C-c <   | org-date-from-calendar  | Insert time stamp corresponding to cursor date in *Calendar* buffer |
| C-c >   | org-goto-calendar       | Go to the Emacs calendar at the current date.                       |
| C-c !   | org-time-stamp-inactive | org-time-stamp-inactive                                             |
|---------+-------------------------+---------------------------------------------------------------------|
| S-UP    | org-shiftup             | Increase item in timestamp                                          |
| S-DOWN  | org-shiftdown           | Decrease item in timestamp                                          |
| S-LEFT  | org-shiftleft           |                                                                     |
| S-RIGHT | org-shifright           |                                                                     |
|---------+-------------------------+---------------------------------------------------------------------|

S-LEFT:
- switch a timestamp at point one day into the past
- on a headline, switch to the previous TODO keyword.
- on an item, switch entire list to the previous bullet type
- on a property line, switch to the previous allowed value
- on a clocktable definition line, move time block into the past

****** 时间段
两个时间戳用‘–’连接起来就定义了一个时间段：
#+BEGIN_EXAMPLE
  <2004-08-23 Mon>--<2004-08-26 Thu>
#+END_EXAMPLE

|---------------+------------------|
| 连续使用C-c . | 可以创建时间段   |
| C-c C-y       | 计算时间段的间隔 |
|---------------+------------------|

***** 计划时间和截止时间
Org-mode可以为任务设定一个计划时间(SCHEDULED), 输入 C-c C-s，就可以设定
光标所在位置所属的任务的计划时间。而 C-c C-d是输入截止时间（DEADLINE）。
|---------+--------------+----------------------|
| C-c C-s | org-schedule | Insert the SCHEDULED |
| C-c C-d | org-deadline | Insert the DEADLINE  |
|---------+--------------+----------------------|
***** 全局任务文件清单
Org-mode还支持将多个.org文件组合起来进行管理。这带来很多好处：你可以按
照不同的用途将任务放在不同的文件中进行组织，比如项目，个人事务，家庭等
等。

要让Org-mode知道需要把哪些文件视为全局任务的组成部分，需要设定一个清单，
可以在.emacs中这样设置 *org-agenda-files* ：
#+BEGIN_EXAMPLE
  (setq org-agenda-files (list "~/.todos/work.org"
                               "~/.todos/projects.org"
                               "~/.todos/home.org"
                               "~/Documents/todo/"
                             ))
#+END_EXAMPLE

清单中可以加入文件或目录。如果是目录，该目录下的所有.org文件都会被加入清
单。

除了预定义的清单文件，还可以在编辑任务文件(.org)时随时使用C-c [ / ] 将文
件加入/移出清单。
可以随时通过C-c '/, 循环打开所有的清单文件。

|-------+--------------------------+--------------------------------------------------------------|
| C-c [ | org-agenda-file-to-front | Move/add the current file to the top of the agenda file list |
| C-c ] | org-remove-file          | Remove current file from the org-agenda-files                |
|-------+--------------------------+--------------------------------------------------------------|

***** 全局TODO列表
全局TODO列表列出所有全局任务文件中的未完成任务。通过快捷键 *C-c a t*
进入全局 TODO 列表。

在全局TODO列表中，用 t 键改变任务状态，；按 RET 跳到该条目所在的源文件。

如果提示C-c a快捷键未定义，是因为Org-mode的快捷键没有启用，需要在.emacs
中增加配置：
#+BEGIN_EXAMPLE
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_EXAMPLE

***** 日程表
有时候可能需要根据未完成任务显示日程安排，通过 *C-c a a* 可以进入日程
表视图。日程表根据任务的计划时间列出每天的任务。

在日程表视图中按 "l"(小写字母L) 显示日志。这样就会显示你所有已经完成的任
务和他们完成的时间。

*** S-M-RET 插入TODO项目
*** org-agenda window setup
Two variables control how the agenda buffer is displayed and whether
the window configuration is restored when the agenda exits:
+ org-agenda-window-setup: current-window
+ org-agenda-restore-windows-after-quit: customize 3

*** refile                                                         :refile:

**** shortcuts

|-------------------------+---------+--------------------|
| org-refile              | C-c C-w | 同一文件中移动节点 |
| org-copy                | C-c M-w | 同形文件中复制节点 |
|-------------------------+---------+--------------------|

**** variables

1) /org-refile-targets/

   多级节点/多文件设置

   #+BEGIN_EXAMPLE
   '(org-refile-targets (quote (("newgtd.org" :maxlevel . 1)
                                ("someday.org" :level . 2))))
   #+END_EXAMPLE

   This is a list of cons cells.  Each cell contains:

   + a specification of the files
   + a specification of how to file candidate refile targets /required/
     - :tag . "tag"
     - :todo . "KEYWORD"
     - :regexp . "REGEXP"
     - :level . N
     - :maxlevel . N

2) /org-reverse-note-order/

   移动后节点位置

   Non-nil means store new notes at the beginning of a file or entry.
   When nil, new notes will be filed to the end of a file or entry.

3) /org-refile-use-outline-path/

   select a location via a file-path-like completition

   Non-nil means provide refile targets as paths.

   So a level 3 headline will be available as level1/level2/level3.

   When the value is `file', also include the file name (without
   directory) into the path.

   In this case, you can also stop the completion after the file name,
   to get entries inserted as top level in the file.

   When `full-file-path', include the full file path.

4) /org-outline-path-complete-in-steps/

   Non-nil means complete the outline path in hierarchical steps.

5) /org-refile-allow-creating-parent-nodes/

   create new nodes on the fly

   Non-nil means allow to create new nodes as refile targets.

   New nodes are then created by adding "/new node name" to the
   completion of an existing node.

   When the value of this variable is `confirm',new node creation must
   be confirmed by the user (recommended)

   When nil, the completion must match an existing entry.

**** 配置

***** v1.0

#+BEGIN_SRC emacs-lisp
  ;; V1.0
  (setq org-reverse-note-order t) ; 新的节点转接至文件或条目头部
  (setq org-refile-targets
        '(("~/Tiger/Journal/tiger.org" :maxlevel . 2)
          ("~/Tiger/GTD/task.org" :maxlevel . 2)
          ))
  (setq org-refile-use-outline-path nil)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes nil)
#+END_SRC

***** v1.1

1. 使用 outline 逻辑性更强
2. 允许添加新的父节点

#+BEGIN_SRC emacs-lisp
  ;; V1.2
  (setq org-reverse-note-order t) ; 新的节点转接至文件或条目头部
  (setq org-refile-targets
        '(
          ("~/Wally/Journal/WallyNotes/Algorithms.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/ComputerScience.org" :level . 1)
          ("~/Wally/Journal/WallyNotes/Emacs.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/EmbeddedSystem.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Languages.org" :level . 1)
          ("~/Wally/Journal/WallyNotes/Linux.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Programming.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Robotics.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Science.org" :level . 1)
          ("~/Wally/Journal/WallyNotes/LaTeX.org" :level . 2)
          ))
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

***** v1.2: 没有必要，用不着所有的东西都通过花哨的方式完成，要朴素

+ 增加 bibtex 的 refile
+ 无果， refile的对象必有是节点，即标题(Heading), 目标需要是 Org文件

#+BEGIN_SRC emacs-lisp
  ;; V1.2
  (setq org-reverse-note-order t) ; 新的节点转接至文件或条目头部
  (setq org-refile-targets
        '(
          ("~/Wally/Journal/WallyNotes/Algorithms.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/ComputerScience.org" :level . 1)
          ("~/Wally/Journal/WallyNotes/Emacs.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/EmbeddedSystem.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Languages.org" :level . 1)
          ("~/Wally/Journal/WallyNotes/Linux.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Programming.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Robotics.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Science.org" :level . 1)
          ("~/Wally/Journal/WallyNotes/LaTeX.org" :level . 2)
          ;; ("~/Wally/GraduationProject/Thesis/refs.bib")
          ))
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

***** v1.3

+ 使用 outline，配合不再使用 不同等级 level
+ 正则替换 r" :level \. [12]"

#+BEGIN_SRC emacs-lisp
  ;; V1.3
  (setq org-reverse-note-order t) ; 新的节点转接至文件或条目头部
  (setq org-refile-targets
        '(
          ("~/Wally/Journal/WallyNotes/Algorithms.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/ComputerScience.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Emacs.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/EmbeddedSystem.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Languages.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Linux.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Programming.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Robotics.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/Science.org" :level . 2)
          ("~/Wally/Journal/WallyNotes/LaTeX.org" :level . 2)
          ))
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

**** 参考:

+ ORG Manual
+ [[http://www.cnblogs.com/holbrook/archive/2012/04/17/2454619.html#sec-2-6][Emacs learning]]

*** org-capture                                               :org:capture:
- state "halt"       from ""           [2015-02-27 五 01:32]
**** 参考:
+ [[~/Document/Emacs/Org/org.pdf][org manual]]

**** setting up capture
#+BEGIN_EXAMPLE
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_EXAMPLE
**** using capture
|-----------+----------------------|
| C-c c     | org-capture          |
| C-c C-c   | org-capture-finalize |
| C-c C-w   | org-capture-refile   |
| C-c C-k   | org-capture-kill     |
|-----------+----------------------|

**** capture templates
C-c c C  Customize the variable *org-capture-templates*
#+BEGIN_EXAMPLE
 (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")))
#+END_EXAMPLE

**** Templates elements

[[/home/ben/Tiger/Figures/scrot/10675oaC.png]]


[[/home/ben/Tiger/Figures/scrot/106752Qz.png]]

*** DONE org-capture 增加trick以及更改位置到minor下
- State "DONE"       from "TODO"       [2015-12-07 一 13:52]
#+BEGIN_SRC emacs-lisp
  (setq  org-capture-templates
           '(("t" "Todo" entry (file+headline "" "Minor") "* TODO %?\n %t %i\n %a")
             ("i" "Ideas" item (file+headline "" "Ideas") "%?\n %t %i\n %a")
             ("k" "tricks" item (file+headline "" "Tricks") "%?\n %t %i\n %a")
             ))
#+END_SRC

*** org-capture-place-template
http://stackoverflow.com/questions/21195327/emacs-force-org-mode-capture-buffer-to-open-in-a-new-window

I, too, like to use many side-by-side splits (usually 4 -- I'm spread
across multiple monitors), so org-capture's behavior of turning 4
regular windows into 2 really wide ones makes my head explode every
time -- which tends to knock me out of my flow.

So here's a way to prevent org-capture from modifying your window
configuration.

After some searching, *it does not look like there is an easy way to
customize this behavior (or at least not an obvious one)* . Tracing the
function calls in the source code brings us to
org-capture-place-template, which saves your original window
configuration, then deletes the other windows, then gives you the
two-window split. You get your window configuration back later when
you finalize the capture, of course, but it sure would be nice to get
rid of that "let's change your window layout without your say-so"
step.

*Turns out it's pretty simple*.:
*Just re-evaluate org-capture-place-template after commenting out the
*single line calling (delete-other-windows):*
#+BEGIN_EXAMPLE
  (defun org-capture-place-template ()
    "Insert the template at the target location, and display the buffer."
    (org-capture-put :return-to-wconf (current-window-configuration))
    ;; (delete-other-windows)                ; this is the culprit!
    (org-switch-to-buffer-other-window
     (org-capture-get-indirect-buffer (org-capture-get :buffer) "CAPTURE"))
    (widen)
    (show-all)
    (goto-char (org-capture-get :pos))
    (org-set-local 'org-capture-target-marker
           (point-marker))
    (org-set-local 'outline-level 'org-outline-level)
    (let* ((template (org-capture-get :template))
       (type (org-capture-get :type)))
      (case type
        ((nil entry) (org-capture-place-entry))
        (table-line (org-capture-place-table-line))
        (plain (org-capture-place-plain-text))
        (item (org-capture-place-item))
        (checkitem (org-capture-place-item))))
    (org-capture-mode 1)
    (org-set-local 'org-capture-current-plist org-capture-plist))
#+END_EXAMPLE

Aaaah. It was like org-capture was punching me in the face every time
I used it, but now it's stopped.
*** org-capture                                               :org:capture:
**** shortkeys
|---------------+----------------------------------------------|
| C-c c         | org-capture                                  |
| C-c C-c       | org-capture-finalize                         |
| C-c C-w       | org-capture-refile                           |
| C-c C-k       | org-capture-kill                             |
|---------------+----------------------------------------------|
| C-u C-c c     | visit the target location                    |
| C-c C-c C-c c | jump to bookmark org-capture-last-stored     |
|               |                                              |
| C-O C-c c     | insert the capture at point in an Org buffer |
|               | region无效                                     |
|---------------+----------------------------------------------|
| C-c c C       | org-capture-templates                        |
|---------------+----------------------------------------------|

**** templates
#+begin_latex
  \begin{minted}[frame=single, mathescape]{lisp}
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
           "* %?\n %i\n %a")
          ("j" "Journal" entry (file+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n %i\n %a")
          ))                              ;模板

  ; 不浏览模板列表，直接插入capture
  (define-kye global-map "\C-cx"
    (lambda() (interactive (org-capture nil "x")))
  \end{minted}
#+end_latex

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
           "* %?\n %i\n %a")
          ("j" "Journal" entry (file+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n %i\n %a")
          ))                              ;模板

  ; 不浏览模板列表，直接插入capture
  (define-kye global-map "\C-cx"
    (lambda() (interactive (org-capture nil "x")))
#+END_SRC

1. templates elements
   1) keys
   2) description
   3) type
      - entry: an headline
      - item: a plain list, in the fisrt plain list at the target
        location
      - checkitem: a checkbox item
      - table-line: a new line in the first table at the target location
      - plain: Text to be inserted as it is
   4) target
      - (*file* "path/to/file")
      - (*id* "id of existing org entry")
      - (*file+headline* "path/to/file" "node headline")
      - (*file+datetree* "path/to/file")
        [[/home/ben/Tiger/Figures/scrot/5070qOn.png]]
   5) template: creating the capture items
   6) properties

**** Templates expansion

[[/home/ben/Tiger/Figures/scrot/50703Yt.png]]

**** settings
#+BEGIN_SRC emacs-lisp
    (require 'org-capture)
    (global-set-key "\C-cc" 'org-capture)
    (setq org-default-notes-file (expand-file-name "~/Wally/Journal/journal.org"))
    (setq
   org-capture-templates
          '(("t" "Todo" entry (file+headline "" "Tasks") "* TODO %?\n %t %i\n %a")
            ("i" "Ideas" item (file+headline "" "Ideas") "%?\n %t %i\n %a")
            ))
    (define-key global-map "\C-cCi"
      (lambda() (interactive) (org-capture nil "i")))
    (define

  -key global-map "\C-cCt"
      (lambda() (interactive) (org-capture nil "t")))
#+END_SRC

*** org-clock                                                   :clock:
计时
|-------------+-------------------|
| c-c c-x c-i | org-clock-in      |
| c-c c-x c-o | org-clock-out     |
| c-c c-x c-x | org-clock-in-last |
|-------------+-------------------|

#+begin_example
clock: [2015-11-15 日 13:34]--[2015-11-15 日 13:34] =>  0:00
#+end_example

*** org-agenda-files search TAGS
C-c a m有
*** org-agenda-file recycle
C-'

*** DONE org-agenda-file 排序, 然后使用前缀+快捷键迅速定位
- State "DONE"       from ""           [2015-12-07 一 14:00]

1. journal.org
2. Emacs.org
3. Linux.org
4. Programming.org
5. Latex.org

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list (expand-file-name "~/Wally/Journal/journal.org") ; 0
                               "~/Wally/Journal/WallyNotes/Emacs.org" ; 1
                               "~/Wally/Journal/WallyNotes/Linux.org" ; 2
                               "~/Wally/Journal/WallyNotes/Programming.org" ; 3
                               "~/Wally/Journal/WallyNotes/LaTeX.org" ; 4
                               "~/Wally/Journal/WallyNotes/EmbeddedSystem.org" ; 5
                               "~/Wally/Journal/WallyNotes/Algorithms.org"
                               "~/Wally/Journal/WallyNotes/Languages.org"
                               "~/Wally/Journal/WallyNotes/Robotics.org"
                               "~/Wally/Journal/WallyNotes/Science.org"
                               "~/Wally/Journal/WallyNotes/ComputerScience.org"
                               ))
#+END_SRC

*** DONE 标签逻辑搜索
- State "DONE"       from "TODO"       [2015-11-23 一 17:30]
C-c a m     (org-tags-view)
Produce a list of all headlines that match a given set of tags. The
command prompts for a selection criterion, which is a boolean logic
expression with tags, like ‘+work+urgent-withboss’ or ‘work|home’

+ AND +
+ SUB -
+ OR |

*** org time-stamps                                                  :time:
**** [[http://orgmode.org/manual/Creating-timestamps.html][Creating timestamps]]

For Org mode to recognize timestamps, they need to be in the specific
format. All commands listed below produce timestamps in the correct
format.

+ C-c .     (org-time-stamp)

  Prompt for a date and insert a corresponding timestamp. When the
  cursor is at an existing timestamp in the buffer, the command is
  used to modify this timestamp instead of inserting a new one. When
  this command is used twice in succession, a time range is inserted.

+ *C-c !*     (org-time-stamp-inactive)
  Like C-c ., but insert an inactive timestamp that will not cause an
  agenda entry.

+ C-u C-c . &  C-u C-c !

  Like C-c . and C-c !, but use the alternative format which contains
  date and time. The default time can be rounded to multiples of 5
  minutes, see the option org-time-stamp-rounding-minutes.

+ C-c C-c

  Normalize timestamp, insert/fix day name if missing or wrong.

+ C-c <     (org-date-from-calendar)

  Insert a timestamp corresponding to the cursor date in the
  Calendar.

+ C-c >     (org-goto-calendar)

  Access the Emacs calendar for the current date. If there is a
  timestamp in the current line, go to the corresponding date
  instead.

+ C-c C-o     (org-open-at-point)

  Access the agenda for the date given by the timestamp or -range at
  point (see Weekly/daily agenda).

+ S-<left>/<right>     (org-timestamp-down/up-day)


  Change date at cursor by one day. These key bindings conflict with
  shift-selection and related modes (see Conflicts).

+ S-<up>/<down>     (org-timestamp-up/down)

  Change the item under the cursor in a timestamp. The cursor can be
  on a year, month, day, hour or minute. When the timestamp contains a
  time range like ‘15:30-16:30’, modifying the first time will also
  shift the second, shifting the time block with constant length. To
  change the length, modify the second time. Note that if the cursor
  is in a headline and not at a timestamp, these same keys modify the
  priority of an item. (see Priorities). The key bindings also
  conflict with shift-selection and related modes (see Conflicts).

+ C-c C-y     (org-evaluate-time-range)

  Evaluate a time range by computing the difference between start and
  end. With a prefix argument, insert result after the time range (in
  a table: into the following column).
**** usage
C-c ! 没有默认绑定

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map "\C-c !" (lambda()
                                     (interactive)
                                     (org-time-stamp-inactive 1)))
#+END_SRC

以上配置无效， org-time-stamp-inactive 会(*prompt*)弹出一个buffer询问插入哪个日
期。

#+BEGIN_EXAMPLE
  [2015-11-24 二 15:24]
#+END_EXAMPLE

以前写过，简单的修改成标准格式（如上）
#+BEGIN_SRC emacs-lisp
  (defun tagerill:insert-current-time ()
    "Insert the current time"
    (interactive "*")
    (insert (format-time-string "[%Y-%m-%d 周%w " (current-time)))
    (insert (format-time-string "%H:%M]" (current-time))))
  (global-set-key "\C-zt" 'tagerill:insert-current-time)
  (defun tagerill:insert-current-date()
    "Insert the current date in certain format"
    (interactive)
    (insert (format-time-string "%Y/%m/%d" (current-time))))
  (global-set-key "\C-zd" 'tagerill:insert-current-date)
#+END_SRC

测试，OK

*TODO* 周2改为二，不难, elisp 字典？

*** mark-ring

**** v1.0

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map "\C-c5" 'org-mark-ring-goto) ; 默认没有绑定
  (define-key org-mode-map "\C-c4" 'org-mark-ring-push)
#+END_SRC

**** v1.1 增加深度跟踪和消息提示

#+BEGIN_SRC emacs-lisp
  (setq workflow-depth 0)
  (define-key org-mode-map "\C-c5" (lambda()
                                     (interactive)
                                     (setq workflow-depth (- workflow-depth 1))
                                     (org-mark-ring-goto)
                                     (message (format "current workflow depth: %s" workflow-depth))
                                     ))
  (define-key org-mode-map "\C-c4" (lambda()
                                     (interactive)
                                     (setq workflow-depth (+ workflow-depth 1))
                                     (org-mark-ring-push)
                                     (message (format "current workflow depth: %s" workflow-depth))
                                     ))
#+END_SRC

**** v1.2 设置全局按键绑定
#+BEGIN_SRC emacs-lisp
  (setq workflow-depth 0)
  (global-set-key "\C-c5" (lambda()
                                     (interactive)
                                     (setq workflow-depth (- workflow-depth 1))
                                     (org-mark-ring-goto)
                                     (message (format "current workflow depth: %s" workflow-depth))
                                     ))
  (global-set-key  "\C-c4" (lambda()
                                     (interactive)
                                     (setq workflow-depth (+ workflow-depth 1))
                                     (org-mark-ring-push)
                                     (message (format "current workflow depth: %s" workflow-depth))
                                     ))
#+END_SRC

**** v1.3
#+BEGIN_SRC emacs-lisp
  (setq workflow-depth 0)
  (global-set-key "\C-c5" (lambda()
                                     (interactive)
                                     (setq workflow-depth (- workflow-depth 1))
                                     (org-mark-ring-goto)
                                     (message (format "current workflow depth: %s" workflow-depth))
                                     ))
  (global-set-key  "\C-c4" (lambda()
                                     (interactive)
                                     (setq workflow-depth (+ workflow-depth 1))
                                     (org-mark-ring-push)
                                     (message (format "current workflow depth: %s" workflow-depth))
                                     ))
#+END_SRC

*** Emacs 倒计时                                                     :time:

1. why: *切换任务时要保证在一定时限（10～15m）内解决，然后返回到主任务。*

2. google关键字:  emacs countdown timer

3. org-timer-set-timer

   emacs help:
   #+BEGIN_EXAMPLE
     It is bound to C-c C-x ;.

     (org-timer-set-timer &optional OPT)

     Prompt for a duration and set a timer.

     If `org-timer-default-timer' is not zero, suggest this value as
     the default duration for the timer.  If a timer is already set,
     prompt the user if she wants to replace it.

     Called with a numeric prefix argument, use this numeric value as
     the duration of the timer.

     Called with a `C-u' prefix arguments, use `org-timer-default-timer'
     without prompting the user for a duration.

     With two `C-u' prefix arguments, use `org-timer-default-timer'
     without prompting the user for a duration and automatically
     replace any running timer.
   #+END_EXAMPLE

4. 手记

   只能使用整数分钟，使用浮点数会被截取，比如设置0.5会立即结束倒计时。

   由系统提示， 满足要求。

   [[/home/ben/Tiger/Figures/scrot/106756Sw.png]]

5. 设置

#+BEGIN_SRC emacs-lisp
  (setq org-timer-default-timer 10)       ; 设置默认计时10分钟
#+END_SRC

*** org-ring-mark                                                :markring:

**** org-mark-ring-push

C-c % runs the command org-mark-ring-push, which is an interactive
compiled Lisp function in `org.el'.

It is bound to C-c %.

(org-mark-ring-push &optional POS BUFFER)

Put the current position or POS into the mark ring and rotate it.

**** org-mark-ring-goto

org-mark-ring-goto is an interactive compiled Lisp function in
`org.el'.

(org-mark-ring-goto &optional N)

Jump to the previous position in the mark ring.
With prefix arg N, jump back that many stored positions.  When
called several times in succession, walk through the entire ring.
Org-mode commands jumping to a different position in the current file,
or to another Org-mode file, automatically push the old position
onto the ring.

**** 配置和使用

切换任务时先记录当前位置

#+BEGIN_SRC emacs-lisp :exports code
  (define-key org-mode-map "\C-c&" 'org-mark-ring-goto) ; 默认没有绑定
#+END_SRC

**** mark-ring list ?

因为经常需要转换任务，所以可能会忘记之前的任务。

org-mark-ring-push

#+BEGIN_EXAMPLE
org-mark-ring-push is an interactive Lisp function in `org.el'.

It is bound to C-c %, C-c 4.

(org-mark-ring-push &optional POS BUFFER)

Put the current position or POS into the mark ring and rotate it.
#+END_EXAMPLE

org-mark-ring-goto

#+BEGIN_EXAMPLE
org-mark-ring-goto is an interactive Lisp function in `org.el'.

It is bound to C-c 5.

(org-mark-ring-goto &optional N)

Jump to the previous position in the mark ring.
With prefix arg N, jump back that many stored positions.  When
called several times in succession, walk through the entire ring.
Org-mode commands jumping to a different position in the current file,
or to another Org-mode file, automatically push the old position
onto the ring.
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<f1>") 'org-mark-ring-push)
  (global-set-key (kbd "C-<f2>") 'org-mark-ring-goto)
#+END_SRC

*** calendar/Diary integration                                   :calendar:

http://orgmode.org/manual/Weekly_002fdaily-agenda.html

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-include-diary nil)     ; 不使用 dairy 会更快些
#+END_SRC

If you are using the diary only for sexp entries and holidays, it is
faster to not use the above setting, but instead to copy or even move
the entries into an Org file. Org mode evaluates diary-style sexp
entries, and does it faster because there is no overhead for first
creating the diary display.

#+BEGIN_SRC org
  ,* Holidays
  :PROPERTIES:
  :CATEGORY: Holiday
  :END:
  %%(org-calendar-holiday)   ; special function for holiday names

  ,* Birthdays
  :PROPERTIES:
  :CATEGORY: Ann
  :END:
  %%(org-anniversary 1956  5 14) Arthur Dent is %d years old
  %%(org-anniversary 1869 10  2) Mahatma Gandhi would be %d years old
#+END_SRC

*** org-mobile                                                 :org_mobile:

+ http://darksun.blog.51cto.com/3874064/1302920

**** 下载 MobileOrg

豌豆荚上的 MobileOrg 版本低。

google play 在手机上安装后打开无反应！！！

https://github.com/matburt/mobileorg-android  源码不会编译，android 平
台。似乎不再更新了，最后一次提交是两年前。

Google 搜索关键字 "MobileOrg apk": [[http://www.appdownloader.net/Android/App/602857/com.matburt.mobileorg/Download][Down MobileOrg Apk 0.9.13]]

**** 配置 Emacs org

org-mobile-push C-c C-x RET p

#+BEGIN_SRC emacs-lisp
  (require 'org-mobile)
  (require 'org-id)
  (setq org-mobile-directory (expand-file-name "~/Share/Dropbox/MobileOrg"))
  (setq org-directory "~/Wally/Journal/GTD")
  (setq org-mobile-files '("~/Wally/Journal/GTD/task.org"))
  (setq org-mobile-inbox-for-pull "~/Wally/Journal/GTD/mobile.org")
#+END_SRC

***** error

#+BEGIN_EXAMPLE
(void-function org-id-get)
#+END_EXAMPLE

(require 'org-id)

**** 使用小结

#+BEGIN_EXAMPLE
  C-c C-x RET p (translated from C-c C-x <return> p) runs the command
  org-mobile-push, which is an interactive Lisp function in
  `org-mobile.el'.

  It is bound to <menu-bar> <Org> <MobileOrg> <Push Files and Views>,
  C-c C-x RET p.

  (org-mobile-push)

#+END_EXAMPLE

可以更新任务状态，但是更新的内容只是同步到了 mobile.org, 而没有改变对
应的 task.org

*** org export to freemind                               :freemind:mindmap:

#+BEGIN_EXAMPLE
- State "DONE"       from "ABORT"      [2016-01-11 一 10:20] \\
  重新安装系统后编译Emacs，解决问题
- State "ABORT"      from "TODO"       [2015-11-23 一 19:26] \\
  不需要的东西不要瞎折腾, 放弃也是一种智慧
#+END_EXAMPLE


#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/src/org-mode/contrib/lisp"))
  (require 'ox-freemind)
  (setq org-freemind-pretty-output t)
  (setq org-freemind-section-format 'note)
#+END_SRC

(void-function libxml-parse-xml-region) 暂时解决不了。。。

-> 重新编译安装Emacs??? 不要鲁莽！！！

*org-freemind-export-to-freemind*

*** [[http://orgmode.org/manual/Creating-timestamps.html][Creating timestamps]]                                    :blog:timestamp:


For Org mode to recognize timestamps, they need to be in the specific
format. All commands listed below produce timestamps in the correct
format.

C-c .  (=org-time-stamp=)

Prompt for a date and insert a corresponding timestamp. When the cursor
is at an existing timestamp in the buffer, the command is used to modify
this timestamp instead of inserting a new one. When this command is used
twice in succession, a time range is inserted.

C-c !  (=org-time-stamp-inactive=)

Like C-c ., but insert an inactive timestamp that will not cause an
agenda entry.

C-u C-c .

C-u C-c !

Like C-c . and C-c !, but use the alternative format which contains date
and time. The default time can be rounded to multiples of 5 minutes, see
the option =org-time-stamp-rounding-minutes=.

C-c C-c

Normalize timestamp, insert/fix day name if missing or wrong.

C-c <  (=org-date-from-calendar=)

Insert a timestamp corresponding to the cursor date in the Calendar.

C-c >  (=org-goto-calendar=)

Access the Emacs calendar for the current date. If there is a timestamp
in the current line, go to the corresponding date instead.

C-c C-o  (=org-open-at-point=)

Access the agenda for the date given by the timestamp or -range at point
(see
[[Weekly_002fdaily-agenda.html#Weekly_002fdaily-agenda][Weekly/daily
agenda]]).

S-<left>  (=org-timestamp-down-day=)

S-<right>  (=org-timestamp-up-day=)

Change date at cursor by one day. These key bindings conflict with
shift-selection and related modes (see
[[Conflicts.html#Conflicts][Conflicts]]).

S-<up>  (=org-timestamp-up=)

S-<down>  (=org-timestamp-down-down=)

Change the item under the cursor in a timestamp. The cursor can be on a
year, month, day, hour or minute. When the timestamp contains a time
range like ‘15:30-16:30', modifying the first time will also shift the
second, shifting the time block with constant length. To change the
length, modify the second time. Note that if the cursor is in a headline
and not at a timestamp, these same keys modify the priority of an item.
(see [[Priorities.html#Priorities][Priorities]]). The key bindings also
conflict with shift-selection and related modes (see
[[Conflicts.html#Conflicts][Conflicts]]).

C-c C-y  (=org-evaluate-time-range=)

Evaluate a time range by computing the difference between start and end.
With a prefix argument, insert result after the time range (in a table:
into the following column).

** ORG拾遗
*** org-download
+ https://github.com/abo-abo/org-download


This extension facilitates moving images from point A to point B.
**** source
Point A (the source) can be:
+ An image inside your browser that you can drag to Emacs.
  - not work properly

+ An image on your file system that you can drag to Emacs.

+ A local or remote image address in kill-ring. Use the
  org-download-yank command for this. Remember that you can use "0 w"
  in dired to get an address.
  - 使用文件浏览器复制的图片，ok，网页浏览器复制的图片，not ok
  - binding to *C-c M-y*

+ An screenshot taken using gnome-screenshot or scrot or gm. Use the
  org-download-screenshot command for this. Customize the backend with
  org-download-screenshot-method.
  - (默认的即可gnome, 修改可能会出错)
  - binding to *C-c M-s*
**** target

Point B (the target) is an Emacs  org-mode buffer where the inline
link will be inserted. Several customization options will determine
where exactly on the file system the file will be stored.

**** download-methdo
They are: org-download-method:

***** 'attach
use org-mode attachment machinery
***** 'directory

construct the directory in two stages:

****** first part of the folder name is:

+ either "." (current folder)
+ or org-download-image-dir (if it's not nil).
  - org-download-image-dir becomes buffer-local when set, so each file
    can customize this value, e.g with:
    #+BEGIN_EXAMPLE
    -*- mode: Org; org-download-image-dir: "~/Pictures/foo"; -*-
    #+END_EXAMPLE
  - To set it for all files at once, use this:
    #+BEGIN_SRC emacs-lisp
    (setq-default org-download-image-dir "~/Pictures/foo")
    #+END_SRC


****** second part is:

1. *org-download-heading-lvl* is nil => ""
2. org-download-heading-lvl is n => the name of current heading with
   level n.

   Level count starts with 0, i.e. * is 0, ** is 1, *** is 2
   etc. org-download-heading-lvl becomes buffer-local when set, so
   each file can customize this value, e.g with:
   #+BEGIN_EXAMPLE
    -*- mode: Org; org-download-heading-lvl: nil; -*-
   #+END_EXAMPLE
3. *org-download-timestamp*: optionally add a timestamp to the file name.

Customize org-download-backend to choose between url-retrieve (the default) or wget or curl.

*****

*** org-w3m
+ 快捷键
  |-------------+---------------------------|
  | C-c C-x C-w | org-w3m-copy-for-org-mode |
  |-------------+---------------------------|
+ 调用: (org-w3m-copy-for-org-mode)
+ 配置:
  #+BEGIN_EXAMPLE
    (require 'org-w3m')
  #+END_EXAMPLE
+ 说明:
  Copy current buffer content or active region *with `org-mode' style
  links.*

*** MobileORG
- State "ABORT"      from "TODO"       [2015-03-21 六 20:39] \\
  Dropbox被屏蔽, 其它服务器又不会用
- State "TODO"       from ""           [2015-03-04 三 14:20]
 Date:<2015-02-27 五>
  + https://github.com/matburt/mobileorg-android/wiki
  + http://orgmode.org/manual/MobileOrg.html#MobileOrg

*** ABORT 如何为PDF增加outline                                    :pdftool:
- State "ABORT"      from "waiting"    [2015-03-21 六 19:53] \\
  没有便捷的方法, 除了Adobecat
- State "waiting"    from "TODO"       [2015-03-01 日 12:16] \\
  下载和安装软件
- State "TODO"       from ""           [2015-03-01 日 12:16] \\
  Adobe Acrobat
 Date:<2015-02-27 五>
 Link: (Y/N)

*** alist

**** <p

<p 展开

#+BEGIN_QUOTE
智能移动机器人是一类能够通过传感器感知环
境和自身状态, 实现在有障碍物的环境中面向目标
的自主运动( 称为导航) , 从而完成一定作业功能的
机器人系统。
#+END_QUOTE

\LaTeX

#+BEGIN_SRC latex
  \begin{quote}
  智能移动机器人是一类能够通过传感器感知环
  境和自身状态, 实现在有障碍物的环境中面向目标
  的自主运动( 称为导航) , 从而完成一定作业功能的
  机器人系统。
  \end{quote}
#+END_SRC

*** org高亮                                                          :emph:

**** org-export-with-emphasize

org-export-with-emphasize is a variable defined in `ox.el'.
Its value is t

Documentation:
Non-nil means interpret *word*, /word/, _word_ and +word+.

If the export target supports emphasizing text, the word will be
typeset in bold, italic, with an underline or strike-through,
respectively.

This option can also be set with the OPTIONS keyword,
e.g. "*:nil".

**** org-fontify-emphasized-text

Non-nil means fontify *bold*, /italic/ and _underlined_ text.
Changing this variable requires a restart of Emacs to take effect.

**** org-emphasis-alist

Alist of characters and faces to emphasize text.
Text starting and ending with a special character will be emphasized,
for example *bold*, _underlined_ and /italic/.  This variable sets the
marker characters and the face to be used by font-lock for highlighting
in Org-mode Emacs buffers.



#+BEGIN_SRC emacs-lisp
  (setq org-emphasis-alist '(("*" bold)
                             ("/" italic)
                             ("_" underline)
                             ("=" org-verbatim verbatim)
                             ("~" org-code verbatim)
                             ("+"
                              (:strike-through t))))

  (setq org-emphasis-alist '(("*" bold)
                             ("/" italic)
                             ("_" underline)
                             ("=" org-verbatim)
                             ("~" org-code)
                             ("+"
                              (:strike-through t))))
#+END_SRC

**** 似乎不能设置其它的

** LaTeX & Exporting                                                 :latex:
*** auctex 按键绑定移植到 org 中                                   :auctex:

C-c C-f 前缀

#+BEGIN_EXAMPLE
  C-a                          \mathcal{ }
  C-b        \textbf{ }         \mathbf{ }
  C-c        \textsc{ }
  C-e          \emph{ }
  C-f        \textsf{ }         \mathsf{ }
  TAB        \textit{ }         \mathit{ }
  RET        \textmd{ }
  C-n    \textnormal{ }     \mathnormal{ }
  C-r        \textrm{ }         \mathrm{ }
  C-s        \textsl{ }         \mathbb{ }
  C-t        \texttt{ }         \mathtt{ }
  C-u        \textup{ }
  C-d  -- delete font
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  ;; (mapc (lambda(key-macro)
  ;;         (define-key org-mode-map (format "\C-cf%s" (car key-macro)) '(insert (cdr key-macro))))
  ;;       '(("i" "\\mathit{}")            ; note: escapte needed
  ;;         ("I" "\\textit{}")
  ;;         ("b" "\\mathbf{}")
  ;;         ("B" "\\textbf{}")))

  (define-key org-mode-map "\C-cfi" '(insert "\\mathbf{}"))
#+END_SRC

1. 不能使用 C-c C-f 作为前缀，因为已经绑定了
2. 不如使用 yasnippet

#+BEGIN_EXAMPLE
# -*- mode: snippet; require-final-newline: nil -*-
# name: mb:latex-mathbf
# key: mb
# binding: direct-keybinding
# --
\mathbf{$0}
#+END_EXAMPLE

*** org-preview-latex-fragment 与 minted 宏包冲突    :latex:preview:minted:

- http://orgmode.org/worg/org-tutorials/org-latex-preview.html
- http://tex.stackexchange.com/questions/162767/can-not-preview-latex-equation-in-org-mode-dvipng-and-imagemagick-both-failed

#+BEGIN_QUOTE
But if you have set up preview to use the dvipng method, you are in
trouble: that method calls latex directly, the call is hardwired and
it does not use the -shell-escape option. LaTeX refuses to run the
external program that minted used, no DVI file is produced and dvipng
cannot produce a PNG file
#+END_QUOTE

上述问题并没有好的解决方法

*latex preview 要比 minted 使用的多，所以优先考虑前者*

dvipng 没有错误，但不会生成公式图片

imagemagick 产生错误信息，

#+BEGIN_EXAMPLE
(error "PDF file /tmp/orgtex31149_Wk.pdf wasn't produced")
#+END_EXAMPLE

查看 log =/tmp/orgtex12345abc.log=

#+BEGIN_EXAMPLE
l.4 \usepackage
               [utf8]{inputenc}
?
! Emergency stop.
 ...

l.4 \usepackage
               [utf8]{inputenc}
Pass the -shell-escape flag to LaTeX. Refer to the minted.sty documentation for
 more information.
#+END_EXAMPLE




解决方式： 注释掉 org 文件头部包含的 minted 宏包

#+BEGIN_EXAMPLE
#+LATEX_HEADER: \usepackage{minted}
#+END_EXAMPLE

Note:

1. org-toogle-latex-preview
   #+BEGIN_EXAMPLE
     `org-preview-latex-fragment' is an obsolete command (as of 24.4); use `org-toggle-latex-fragment' instead.
   #+END_EXAMPLE
2. imagemagick 产生 A4 的图片，太大了，没有 dvipng 方便

*** LaTeX导出命令(export commands)

|---------------+---------------------------+---------------------------------|
| shortcuts     | command                   | comment                         |
|---------------+---------------------------+---------------------------------|
| *C-c C-e l l* | org-latex-export-to-latex | 导出为同名LaTeX文件,无警告重写  |
| *C-c C-e l L* | org-latex-export-as-latex | 导出到LaTeX临时缓冲区           |
| *C-c C-e l p* | org-latex-export-to-pdf   | 导出为LaTeX文件,之后生成PDF文档 |
| *C-c C-e l o* |                           | 并打开PDF                          |
|---------------+---------------------------+------------------------------------|

*** org-latex-classes 控制导出选项

 [DEFAULT-PACKAGES]      \usepackage statements for default packages
 [NO-DEFAULT-PACKAGES]   do not include any of the default packages
 [PACKAGES]              \usepackage statements for packages
 [NO-PACKAGES]           do not include the packages
 [EXTRA]                 the stuff from #+LATEX_HEADER(_EXTRA)
 [NO-EXTRA]              do not include #+LATEX_HEADER(_EXTRA) stuff

*** 导言(Header)和章节结构(section structure)

默认前三级大纲生成标题(headings),其它生成列表(itemize/enumerate).

文类默认使用article,可通过改变变量 *org-latex-default-class* 的值,或增
加元数据 *LATEX_CLASS*.

*** org-latex-preview

+ http://orgmode.org/worg/org-tutorials/org-latex-preview.html


|---------------------+-----------------------------------|
| C-c C-x C-l         | org-preview-latex-fragment        |
| C-c C-c             | remove overlay                    |
| C-u C-c C-x C-l     | preview everything in the subtree |
| C-u C-u C-c C-x C-l | preview everything in the buffer  |
|---------------------+-----------------------------------|

1. two methods
   + dvipng
   + *imagemagick*
*** latex源码的导出问题

 emacs babel的配置问题?

 org支持内嵌latex, \textbackslash{}后接latex命令都可直接使用, 没有必要
 使用babel包裹.

*** \ 转义字符的导出

**** 仅 \
#+BEGIN_EXAMPLE
  \      $\backslash$
#+END_EXAMPLE
**** 仅前置字符
#+BEGIN_EXAMPLE
  ,\     ,$\backslash$
  ，\    ，$\backslash$
  a\     a$\backslash$
  工\    工$\backslash$
#+END_EXAMPLE
**** 仅后置字符
#+BEGIN_EXAMPLE
  \a     \a
  \工    $\backslash$工
  \,     $\backslash$,
  \，    $\backslash$，
  \.     $\backslash$.
  \;     $\backslash$;
  \:     $\backslash$:
  \'     $\backslash$'
  \"     $\backslash$"
#+END_EXAMPLE
**** 后置 TeX 保留字符
#+BEGIN_EXAMPLE
  \\    \\
  \$    \$
  \^    \^
  \_    \_
  \#    \#
  \{    \{
  \}    \}
  \~    $\backslash$\textasciitilde{}
  \&    \&
  \%    \%
#+END_EXAMPLE

**** 前置 TeX 保留字符
#+BEGIN_EXAMPLE
  \\    \\
  $\    \$$\backslash$
  ^\    \^{}$\backslash$
  _\    \_$\backslash$
  #\    \#$\backslash$
  {\    \{$\backslash$
  }\    \}$\backslash$
  ~\    \textasciitilde{}$\backslash$
  &\    \&$\backslash$
  %\    \%$\backslash$
#+END_EXAMPLE

**** 后单词
#+BEGIN_EXAMPLE
  \abc      \abc
  \abc,     \abc,
  \abc.     \abc.
  \abc工    $\backslash$abc工
  \abc$     \abc\$
  \$工
  \${
#+END_EXAMPLE
**** 结论
当以下条件成立时, org导出的TeX文件中的\会造成错误.
1. *后置*
2. *英文字母或TeX保留字符*
   1) *英文字符与下一个分界符(标点和特殊符号)之间构成一个C变量名*
   2) *所有TeX保留字符*

该结论可以推广到其它特殊字符.

*** TeX保留符号

*前面或后面无空格时* 导出为 TeX 会产生问题, 方括号也会慎用

测试保留字符的转换

#+BEGIN_EXAMPLE
+ \
+ ~
+
#+END_EXAMPLE

*** org中"---"导出到 TeX 也是"---",因而生成pdf中的破折号

注:交集(&)导出 TeX{}和PDF没有问题

#+BEGIN_EXAMPLE
  注:交集(\&)导出 \TeX{}{}和PDF没有问题
#+END_EXAMPLE

对称差分(^) 对称^

#+BEGIN_EXAMPLE
  对称差分(\^{}) 对称\^{}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
^
#
[]
$
#+END_EXAMPLE

*** org-latex-class

[[help:org-latex-classes][help::org-latex-classes]]
a variable defined in 'ox-latex.el'.

Alist of LaTeX classes and associated header and structure. If
*#+LATEX_CLASS* is set in the buffer, use its value and the ossociated
information.

#+BEGIN_EXAMPLE
  (add-to-list 'org-latex-classes
               '("ctexart" "\\documentclass[10pt,onepage]{article}
  \\usepackage{xcolor}
  \\usepackage{tipa}
  \\usepackage[fntef]{ctex}
  \\usepackage{hyperref}
  \\usepackage{graphicx}
  \\usepackage{layout}
  \\usepackage{fancyvrb}
  \\usepackage{listings}
  \\usepackage{picinpar}
  \\usepackage[text={150mm,240mm},centering]{geometry}
  \\pagestyle{myheadings}
  \\markboth{\\today}{\\today}
  [NO-DEFAULT-PACKAGES]
  [NO-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("ctexbook" "\\documentclass[10pt,twopage]{book}
  \\usepackage{xcolor}
  \\usepackage{tipa}
  \\usepackage[fntef]{ctex}
  \\usepackage{hyperref}
  \\usepackage{graphicx}
  \\usepackage{layout}
  \\usepackage{fancyvrb}
  \\usepackage{listings}
  \\usepackage{picinpar}
  \\usepackage[text={150mm,240mm},centering]{geometry}
  \\pagestyle{myheadings}
  \\markboth{\\today}{\\today}
  [NO-DEFAULT-PACKAGES]
  [NO-PACKAGES]"
    ("\\part{%s}" . "\\part*{%s}")
    ("\\chapter{%s}" . "\\chapter*{%s}")
    ("\\section{%s}" . "\\section*{%s}")
    ("\\subsection{%s}" . "\\subsection*{%s}")
    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+END_EXAMPLE

*** org-latex-default-class

The defaut LaTeX class. Original value was "article"

#+BEGIN_EXAMPLE
(setq org-latex-default-class "ctexart")
#+END_EXAMPLE

*** org-latex-default-figure-position

Default positoin for latex figures. The value is "htb"

*** org-latex-default-packages-alist

Alist of default packages to be inserted in the header.
*** 表格

**** org-latex-default-table-environment

Default environment used to build tables. Its value is "tabular".

**** org-latex-default-table-mode

Default mode for tables. Its value is table.
Value can be a symbol among:
 + `table' Regular LaTeX table.
 + `math' In this mode, every cell is considered as being in math
    mode and the complete table will be wrapped within a math
    environment.  It is particularly useful to write matrices.
 + `inline-math' This mode is almost the same as `math', but the
    math environment will be inlined.
 + `verbatim' The table is exported as it appears in the Org
    buffer, within a verbatim environment.
**** org-latex-tables-caption-above
**** org-latex-tables-scientific-natation
**** org-latex-tables-booktabs
**** org-latex-tables-centered
*** 图片
**** org-latex-image-default-height
**** org-latex-image-default-width
**** org-latex-iamge-default-option
**** org-latex-inline-image-rules
*** 源码
**** org-latex-listings
**** org-latex-listings-langs
**** org-latex-listings-options

*** 导出成HTML的一些问题和技巧
**** 生成目录
Table of Content
*#+OPTIONS: toc:t*
或者
*setq org-export-with toc t*
**** 为每个分节的标题添加标号
**** 禁用下划线
*#+OPTIONS: ^:nil*
*(setq-default org-use-sub-superscripts nil)*
**** 让不同的标题采用不同大小的字体
*(set-face-attribute 'org-level-1 nil :height 1.3 :bold t)*
*(set-face-attribute 'org-level-2 nil :height 1.1 :bold t)*
*(set-face-attribute 'org-level-2 nil :height 1.0 :bold t)*

*** 反引号

[[help:`][cdlatex-math-symbol]]

蛮好用的，就不解除默认绑定了。但是反引号怎么输入????

** beamer                                                           :beamer:
*** [[http://www.latexstudio.net/archives/3516][org-mode的中文beamer幻灯片模板]]                                   :blog:


org-mode 是 Emacs 的杀手级应用，使用它可以用来做很多事情，如GTD、做笔
记等。它可以导出多种格式的文件，包括HTML、LaTeX、Freemind、DocBook等，
因此，通过定制之后，编写一份org文件就等于同时编写（或者排版）了多种格
式文件，而且每种格式的文件又可以各自拥有不同的排版效果。这正是org-mode
精妙之处。

比如，我最喜欢的做法是先在 Emacs 里打开 evernote-mode 写一份 org-mode
的笔记，然后 =C-c C-e H= 导出成 HTML
代码，并发布到我的博客中或者加入到我的 wiki
里。如果有需要，我还可以 =C-c C-e l= 生成 LaTeX 代码并编译成 PDF 文件。

用 org-mode 制作 Beamer 幻灯片也很简单，官方已经给出了 [[http://orgmode.org/worg/org-tutorials/org-beamer/tutorial.html][详细的教程]] ，照
着一步步做即可。官方的教程并没有针对中文进行定制，因此笔者写了一个
org-mode的Beamer中文模板，这是在 [[http://orgmode.org/manual/Beamer-class-export.html#Beamer-class-export][Carsten Dominik的例子]] 的基础上修改得
到的。

**** 截图预览


#+DOWNLOADED: http://7xnc7f.com1.z0.glb.clouddn.com/wp-content/uploads/2015/04/org-beamer-cn.png @ 2016-01-25 15:00:35
 [[~/Wally/Journal/Figure/.org-download/Org-mode                                                        :EMACS:ORG:/org-beamer-cn_2016-01-25_15:00:35.png]]

**** 环境要求

1. Emacs
2. org-mode
3. TeXLive 或其他带有 Beamer 宏包的 LaTeX 系统
4. Adobe 字体

   -  Adobe Heiti Std
   -  Adobe Kaiti Std

**** 特点

1. 使用 “Darmstadt” 主题及 “Firebrick”配色方案；
2. 使用 listings
   宏包实现代码框。如果有中文内容，你可能需要使用逃逸字串(`')括住两边，否则会出现错位；
3. 使用xeCJK来处理中文，并使用 Adobe
   字体（[[http://ishare.iask.sina.com.cn/f/23186570.html][字体下载]]）。

**** 下载

- Github主页：[[http://wzpan.github.com/org-beamer-cn/][http://wzpan.github.io/org-beamer-cn/]]
- 克隆git仓库：git clone https://github.com/wzpan/org-beamer-cn.git
- zip压缩包：[[https://github.com/wzpan/org-beamer-cn/zipball/master][https://github.com/wzpan/org-beamer-cn/zipball/master]]
- tar.gz压缩包：[[https://github.com/wzpan/org-beamer-cn/tarball/master][https://github.com/wzpan/org-beamer-cn/tarball/master]]
- 本站下载：[[http://www.latexstudio.net/wp-content/uploads/2015/04/wzpan-org-beamer-cn-e5b5173.zip][wzpan-org-beamer-cn-e5b5173]]

**** 使用方法

- 用 Emacs 打开 *beamer.org* 文件， =M-x org-mode= 打开 org-mode；
- =C-c C-e l= 生成 beamer.tex 文件；
- 打开 *beamer.tex* 文件， =C-c C-c (M-x TeX-command-master)= 并选择使用 *XeLaTeX* 编译。完成后就可以得到幻灯片了。

**** F&Q

- 两个“@”不能生成alert效果？

这个可能是 org-mode 本身的 bug，但可以通过修改
Emacs里的设置来解决。在 =(require 'org-latex)= 前加入这一段设置：

#+BEGIN_SRC emacs-lisp
  (setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                   ("/" italic "<i>" "</i>")
                                   ("_" underline "<spanstyle=\"text-decoration:underline;\">" "</span>")
                                   ("=" org-code "<code>" "</code>" verbatim)
                                   ("~" org-verbatim "<code>" "</code>" verbatim)
                                   ("+" (:strike-through t) "<del>" "</del>") ("@" org-warning "<b>" "</b>")))
        org-export-latex-emphasis-alist (quote (("*" "\\textbf{%s}" nil)
                                                ("/" "\\emph{%s}" nil)
                                                ("_" "\\underline{%s}" nil)
                                                ("+" "\\texttt{%s}" nil)
                                                ("=" "\\verb=%s=" nil)
                                                ("~" "\\verb~%s~" t)
                                                ("@" "\\alert{%s}" nil))))
#+END_SRC

*** [[http://orgmode.org/worg/exporters/beamer/tutorial.html#fnr.3][Writing Beamer presentations in org-mode]]                 :manual:guide:

**** Introduction

Beamer is a LaTeX package for writing presentations.  This documents
presents a simple introduction to preparing beamer presentations using
org-mode in Emacs.

This documents assumes that the reader is already acquainted with org-mode
itself and with *exporting* org-mode documents to LaTeX.  There are tutorials
and references available for both org-mode itself, for
LaTeX exporting, and
for
Beamer exporting.  The document also assumes that the reader understands the
notation for
Emacs
keybindings.

**** First steps
***** The export template
Starting with an empty file called =presentation.org= [1], say, the
first step is to insert the default org export template (=C-c C-e t=
with the default keybindings). This will generate something that looks
like this (some specific entries will vary):

#+BEGIN_Example
,#+TITLE:     Writing Beamer presentations in org-mode
,#+AUTHOR:    Eric S Fraga
,#+EMAIL:     e.fraga@ucl.ac.uk
,#+DATE:      2010-03-30 Tue
,#+DESCRIPTION:
,#+KEYWORDS:
,#+LANGUAGE:  en
,#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
,#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
,#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
,#+EXPORT_SELECT_TAGS: export
,#+EXPORT_EXCLUDE_TAGS: noexport
,#+LINK_UP:
,#+LINK_HOME:
#+END_Example

In this default template, you will want to modify, at the very least,
the title, as I have done, as this will be used as the title of your
presentation.  It will often be useful to modify some of the LaTeX
export options, most commonly the =toc= option for generating a table
of contents.  For this document, and the associated sample
presentation, I have left all options as they are by default according
to the template.
***** Beamer specific settings
As well as the general options provided by the template, there are
Beamer specific options.  The following options are what I use:

#+BEGIN_Example
,#+startup: beamer
,#+LaTeX_CLASS: beamer
,#+LaTeX_CLASS_OPTIONS: [bigger]
#+END_Example

The first line enables the Beamer specific commands for org-mode (more
on this below); the next two tell the LaTeX exporter to use the
Beamer class and to use the larger font settings[2].

***** Outline levels for frames (slides)

The following line specifies how org headlines translate to the Beamer
document structure.

#+BEGIN_Example
,#+BEAMER_FRAME_LEVEL: 2
#+END_Example

A Beamer presentation consists of a series of slides, called /frames/
in Beamer.  If the option shown above has a value of 1, each top level
headline will be translated into a frame.  Beamer, however, also makes
use of LaTeX sectioning to group frames.  If this appeals, setting
the option to a value of 2 tells org to export second level headlines
as frames with top level headlines translating to sections.
***** Column view for slide and block customisation
The final line that is useful to specify to set up the presentation is

#+BEGIN_Example
,#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+END_Example

The purposes of this line is to specify the format for the special
interface that org-mode provides to control the layout of individual
slides.  More on this below.

Once all of the above has been set up, you are ready to write your
presentation.

**** The slides

Each slide, or /frame/ in Beamer terminology, consists of a title and
the content.  The title will be derived from the outline headline text
and the content will simply be the content that follows that
headline.  A few example slides are presented below.  These will only
cover the basic needs; for more complex examples and possible
customisations, I refer you to the detailed manual.

***** A simple slide
The simplest slide will consist of a title and some text.  For instance,

#+BEGIN_Example
,* Introduction
,** A simple slide
This slide consists of some text with a number of bullet points:

- the first, very @important@, point!
- the previous point shows the use of the special markup which
  translates to the Beamer specific /alert/ command for highlighting
  text.


The above list could be numbered or any other type of list and may
include sub-lists.
#+END_Example

defines a new section, /Introduction/, which has a slide with title
/A simple slide/ and a three item list.  The result of this with the
settings defined above, mostly default settings, will generate a slide
that looks like this:

#+caption: Simple slide exported from org to LaTeX using beamer
file:../../images/org-beamer/a-simple-slide.png

***** A more complex slide using blocks

Beamer has the concept of block, a set of text that is logically
together but apart from the rest of the text that may be in a slide.
How blocks are presented will depend on the Beamer theme used
(customisation in general and choosing the theme specifically are
described below).

There are many types of blocks.  The following

#+BEGIN_Example
,** A more complex slide
This slide illustrates the use of Beamer blocks.  The following text,
with its own headline, is displayed in a block:
,*** Org mode increases productivity                               :B_theorem:
    :PROPERTIES:
    :BEAMER_env: theorem
    :END:
    - org mode means not having to remember LaTeX commands.
    - it is based on ascii text which is inherently portable.
    - Emacs!

    \hfill \(\qed\)
#+END_Example

creates a slide that has a title (the headline text), a couple of
sentences in paragraph format and then a /theorem/ block (in which I
prove that org increases productivity).  The theorem proof is a list
of points followed a bit of LaTeX code at the end to draw a fancy
/end of proof/ symbol right adjusted.

You will see that there is an org properties /drawer/ that tells org
that the text under this headline is a block and it also specifies the
type of block.  You do not have to enter this text directly yourself;
org-mode has a special beamer sub-mode which provides an easy to use
method for specifying block types (and columns as well, as we shall
see in the next section).

To specify the type of block, you can type =C-c C-b= [3].  This brings up
a keyboard driven menu in which you type a single letter to select the
option you wish to apply to this headline.  For the above example, I
typed =C-c C-b t=.  The options selected in this manner are also shown
as /tags/ on the headline.  However, note that the tag is for display
only and has no direct effect on the presentation.  You cannot change
the behaviour by changing the tag; it is the property that controls
the behaviour.

***** Slides with columns

The previous section introduced the special access keys (=C-c C-b=)
for defining blocks.  This same interface allows you to define
columns.  A headline, as the text that follows it, can be in a block,
in a column, or both simutaneously.  The =|= option will define a
column.  The following

#+BEGIN_Example
,** Two columns

,*** A block                                           :B_ignoreheading:BMCOL:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:
    - this slide consists of two columns
    - the first (left) column has no heading and consists of text
    - the second (right) column has an image and is enclosed in an
      @example@ block

,*** A screenshot                                            :BMCOL:B_example:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: example
    :END:
,    #+ATTR_LATEX: width=\textwidth
    [[file://../../images/org-beamer/a-simple-slide.png]]
#+END_Example

defines a two column slide.  As the text in the slide says, the left
column is a list and the right one is an image.  The left column's
headline text is ignored, specified by =C-c C-b i= which tells org to
*ignore* the headline text completely.  The column on the right
however is placed with an /example/ block (whose appearance will
depend on the Beamer theme).

The columns also have widths.  By default, these widths are the
proportion of the page width to use so I have specified 40% for the
left column and 60% for the right one.

The image in the right column is inserted simply by specifying a link
to the image file with no descriptive text.  I have added an attribute
to the image (see the =#+ATTR_LATEX= line above) to tell LaTeX to scale
the image to the full width of the column (=\textwidth=).

***** Using Babel
One of my main uses for Beamer is the preparation of slides for
teaching.  I happen to teach Octave to engineering students.  Org
provides the Babel framework for embedding code within org
files.  For teaching, this is an excellent tool for presenting codes
and the results of evaluating those codes.

For instance, the following code:
#+begin_example
,** Babel
   :PROPERTIES:
   :BEAMER_envargs: [t]
   :END:
,*** Octave code                                                      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
,#+name: octaveexample
,#+begin_src octave :results output :exports both
A = [1 2 ; 3 4]
b = [1; 1];
x = A\b
,#+end_src

,*** The output                                               :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :BEAMER_env: block
    :BEAMER_envargs: <2->
    :END:

,#+results: octaveexample
,#+begin_example
A =

   1   2
   3   4

x =

  -1
   1

,#+end_example

#+end_example

will generate a slide with two blocks and a pause between the display
of each of the two blocks:

#+caption: The use of babel for code display and execution

**** Customisation

Org has a very large number of customisable aspects.  Although
daunting at first, most options have defaults that are suitable for
most people using org initially.  The same applies to the Beamer
export support.  However, there are some options which many will soon
wish to change.

***** Beamer theme

Beamer has a large number of themes and I simply refer the reader to
the manual or the Web to find what themes are available and what they
look like.  When you have chosen a theme, you can tell org to use it
by inserting some direct LaTeX code into the /preamble/ of the
document, the material that comes before the first headline.  For
instance, adding this line
#+BEGIN_Example
,#+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+END_Example
to the preamble after the beamer font size
option described above will produce a presentation that looks very
different from the default (with no other changes required!):

#+caption: Two column slide with the Madrid Beamer theme
file:../../images/org-beamer/two-column-slide-madrid-style.png

***** Table of contents

The default =toc:t= option generated by the export template command
(=C-c C-e t=) indicates that a table of contents will be generated.
This will create a slide immediately after the title slide which will
have the list of sections in the beamer document.  Please note that if
you want this type of functionality, you will have to specify the
=BEAMER-FRAME-LEVEL= to be 2 instead of 1 as indicated above.

Furthermore, if you have decided to use sections, it is possible to
have Beamer automatically place a table of contents slide before the
start of each section with the new section highlighted.  This is
achieved by inserting the following LaTeX code, again in the
preamble:
#+BEGIN_Example
,#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}
#+END_Example

***** Column view for slide and block customisation

In an early section of this document, I described a magical
incantation!  This incantation defines the format for viewing org
property information in column mode.  This mode allows you to easily
adjust the values of the properties for any headline in your
document.  This image shows the type of information you can see at a
glance in this mode:

#+caption: Column view of presentation showing special block environments and column widths.
file:../../images/org-beamer/column-view.png

We can see the various blocks that have been defined as well as any
columns (implicit by the presence of a column width).  By moving to
any of these column entries displayed, values can be added, deleted or
changed easily.  Please read the full org Beamer manual for details.

** 笔记                                                                :note_:

*** index: 为一些笔记建立索引                                    :index:note:

关于建立索引的想法

1. 索引类似书后面的 index
2. 按字母顺序排列
3. 不使用标题，因为不需要继承标签
4. 使用无序列表
5. 可以包含简要的笔记内容和链接等
*** 标签                                                             :_tag:

**** tag 分类与形式

标签的性质
1. 对象本身（普通）
2. 对象属性（普通）
3. 对象组件（普通）
4. 对象范畴 ： 大写
5. GTD 标签 ： 下划线开头的标签为特殊标签

**** 范畴标签

# 大写
# 少而精
# 常用工具

- EMACS ::
- LINUX ::
- ES :: short for embedded system
- ARM :: arm cpu
- KERNEL :: linux kernel
- PDF ::
- LATEX ::
- VIM ::
- KINDLE ::
- EVERNOTE ::
- SHELL ::
- GIT ::
- ROS ::
- SLAM ::
- MATH ::
- ENGLISH ::
- DEUTSCH ::

**** 通用属性标签

# 后置下划线
# 可以与普通标签重名

- index_ :: 索引项
- faq_ :: FAQ
- trick_ :: 技巧
- note_ :: 注意事项
-  ::

**** GTD 标签

- TODO :: general GTD keywords
- _preparation :: 需要定点提前准备东西的任务，打上 _preparation 的标签
- _tag :: org note tags

*** font
**** org-mode 的注释也是不错的高亮（可视化）                      :trick_:

# like this

*** 笔记文本中的特殊条目使用尖括号括起                               :trick_:

like this

#+BEGIN_EXAMPLE
  - initialize the PRIME pcltk with <Reference> <Note> <TODOs> and <ChangeLogs>
#+END_EXAMPLE

*** 3p1t

- prime
- project
  - 项目笔记本身不打任何标签，仅在项目管理笔记打上 PROJ 和项目相关标
    签
- progress
- thesis

*** 粗体等也可以作为结构化的方式
** 写论文

*** 参考:

+ http://www.binghe.org/2010/05/typeset-references-in-latex/#post-120
+ https://wiki.freebsdchina.org/doc/r/reference
+ http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/
+ https://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/

*** 利用 Emacs 管理文献
俗话说，“好记性不如烂笔头”。文献管理，不仅对科研工作者，对普通的用户
也是必需的。看过的文献，写写心得做做笔记，以后写文章旁征博引的时候就不
至于心乱如麻。

已有一些开源的文献管理的工具广受欢迎，如 JabRef、docear 等。一些常见的
工具软件，读者可参阅 文献管理软件比较。

这里，我介绍另外一种简便的方法：利用 Emacs 的 org-mode 管理文献。原因
有二：
1) *Emacs 是可以使用一生的编辑器*
2) *org-mode是做笔记的强大工具*

本着简单为美，高效为目的的原则，充分利用已有资源，本 wiki 的方法（源自
http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/
）能够出色地完成文献管理的任务。

*** 利用 Google Scholar 导出 bibtex 文件

*写科技文章，TeX 排版工具是必须掌握的。现在的国际会议和期刊，哪个不要
求 TeX 排版？* 我们假定读者熟悉 TeX 排版，了解最简单的 Emacs 使用方法。

在 TeX 中，文献的索引来自独立文件 *.bib，它的格式必须通过 bibtex 的编
译。文献管理软件 RefDB介绍了如何从 RIS 格式转化为 bib 格式。RefDB 是图
书馆时代的产物，随着 Google Scholar 的普及，我们有更便捷的文献管理方法。


*Google Scholar 提供了搜索文献和导出其 bibtex 描述的强大功能*, 它在某
种程度上替代了图书馆检索和某些专业数据库检索（如 PubMed 等），让更多的
人能够方便地检索到文献。在知识共享的年代，我认为，Google Scholar 是
Google 公司最伟大的产品之一。

*** 文献管理有哪些功能？
一个文献管理软件，必须具备以下几项功能。
+ *bibtex 格式*
+ 文章标题、作者、期刊名等关键词 *搜索*
+ *链接* 到本地保存的文章（一般为 PDF 格式）
+ *做笔记* （写文章的时候，笔记很重要）
+ 在 TeX 文档中利用 \cite{} 索引
*** org + bibtex + reftex

Emacs Org Mode 可以是一个优秀的笔记工具，可是，如果你想用它来写正式一
点的论文，可以吗？当然可以了，你可以把 Org Mode 和 LaTeX 结合起来用，
当然 *最重要的是要解决参考文献引用的问题* 。

整体的思路如下：
1. 先准备好你的 BibTeX 文件
   + 可以用 Emacs BibTeX Mode
   + 或 JabRef 之类的方式来生成这个文件
   + 当然也可以用其它文献管理工具，只要它能导出 BibTeX 文件即可
   + google scholar
2. 用 Emacs Org 建立工程并记笔记,创建 Org 工程的时候，和一般的工程没有
   任何区别。
3. 用 *RefTeX* 方式来插入 BibTeX 的记录

在这里，重点介绍一下第三个步骤，即如何在 Org Mode 里插入 BibTeX 记录。
从官方的这篇参考文献里可以看出，我们可以用三种方法在 org 文件里引用
BibTeX 参考文献，从而插入 LaTeX 类的参考文献。

**** 最简单的办法，给所有的 Org 文件指定一个 BibTeX 文件，然后在 Org 文件里插入该 BibTeX 文件的参考文献记录

具体的办法，先把下面的代码放到 .emacs 里：
#+BEGIN_EXAMPLE
  (setq reftex-default-bibliography
        (quote
         ("default.bib" "~/org/notes/refer.bib")))
  (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
#+END_EXAMPLE

在这里，我指定的 BibTeX 文件为 default.bib 和 ~/org/notes/refer.bib 。
然后，可以在所有的 Org 文件里，通过命令 C-c ) 或 *M-x reftex-citation*
来进行参考文献的插入，根据提示进行相关操作即可。
\cite{Aamport:1986a}

**** 为特定的 Org 文件，指定特定的 BibTeX 文件
这个方法是 [[http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/][Marios Braindump]] 的博客里介绍的，具体方法如下：
先把下面的代码放到 .emacs 里：
#+BEGIN_EXAMPLE
  (defun org-mode-reftex-setup ()
    (load-library "reftex")
    (and (buffer-file-name)
         (file-exists-p (buffer-file-name))
         (reftex-parse-all))
    (define-key org-mode-map (kbd "C-c )") 'reftex-citation))
  (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_EXAMPLE

然后在你需要插入 BibTeX 参考文献的 Org 文件里，加入下面这段话（可以是
任意位置）：
#+BEGIN_EXAMPLE
  \bibliographystyle{plain}
  \bibliography{BIB-NAME}
#+END_EXAMPLE

把上面的 BIB-NAME 换成你想指定的 BibTeX 文件，这样就可以对该 Org 文件
指定特定的 BibTeX 文件，然后可以用 C-c ) 或 M-x reftex-citation 来插入
该 BibTeX 文件里的参考文献。

上面的代码会在 Emacs 启动的时候，要求你指定一个 master 文件，用来存储
生成的 tex 文件。

**** 另外一种方法，实现为特定的 Org 文件指定特定 BibTeX 文件的功能

还有另外一种方法，可以实现第2种方法类似的功能，即为特定 Org 文件指定特
定 BibTeX 文件的方法。把下面的代码放到 .emacs 文件里：
#+BEGIN_EXAMPLE
  (defun org-mode-article-modes ()
    (reftex-mode t)
    (and (buffer-file-name)
         (file-exists-p (buffer-file-name))
         (reftex-parse-all)))

  (add-hook 'org-mode-hook
            (lambda ()
              (if (member "REFTEX" org-todo-keywords-1)
                  (org-mode-article-modes))))
#+END_EXAMPLE

然后把下面这一行加到你需要插入 BibTeX 的 Org 文件的开头：
#+BEGIN_EXAMPLE
  ,#+TODO: TODO(t) STARTED(s) | DONE(d) DEFERRED(f) REFTEX
#+END_EXAMPLE
其它步骤与第2种方法类似。这种方法我没有仔细测试，有兴趣的 Emacser 们可
以试试。

通过以上方法，就可以在用 Org Mode 打造的笔记本里，很方便地索引 BibTeX
里的参考文献了。

当然，如果你不喜欢用 Org Mode，也有其它用 Emacs 来写论文的思路，例如：
*Emacs + AucTeX + RefTeX + Outline-minor-mode*
*** Research Paper Management with Emacs, org-mode and RefTeX
+
  https://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/

*** bibtex编译
+ http://zzg34b.w3.c361.com/package/reference.htm

#+BEGIN_SRC latex
\bibliography{/home/ben/Tiger/GraduationProject/Literature/refs.bib}
\bibliographystyle{ieeetr}
#+END_SRC

在document结束之前。


BibTeX 提供了一个外部的 BibTeX 工具程序，源文件经过 LaTeX 编译后，还要
使用BibTeX 对数据库文件编译一次，最后再用 LaTeX 连续编译两遍，才能得到
正确结果。

*note: tex文件中不支持对文件路径中的"~"的扩展，使用绝对路径只能以"/"开
头，相对路径相对于tex文件所有目录*

#+DOWNLOADED: /tmp/screenshot.png @ 2015-06-20 19:28:25
 [[~/Tiger/Figures/Emacs/screenshot_2015-06-20_19:28:25.png]]


1. latex .tex  C-c C-c latex
2. bibtex .aux C-c C-c bibtex
3. latex .tex  C-c C-c latex
4. latex .tex  C-c C-c latex

*** 中文问题
+ http://www.eefocus.com/sunshine/blog/09-08/175253_b0ef9.html

中文文献和英文的格式不同，并且使用全角的标点符号，有一点难办。我的解决办法是
这样的：
#+BEGIN_EXAMPLE
   @misc{Xie.1995,
    note = "谢锦辉，《隐 {Markov} 模型及其在语音处理中的应用》，华中理工大学出版社，1995年4月",
    key = "Xie",}
#+END_EXAMPLE
唯一的缺陷是参考文献中最后是以英文的 "." 而不是 "。" 结束的。还好我的中文文
献不多，无伤大雅，否则就 *手工修改一下 bbl 文件* 吧。
*** [[https://wiki.freebsdchina.org/doc/r/reference][利用 Emacs 的 org-mode 管理文献]]                                  :blog:

俗话说，“好记性不如烂笔头”。文献管理，不仅对科研工作者，对普通的用户
也是必需的。看过的文献，写写心得做做笔记，以后写文章旁征博引的时候就不
至于心乱如麻。

已有一些开源的文献管理的工具广受欢迎，如 JabRef、docear等。一些常见的
工具软件，读者可参阅 [[http://zh.wikipedia.org/wiki/文献管理软件比较][文献管理软件比较]]。

这里，我介绍另外一种简便的方法：利用 Emacs 的 org-mode
管理文献。原因有二：（1）Emacs
是可以使用一生的编辑器；（2）org-mode是做笔记的强大工具。

本着简单为美，高效为目的的原则，充分利用已有资源，本 wiki 的方法（源自
[[http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/][http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/]]
）
能够出色地完成文献管理的任务。

**** 利用 Google Scholar 导出 bibtex 文件

写科技文章，TeX 排版工具是必须掌握的。现在的国际会议和期刊，哪个不要求
TeX 排版？我们假定读者熟悉 TeX 排版，了解最简单的 Emacs 使用方法。

在 TeX 中，文献的索引来自独立文件 *.bib，它的格式必须通过 bibtex
的编译。[[https://wiki.freebsdchina.org/software/r/refdb][文献管理软件RefDB ]]介绍了如何从 RIS 格式转化为 bib 格式。RefDB
是图书馆时代的产物，随着 Google Scholar
的普及，我们有更便捷的文献管理方法。

Google Scholar 提供了搜索文献和导出其 bibtex
描述的强大功能，它在某种程度上替代了图书馆检索和某些专业数据库检索（如
PubMed
等），让更多的人能够方便地检索到文献。在知识共享的年代，我认为，Google
Scholar 是 Google 公司最伟大的产品之一。

**** 文献管理有哪些功能？

一个文献管理软件，必须具备以下几项功能。

1. bibtex 格式
2. 文章标题、作者、期刊名等关键词搜索
3. 链接到本地保存的文章（一般为 PDF 格式）
4. 做笔记（写文章的时候，笔记很重要）
5. 在 TeX 文档中利用 \cite{} 索引

**** 准备工作

我当前使用的 Emacs 版本是 GNU Emacs
24.3.1（在更低的版本上我没有试验过），自带了 RefTeX。

需要额外安装的是 /usr/ports/deskutils/org-mode.el。

建立目录 ~/reference，里面建立目录 ~/reference/papers。另外，

#+BEGIN_EXAMPLE
    IOU@~/reference$ touch notes.org
    IOU@~/reference$ touch reference.bib
#+END_EXAMPLE

要求 notes.org 文件的开头是

#+BEGIN_EXAMPLE
    # \bibliography{~/reference/reference.bib}
#+END_EXAMPLE

为了演示方便起见，reference.bib 里只有一篇文献

#+BEGIN_EXAMPLE
    @Article{     blei2012probabilistic,
      title     = {Probabilistic topic models},
      author    = {Blei, David M},
      journal   = {Communications of the ACM},
      volume    = {55},
      number    = {4},
      pages     = {77--84},
      year      = {2012},
      publisher = {ACM}
    }
#+END_EXAMPLE

该文章取名为 blei2012probabilistic.pdf，存放于 ~/reference/papers/ 下。

**** .emacs 里的一些设置

在 $HOME/.emacs 文件里，添加以下设置。

#+BEGIN_EXAMPLE
    ;; 定义 org-mode-reftex-search
    (defun org-mode-reftex-search ()
     ;; jump to the notes for the paper pointed to at from reftex search
     (interactive)
     (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))

    (setq org-link-abbrev-alist
     '(("bib" . "~/reference/reference.bib::%s")
       ("notes" . "~/reference/org/notes.org::#%s")
       ("papers" . "~/reference/papers/%s.pdf")))

    ;; 当使用 org-mode 时，自动调 RefTeX
    (defun org-mode-reftex-setup ()
      (load-library "reftex")
      (and (buffer-file-name) (file-exists-p (buffer-file-name))
           (progn
        ;; enable auto-revert-mode to update reftex when bibtex file changes on disk
        (global-auto-revert-mode t)
        (reftex-parse-all)
        ;; add a custom reftex cite format to insert links
        (reftex-set-cite-format
          '((?b . "[[bib:%l][%l-bib]]")
            (?c . "\\cite{%l}")
            (?n . "[[notes:%l][%l-notes]]")
            (?p . "[[papers:%l][%l-paper]]")
            (?t . "%t")
            (?h . "** %t\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n[[papers:%l][%l-paper]]")))))
      (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
      ;; binding of  ”C-c (” to org-mode-reftex-search
      (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))

    (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_EXAMPLE

**** 如何使用 notes.org 来管理文献

org-mode 是利用 Emacs 做笔记的强大工具，可以直接生成 html、TeX、PDF
等文档。

- 用 emacs 打开 notes.org 文件，将光标放置于某空行，利用命令 “C-c )”
   来建立文献索引入口，可以是 bibtex 的入口，也可以是 PDF
   文件的入口，也可以是 \cite{}。
- 命令 ”C-c (“ 可进行正则表达式搜索
- 要打开入口，只需光标停留在入口上，键入 “C-c C-o” 命令即可。
- 利用命令 “C-c \” 来搜索关键词。

**** 效果图


#+DOWNLOADED: https://wiki.freebsdchina.org/_media/doc/r/reference.png @ 2016-01-25 15:18:59
 [[~/Wally/Journal/Figure/.org-download/Org-mode                                                        :EMACS:ORG:/reference_2016-01-25_15:18:57.png]]

*** [[http://blog.waterlin.org/articles/bind-emacs-org-mode-with-bibtex.html][Emacs Org Mode 与 BibTeX 的结合]]                           :blog:bibtex:


[[http://blog.waterlin.org/articles/publish-org-files-to-html-project.html][Emacs
Org Mode
可以是一个优秀的笔记工具]]，可是，如果你想用它来写正式一点的论文，可以吗？当然可以了，你可以[[http://orgmode.org/worg/org-contrib/babel/languages/org-babel-doc-LaTeX.php][把
Org Mode 和 LaTeX 结合起来用]]，当然最重要的是要解决参考文献引用的问题。

整体的思路如下：

1. 先准备好你的 BibTeX 文件

   可以用 Emacs BibTeX Mode 或 JabRef
   之类的方式来生成这个文件，当然也可以用其它文献管理工具，只要它能导出
   BibTeX 文件即可。

2. 用 Emacs Org 建立工程并记笔记

   [[http://blog.waterlin.org/articles/publish-org-files-to-html-project.html][创建
   Org 工程]]的时候，和一般的工程没有任何区别。

3. 用 RefTeX 方式来插入 BibTeX 的记录

在这里，重点介绍一下第三个步骤，即如何在 Org Mode 里插入 BibTeX
记录。从官方的[[http://orgmode.org/worg/org-faq.php#sec-18_11_1][这篇参考文献]]里可以看出，我们可以用三种方法在
org 文件里引用 BibTeX 参考文献，从而插入 LaTeX 类的参考文献。

1). 最简单的办法，给所有的 Org 文件指定一个 BibTeX 文件，然后在 Org
文件里插入该 BibTeX 文件的参考文献记录

具体的办法，先把下面的代码放到 .emacs 里：

#+BEGIN_EXAMPLE
    (setq reftex-default-bibliography
          (quote
           ("default.bib" "~/org/notes/refer.bib")))
    (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
#+END_EXAMPLE

在这里，我指定的 BibTeX 文件为 *default.bib* 和 *~/org/notes/refer.bib*
。然后，可以在所有的 Org 文件里，通过命令 *C-c )* 或 *M-x
reftex-citation* 来进行参考文献的插入，根据提示进行相关操作即可。

2). 为特定的 Org 文件，指定特定的 BibTeX 文件

这个方法是
[[http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/][Marios
Braindump 的博客里介绍的]]，具体方法如下：

先把下面的代码放到 .emacs 里：

#+BEGIN_EXAMPLE
    (defun org-mode-reftex-setup ()
      (load-library "reftex")
      (and (buffer-file-name)
           (file-exists-p (buffer-file-name))
           (reftex-parse-all))
      (define-key org-mode-map (kbd "C-c )") 'reftex-citation))
    (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_EXAMPLE

然后在你需要插入 BibTeX 参考文献的 Org
文件里，加入下面这段话（可以是任意位置）：

#+BEGIN_EXAMPLE
    \bibliographystyle{plain}
    \bibliography{BIB-NAME}
#+END_EXAMPLE

把上面的 BIB-NAME 换成你想指定的 BibTeX 文件，这样就可以对该 Org
文件指定特定的 BibTeX 文件，然后可以用 *C-c )* 或 *M-x reftex-citation*
来插入该 BibTeX 文件里的参考文献。

上面的代码会在 Emacs 启动的时候，要求你指定一个 master
文件，用来存储生成的 tex 文件。

3). 另外一种方法，实现为特定的 Org 文件指定特定 BibTeX 文件的功能

还有[[http://orgmode.org/worg/org-faq.php#sec-18_11_2][另外一种方法]]，可以实现第2种方法类似的功能，即为特定
Org 文件指定特定 BibTeX 文件的方法。把下面的代码放到 .emacs 文件里：

#+BEGIN_EXAMPLE
    (defun org-mode-article-modes ()
      (reftex-mode t)
      (and (buffer-file-name)
           (file-exists-p (buffer-file-name))
           (reftex-parse-all)))

    (add-hook 'org-mode-hook
              (lambda ()
                (if (member "REFTEX" org-todo-keywords-1)
                    (org-mode-article-modes))))
#+END_EXAMPLE

然后把下面这一行加到你需要插入 BibTeX 的 Org 文件的开头：

#+BEGIN_EXAMPLE
    #+TODO: TODO(t) STARTED(s) | DONE(d) DEFERRED(f) REFTEX
#+END_EXAMPLE

其它步骤与第2种方法类似。这种方法我没有仔细测试，有兴趣的 Emacser
们可以试试。

通过以上方法，就可以在用 Org Mode 打造的笔记本里，很方便地索引 BibTeX
里的参考文献了。

当然，如果你不喜欢用 Org Mode，也有其它用 Emacs
来写论文的思路，例如：Emacs + AucTeX + RefTeX + Outline-minor-mode
*** [[https://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/][Research Paper Management with Emacs, org-mode and RefTeX]] :blog:

January 4, 2011

/Update 3-11-14: / **Nuno Salgueiro* *in the comments led me to a RefTeX
change that broke the “jump to this entry in notes.org” behavior (it
seems “reftex-citation” returns a list now, regardless if there is only
one entry). This can be fixed by changing (reftex-citation t) to (first
(reftex-citation t)).

/Update 1-19-11:/ I've added a screencast of me demonstrating how I use
this setup to work with my papers, I've also re-written the “Workflow”
section (due to the fact it was kind of confusing...) Hope this all
helps :]

/Update 4-27-12:/  *olberger* (in the comments section) has added, what
I consider, an incredibly clever and useful function to help when
writing papers. I've just finished tweaking it slightly for my purposes,
but please check out his post,
[[http://www-public.it-sudparis.eu/~berger_o/weblog/2012/03/23/how-to-manage-and-export-bibliographic-notesrefs-in-org-mode/][here]].
I'll be adding what I did to this post... when I get around to it.

My labmates and I have been searching for a while now for methods to
organize the mountain of research papers we collect as graduate
students. I've tried a handful of approaches, and was happy using
zim-wiki for a while, but entering info became a choir, and finding a
paper could sometimes be a hassle.

My recent attempts at working with lisp have led me to switch to emacs,
and in what seems to be a common occurrence, I wanted to do everything
in emacs. As silly as that sounds, I believe I've found my solution to
organize my papers through emacs.

Managing papers and references in emacs is nothing new, and I actually
followed a few guides on how other people used org-mode and reftex to do
so. Specifically this
[[http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/][post]],
and this
[[http://article.gmane.org/gmane.emacs.orgmode/2406/match=bibliography][email]].
My hope with this initial post is to pull the bits together, show what I
built on top of them, and how I setup my org files to facilitate my
workflow. If you don't know how to use or don't know what emacs and
org-mode are, give a quick search--there is plenty of info out there.

****** *Setting up RefTeX*

First, we want to load to load RefTeX whenever we use org-mode. This is
well documented, and mine only differs in the citation formats I pass to
RefTex, and my additional key binding.

#+BEGIN_EXAMPLE
    (defun org-mode-reftex-setup ()
      (load-library "reftex")
      (and (buffer-file-name) (file-exists-p (buffer-file-name))
           (progn
         ;enable auto-revert-mode to update reftex when bibtex file changes on disk
         (global-auto-revert-mode t)
         (reftex-parse-all)
         ;add a custom reftex cite format to insert links
         (reftex-set-cite-format
          '((?b . "[[bib:%l][%l-bib]]")
            (?n . "[[notes:%l][%l-notes]]")
            (?p . "[[papers:%l][%l-paper]]")
            (?t . "%t")
            (?h . "** %t\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n[[papers:%l][%l-paper]]")))))
      (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
      (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))

    (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_EXAMPLE

****** *Jump to Entry*

The other difference I added was the binding of  “C-c (” to
org-mode-reftex-search, which I defined earlier in my init.el. This is
the command that will jump to the entry in my org-mode file, and follows

#+BEGIN_EXAMPLE
    (defun org-mode-reftex-search ()
      ;;jump to the notes for the paper pointed to at from reftex search
      (interactive)
      (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))


    (defun org-mode-reftex-search ()
      ;;jump to the notes for the paper pointed to at from reftex search
      (interactive)
      (org-open-link-from-string (format "[[notes:%s]]" (first (reftex-citation t)))))
#+END_EXAMPLE

Simple. But I was happy with the results. /Update:/ changes in reftex
from initial authoring of this post have reftex-citation return a list.
An updated function to fix this has been added :P

****** *Making Org-mode work with you*

Lastly, org-mode needs a few things to pull all this together. The first
and most important is importing the bibtex file. RefTeX looks for a
LaTeX \bibliography tag anywhere in the file, I place mine as an
org-mode comment at the start of the file

#+BEGIN_EXAMPLE
    # \bibliography{~/research/refs.bib}
#+END_EXAMPLE

The other thing needed is link abbreviations. While you could hardcode
this into your citation formats, I prefer to put abbreviations in for
the citation formats, and define defaults elsewhere in my init.el

#+BEGIN_EXAMPLE
    (setq org-link-abbrev-alist
          '(("bib" . "~/research/refs.bib::%s")
        ("notes" . "~/research/org/notes.org::#%s")
        ("papers" . "~/research/papers/%s.pdf")))
#+END_EXAMPLE

These can be easily overridden in an org-mode file, which I actually do
for the org-mode file I store the actual entries in. If I left it as is,
following a “notes” link in this org-mode file would open the same file
in a new window and jump to the entry in that one. Not quite what we
want. This is where I override it in the local file by adding this to my
heading.

#+BEGIN_EXAMPLE
    #+LINK: notes #%s
#+END_EXAMPLE

Now, if I follow a “notes” link in the entries file, it jumps to that
entry in the same frame, while following a “notes” link in another
org-mode file (or using my new reftex search addition) will open this
file in a new frame and jump to the entry.

****** *Workflow*

My setup for this involves two main files: /refs.bib,/ the main bibtex
file, and /notes.org,/ the org-mode file I use to manage the papers and
store notes for each.

In /notes.org/ my overall workflow follows a typical org-mode
hierarchical layout, the key parent being “Papers” with each child
heading being either a category or an entry for a paper, each with the
appropriate or useful org-mode tags. Each paper headline corresponds to
that paper, and I write notes under these headlines about the paper.

The hierarchical layout has children inheriting parents tags which is
quite nifty. This is my initial lookup method when I'm looking for a
paper. For example, I want to find a paper that describes how to couple
EDOT using an iron catalyst, I can type “C-c \” to do a tag search, type
in one or all of the relevant keywords, and org-mode will show the
entries matching those tag[s]. I can then expand those entries, see what
notes I've written on the papers, and when I found the one I'm looking
for, I can open the link to the pdf I've placed there using “C-c C-o”.

When I find a new paper I need to add, I initially gather all the data I
need to use org-mode: the bibtex entry and the paper itself. I modify
the bibtex key to fit with my scheme (FirstAuthorYear) but you can use
whatever suites you best. I then save the paper using that bibtex key as
the filename in another folder.

Note: I manage my bibtex entries by first saving each new bibtex entry
as a separate file in a collective folder (due to the fact I usually
export them from the journal's website when I find the paper) and then I
concatenate all the files in that folder to make a new bibtex file using

#+BEGIN_EXAMPLE
    $ cat bibtex/*.bib > refs.bib
#+END_EXAMPLE

This feels a little messy, but the easiest solution I could think of;
I'm sure I could setup a command to do this for me from emacs, but this
is a low priority. The one problem with this is if you change the bibtex
file while org-mode is running, RefTeX will not see the changes. To do
so you need to enable “global-auto-revert-mode” in emacs. Supposedly,
this is automatically enabled in emacs 23, but it seems to be disabled
by default for me (23.2.1)

Adding a new headline in my /notes.org/ file is simplified by using
RefTex. I place my cursor on a new line and hit “C-c )” which is bound
to “reftex-citation”. The first prompt is for a citation format (if more
than one) and I have a few for different purposes. I hit ‘h' for
heading, which contains all the formatting for a barebones paper
headline. This puts a new entry with the title of the paper as the
headline, a propeties list with custom-id of the bibtex key (this allows
linking to this entry by it's bibtex key), and a body containing a link
to the pdf. After selecting the format, RefTeX prompts for a regex to
search the bibtex file with, presenting a list of matching entries.
Selecting the desired entry inserts the citation, in this case, the new
entry.

This is how we exploit RefTeX, we create custom citation formats that
are really org-mode tags and formattings. A few other formats I have are
all org-mode links: one that links to the entry in the bibtex file
itself, one that links to the pdf, and another that links to the entry
in the org-mode file. I use org-mode link abbreviations to get general
behavior that can be changed on a per-file basis.

Another option I recently added to this is a way to search for other
info I may not have placed in a tag, such as an author or journal name.
Here I shamelessly take adavtage of having reftex loaded again. I bound
this key to a custom command I made that will jump to the entry for the
bibtex entry you select from the reftex-citation prompt.

And that's that! So far, this is the most powerful approach I have
found, and I know I've spent less time searching than any other method
I've found. What's also great about this is that org-mode's exporting
allows me to export this as HTML to serve up on our group's website for
the rest of my group to use. An additional benefit is that because I'm
already gathering bibtex entries, when it comes time to write a paper, I
already have all my citation data, and I can easily search a key to
retrieve all my notes on that paper as well.

There are some weaknesses I'm still trying to work out, such as manually
scraping bibtex entries and making sure everything has the proper
filename. The problem really is that all the journals aren't consistent
with these things (some don't even provide bibtex export! Luckily,
there's bibutils to handle the conversions) and entries need to be
tweaked and/or pdf's named according to the key. Ideally, I would like
to find a database that I could script a tool against to scrape the data
I need and already name and places the files for me, but that is for
another day/entry

I've been trying to see about using attachments to handle the papers
instead, but I haven't been able to tweak it to my satisfaction just
yet. Still trying though. This should allow me to attach multiple files
for an entry (such as supporting info, etc)

*** [[http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/][Using Emacs Org-mode to Draft Papers]] :blog:

Scientific papers are mostly written in
[[http://www.latex-project.org/][LaTeX,]] a markup language for
typesetting. With LaTeX, a document is programmed rather than edited in
a WYSIWYG-way. There is a great deal of specialized editors or editor
modes (e.g. [[http://www.gnu.org/software/auctex/][AucTeX]]) simplifying
the creation of LaTeX documents. In many cases, however, you just want
to quickly write down what's in your head instead of getting stuck in
the details of LaTeX markup. I found that Emacs
[[http://orgmode.org/][org-mode]] is very well suited to fill that gap.
You can efficiently draft a scientific document that can directly be
converted into LaTeX code which you can beautify later on. I'll show you
here how.

*Installation*

First, you have to install org-mode for Emacs as described
[[http://orgmode.org/manual/Installation.html#Installation][here]].
Org-mode is included in Emacs since version 22.1 and the latest version
can be obtained from the a git repository via

#+BEGIN_QUOTE
  =git clone git://repo.or.cz/org-mode.git=
#+END_QUOTE

Be sure to use the latest version for this tutorial as there really is
some active development going on and some of the features I use were
included just recently.

*The First Document*

Begin by opening a new files with a “.org” extension. Paste the
following lines into that document

#+BEGIN_QUOTE
  =The Impact of Beer Consumption on Scientific Collaboration #+AUTHOR: Mario Fasold * Introduction ** Previous Work Some studies relating scientific output and beer have previously been done. #+BEGIN_QUOTE In Europe, most alcohol is consumed as beer and, based on well known negative effects of alcohol consumption on cognitive performance, I predicted negative correlations between beer consumption and several measures of scientific performance. #+END_QUOTE ([[www.zoologie.upol.cz/osoby/Grim/Grim_Oikos_2008_on-line.pdf]]) * Results ** What beer should you drink + Becks + Czech Budweiser + Duff=
#+END_QUOTE

The first line contains the title of your document. It will be used by
each of the exporters, e.g. LaTeX or HTML. Note that there was a bug in
the latex exporter, leading to duplicated text after the
table-of-contents if the first line of the document was a headline.
Leaving the fist line empty is the suggested
[[http://www.mail-archive.com/emacs-orgmode@gnu.org/msg08440.html][workaround]]
here.

The export can be controlled by various parameters that can be set
anywhere in the org-document. The syntax is “#+OPTIONS: toc:nil”, for
example
([[http://www.gnu.org/software/emacs/manual/html_node/org/Export-options.html][available
options]]). Some export options that might be useful to create a paper
draft include
 = =

- #+AUTHOR: the author (default taken from user-full-name)
- #+DATE: A date, fixed, of a format string for format-time-string
- #+EMAIL: his/her email address (default from user-mail-address)

Using the very simple
[[http://orgmode.org/manual/Markup-rules.html][org-mode markup]], the
document then defines some sections, subsections, textblocks and
formulas. Note that only the first three outline levels (* -- ***) are
used for headlines by default. Using the markup you can easily define
lists, include other files, enter footnotes, define literal and source
code blocks (and even use Emacs font-lock for those areas) and more. For
example, a text literal is inserted via

#+BEGIN_QUOTE
  =#+BEGIN_EXAMPLE Some example from a text file. #+END_EXAMPLE=
#+END_QUOTE

and the following passes code directly into latex

#+BEGIN_QUOTE
  =#+BEGIN_LaTeX All lines between these markers are exported literally #+END_LaTeX=
#+END_QUOTE

Another honored mention be the org-tables mode which lets you create and
edit and tables in a dead-easy manner (try to swap a table column in
AucTeX...).

*Figures*

Papers and their drafts can't live without images in most cases. The
following syntax allows
[[http://thread.gmane.org/gmane.emacs.orgmode/8588/focus=9927][since
december]] to insert one

#+BEGIN_QUOTE
  =#+CAPTION: Degradation Plot #+ATTR_LaTeX: scale=0.75 #+LABEL: fig:degradation [[./images/DegradationPlot.png]]=
#+END_QUOTE

It's a little buggy still, for example, no underscores seem to be
allowed within filenames for now. For more complex cases, you can just
write the LaTeX-code (org-mode will recognize many identifiers):

#+BEGIN_QUOTE
  =\begin{figure}[!tpb] \centerline{ \includegraphics[scale=0.3]{images/BeerPlot} }\caption{This is plot looks like a beer.}\label{fig:Beer} \end{figure}=
#+END_QUOTE

*References*

You may also want to include references while drafting the paper.
Luckily, you can use RefTex-Mode (included in Emacs) to scan your
BibTeX-file (containing the bibliographies) and easily insert a
reference to an entry of that file. First, activate RefTex in org-mode
by inserting the following lines into .emacs:

#+BEGIN_QUOTE
  =(defun org-mode-reftex-setup () (load-library "reftex") (and (buffer-file-name) (file-exists-p (buffer-file-name)) (reftex-parse-all)) (define-key org-mode-map (kbd "C-c )") 'reftex-citation) ) (add-hook 'org-mode-hook 'org-mode-reftex-setup)=
#+END_QUOTE

Second, include the BibTeX-file by inserting

#+BEGIN_QUOTE
  =\bibliographystyle{plain} \bibliography{ProbePosition}=
#+END_QUOTE

at the end of your org-document. When you want to insert the reference
just invoke “C-c )”, enter a search term (e.g. auther name) and select
the right one from the search results. Note: When first opening the org
document, RefTeX will ask you to give him the name of the “master” which
is the .tex-file corresponding to your org-file.

You can also use org-mode to collect notes about all the publications
you are reading. Stick to
[[http://article.gmane.org/gmane.emacs.orgmode/2406/match=bibliography][this
description]] to find out how you could manage bibliographies and
PDF-documents in a nice way.

*Outlook*

Org-mode is a very versatile and extensible mode for Emacs. If Emacs is
considered an Operating System, consider Org-mode as the Emacs for that
system! I find org-mode particularly handy to draft papers. Include
images, formulas, tables and references with ease, without the hassle of
dealing with LaTeX markup.

Additionaly, you might use org-mode to organize related links, documents
and data. With
[[http://orgmode.org/worg/org-tutorials/org-R/org-R.php][org-R]] you can
even do any computations (e.g.statistics) and plots in-line using R --
no need to fragment your information! Also, expect to see nice features
appearing for org-mode frequently. I would be glad to hear how you use
org-mode to collect information and do science!

Ps. Someone even wrote his complete diploma thesis with org-mode. He
describes his experience
[[http://www.mail-archive.com/emacs-orgmode@gnu.org/msg04582.html][here]]
(his org-file is a good example, too).

*** [[https://wiki.freebsdchina.org/doc/r/reference][利用 Emacs 的 org-mode 管理文献]] :blog:

**** 利用 Emacs 的 org-mode 管理文献

俗话说，“好记性不如烂笔头”。文献管理，不仅对科研工作者，对普通的用户也是必需的。看过的文献，写写心得做做笔记，以后写文章旁征博引的时候就不至于心乱如麻。

已有一些开源的文献管理的工具广受欢迎，如 JabRef、docear
等。一些常见的工具软件，读者可参阅
[[http://zh.wikipedia.org/wiki/文献管理软件比较][文献管理软件比较]]。

这里，我介绍另外一种简便的方法：利用 Emacs 的 org-mode
管理文献。原因有二：（1）Emacs
是可以使用一生的编辑器；（2）org-mode是做笔记的强大工具。

本着简单为美，高效为目的的原则，充分利用已有资源，本 wiki 的方法（源自
[[http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/]]）能够出色地完成文献管理的任务。

**** 利用 Google Scholar 导出 bibtex 文件

写科技文章，TeX 排版工具是必须掌握的。现在的国际会议和期刊，哪个不要求
TeX 排版？我们假定读者熟悉 TeX 排版，了解最简单的 Emacs 使用方法。

在 TeX 中，文献的索引来自独立文件 *.bib，它的格式必须通过 bibtex
的编译。[[https://wiki.freebsdchina.org/software/r/refdb][文献管理软件
RefDB]]介绍了如何从 RIS 格式转化为 bib 格式。RefDB
是图书馆时代的产物，随着 Google Scholar
的普及，我们有更便捷的文献管理方法。

Google Scholar 提供了搜索文献和导出其 bibtex
描述的强大功能，它在某种程度上替代了图书馆检索和某些专业数据库检索（如
PubMed
等），让更多的人能够方便地检索到文献。在知识共享的年代，我认为，Google
Scholar 是 Google 公司最伟大的产品之一。

**** 文献管理有哪些功能？

一个文献管理软件，必须具备以下几项功能。

1. bibtex 格式
2. 文章标题、作者、期刊名等关键词搜索
3. 链接到本地保存的文章（一般为 PDF 格式）
4. 做笔记（写文章的时候，笔记很重要）
5. 在 TeX 文档中利用 \cite{} 索引

**** 准备工作

我当前使用的 Emacs 版本是 GNU Emacs
24.3.1（在更低的版本上我没有试验过），自带了 RefTeX。

需要额外安装的是 /usr/ports/deskutils/org-mode.el。

建立目录 ~/reference，里面建立目录 ~/reference/papers。另外，

#+BEGIN_EXAMPLE
    IOU@~/reference$ touch notes.org
    IOU@~/reference$ touch reference.bib
#+END_EXAMPLE

要求 notes.org 文件的开头是

#+BEGIN_EXAMPLE
    # \bibliography{~/reference/reference.bib}
#+END_EXAMPLE

为了演示方便起见，reference.bib 里只有一篇文献

#+BEGIN_EXAMPLE
    @Article{     blei2012probabilistic,
      title     = {Probabilistic topic models},
      author    = {Blei, David M},
      journal   = {Communications of the ACM},
      volume    = {55},
      number    = {4},
      pages     = {77--84},
      year      = {2012},
      publisher = {ACM}
    }
#+END_EXAMPLE

该文章取名为 blei2012probabilistic.pdf，存放于 ~/reference/papers/ 下。

**** .emacs 里的一些设置

在 $HOME/.emacs 文件里，添加以下设置。

#+BEGIN_EXAMPLE
    ;; 定义 org-mode-reftex-search
    (defun org-mode-reftex-search ()
     ;; jump to the notes for the paper pointed to at from reftex search
     (interactive)
     (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))

    (setq org-link-abbrev-alist
     '(("bib" . "~/reference/reference.bib::%s")
       ("notes" . "~/reference/org/notes.org::#%s")
       ("papers" . "~/reference/papers/%s.pdf")))

    ;; 当使用 org-mode 时，自动调 RefTeX
    (defun org-mode-reftex-setup ()
      (load-library "reftex")
      (and (buffer-file-name) (file-exists-p (buffer-file-name))
           (progn
        ;; enable auto-revert-mode to update reftex when bibtex file changes on disk
        (global-auto-revert-mode t)
        (reftex-parse-all)
        ;; add a custom reftex cite format to insert links
        (reftex-set-cite-format
          '((?b . "[[bib:%l][%l-bib]]")
            (?c . "\\cite{%l}")
            (?n . "[[notes:%l][%l-notes]]")
            (?p . "[[papers:%l][%l-paper]]")
            (?t . "%t")
            (?h . "** %t\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n[[papers:%l][%l-paper]]")))))
      (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
      ;; binding of  ”C-c (” to org-mode-reftex-search
      (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))

    (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_EXAMPLE

**** 如何使用 notes.org 来管理文献

org-mode 是利用 Emacs 做笔记的强大工具，可以直接生成 html、TeX、PDF
等文档。

- 用 emacs 打开 notes.org 文件，将光标放置于某空行，利用命令 “C-c )”
   来建立文献索引入口，可以是 bibtex 的入口，也可以是 PDF
   文件的入口，也可以是 \cite{}。
- 命令 ”C-c (“ 可进行正则表达式搜索
- 要打开入口，只需光标停留在入口上，键入 “C-c C-o” 命令即可。
- 利用命令 “C-c \” 来搜索关键词。

**** 效果图

[[https://wiki.freebsdchina.org/_detail/doc/r/reference.png?id=doc%3Ar%3Areference][[[https://wiki.freebsdchina.org/_media/doc/r/reference.png]]]]

* Elisp                                                         :EMACS:elisp:
** ElispTutorials
*** 入门
#+BEGIN_SRC emacs-lisp :exports code
  ;; This gives an introduction to Emacs Lisp in 15 minutes (v0.2d)
  ;;
  ;; 英文原作者: Bastien / @bzg2 / http://bzg.fr
  ;; 中文翻译: iamxuxiao
  ;;
  ;;
  ;; 如何安装 Emacs
  ;;
  ;; Debian: apt-get install emacs (or see your distro instructions)
  ;; MacOSX: http://emacsformacosx.com/emacs-builds/Emacs-24.3-universal-10.6.8.dmg
  ;; Windows: http://ftp.gnu.org/gnu/windows/emacs/emacs-24.3-bin-i386.zip
  ;;
  ;; More general information can be found at:
  ;; http://www.gnu.org/software/emacs/#Obtaining
  ;; 免责声明：
  ;;
  ;; Going through this tutorial won't damage your computer unless
  ;; you get so angry that you throw it on the floor. In that case,
  ;; I hereby decline any responsability. Have fun!

  == 启动Emacs, 缓冲区和工作模式==
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; 第一步首先启动Emacs: (在windows中可以双击emacs图标，在Linux中可以输入% emacs & )，
  ;; 然后在键盘上键入q 跳过系统欢迎的信息，
  ;; 先观察在Emacs屏幕的底部，会给出一堆关于当前的工作情况的信息，其中灰色的一行叫做状态行，
  ;; 在其中你会发现 *scratch* 的字样，这表示你当前的缓冲区(buffer)的名字。
  ;; 缓冲区也叫做工作区，在Emacs中打开一个文件，实际只是在Emacs中构造该文件的一个副本，放到缓冲区中，
  ;; 在Emacs中对该文件的编辑也是针对该副本的编辑，唯有保存改动时，Emacs才会把缓冲区中的内容在复制到原文件中去。
  ;; 状态行下面的那行，叫做辅助输入区(minibuffer),该minibuffer用于显示计算结果，以及和用户做交互。
  ;;
  ;;
  ;; 如何切换Emacs的工作模式
  ;; Emacs有各种各样功能各异的模式，工作模式的含义其实就是Emacs对当前的文本编辑工作
  ;; 更加的敏感，比如高亮和缩进，并且支持一些特殊的命令。
  ;; 为了实验本教程中的lisp命令，我们要让Emacs工作在lisp-interaction-mode工作模式下，
  ;; 这个模式可以让我们在缓冲区中和Emacs进行互动，并且直接执行Lisp命令,得到结果。
  ;; 进入lisp-interaction-mode的方法： 把光标移动到辅助输入区，键入M-x lisp-interaction-mode
  ;; 然后回车。

  == 表达式，变量和函数 ==

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; 冒号在Lisp中表示注释
  ;; 在Elisp中做运算，调用函数的最简单的方式是
  ;; (function arg1 arg2)
  ;; 这相当于通常的function(arg1,arg2)，下面的表达式，对两个数字进行加法运算
  (+ 2 2)

  ;; Elisp中表达式可以通过括号来嵌套
  (+ 2 (+ 1 1))

  ;; 在lisp-interaction-mode模式中，我们可以直接计算一个表达式,计算的方法是
  (+ 3 (+ 1 2))
  ;; ^ 把光标放在这里，并且键入Ctrl-j (之后将简写成C-j)
  ;; C-j是一个快捷命令，在后台，该快捷键将调用求值命令，并且把计算的结果
  ;; 插入到当前的缓冲区中

  ;; 如果不希望Emacs在缓冲区中插入计算结果，我们还可以在表达式的末尾使用C-x C-e组合键
  ;; C-x C-e的意思是: 先按下Ctrl-x 再按下Ctrl-e
  ;; 这个命令会让Emacs在辅助缓冲区，也就是Emacs窗口的最底部那行显示计算结果

  ;; ELisp中的赋值函数是是setq，下面的表达式给变量my-name赋值"Bastien"
  (setq my-name "Bastien")
  ;; ^ 把光标停在这里，再键入C-x C-e

  ;; 下面insert函数的作用是在光标所在出插入字符Hello
  (insert "Hello!")
  ;; ^ 把光标停在这里，再键入C-x C-e

  ;; insert函数还可以两个常量字符，比如
  (insert "Hello" " world!")

  ;; insert函数还可以接受变量作为参数，我们之前已经给my-name变量赋过值了
  ;; 所以下面命令的输出结果是 "Hello, I am Bastien"
  (insert "Hello, I am " my-name)

  ;; defun命令用来定义一个函数,语法是
  ;; (defun 函数名 (参数列表) (函数体))
  (defun hello () (insert "Hello, I am " my-name))
  ;; ^ 把光标停在这里，再键入C-x C-e 执行defun命令来定义函数
  ;; 通过defun命令，你已经在Emacs中安装了这个hello函数，这个函数就成为了Emacs的一部分，知道你退出Emacs或者改变hello的定义

  ;; 从下面开始，我们将不再提醒读者使用C-x C-e来定义函数和执行ELisp指令

  ;; 在Elisp中直接输入函数的名称就是调用该函数。
  ;; 下面的命令的输入结果是: Hello, I am Bastien
  (hello)

  ;; 前面定义的hello函数不接受任何参数,过于简单，
  ;; 现在我们重新定义hello函数，让它接受一个参数name。
  (defun hello (name) (insert "Hello " name))

  ;; 然后调用新的hello函数，并且提供一个参数。
  ;; 下面命令的输出结果是"Hello you"
  (hello "you")

  == progn,let和交互式函数==
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; 执行switch-to-buffer-other-window命令，将在在一个新的窗口中打开一个buffer
  ;; 该buffer命名叫做 test, 并且把光标移到新的buffer的窗口中。
  (switch-to-buffer-other-window "*test*")

  ;; 要回到原来的buffer中，可以使用鼠标点击原来的buffer
  ;; 或者使用组合键 C-x o
  ;; C-x o的意思是: 先按下Ctrl-x 再按下o

  ;; 如果要执行一系列的指令，可以使用流程函数progn，把函数命令连接起来.
  ;; 下面的命令,先打开一个新的buffer,再执行hello函数，该hello函数的参数是"you"
  (progn
  (switch-to-buffer-other-window "*test*")
  (hello "you"))

  ;; 如果要清空一个buffer,可以调用erase-buffer函数。下面的命令先清空test buffer,再调用hello函数做打印
  (progn
  (switch-to-buffer-other-window "*test*")
  (erase-buffer)
  (hello "there"))

  ;; 在这一系列的质量后面再添加调用一个other-window函数，这样在hello函数被调用完毕之后
  ;; 光标自动回到之前的buffer窗口中
  (progn
  (switch-to-buffer-other-window "*test*")
  (erase-buffer)
  (hello "you")
  (other-window 1))

  ;; let函数用来做局部变量的定义 下面的一系列命令中
  ;; let函数首先定义local-name变量的值为“you”
  ;; 然后接着执行括号中其它的语句块部分，这个功能和progn类似
  (let ((local-name "you"))
  (switch-to-buffer-other-window "*test*")
  (erase-buffer)
  (hello local-name)
  (other-window 1))

  ;; format函数可以用做格式化的输出 其中%s表示该s的地方将被之后提供的一个字符串,即visitor替换
  ;; \n表示换行
  (format "Hello %s!\n" "visitor")

  ;; 现在我们利用format函数来改进之前定义的hello函数
  (defun hello (name)
  (insert (format "Hello %s!\n" name)))

  ;; 执行这个函数结果是"Hello you"，并且光标换到下一行
  (hello "you")

  ;; 下面我们再设计一个greeting函数，该函数接受一个参数name,
  ;; 在函数体的内部又使用了let函数，给一个局部变量your-name赋值
  ;; 最后把参数和局部变量格式化的打印出来
  (defun greeting (name)
  (let ((your-name "Bastien"))
  (insert (format "Hello %s!\n\nI am %s."
  name
  your-name ; 局部变量
  ))))

  ;; 执行greeting函数，并提供"you"字符串作为参数
  (greeting "you")

  ;; read-from-minibuffer函数提供和用户交互的功能，这个函数可以帮助Elisp程序从用户处得到输入
  (read-from-minibuffer "Enter your name: ")

  ;; 比如如果我们希望greeting函数能够从用户处得到姓名，并且做打印格式化的欢迎信息。
  ;; 可以先调用read-from-minibuffer在minibuffer中提示用户输入姓名，
  ;; 然后把得到的结果赋给局部变量your-name，
  ;; 最后insert函数在当前buffer中插入格式化的输出
  (defun greeting (from-name)
  (let ((your-name (read-from-minibuffer "Enter your name: ")))
  (insert (format "Hello!\n\nI am %s and you are %s."
  from-name ; 格式化输出参数1
  your-name ; 格式化输出参数2
  ))))

  ;; 执行这个函数
  (greeting "Bastien")

  ;; 再稍加改进greeting 把结果打印在新的buffer中
  (defun greeting (from-name)
  (let ((your-name (read-from-minibuffer "Enter your name: ")))
  (switch-to-buffer-other-window "*test*")
  (erase-buffer)
  (insert (format "Hello %s!\n\nI am %s." your-name from-name))
  (other-window 1)))

  ;; 执行这个函数
  (greeting "Bastien")

  == 列表和综合实例 ==

  ;; Lisp中使用括号构造列表，使用setq给变量赋值。
  ;; 下面的命令先构造一个列表，再把这个列表赋给list-of-names变量
  (setq list-of-names '("Sarah" "Chloe" "Mathilde"))
  ;; ^这里的单引号表示这是一个列表

  ;; 如果想要得到列表中的第一个元素，可以使用car函数
  (car list-of-names)

  ;; 如果想要得到列表中的除第一个元素以外的其它元素，可以使用cdr函数
  (cdr list-of-names)

  ;; 以后push函数可p以在列表的头部插入新的元素，所以下面的命令将改变list-of-name中元素的个数
  (push "Stephanie" list-of-names)

  ;; mapcar函数对列表中的把列表中的每一个元素分别取出来，赋给hello函数
  (mapcar 'hello list-of-names)

  ;; 重新定义greeting函数，在一个新的，清空的buffer中，对list-of-names列表中的每一个元素，调用hello函数
  ;; 调用完毕之后，再让光标回到原的buffer中
  (defun greeting ()
  (switch-to-buffer-other-window "*test*")
  (erase-buffer)
  (mapcar 'hello list-of-names)
  (other-window 1))

  ;;执行这个函数，我们将得到一个名叫test的buffer，其中的内容是
  ;; Hello Stephanie!
  ;; Hello Sarah!
  ;; Hello Chloe!
  ;; Hello Mathilde!
  ;; 暂时先不要关闭这个buffer!后面还有用！
  (greeting)

  ;; 下面我们对buffer做一些更有意思的事情！
  ;; 定义一个replace-hello-by-bonjour函数，顾名思义，就是把hello替换成bonjour
  ;; 该函数首先把光标移到一个叫做test的buffer中
  ;; 再把光标移到该buffer的开头
  ;; 从头开始搜索字符串Hello,并且替换成Bonjour
  ;; 结束之后在把光标移会到一开始的buffer中。
  (defun replace-hello-by-bonjour ()
  (switch-to-buffer-other-window "*test*")
  (goto-char (point-min)) ;该函数把光标移到buffer的开头
  (while (search-forward "Hello")
  (replace-match "Bonjour"))
  (other-window 1))

  ;; 其中 (search-forward "Hello") 在当前的buffer中做前向搜索
  ;; (while x y) 当x 的条件满足时执行y指令 ，当x返回nil时，while循环结束

  ;; 执行这个函数 替换test buffer中的hello
  (replace-hello-by-bonjour)

  ;; test buffer中的结果如下
  ;; Bonjour Stephanie!
  ;; Bonjour Sarah!
  ;; Bonjour Chloe!
  ;; Bonjour Mathilde!

  ;; 在minibuff中，还会有一条错误信息 "Search failed: Hello".
  ;; 把(search-forward "Hello")一句换成如下就不会有错误信息了
  ;; (search-forward "Hello" nil t)

  ;; 其中 nil参数表示 搜索的区域不加限制，直到buffer结束
  ;; 其中t参数指示search-foward函数 跳过错误信息 直接退出

  ;; 新hello-to-bonjour如下：
  (defun hello-to-bonjour ()
  (switch-to-buffer-other-window "*test*")
  (erase-buffer)
  ;; 对list-of-names列表中的每个元素 使用hello函数
  (mapcar 'hello list-of-names)
  (goto-char (point-min))
  ;; 搜索Hello替换成Bonjour
  (while (search-forward "Hello" nil t)
  (replace-match "Bonjour"))
  (other-window 1))

  ;; 执行这个函数
  (hello-to-bonjour)

  ;; 下面的boldify-names 函数 ，
  ;; 首先把光标挪到名叫test的buffer的开头，
  ;; 然后使用regular expression 搜索 “Bonjour + 其它任何内容” 的pattern，
  ;; 然后对找到的字符加粗。
  (defun boldify-names ()
  (switch-to-buffer-other-window "*test*")
  (goto-char (point-min))
  (while (re-search-forward "Bonjour \<span class="MathJax_Preview">\(.+\\)</span><script type="math/tex">.+\</script>!" nil t)
  (add-text-properties (match-beginning 1) ;返回匹配模式中，最先匹配的位置
  (match-end 1) ;返回最后匹配的位置
  (list 'face 'bold)))
  (other-window 1))

  ;; 执行这个函数
  (boldify-names)

  == 帮助和参考==

  ;; 在Emacs中我们可以通过如下的方式得到变量和函数的帮助信息
  ;; C-h v a-variable RET
  ;; C-h f a-function RET
  ;;
  ;; 下面的命令将打开整个Emacs Manual
  ;;
  ;; C-h i m elisp RET
  ;;
  ;; Emacs Lisp 教程
  ;; https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html

  ;; Thanks to these people for their feedback and suggestions:
  ;; - Wes Hardaker
  ;; - notbob
  ;; - Kevin Montuori
  ;; - Arne Babenhauserheide
  ;; - Alan Schmitt
  ;; - LinXitoW
  ;; - Aaron Meurer
#+END_SRC
*** [[http://emacswiki.org/emacs/ElispCookbook#toc47][Elisp cookbook]]

This page contains snippets of code that demonstrate basic
[[http://www.emacswiki.org/emacs/EmacsLisp][EmacsLisp]] programming
operations in the spirit of the O'Reilly cookbook series of books. For
every task addressed, a worked-out solution is presented as a short,
focused, directly usable piece of code.

All this stuff can be found elsewhere, but it is scattered about in
libraries, manuals, etc. It would be helpful to have here in one spot.

These recipes should be pastable into the =*scratch*= buffer so that
users can hit =‘C-j’= and evaluate them step by step.

There's going to be some overlap with [[http://www.emacswiki.org/emacs/CategoryCode][CategoryCode]],
obviously. Just link to more elaborate pages when appropriate. Should
this page grow too large, we'll split it up later.

**** Strings

The empty string (zero-length string, null string, ...):

#+BEGIN_EXAMPLE
  (zerop (string-match "" "")) ;; O(n)
  ==> t
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (string-equal "" "") ;; O(n)?
  ==> t
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (equal "" "") ;; O(n)?
  ==> t
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (zerop (length "")) ;; O(1)
  ==> t
#+END_EXAMPLE

As a (very minor) space and performance optimization, starting with
Emacs 23, Emacs keeps an interned copy of the empty string as a single
object

#+BEGIN_EXAMPLE
  (eq "" "") ;; O(1)
  ==> t ; nil prior to Emacs 23
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (eq "" (purecopy ""))
  ==> t ; nil prior to Emacs 23
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (eq "" (propertize "" 'face 'italic))
  ==> t ; nil prior to Emacs 23
#+END_EXAMPLE

***** Strings vs buffer text

While it is quite common in other programming languages to work on
strings contained in
[[http://www.emacswiki.org/emacs/variable][variable]]s, in Emacs it is also common to work on text in
[[http://www.emacswiki.org/emacs/buffer][buffer]]s.

***** Substrings

#+BEGIN_EXAMPLE
  (substring "abcdefg" 0 3)
  ==> "abc"
  (substring "abcdefg" -3 -1)
  ==> "ef"
#+END_EXAMPLE

The TO argument is optional:

#+BEGIN_EXAMPLE
  (substring "abcdefg" -3)
  ==> "efg"
#+END_EXAMPLE

Buffers:

#+BEGIN_EXAMPLE
  (with-temp-buffer (insert "abcdefg") (buffer-substring 2 4))
  ==> "bc"
#+END_EXAMPLE

***** starts-with and ends-with predicates

#+BEGIN_EXAMPLE
  (defun string/ends-with (s ending)
    "Return non-nil if string S ends with ENDING."
    (cond ((>= (length s) (length ending))
           (let ((elength (length ending)))
             (string= (substring s (- 0 elength)) ending)))
          (t nil)))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (defun string/starts-with (s begins)
    "Return non-nil if string S starts with BEGINS."
    (cond ((>= (length s) (length begins))
           (string-equal (substring s 0 (length begins)) begins))
          (t nil)))
#+END_EXAMPLE

Faster, simpler:

#+BEGIN_EXAMPLE
  (defun string/ends-with (string suffix)
    "Return t if STRING ends with SUFFIX."
    (and (string-match (rx-to-string `(: ,suffix eos) t)
                       string)
         t))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (defun string/starts-with (string prefix)
    "Return t if STRING starts with prefix."
    (and (string-match (rx-to-string `(: bos ,prefix) t)
                       string)
         t))
#+END_EXAMPLE

***** Processing characters

Reversing a string:

#+BEGIN_EXAMPLE
  (defun string/reverse (str)
    "Reverse the str where str is a string"
    (apply #'string
       (reverse
        (string-to-list str))))
#+END_EXAMPLE

See
[[http://www.emacswiki.org/emacs/CharacterProcessing][CharacterProcessing]]
and
[[http://www.emacswiki.org/emacs/StringModification][StringModification]].
See [[http://www.emacswiki.org/emacs/tr][tr]] for an example mixing
strings and characters.

Looking at characters in a temporary buffer:

#+BEGIN_EXAMPLE
  (with-temp-buffer
    (insert "abcdefg")
    (goto-char (point-min))
    (while (not (= (char-after) ?b)) (forward-char))
    (point))
  ==> 2
#+END_EXAMPLE

***** Trim whitespace

Trim whitespace from the end of a string:

#+BEGIN_EXAMPLE
  (setq test-str "abcdefg  ")
  (when (string-match "[ \t]*$" test-str)
    (message (concat "[" (replace-match "" nil nil test-str) "]")))
#+END_EXAMPLE

Trim whitespace from a string with a Perl-like chomp function:

#+BEGIN_EXAMPLE
  (defun chomp (str)
    "Chomp leading and tailing whitespace from STR."
    (while (string-match "\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\'"
                         str)
      (setq str (replace-match "" t t str)))
    str)
#+END_EXAMPLE

Let's not overcomplicate matters:

#+BEGIN_EXAMPLE
  (defun chomp-end (str)
    "Chomp tailing whitespace from STR."
    (replace-regexp-in-string (rx (* (any " \t\n")) eos)
                              ""
                              str))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (defun chomp (str)
    "Chomp leading and tailing whitespace from STR."
    (replace-regexp-in-string (rx (or (: bos (* (any " \t\n")))
                                      (: (* (any " \t\n")) eos)))
                              ""
                              str))
#+END_EXAMPLE

***** Splitting strings

See [[http://www.emacswiki.org/emacs/SplitString][SplitString]].

***** Joining strings

Use =‘mapconcat’= to join a list of strings using a separator string
between them.

Example:

#+BEGIN_EXAMPLE
  (mapconcat 'identity '("" "home" "alex " "elisp" "erc") "/")
    ==> "/home/alex /elisp/erc"
#+END_EXAMPLE

If the separator will be empty, use =‘apply’=:

#+BEGIN_EXAMPLE
  (apply #'concat '("hello, " "world"))
    ==> "hello, world"
#+END_EXAMPLE

#+BEGIN_HTML
  <div class="color one level0">
#+END_HTML

-   :: if the separator is empty then =‘concat’= (or =‘format’=) is
   sufficient - no need for =‘apply’=: =(concat "hello, " "world")= ⇒
   ="hello, world"= --
   [[http://www.emacswiki.org/emacs/DrewAdams][DrewAdams]]

#+BEGIN_HTML
  </div>
#+END_HTML

***** Serialization

Convert forms to strings using =‘prin1-to-string’=, then convert back
from a string using =‘read’=.

#+BEGIN_EXAMPLE
  (length (read (prin1-to-string (make-list 1000000 '(x)))))
    ==> 1000000
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (read (prin1-to-string "Hello World!"))
    ==> "Hello World!"
#+END_EXAMPLE

This works only in the simplest cases. Unfortunately, it doesn't work
for all [[http://www.emacswiki.org/emacs/EmacsLisp][EmacsLisp]] data
types.

#+BEGIN_EXAMPLE
  (read (prin1-to-string (make-hash-table))) ;; Error before Emacs 23.
    ==> #s(hash-table size 65 test eql rehash-size 1.5 [...] data ())
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (read (prin1-to-string (current-buffer)))
    ==> Lisp error: (invalid-read-syntax "#")
#+END_EXAMPLE

***** Formatting

**** Killing text

As the [[http://www.emacswiki.org/emacs/ElispManual][ElispManual]] says,
“Most of the kill commands are primarily for interactive use [...] When
you need to delete text for internal purposes within a Lisp function,
you should normally use deletion functions, so as not to disturb the
kill ring contents.”

The following mimic the =‘kill-’= commands but without disturbing the
[[http://www.emacswiki.org/emacs/kill_ring][kill ring]]. To make them
kill, use =‘kill-region’= instead of =‘delete-region’=.

***** Delete region

The Lisp equivalent of =‘kill-region’= (=‘C-w’=) but without kill-ring
side effects::

#+BEGIN_EXAMPLE
  (delete-region (region-beginning) (region-end))
#+END_EXAMPLE

According to the
[[http://www.emacswiki.org/emacs/ElispManual][ElispManual]], “Few
programs need to use the =‘region-beginning’= and =‘region-end’=
functions.” This is because Lisp code should not rely on nor “alter the
mark unless altering the mark is part of the user-level functionality of
the command. (And, in that case, this effect should be documented.) To
remember a location for internal use in the Lisp program, store it in a
Lisp variable. For example: [...]”

***** Delete line

The equivalent of =‘kill-line’= (=‘C-k’=) but without kill-ring side
effects:

#+BEGIN_EXAMPLE
  (let ((beg (point)))
    (forward-line 1)
    (forward-char -1)
    (delete-region beg (point)))
#+END_EXAMPLE

Alternatively, replacing the =‘let’= with =‘progn’=.

#+BEGIN_EXAMPLE
  (delete-region (point) (progn (forward-line 1)
                                (forward-char -1)
                                (point)))
#+END_EXAMPLE

Or just: =(delete-region (point) (line-end-position))=

The examples with =‘forward-line’= are shown for comparison with other
examples, below.

***** Delete line backwards

The equivalent of killing the line backwards (=‘C-0 C-k’=) but without
kill-ring side effects:

#+BEGIN_EXAMPLE
  (let ((beg (point)))
    (forward-line 0)
    (delete-region (point) beg))
#+END_EXAMPLE

Alternatively, replacing the =‘let’= with =‘progn’=.

#+BEGIN_EXAMPLE
  (delete-region (progn (forward-line 0) (point))
                 (point))
#+END_EXAMPLE

Or just: =(delete-region (line-beginning-position) (point))=

***** Delete line to next line

The equivalent of killing the line and the newline (=‘C-1 C-k’=) but
without kill-ring side effects:

#+BEGIN_EXAMPLE
  (let ((beg (point)))
    (forward-line 1)
    (delete-region beg (point)))
#+END_EXAMPLE

Alternatively, replacing the =‘let’= with =‘progn’=.

#+BEGIN_EXAMPLE
  (delete-region (point) (progn (forward-line 1) (point)))
#+END_EXAMPLE

***** Delete whole line

The equivalent of =‘kill-whole-line’= (=‘C-S-DEL’=) but without
kill-ring side effects:

#+BEGIN_EXAMPLE
  (let ((beg (progn (forward-line 0)
                    (point))))
    (forward-line 1)
    (delete-region beg (point)))
#+END_EXAMPLE

Alternatively, replacing the =‘let’= with =‘progn’=.

#+BEGIN_EXAMPLE
  (delete-region (progn (forward-line 0) (point))
                 (progn (forward-line 1) (point)))
#+END_EXAMPLE

Or just:

#+BEGIN_EXAMPLE
  (delete-region (line-beginning-position)
                 (line-end-position))
#+END_EXAMPLE

***** Delete word

The equivalent of =‘kill-word’= (=‘M-d’=) but without kill-ring side
effects:

#+BEGIN_EXAMPLE
  (let ((beg (point)))
    (forward-word 1)
    (delete-region beg (point)))
#+END_EXAMPLE

Alternatively, replacing the =‘let’= with =‘progn’=.

#+BEGIN_EXAMPLE
  (delete-region (point) (progn (forward-word 1) (point)))
#+END_EXAMPLE

***** Delete sentence

The equivalent of =‘kill-sentence’= (=‘M-k’=) but without kill-ring side
effects:

#+BEGIN_EXAMPLE
  (let ((beg (point)))
    (forward-sentence 1)
    (delete-region beg (point)))
#+END_EXAMPLE

Alternatively, replacing the =‘let’= with =‘progn’=.

#+BEGIN_EXAMPLE
  (delete-region (point) (save-excursion
                           (forward-sentence 1)
                           (point)))
#+END_EXAMPLE

**** Numbers

***** Test whether a string represents a number

#+BEGIN_EXAMPLE
  (defun string-integer-p (string)
    (if (string-match "\\`[-+]?[0-9]+\\'" string)
        t
      nil))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (string-integer-p "1234")
    ==> t
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (string-integer-p "x1234")
    ==> nil
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (string-integer-p "3.141592653589793")
    ==> nil
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (defun string-float-p (string)
    (if (string-match "\\`[-+]?[0-9]+\\.[0-9]*\\'" string)
        t
      nil))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (string-float-p "1234")
    ==> nil
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (string-float-p "3.141592653589793")
    ==> t
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (string-float-p ".1")
    ==> nil
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (string-float-p "1.")
    ==> t
#+END_EXAMPLE

***** String to number

The following example is for instruction. Normally standard function
=‘string-to-number’= would be used.

#+BEGIN_EXAMPLE
  (defun decimal-number (string)
    (let ((n (string-to-number string)))
      (save-match-data
        (if (and (not (zerop n))
                 (string-match "\\`\\s-*0+\\.?0*\\s-*\\'" string))
            n
          nil))))

  (decimal-number "536870911")
  ==> 536870911

  (decimal-number "536870912")
  ==> 536870912.0

  (decimal-number "3.141592653589793")
  ==> 3.141592653589793

  (decimal-number "042")
  ==> 42

  (decimal-number " 0 ")
  ==> 0

  (decimal-number "000")
  ==> 0

  (decimal-number "0.0")
  ==> 0.0
#+END_EXAMPLE

***** Random numbers

#+BEGIN_EXAMPLE
  (random 2)  ;coin toss (0 or 1)
  (+ (random 6) 1)  ;dice
#+END_EXAMPLE

***** Put commas in numbers

#+BEGIN_EXAMPLE
  (defun group-number (num &optional size char)
    "Format NUM as string grouped to SIZE with CHAR."
    ;; Based on code for `math-group-float' in calc-ext.el
    (let* ((size (or size 3))
           (char (or char ","))
           (str (if (stringp num)
                    num
                  (number-to-string num)))
            ;; omitting any trailing non-digit chars
            ;; NOTE: Calc supports BASE up to 36 (26 letters and 10 digits ;)
           (pt (or (string-match "[^0-9a-zA-Z]" str) (length str))))
      (while (> pt size)
        (setq str (concat (substring str 0 (- pt size))
                          char
                          (substring str (- pt size)))
              pt (- pt size)))
      str))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (group-number 299792458)
  ==> "299,792,458"
  (group-number "149597870691" 4 " ")
  ==> "1495 9787 0691"
#+END_EXAMPLE

***** Increment numbers

See [[http://www.emacswiki.org/emacs/IncrementNumber][IncrementNumber]].

***** Dates and times

****** Today's date

#+BEGIN_EXAMPLE
  (defun today-is ()
    "Display current time."
    (interactive)
    (message (format-time-string "Today is %Y-%m-%d %T")))
#+END_EXAMPLE

See
[[http://www.emacswiki.org/emacs/InsertingTodaysDate][InsertingTodaysDate]].

****** Formatting dates

Use the function =‘format-time-string’= which is a build in function in
both Emacsen and works like =‘strftime’=:

#+BEGIN_EXAMPLE
  ;; Year-Month-Day:
  (insert (format-time-string "%Y-%m-%d"))
  ;; Hour:Minutes:Seconds
  (insert (format-time-string "%H-%M-%S"))
#+END_EXAMPLE

****** Conversions

Read a date from a string.

#+BEGIN_EXAMPLE
  (let ((time (date-to-time "Tue, 27-Sep-83 12:35:59 EST")))
    (set-time-zone-rule t) ;; Use Universal time.
    (prog1 (format-time-string "%Y-%m-%d %T UTC" time)
      (set-time-zone-rule nil))) ;; Reset to default time zone.
  ==> "1983-09-27 17:35:59 UTC"
#+END_EXAMPLE

Decode a time object.

#+BEGIN_EXAMPLE
  (decode-time (date-to-time "Tue, 27-Sep-83 12:35:59 EST"))
  ==> (59 35 13 27 9 1983 2 t -14400)
#+END_EXAMPLE

Get the seconds from the unix epoch.

#+BEGIN_EXAMPLE
  (let ((time (date-to-time "13 Feb 2009 23:31:30 UTC")))
    (float-time time))
  ==> 1234585890.0
#+END_EXAMPLE

Find the date for seconds from the unix epoch.

#+BEGIN_EXAMPLE
  (format-time-string "%Y-%m-%d %T UTC" (seconds-to-time 1234585890))
  ==> "2009-02-13 23:31:30 UTC"
#+END_EXAMPLE

Find the date 30 seconds in the future.

#+BEGIN_EXAMPLE
  (format-time-string "%Y-%m-%d %T UTC" (time-add (current-time)
                                                  (seconds-to-time 30)))
  ==> "2012-02-13 10:07:11 UTC"
#+END_EXAMPLE

Formatting elapsed time in years, days, hours, minutes and seconds.

#+BEGIN_EXAMPLE
  (format-seconds "%Y %D %h:%m:%s" (1- (* 367 24 3600)))
  ==> "1 year 1 day 23:59:59"
#+END_EXAMPLE

Find the days between two dates.

#+BEGIN_EXAMPLE
  (let ((days1 (time-to-days (date-to-time "Tue, 27-Sep-83 12:35:59 EST")))
        (days2 (time-to-days (date-to-time "2009-02-13 23:31:30 UTC"))))
    (- days2 days1))
  ==> 9271
#+END_EXAMPLE

Getting the day in the year.

#+BEGIN_EXAMPLE
  (time-to-day-in-year (current-time))
  ==> 44
#+END_EXAMPLE

Build a date based on the day of the year.

#+BEGIN_EXAMPLE
  (format-time-string "%j"
                      (encode-time 0 0 0 44 1 2012))
  ==> "044"
#+END_EXAMPLE

**** Pattern matching

“Patterns” refers to
[[http://www.emacswiki.org/emacs/RegularExpression][RegularExpression]]s.

There's a set of functions that work in strings, and a set that work in
buffers.

***** Finding

#+BEGIN_EXAMPLE
  (string-match "foo*" "Fight foo for food!")
  ==> 6
#+END_EXAMPLE

Using a temporary buffer instead:

#+BEGIN_EXAMPLE
  (with-temp-buffer
    (insert "Fight foo for food!")
    (goto-char (point-min))
    (re-search-forward "foo*")
    (point))
  ==> 10
#+END_EXAMPLE

Alternative without regular expressions: =‘search-forward’=.

The functions working on buffers move
[[http://www.emacswiki.org/emacs/point][point]] to the end of the
occurrence found and return it. That's why the result is 10 instead of
6.

***** Verifying

Sometimes you just want to check whether you're at the right place:

#+BEGIN_EXAMPLE
  (with-temp-buffer
    (insert "Fight foo for food!")
    (goto-char (point-min))
    (looking-at "fight"))
  ==> t
#+END_EXAMPLE

***** Search and replace

#+BEGIN_EXAMPLE
  (replace-regexp-in-string "foo*" "fu" "Fight foo for food!")
  ==> "Fight fu fur fud!"
#+END_EXAMPLE

Using a temporary buffer instead:

#+BEGIN_EXAMPLE
  (with-temp-buffer
     (insert "Fight foo for food!")
     (goto-char (point-min))
     (while (re-search-forward "foo*" nil t)
       (replace-match "fu"))
     (buffer-string))
  ==> "Fight fu fur fud!"
#+END_EXAMPLE

Alternative without regular expressions: =‘search-forward’=.

See also
[[http://www.emacswiki.org/emacs/StringSearchAndReplace][StringSearchAndReplace]].

***** Search and do something with match

This finds numbers and increments them by one. It depends on
=‘decimal-number’= that was defined above. See also
[[http://www.emacswiki.org/emacs/IncrementNumber][IncrementNumber]].

#+BEGIN_EXAMPLE
  (while (re-search-forward "[0-9]" nil t)
    (goto-char (match-beginning 0))
    (when (and (looking-at "[-+]?[0-9]+\\.?[0-9]*")
               (decimal-number (match-string 0)))
      (replace-match
       (number-to-string (1+ (string-to-number (match-string 0)))))
      (goto-char (match-end 0))))
#+END_EXAMPLE

This loads [[http://www.emacswiki.org/emacs/EmacsLisp][EmacsLisp]] files
listed one per line in a text file.

#+BEGIN_EXAMPLE
  (with-current-buffer (find-file-noselect "~/load-files.txt")
    (while (re-search-forward "^.*\\.el\\(\\.gz\\)?$" nil t)
      (let ((filename (match-string 0)))
        (when (file-exists-p filename)
          (load-file filename)))))
#+END_EXAMPLE

***** Extracting submatches from a regex match

Like in most other regex implementations, if you use grouping
parentheses in a regular expression, you can extract the text that
matched each parenthesized group. Groups are numbered from the opening
parenthesis, left to right. These are also called back references, or
backrefs, or matching groups.

#+BEGIN_EXAMPLE
  (save-match-data ; is usually a good idea
    (and (string-match "\\`\\([^@]+\\)@\\([^@]+\\)\\'" email)
         (setq user (match-string 1 email)
               domain (match-string 2 email) ) ))
#+END_EXAMPLE

Usually you would use =*let*= instead of =*setq*= but this is just a
simple self-contained example. See also
[[http://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding][DynamicBindingVsLexicalBinding]].

***** Mapping with a regex

This invokes a function at every match of a
[[http://www.emacswiki.org/emacs/regexp][regexp]]:

#+BEGIN_EXAMPLE
  (defun map-regex (buffer regex fn)
    "Map the REGEX over the BUFFER executing FN.

  FN is called with the match-data of the regex.

  Returns the results of the FN as a list."
    (with-current-buffer buffer
      (save-excursion
        (goto-char (point-min))
        (let (res)
          (save-match-data
            (while (re-search-forward regex nil t)
              (let ((f (match-data)))
                (setq res
                      (append res
                              (list
                               (save-match-data
                                 (funcall fn f))))))))
          res))))
#+END_EXAMPLE

An example use might be:

#+BEGIN_EXAMPLE
  (map-regex
   (find-file-noselect "~/work/elnode-auth/build-parts.txt")
   "^\\(.*.el\\(\\.gz\\)*\\)$"
   (lambda (md)
     (let ((filename (match-string 0)))
       (when (file-exists-p filename)
         (load-file filename))))))
#+END_EXAMPLE

***** Finding all the strings that match

If you want to list all the matching strings, including subexpressions:

#+BEGIN_EXAMPLE
  (defun match-strings-all (&optional string)
    "Return the list of all expressions matched in last search.

  STRING is optionally what was given to `string-match'."
    (let ((n-matches (1- (/ (length (match-data)) 2))))
      (mapcar (lambda (i) (match-string i string))
              (number-sequence 0 n-matches))))
#+END_EXAMPLE

Here's an example:

#+BEGIN_EXAMPLE
  (let ((str "time help"))
    (string-match "time \\([A-Za-z]+\\)$" str)
    (match-strings-all str))
  ==> ("time help" "help")
#+END_EXAMPLE

**** Code Comments

Move to the beginning of the current comment:

#+BEGIN_EXAMPLE
  (require 'newcomment)
  (comment-beginning)
#+END_EXAMPLE

Move to the text after a comment:

#+BEGIN_EXAMPLE
  (comment-search-forward (line-end-position) t)
#+END_EXAMPLE

See also
[[http://www.emacswiki.org/emacs/EndOfLineNoComments][EndOfLineNoComments]].

**** Sequences

Datatypes used to represent sequences of things:

#+BEGIN_EXAMPLE
   _____________________________________________
  |                                             |
  |          Sequence                           |
  |  ______   ________________________________  |
  | |      | |                                | |
  | | List | |             Array              | |
  | |      | |    ________       ________     | |
  | |______| |   |        |     |        |    | |
  |          |   | Vector |     | String |    | |
  |          |   |________|     |________|    | |
  |          |  ____________   _____________  | |
  |          | |            | |             | | |
  |          | | Char-table | | Bool-vector | | |
  |          | |____________| |_____________| | |
  |          |________________________________| |
  |_____________________________________________|
#+END_EXAMPLE

***** Lists

List basics are explained at
[[http://www.emacswiki.org/emacs/ListStructure][ListStructure]]. Lists
can shrink and grow, but access to elements towards the end of the list
is slow if the list is long.

Use =‘cons’=, =‘push’=, or =‘add-to-list’= to prepend a new element to a
list. Use =‘nth’= to access an element of a list.

#+BEGIN_EXAMPLE
  (let ((words '("fight" "foo" "for" "food!")))
    (when (string= "foo" (nth 1 words))
      (setq words (cons "bar" words)))
    words)
  ==> ("bar" "fight" "foo" "for" "food!")
#+END_EXAMPLE

See
[[http://www.emacswiki.org/emacs/ListModification][ListModification]]
for more ways of changing a list.

Iteration:

#+BEGIN_EXAMPLE
  (let ((result  ()))
    (dolist (word  '("fight" "foo" "for" "food!"))
      (when (string-match "o" word) (push word result)))
    (nreverse result))
  ==> ("foo" "for" "food!")
#+END_EXAMPLE

Note how =‘push’= adds an element to the front of the list, so that
usually the list has to be reversed after the loop. =‘nreverse’= is
particularly efficient because it does this destructively. See
[[http://www.emacswiki.org/emacs/DestructiveOperations][DestructiveOperations]]
for more about this.

Copying:

Use =‘copy-sequence’= to make a shallow copy of a list without changing
the original.

#+BEGIN_EXAMPLE
  (let* ((orig '((1 2) (3 4)))
         (copy (copy-sequence orig)))
    (setcdr copy '((5 6)))
    (list orig copy))
  ==> (((1 2) (3 4)) ((1 2) (5 6)))
#+END_EXAMPLE

The elements in the copy remain in the original. More importantly, they
are in fact the same elements (i.e., =‘eq’=), not copies. The list is
copied, but its elements are shared with the original list.

#+BEGIN_EXAMPLE
  (let* ((orig '((1 2) (3 4)))
         (copy (copy-sequence orig)))
    (setcdr (cadr copy) '(0))
    (list orig copy))
  ==> (((1 2) (3 0)) ((1 2) (3 0)))
#+END_EXAMPLE

=‘copy-tree’= is the recursive version of =‘copy-sequence’=.

#+BEGIN_EXAMPLE
  (let* ((orig '((1 2) (3 4)))
         (copy (copy-tree orig)))
    (setcdr (cadr copy) '(0))
    (list orig copy))
  ==> (((1 2) (3 4)) ((1 2) (3 0)))
#+END_EXAMPLE

Filtering:

A =‘filter’= macro has been added to the Emacs development tree. It does
what you expect: filters a list, returning a copy that keeps elements
that satisfy a predicate and omitting elements that do not satisfy it.

If your Emacs does not yet have this built in, you can use =‘dolist’= or
=‘mapcar’= to iterate over a list with a conditional, and then use
=‘delq’= to remove the =‘nil’= values.

#+BEGIN_EXAMPLE
  (defun my-filter (condp lst)
    (delq nil
          (mapcar (lambda (x) (and (funcall condp x) x)) lst)))
#+END_EXAMPLE

Therefore,

#+BEGIN_EXAMPLE
  (my-filter 'identity my-list)
#+END_EXAMPLE

is equivalent to

#+BEGIN_EXAMPLE
  (delq nil my-list)
#+END_EXAMPLE

For example:

#+BEGIN_EXAMPLE
  (let ((num-list '(1 'a 2 "nil" 3 nil 4)))
    (my-filter 'numberp num-list))
  ==> (1 2 3 4)
#+END_EXAMPLE

Package =‘cl-seq’= has functions =‘remove-if’= and =‘remove-if-not’=.
The latter can be used instead of =‘my-filter’=.

#+BEGIN_EXAMPLE
  (let ((num-list '(1 'a 2 "nil" 3 nil 4)))
    (remove-if-not 'numberp num-list))
  ==> (1 2 3 4)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (let ((num-list '(1 'a 2 "nil" 3 nil 4)))
    (remove-if 'numberp num-list))
  ==> ((quote a) "nil" nil)
#+END_EXAMPLE

Here is a version of quicksort:

#+BEGIN_EXAMPLE
  (defun quicksort (lst)
    "Implement the quicksort algorithm."
    (if (null lst) nil
      (let* ((spl (car lst))
             (rst (cdr lst))
             (smalp (lambda (x)
                   (< x spl))))
        (append (quicksort (remove-if-not smalp rst))
                (list spl)
                (quicksort (remove-if smalp rst))))))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (quicksort '(5 7 1 3 -9 8 7 -4 0))
  ==> (-9 -4 0 1 3 5 7 7 8)
#+END_EXAMPLE

The following function was written by
[[http://www.emacswiki.org/emacs/tali713][tali713]] in response to
[[http://www.emacswiki.org/emacs/hypnocat][hypnocat]]'s question
regarding a filter function in
[[http://www.emacswiki.org/emacs/EmacsChannel][#emacs]]:

#+BEGIN_EXAMPLE
  (defun keep-when (pred seq)
    (let ((del (make-symbol "del")))
      (remove del (mapcar (lambda (el)
                (if (funcall pred el) el del)) seq))))
#+END_EXAMPLE

Use:

#+BEGIN_EXAMPLE
  (keep-when 'atom '(1 2 3 (4 5) 6 nil t foo))
  ==> (1 2 3 6 nil t foo)
#+END_EXAMPLE

Updated 31/05/2013.

Tranposing:

Create a list from multiple lists:

#+BEGIN_EXAMPLE
  ((lambda (&rest args)
     (mapcar (lambda (n)
               (delq nil (mapcar (lambda (arg) (nth n arg)) args)))
             (number-sequence 0 (1- (apply 'max (mapcar 'length args))))))
   '(1 2 3) '(a b c) '(A B C))
   ==> ((1 a A) (2 b B) (3 c C))
#+END_EXAMPLE

A more concise version is possible with the the higher-arity version of
=‘mapcar’= available from library =‘cl’=.

#+BEGIN_EXAMPLE
  ((lambda (&rest args)
     (apply (function mapcar*) (function list) args))
   '(1 2 3) '(a b c) '(A B C))
  ==> ((1 a A) (2 b B) (3 c C))
#+END_EXAMPLE

Searching:

You can check for presence of a value in a list using =‘member’= or
=‘memq’=.

#+BEGIN_EXAMPLE
  (let ((words  '("fight" "foo" "for" "food!")))
    (car (member "for" words)))
  ==> "for"
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (let ((re    "\\wo\\b")
        (words '("fight" "foo" "for" "food!")))
    (consp (memq t
             (mapcar (lambda (s) (numberp (string-match re s))) words))))
  ==> t
#+END_EXAMPLE

In the latter, a more efficient algorithm would use a loop (a non-local
exit).

***** Association lists

The [[http://www.emacswiki.org/emacs/ElispManual][ElispManual]] has
examples of finding and deleting values in an
[[http://www.emacswiki.org/emacs/alist][association list]], or alist.
Here are cases when the car values are strings.

#+BEGIN_EXAMPLE
  (assoc "2" '(("2" . 2) ("1" . 1) ("2") ("3" . 3)))
  ==> ("2" . 2)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (mapcar (lambda (c) (cons c (string c))) (number-sequence 56 65))
  ==> ((56 . "8") (57 . "9") (58 . ":") (59 . ";") (60 . "<")
       (61 . "=") (62 . ">") (63 . "?") (64 . "@") (65 . "A"))
  (assq 64
        (mapcar (lambda (c) (cons c (string c))) (number-sequence 56 65)))
  ==> (64 . "@")
  (assq 55
        (mapcar (lambda (c) (cons c (string c))) (number-sequence 56 65)))
  ==> nil
#+END_EXAMPLE

Deleting:

#+BEGIN_EXAMPLE
  (let ((alist '(("a" . 1) ("b" . 2))))
    (delq (assoc "a" alist) alist))
  ==> (("b" . 2))
#+END_EXAMPLE

Matches with a test function other than =‘equal’=:

#+BEGIN_EXAMPLE
  (let ((alist '(("ab" . 1) ("bc" . 2) ("cd" . 3))))
    (assoc-default "c" alist (lambda (x y) (string-match y x))))
  ==> 2
#+END_EXAMPLE

The alist functions are useful for finding the first instance of a value
in any list, not just association lists, and even when there are
duplicates.

The following uses =‘mapcar’= to associate the =‘major-mode’= to each
buffer returned by =‘buffer-list’=, then =‘assq’= to find the first
buffer where the major mode is =‘fundamental-mode’=.

#+BEGIN_EXAMPLE
  (assq 'fundamental-mode
        (mapcar
         (lambda (b)
           (cons (buffer-local-value 'major-mode b) b))
         (buffer-list)))
  ==> (fundamental-mode . #<buffer *Messages*>)
#+END_EXAMPLE

You can also find values in regular lists, by converting them to
association lists with a null cdr.

Here's an association list of random numbers with no associated value.

#+BEGIN_EXAMPLE
  '((8 . nil) (3 . nil) (1 . nil) (7 . nil) (3 . nil) (6 . nil) (9 . nil))
  ==> ((8) (3) (1) (7) (3) (6) (9))
#+END_EXAMPLE

This is really just making a list for each number -- a “list of lists”
-- which can be done with =‘mapcar’= and =‘list’=.

#+BEGIN_EXAMPLE
  (mapcar 'list '(8 3 1 7 3 6 9))
  ==> ((8) (3) (1) (7) (3) (6) (9))
  (assq 3 (mapcar 'list '(8 3 1 7 3 6 9)))
  ==> (3)
#+END_EXAMPLE

***** Vectors

Vectors are fixed in size, and their elements can be accessed in
constant time (neither of which is the case for lists).

#+BEGIN_EXAMPLE
  (let ((words ["fight" "foo" "for" "food!"]))
    (when (string= "foo" (aref words 1))
      (aset words 1 "bar"))
    words)
  ==> ["fight" "bar" "for" "food!"]
#+END_EXAMPLE

****** Convert vector to list

All vectors are sequences and the map functions work on sequences, so:

#+BEGIN_EXAMPLE
  (mapcar 'identity [1 2 3 4])
    ==> (1 2 3 4)
#+END_EXAMPLE

Here is another Lisp idiom for the same thing:

#+BEGIN_EXAMPLE
  (append [1 2 3 4] ())
    ==> (1 2 3 4)
#+END_EXAMPLE

**** Hash tables

Hash tables map keys to values. They are similar to alists, but they are
typically more efficient for a large number of keys.

See [[http://www.emacswiki.org/emacs/HashMap][HashMap]].

***** Storing and retrieving keys and values

By default, hash tables use =‘eql’= to compare keys. This is not
appropriate for strings: =(eql "alex" "alex")= ⇒ nil. Use =‘equal’= in
such cases:

#+BEGIN_EXAMPLE
  (let ((nick-table (make-hash-table :test 'equal)))
    (puthash "kensanata" "Alex Schroeder" nick-table)
    (gethash "kensanata" nick-table))
  ==> "Alex Schroeder"
#+END_EXAMPLE

Iterate:

#+BEGIN_EXAMPLE
  (let ((nick-table (make-hash-table :test 'equal))
        nicks)
    (puthash "kensanata" "Alex Schroeder" nick-table)
    (puthash "e1f" "Luis Fernandes" nick-table)
    (puthash "pjb" "Pascal J. Bourguignon" nick-table)
    (maphash (lambda (nick real-name)
               (setq nicks (cons nick nicks)))
             nick-table)
    nicks)
    ==> ("pjb" "e1f" "kensanata")
#+END_EXAMPLE

***** Sorting keys

Use =‘maphash’= to build up a list of keys, sort it, and then loop
through the list:

#+BEGIN_EXAMPLE
  (let ((nick-table (make-hash-table :test 'equal))
        nicks)
    (puthash "kensanata" "Alex Schroeder" nick-table)
    (puthash "e1f" "Luis Fernandes" nick-table)
    (puthash "pjb" "Pascal J. Bourguignon" nick-table)
    (maphash (lambda (nick real-name)
               (setq nicks (cons nick nicks)))
             nick-table)
    (mapcar (lambda (nick)
              (concat nick " => " (gethash nick nick-table)))
            (sort nicks 'string<)))
    ==> ("e1f => Luis Fernandes"
         "kensanata => Alex Schroeder"
         "pjb => Pascal J. Bourguignon")
#+END_EXAMPLE

**** Files
***** Read

A file can be inserted at point with =‘insert-file-contents’= or
=‘insert-file-contents-literally’=. To get a file as a string,

#+BEGIN_EXAMPLE
  (defun file-string (file)
    "Read the contents of a file and return as a string."
    (with-temp-buffer
      (insert-file-contents file)
      (buffer-string)))
#+END_EXAMPLE

On the chance that a buffer may already be actively visiting the file,
consider using =‘find-file-noselect’=

#+BEGIN_EXAMPLE
  (defun file-string (file)
    "Read the contents of a file and return as a string."
    (with-current-buffer (find-file-noselect file)
      (buffer-string)))
#+END_EXAMPLE

***** Filter

Processing a file is usually done with a temporary buffer:

#+BEGIN_EXAMPLE
  (defun process-file (file)
    "Read the contents of a file into a temp buffer and then do
  something there."
    (when (file-readable-p file)
      (with-temp-buffer
        (insert-file-contents file)
        (goto-char (point-min))
        (while (not (eobp))
          ;; do something here with buffer content
          (forward-line)))))
#+END_EXAMPLE

***** Write

To write something to a file you can create a temporary buffer, insert
the things to write there and write the buffer contents to a file. The
following example read a string and a filename (with completion, but
doesn't need to exist, see
[[http://www.emacswiki.org/emacs/InteractiveCodeChar][InteractiveCodeChar]]
F) and write the string to that file.

#+BEGIN_EXAMPLE
  (defun write-string-to-file (string file)
    (interactive "sEnter the string: \nFFile to save to: ")
    (with-temp-buffer
      (insert string)
      (when (file-writable-p file)
        (write-region (point-min)
                      (point-max)
                      file))))
#+END_EXAMPLE

Another way to do this is via with-temp-file:

#+BEGIN_EXAMPLE
  (defun write-string-to-file (string file)
    (interactive "sEnter the string: \nFFile to save to: ")
    (with-temp-file file
      (insert string)))
#+END_EXAMPLE

***** Input and output (I/O)

This is a nice and simple way to edit a file with Emacs Lisp, especially
when there's a chance the file might be already be visited in Emacs and
its ok to edit the existing buffer.

#+BEGIN_EXAMPLE
  (with-current-buffer (find-file-noselect "~/logfile")
    (goto-char (point-max))
    (insert (format "Hash of last line: %s"
             (md5
              (save-excursion
                (forward-line -1)
                (buffer-substring-no-properties (point)
                                                (line-end-position))))))
    (newline)
    (with-temp-message "Writing file..."
      (save-buffer))
    (message "Writing file...done"))
#+END_EXAMPLE

***** Searching within a File

If you don't have grep, then you may need to write some Lisp which can
find a match in a file.

#+BEGIN_EXAMPLE
  ;; Visit file unless its already open.
  (with-current-buffer (find-file-noselect "~/.emacs")
    (save-excursion ;; Don't change location of point.
      (goto-char (point-min)) ;; From the beginning...
      (if (re-search-forward ".*load-path.*" nil t 1)
          (match-string-no-properties 0)
        (error "Search failed"))))
  ==> "(add-to-list 'load-path \"/usr/share/emacs/site-lisp/\")"
#+END_EXAMPLE

***** Locking

#+BEGIN_EXAMPLE
  (unless (file-locked-p (buffer-file-name))
     (lock-buffer))
#+END_EXAMPLE

***** Stat

An interface to the kernel's stat(2) is provided by the function
file-attributes.

#+BEGIN_EXAMPLE
  (let* ((attrs (file-attributes (buffer-file-name)))
         (atime (nth 4 attrs))
         (mtime (nth 5 attrs))
         (ctime (nth 6 attrs)))
    (concat "File last accessed on "
            (format-time-string "%Y-%m-%d %T" atime) "\n"
            "File last modified on "
            (format-time-string "%Y-%m-%d %T" mtime) "\n"
            "File last changed on "
            (format-time-string "%Y-%m-%d %T" ctime) "\n"))
#+END_EXAMPLE

***** Deleting

#+BEGIN_EXAMPLE
  (if (file-exists-p filename)
      (delete-file filename))
#+END_EXAMPLE

***** Copy, move and rename

#+BEGIN_EXAMPLE
  (copy-file file new-name)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (rename-file file new-dir)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (rename-file file new-name)
#+END_EXAMPLE

**** Directories

***** Listing

All files in a directory sorted by name:

#+BEGIN_EXAMPLE
  (directory-files "~/")
  ==> ("." ".." ".bash_history" ".bashrc" ".emacs" ".emacs.d" "diary" "local" "public_html")
#+END_EXAMPLE

File names matching a regular expression and in no particular order.

#+BEGIN_EXAMPLE
  (directory-files "~/" (not 'absolute) "\\`\\." 'nosort)
  ==> (".emacs.d" ".emacs" ".bash_history" ".bashrc" ".." ".")
#+END_EXAMPLE

File names matching a wildcard expression sorted by name.

#+BEGIN_EXAMPLE
  (let ((default-directory "~/"))
    (file-expand-wildcards "?emacs*"))
  ==> (".emacs" ".emacs.d")
#+END_EXAMPLE

All files sorted by modification time:

#+BEGIN_EXAMPLE
  (let ((default-directory "~/"))
    (sort
      (directory-files default-directory (not 'absolute) nil 'nosort)
      (lambda (a b)
        (time-less-p (nth 5 (file-attributes a))
                     (nth 5 (file-attributes b))))))
  ==> (".bashrc" "diary" "public_html" "local" ".bash_history" ".." ".emacs" ".emacs.d" ".")
#+END_EXAMPLE

***** Recursion

Here's an example of using =‘directory-files’= to find all
subdirectories in a subdirectory.

Could potentially surpass =‘max-lisp-eval-depth’= if the filesystem has
a suffienctly complex number of subdirectories.

#+BEGIN_EXAMPLE
  (defun directory-dirs (dir)
    "Find all directories in DIR."
    (unless (file-directory-p dir)
      (error "Not a directory `%s'" dir))
    (let ((dir (directory-file-name dir))
          (dirs '())
          (files (directory-files dir nil nil t)))
        (dolist (file files)
          (unless (member file '("." ".."))
            (let ((file (concat (file-name-as-directory dir) file)))
              (when (file-directory-p file)
                (setq dirs (append (cons file
                                         (directory-dirs file))
                                   dirs))))))
        dirs))
#+END_EXAMPLE

Giving =‘directory-dirs’= an absolute file name:

#+BEGIN_EXAMPLE
  (directory-dirs "/emacs/lisp")
  ==> ("/usr/share/emacs/23.2/lisp/calc" "/usr/share/emacs/23.2/lisp/calendar"
       "/usr/share/emacs/23.2/lisp/cedet" "/usr/share/emacs/23.2/lisp/cedet/ede" ...)
#+END_EXAMPLE

Setting the =‘default-directory’= to a directory allows
=‘directory-dirs’= to return relative file names for subdirectories.

#+BEGIN_EXAMPLE
  (let ((default-directory "/usr/share/emacs/23.2/lisp"))
    (directory-dirs "."))
  ==> ("./calc" "./calendar" "./cedet" "./cedet/ede" ...)
#+END_EXAMPLE

***** Traversing

A file-tree-walk function has been added to the Emacs development tree.
Until it lands in your version, you can use this:

#+BEGIN_EXAMPLE
  (defun walk-path (dir action)
     "walk DIR executing ACTION with (dir file)"
     (cond ((file-directory-p dir)
            (or (char-equal ?/ (aref dir(1- (length dir))))
                (setq dir (file-name-as-directory dir)))
            (let ((lst (directory-files dir nil nil t))
                   fullname file)
              (while lst
                (setq file (car lst))
                (setq lst (cdr lst))
                (cond ((member file '("." "..")))
                      (t
                       (and (funcall action dir file)
                            (setq fullname (concat dir file))
                            (file-directory-p fullname)
                            (walk-path fullname action)))))))
           (t
            (funcall action
                     (file-name-directory dir)
                     (file-name-nondirectory dir)))))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (defun walk-path-visitor (dir file)
     "Called by walk-path for each file found"
     (message (concat  dir file)))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  (walk-path "~/" 'walk-path-visitor)
#+END_EXAMPLE

***** Path splitting

Splitting the path can be done with =‘split-string’= and with the slash.
Previously, Emacs would determine the character separating directory
names with =‘directory-sep-char’=. However, the variable is obselete
with Emacs 21.1.

#+BEGIN_EXAMPLE
  (split-string default-directory "/")
  ==> ("" "usr" "share" "emacs" "22.2" "lisp" "")
#+END_EXAMPLE

For splitting a path variable, Emacs already has the
=‘parse-colon-path’= function.

#+BEGIN_EXAMPLE
  (parse-colon-path (getenv "PATH"))
  ==> ("/usr/lib/qt-3.3/bin/" "/usr/kerberos/bin/" "/usr/local/bin/" "/usr/bin/" "/bin/" "/usr/local/sbin/" "/usr/sbin/" "/sbin/")
#+END_EXAMPLE

**** Processes

***** Running a program

Run a command without caring about its output.

#+BEGIN_EXAMPLE
  (async-shell-command "emacs")
#+END_EXAMPLE

Run a command and put its output in the current buffer.

#+BEGIN_EXAMPLE
  (shell-command "seq 8 12 | sort" t)
  10
  11
  12
  8
  9
#+END_EXAMPLE

Run a command and put its output in a new buffer.

#+BEGIN_EXAMPLE
  (shell-command "seq 8 12 | sort"
                 (get-buffer-create "*Standard output*"))
#+END_EXAMPLE

Run a command return its output as a string.

#+BEGIN_EXAMPLE
  (shell-command-to-string "seq 8 12 | sort")
#+END_EXAMPLE

Run a command return and insert its output at point in the current
buffer.

#+BEGIN_EXAMPLE
  (insert (shell-command-to-string "date"))
#+END_EXAMPLE

***** Handling signals

**** Sockets

***** Tcp client

***** Tcp server

Perhaps
[[http://www.emacswiki.org/emacs/EmacsEchoServer][EmacsEchoServer]] and
[[http://www.emacswiki.org/emacs/EmacsDaytimeServer][EmacsDaytimeServer]]
can be useful here. Also
[[https://github.com/stsquad/emacs_chrome/blob/master/servers/edit-server.el][Edit
with Emacs' edit-server.el]] which is a more complete server
implementation.

**** Keyboard events

Call function bound to key

#+BEGIN_EXAMPLE
  (funcall (key-binding (kbd "M-TAB")))
#+END_EXAMPLE

or

#+BEGIN_EXAMPLE
  (call-interactively (key-binding (kbd "M-TAB")))
#+END_EXAMPLE

**** Test code

Sometimes you might want to insert some demonstration code in a module.
The code should not be run when the module is loaded via =‘require’= or
=‘load’= but when you =‘eval-current-buffer’=. All you need to do add is
add a test condition of =‘eval-buffer-list’=:

#+BEGIN_EXAMPLE
  (dont-compile
    (when (eq (car eval-buffer-list) (current-buffer))
      ...))
#+END_EXAMPLE

*** AnIntroductionTOEmacsLispProgramming
**** 列表处理
***** what is lisp?
Lisp指的是“LISp Processing”（列表处理），和通过把列表放置在括号之间
来处理列表的编程语言。括号标记了列表的边界。有时，一个列表用一个单引号
或一个反引号开头。

列表是lisp的基础。
***** 列表(list)

在lisp中，数据和程序都以同样的方式表示。也就是说，它们都是由空格分隔的、
由括号括起来的单词、数字或者其他列表的列表。

如果一个程序看起来像数据，那么它很容易作为其它程序的数据。这是Lisp的一
个很用用的特性。

+ *原子(atom)* 指的是列表中使用的不可分割的部分。
一个列表可以拆分成不同的部分。
在一个列表中，原子由空格一一分隔。原子可以紧接着括号。
一个没有任何原子的列表称为 *空列表* 即()

原子和列表的书面表示都被称为符号表达式(symbolic expression)，或者称s-
表达式(sexp)。

*字符串*: 双引号中，不论是句子还是段落，都是一个原子，称字符串(string)

列表中的空格无关紧要。多余的空格和换行符只不过是为了方便人们阅读而设计
的。当Lisp读取表达式时，它剔除所有的多余的空格，只保留一个空格使原子分
隔开来。

Lisp中的一个列表——任何列表——都是一个准备运行的程序。运行列表，在Lisp中
称为 *求值(evaluate, eval)* 。
对列表求值，计算机将完成三件事情：
+ 只返回列表本身
+ 返回一个消息
+ 将列表中的第一个符号当做一个命令，然后执行这个命令

当单引号位于一个列表之前时，它告诉lisp不要对这个列表做任何操作，而是仅
仅返回其原样， 称为 *引用（quote）*
当一个列表前面没有引号时，这个列表的第一个符号就很特别了：它是计算机将
要执行的一条指令。如果该指令没有定义，则返回 *void-function* 错误消息。

*Lisp解释器* 的工作方式
- 首先，它查看列表前面是否有单引号，如果有，解释器则返回列表本
- 如果没有单引号，解释器就会查看列表的第一个元素，并判断它是否是一个函
  数定义，如果是函数，则解释器 执行函数定义中的指令。
- 否则，返回一条错误信息。

列表是lisp最基本的工作方式， 除此之外，lisp还有其他复杂方式
- 对一个符号求值，只要该符号前面既没有引号也没有括号。在这种情况下，
  lisp将符号作为变量返回其值，如果符号没有定义，则返回 *void-variable*
  错误信息。
- 特殊表(special form)，一些函数异常并以异常的方式运行。
- Lisp解释器首先解释内部列表，再处理外部列表。

字节编译
Lisp解释器可以解释两种类型的输入：lisp源代码，以及经过特殊处理的被称作
字节编译(byte compiled)的代码。
一般，字节编译的代码文件以.elc作为扩展名，lisp源码以.el作为扩展名。

对表达式进行求值(eval)之后，lisp解释器通常会返回一个值，要么是执行函数
指令的结果，要么是放弃那个函数并返回一个错误消息。
解释器在返回一个值的同时，它可以做些其他事情，例如移动光标或者拷贝一个
文件，这种动作称为 *附带作用(side effect)*

*$ eval-last-sexp*
C-x C-e
对最近一个的符号表达式进行求值

对一个数字求值，将得到这个数字本身——这是数字区别符号的地方。

在Lisp中可以将一个值赋给一个符号，一个符号的值可以是lisp中的任意表达式，
如一个符号，一个数字，一个列表或者一个字符串。有值的一个符号通常被称作
是 *变量(variable)*

*$ fill-column*
**** Practice Evaluation
***** Buffer Namespaces
(buffer-name)
(buffer-file-name)
*nil* is from the Latin word for 'nothing'

***** Getting Buffers
+ (current-buffer)  # Return the current buffer as a Lisp object.
+ (other-buffer) # Return most recently selected buffer other than BUFFER.

***** Switching Buffers
+ (switch-to-buffer BUFFER)
  - e.g. (switch-to-buffer (other-buffer))
+ (set-buffer BUFFER)  # Make buffer BUFFER-OR-NAME current for
  editing operations.

***** Buffer Size and the Location of Point
+ (buffer-size)  # Return the number of characters in the current buffer.
+ (point)  # Return value of point, as an integer.
+ (point-min) # Return the minimum permissible value of point in the
  current buffer.This is 1, unless narrowing (a buffer restriction) is
  in effect.
+ (point-max)  # Return the maximum permissible value of point in the
  current buffer.This is (1+ (buffer-size)), unless narrowing (a
  buffer restriction)is in effect, in which case it is less.

**** How To Write Function Definitions

***** The /defun/ Macro
1. define function
2. five parts
   1) name
   2) a list of arguments
   3) documentation(optional,recommanded)
      + the first line is a complete sentence
      + the second line is not indented
   4) interactive(optional)
   5) body
3. install, return the name. & change the definition
4. ; comment

***** Make a Function Interactive
+ (interactive "p")
+ C-u [NUM] M-x command
+ for the side effect
+ The "p" tells Emacs to pass the prefix argument to the function and
  use its value for the argument of the function.

***** Different Options for interactive
+ more than 20

***** let
+ special form
+ local variable
+ Local variables created by a /let/ expression retain their value
  only within the /let/ expression.
+ return the value of the last expresion in the body

****** parts of a let expression
+ let symbol
+ varlist
  + unintitialied(default nil)
  + var-value
+ body

#+BEGIN_EXAMPLE
  (let ((variable value)
        (variable value)
        variable
        ...)
        bdoy)
#+END_EXAMPLE

** API
+ [[help:string-to-char]]

** char
http://www.gnu.org/software/emacs/manual/html_node/elisp/Near-Point.html

+ char-after
+ char-before
+ followingchar
+ preceding-char

注： *char是Unicode码，是整形数字，不是字符串*

** List
+ http://emacswiki.org/emacs/ListModification#toc4
*** functions
+ delete
+ append
+ remove-duplicates
+ delete-dups
+ cons

*** car & cdr
+ http://blog.csdn.net/yunjie2008/article/details/5684983


car是短语'Contents of the Address part of the Register'；
cdr（'could-er'）是短语'Contents of the Decrement part of the
Register'。这些短语说明了Lisp是在多么原始的机器上被开发的。

**** car
一个list的CAR是list中的第一个元素。(rose violet daisy buttercup)的CAR
就是rose。

执行下面的代码：

(car '(rose violet daisy buttercup))执行这个语句后，回显区将显示rose。
有一个更合理的car函数：first。

car并不从list移除第一个元素；它只返回第一个元素。car执行完后list并没有
发生改变。car是一个无害的函数（'non-destructive'）。


**** cdr
CDR是list中的其余部分，cdr函数返回list中首元素后面的其它元素。因此'(rose
violet daisy buttercup)的CDR部分是(violet daisy buttercup)。

对：
(cdr '(rose violet daisy buttercup))求值将在回显区显示(violet daisy
butercup)

cdr也不从列表中移除元素。

附带说明一下：在这个例子中list前面加了单引号。如果不加，Lisp解释器把
rose当作函数执行。在这个例子中我们并不需要那样。

cdr的一个更合理的名称是：rest。

** let

*** let 在变量列表中定义局部变量时不能引用其它局部变量, 而应该在 body 中使用

#+BEGIN_SRC emacs-lisp

  ;; wrong usage
  (let ((ws (pwd))
        (len (- (length (split-string ws "/" t)) 1)) ; (void-variable ws)
        )
    (message ws)
    )


  ;; right usage
  (let ((ws (pwd))
        (len)
        )
    (message ws)
    (setq len  (- (length (split-string ws "/" t)) 1))
    )
#+END_SRC

** date                                                               :date:
*** date

(insert (format-time-string "%y-%m-%d-%H-%M"))16-01-02-16-10

** structure
*** Lisp cond and if

当分两种情况时，使用if函数即可，两种以上的情况时，使用cond函数比较方便。

1) 如果a>0,则b=+1；否则，b=-1
   #+BEGIN_EXAMPLE
     (if (a>0)
         (setq b +1)
      (setq b -1))
   #+END_EXAMPLE

2) 如果a>=100，则b=2；如果10<=a<100,则b=1；如果a<10,b=0
   #+BEGIN_EXAMPLE
     (cond
          ((>= a 100) (setq b 2))
          ((>= a 10) (setq b 1))
          (t (setq b 0))
          )
   #+END_EXAMPLE

** variable
*** auto-mode-alist
Alist of filename patterns vs corresponding major mode functions.

*** system-type
the value is a symbol indicating the type of operating
system you are using.
*** mode-line-format
*** emacs-version
;; version numbers of the version of emacs Emacs版本号
;; 在*scratch*使用C-j执行eval-last-sexp(C-x C-e)并在缓冲区显示结
果
*** user-emacs-directory
;;  the value is "~/emacs.d"
*** load-path

*** default-directory                                       :variable:dirs:

[[help:default-directory]]

Name of default directory of current buffer.  Should end with slash.

当前 buffer 的目录。

** Functions
*** current-time
(current-time) return the current time, as the number of
seconds since 1970-01-01 00:00:00 as a list of integer
*** expand-file-name
(expand-file-name NAME &optional DEFAULT-DIRECTORY)
converts filename NAME to absolute, and canonicalize(规范化)
it.

*** dolist
(dolist (VAR LIST [RESULT]) BODY...)
loop over a list(遍历一个链表，可以类比foreach)
*** directory-files
(directory-files DIRECTORY &optional FULL MATCH NOSORT)
return a list of names of files in DIRECTORY
*** file-regular-p
(file-regular-p FILENAME)
return t if FILENAME names regular file
*** when
(when COND BODY...)
if COND yeilds non-nil, then do BODY; else, return nil
*** load
(load FILE &optional NOERROR NOMESSAGE NOSUFFIX MUST-SUFFIX)
execute a file of Lisp code named FILE
*** setq-default
  (setq-default [VAR VALUE]...)
  set the default value of the variable VAR to VALUE
*** version<=
;; (version<= V1 V2)
;; return r if version V1 is lower(older) than or equal to V2
*** add-to-list
;;(add-to-list LIST-VAR ELEMENT &optional APPEND COMPARE-FN)
*** expand-file-name
;;(expand-file-name NAME &optional DEFAULT-DIRECTORY)
*** prequire
;;(require FEATURE &optional FILENAME NOERROR)
*** defconst
;;(defconst SYMBOL INITVALUE)
;;define SYMBOL as a constant value
*** message
(message FORMAT-STRING &rest ARGS)
Display a message at the bottom of the screen.

*** search-forward
(search-forward STRING &optional BOUND NOERROR COUNT)
Search forward from point for STRING.
Set point to the end of the occurrence found, and return point.

*** search-backward
(search-backward STRING &optional BOUND NOERROR COUNT)
Search backward from point for STRING.
Set point to the beginning of the occurrence found, and return point.

*** buffer-substring
(buffer-substring START END)
Return the contents of part of the current buffer as a string.
The two arguments START and END are character positions;
they can be in either order.

*** substring
(substring STRING FROM &optional TO)

Return a new string whose contents are a substring of STRING.
The returned string consists of the characters between index FROM
(inclusive) and index TO (exclusive) of STRING.  FROM and TO are
zero-indexed: 0 means the first character of STRING.  Negative values
are counted from the end of STRING.  If TO is nil, the substring runs
to the end of STRING.

*** call-process-shell-command
(call-process-shell-command COMMAND &optional INFILE BUFFER DISPLAY &rest ARGS)

Execute the shell command COMMAND synchronously in separate process.
The remaining arguments are optional.
The program's input comes from file INFILE (nil means `/dev/null').
Insert output in BUFFER before point; t means current buffer;
 nil for BUFFER means discard it; 0 means discard and don't wait.
BUFFER can also have the form (REAL-BUFFER STDERR-FILE); in that case,
REAL-BUFFER says what to do with standard output, as above,
while STDERR-FILE says what to do with standard error in the child.
STDERR-FILE may be nil (discard standard error output),
t (mix it with ordinary output), or a file name string.

*** with-temp-buffer
(with-temp-buffer &rest BODY)
Create a temporary buffer, and evaluate BODY there like `progn'.

*** string-match
(string-match REGEXP STRING &optional START)
Return index of start of first match for REGEXP in STRING, or nil.
Matching ignores case if `case-fold-search' is non-nil.

*** match-string
(match-string NUM &optional STRING)
Return string of text matched by last search.
NUM specifies which parenthesized expression in the last regexp.
pp Value is nil if NUMth pair didn't match, or there were less than NUM pairs.
Zero means the entire text matched by the whole regexp or whole string.
STRING should be given if the last search was by `string-match' on STRING.

*** length
(length SEQUENCE)
Return the length of vector, list or string SEQUENCE.

*** nth
(nth N LIST)
Return the Nth element of LIST.
N counts from zero.  If LIST is not that long, nil is returned.

*** progn
(progn BODY...)
Eval BODY forms sequentially and return value of last one.

*** message
(message FORMAT-STRING &rest ARGS)
Display a message at the bottom of the screen.

*** search-forward
(search-forward STRING &optional BOUND NOERROR COUNT)
Search forward from point for STRING.
Set point to the end of the occurrence found, and return point.

*** search-backward
(search-backward STRING &optional BOUND NOERROR COUNT)
Search backward from point for STRING.
Set point to the beginning of the occurrence found, and return point.

*** buffer-substring
(buffer-substring START END)
Return the contents of part of the current buffer as a string.
The two arguments START and END are character positions;
they can be in either order.

*** substring
(substring STRING FROM &optional TO)

Return a new string whose contents are a substring of STRING.
The returned string consists of the characters between index FROM
(inclusive) and index TO (exclusive) of STRING.  FROM and TO are
zero-indexed: 0 means the first character of STRING.  Negative values
are counted from the end of STRING.  If TO is nil, the substring runs
to the end of STRING.

*** call-process-shell-command
(call-process-shell-command COMMAND &optional INFILE BUFFER DISPLAY &rest ARGS)

Execute the shell command COMMAND synchronously in separate process.
The remaining arguments are optional.
The program's input comes from file INFILE (nil means `/dev/null').
Insert output in BUFFER before point; t means current buffer;
 nil for BUFFER means discard it; 0 means discard and don't wait.
BUFFER can also have the form (REAL-BUFFER STDERR-FILE); in that case,
REAL-BUFFER says what to do with standard output, as above,
while STDERR-FILE says what to do with standard error in the child.
STDERR-FILE may be nil (discard standard error output),
t (mix it with ordinary output), or a file name string.

*** with-temp-buffer
(with-temp-buffer &rest BODY)
Create a temporary buffer, and evaluate BODY there like `progn'.

*** string-match
(string-match REGEXP STRING &optional START)
Return index of start of first match for REGEXP in STRING, or nil.
Matching ignores case if `case-fold-search' is non-nil.

*** match-string
(match-string NUM &optional STRING)
Return string of text matched by last search.
NUM specifies which parenthesized expression in the last regexp.
pp Value is nil if NUMth pair didn't match, or there were less than NUM pairs.
Zero means the entire text matched by the whole regexp or whole string.
STRING should be given if the last search was by `string-match' on STRING.

*** length
(length SEQUENCE)
Return the length of vector, list or string SEQUENCE.

*** nth
(nth N LIST)
Return the Nth element of LIST.
N counts from zero.  If LIST is not that long, nil is returned.

*** progn
(progn BODY...)
Eval BODY forms sequentially and return value of last one.

*** point-min
(point-min)
Return the minimum permissible value of point in the current buffer.
This is 1, unless narrowing (a buffer restriction) is in effect.

*** point-max
(point-max)
Return the maximum permissible value of point in the current buffer.
This is (1+ (buffer-size)), unless narrowing (a buffer restriction)
is in effect, in which case it is less.

*** format
(format STRING &rest OBJECTS)
Format a string out of a format-string and arguments.
The first argument is a format control string.
The other arguments are substituted into it to make the result, a string.
The format control string may contain %-sequences meaning to substitute
the next available argument:
%s means print a string argument.  Actually, prints any object, with `princ'.
%d means print as number in decimal (%o octal, %x hex).
%X is like %x, but uses upper case.
%e means print a number in exponential notation.
%f means print a number in decimal-point notation.
%g means print a number in exponential notation
  or decimal-point notation, whichever uses fewer characters.
%c means print a number as a single character.
%S means print any object as an s-expression (using `prin1').

*** goto-char
(goto-char POSITION)
Set point to POSITION, a number or marker.

*** set-mark
(set-mark POS)
Set this buffer's mark to POS.  Don't use this function!
That is to say, don't use this function unless you want
the user to see that the mark has moved, and you want the previous
mark position to be lost.

*** delete-region
(delete-region START END)
Delete the text between START and END.
If called interactively, delete the region between point and mark.

*** other-buffer
(other-buffer &optional BUFFER VISIBLE-OK FRAME)
Return most recently selected buffer other than BUFFER.

*** search-forward-regexp
(search-forward-regexp REGEXP &optional BOUND NOERROR COUNT)

Search forward from point for regular expression REGEXP.
Set point to the end of the occurrence found, and return point.
An optional second argument bounds the search; it is a buffer position.
The match found must not extend after that position.
Optional third argument, if t, means if fail just return nil (no error).
  If not nil and not t, move to limit of search and return nil.
Optional fourth argument is repeat count--search for successive occurrences.

*** replace-string
(replace-string FROM-STRING TO-STRING &optional DELIMITED START END BACKWARD)
Replace occurrences of FROM-STRING with TO-STRING.
This function is usually the wrong thing to use in a Lisp program.
What you probably want is a loop like this:
  (while (search-forward FROM-STRING nil t)
    (replace-match TO-STRING nil t))

*** while
(while TEST BODY...)
If TEST yields non-nil, eval BODY... and repeat.

*** org-current-level
(org-current-level)
Return the level of the current entry, or nil if before the first headline.
The level is the number of stars at the beginning of the headline.

*** org-demote-subtree
(org-demote-subtree)
Demote the entire subtree.  See `org-demote'.

*** org-demote
(org-demote)
Demote the current heading lower down the tree.
If the region is active in `transient-mark-mode', demote all headings
in the region.

*** buffer-file-name
(buffer-file-name)

** elisp doxygen

doxygen 不支持 elisp 或 lisp 语言

** ElispProjects                                                    :project:
*** eshell pwd                                                        :pwd:
#+begin_src emacs-lisp


  (defun tagerill:eshell-at-pwd()
    (interactive)
    (let ((current_path (pwd)))
      (eshell (concat "*"
                     current_path
                     "*"
                     ))
      )
    )
  (setq current_path (pwd))
  (split-string current_path "/")

  ;; (shell &optional buffer)

  ;; run an inferior shell, with i/o through buffer (which defaults to `*shell*').
  ;; interactively, a prefix arg means to prompt for buffer.
  ;; if `default-directory' is a remote file name, it is also prompted
  ;; to change if called with a prefix arg.

  ;; if buffer exists but shell process is not running, make new shell.
  ;; if buffer exists and shell process is running, just switch to buffer.
  ;; program used comes from variable `explicit-shell-file-name',
  ;;  or (if that is nil) from the eshell environment variable,
  ;;  or (if that is nil) from `shell-file-name'.
  ;; if a file `~/.emacs_shellname' exists, or `~/.emacs.d/init_shellname.sh',
  ;; it is given as initial input (but this may be lost, due to a timing
  ;; error, if the shell discards input when it starts up).


  ;; (eshell &optional arg)

  ;; create an interactive eshell buffer.
  ;; the buffer used for eshell sessions is determined by the value of
  ;; `eshell-buffer-name'.  if there is already an eshell session active in
  ;; that buffer, emacs will simply switch to it.  otherwise, a new session
  ;; will begin.  a numeric prefix arg (as in `c-u 42 m-x eshell ret')
  ;; switches to the session with that number, creating it if necessary.  a
  ;; nonnumeric prefix arg means to create a new session.  returns the
  ;; buffer selected (or created).
#+end_src
*** ascii 码表 索引                                                 :ascii:
**** M-x man RET ascii RET
**** defun
#+BEGIN_SRC emacs-lisp
  (defun tagerill:ascii(input-char)
    "根据输入字符输出对应的ascii码值"
    (interactive "schar: ")
    (let ((target-char (string-to-char input-char))
          (i 0))
      ;; 轮询
      (while (and (< i 128) (not (equal i target-char)))
        (setq i (+ 1 i))
        )
      (message "The ascii code of %s is %4d %4x %s" input-char i i)
      )
    )

  ;; string-to-char is a built-in function in `C source code'.
  ;; (string-to-char STRING)
  ;; Return the first character in STRING.


#+END_SRC

*** 智能逗号
*自动增加一个空格*

+ 解除绑定： self-insert-command
+ 重新绑定
+ 最好不要使用global-set-key修改按键的基本绑定，使用define-key

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd ",") nil)
  (global-set-key (kbd ",") (lambda()
                             (interactive)
                             (progn
                               (insert ",")
                               (insert " ")
                               )))
#+END_SRC

*** org 跳转
目标
+ 保存当前point, 然后折叠大纲
+ 返回位点

#+BEGIN_SRC emacs-lisp
  ;; 利用堆栈的思想进行工作流程的跳转
  ;; 在跳转之前将当前point保存到寄存器中，之后可以快速跳回
  ;; 支持嵌套，最多9层，寄存器1-9
  ;; 特别支持了org-mode

  (setq tagerill:work-flow ())


  (defun tagerill:work-jump-push()
    "jump to another heading and jump back"
    (interactive)
    (if (not tagerill:work-flow)
        (setq register-available 1)
      (setq register-available
            (+ 1 (mod (car tagerill:work-flow) 10)))
      )
    (point-to-register register-available)
    ;; 对寄存器队列进行编码，个位表示寄存器，十位表示org标题等级
    (if (equal major-mode 'org-mode)
        (progn
          (add-to-list 'tagerill:work-flow
                       (+ register-available (* 10
                                                (let ((org-current-level 0))
                                                  (search-backward-regexp "^*+ " nil nil)
                                                  (while (=  42 (char-after (point))) ; * ASCII 42
                                                    (setq org-current-level (+ org-current-level 1))
                                                    (forward-char)
                                                    )
                                                  (message "ok %d" org-current-level)
                                                  org-current-level
                                                  ))))
          (org-shifttab 1)
          (goto-char (point-min))

          )
      (add-to-list 'tagerill:work-flow register-available)
      )
    )

  (defun tagerill:work-jump-pop()
    "jump to the rejgester a"
    (interactive)
    (let ((target-register (mod (car tagerill:work-flow) 10))
          (target-org-level (/ (car tagerill:work-flow)  10)))
      (if (not (equal major-mode 'org-mode))
          (jump-to-register target-register)
        (progn (jump-to-register target-register)
               (org-shifttab 1)
               (while (> target-org-level 0)
                 (jump-to-register target-register)
                 (move-beginning-of-line nil)
                 (org-cycle)
                 (setq target-org-level (- target-org-level 1))
                 )
               (jump-to-register target-register))
        )
      (setq tagerill:work-flow (delete (car tagerill:work-flow) tagerill:work-flow))
      )
    )
  (global-set-key  "\C-z[" 'tagerill:work-jump-push)
  (global-set-key "\C-z]" 'tagerill:work-jump-pop)


  ;; (setq a '(1 2))
  ;; (delete (car a) a)

  ;; *
  ;; 1
  ;; (setq a ())
  ;; (add-to-list 'a 2)
  ;; (/ 2 10)
  ;; C-x r SPC runs the command point-to-register, which is an interactive
  ;; compiled Lisp function in `register.el'.

  ;; It is bound to C-x r SPC, C-x r C-SPC, C-x r C-@.

  ;; (point-to-register REGISTER &optional ARG)

  ;; Store current location of point in register REGISTER.
  ;; With prefix argument, store current frame configuration.
  ;; Use C-x r j to go to that location or restore that configuration.
  ;; Argument is a character, naming the register.


  ;; C-x r j runs the command jump-to-register, which is an interactive
  ;; compiled Lisp function in `register.el'.

  ;; It is bound to C-x r j.

  ;; (jump-to-register REGISTER &optional DELETE)

  ;; Move point to location stored in a register.
  ;; If the register contains a file name, find that file.
  ;; (To put a file name in a register, you must use `set-register'.)
  ;; If the register contains a window configuration (one frame) or a frameset
  ;; (all frames), restore that frame or all frames accordingly.
  ;; First argument is a character, naming the register.
  ;; Optional second arg non-nil (interactively, prefix argument) says to
  ;; delete any existing frames that the frameset doesn't mention.
  ;; (Otherwise, these frames are iconified.)


  ;; (org-cycle &optional ARG)

  ;; TAB-action and visibility cycling for Org-mode.

  ;; This is the command invoked in Org-mode by the TAB key.  Its main purpose
  ;; is outline visibility cycling, but it also invokes other actions
  ;; in special contexts.

  ;; - When this function is called with a prefix argument, rotate the entire
  ;;   buffer through 3 states (global cycling)
  ;;   1. OVERVIEW: Show only top-level headlines.
  ;;   2. CONTENTS: Show all headlines of all levels, but no body text.
  ;;   3. SHOW ALL: Show everything.


  ;; org-show-context is a compiled Lisp function in `org.el'.

  ;; (org-show-context &optional KEY)

  ;; Make sure point and context are visible.
  ;; How much context is shown depends upon the variables
#+END_SRC

*** 替换example block 为 src block
#+BEGIN_SRC xml
    <launch>
      <node pkg="nodelet" type="nodelet" name="standalone_nodelet"  args="manager"/>

      <node pkg="nodelet" type="nodelet" name="Plus"
            args="load nodelet_tutorial_math/Plus standalone_nodelet">
        <remap from="/Plus/out" to="remapped_output"/>
      </node>
      <rosparam param="Plus2" file="$(find nodelet_tutorial_math)/plus_default.yaml"/>
      <node pkg="nodelet" type="nodelet" name="Plus2" args="load nodelet_tutorial_math/Plus standalone_nodelet">
        <rosparam file="$(find nodelet_tutorial_math)/plus_default.yaml"/>
      </node>
      <node pkg="nodelet" type="nodelet" name="Plus3" args="standalone nodelet_tutorial_math/Plus">
        <param name="value" type="double" value="2.5"/>
        <remap from="Plus3/in" to="Plus2/out"/>
      </node>
    </launch>
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun tagerill:replace_example_block_with_sepecific_src_block(lang)
    "replace example block in org mode with src block of specific language.
     use with pandoc to org.
     The point should be in the block
  "
    (interactive "slanguage: ")
    (save-excursion
       (let ((_begin (search-backward "#+BEGIN_EXAMPLE"))
             (_end (search-forward "#+END_EXAMPLE"))
             (_from_string_1 "#+BEGIN_EXAMPLE")
             (_to_string_1 (concat "#+BEGIN_SRC" " " lang))
             (_from_string_2 "#+END_EXAMPLE")
             (_to_string_2 "#+END_SRC"))
         (replace-string _from_string_1 _to_string_1 nil _begin _end)
         (replace-string _from_string_2 _to_string_2 nil _begin _end)
         )
       )
    )


  ;; (replace-string FROM-STRING TO-STRING &optional DELIMITED START END
  ;; BACKWARD)

  ;; Replace occurrences of FROM-STRING with TO-STRING.
  ;; Preserve case in each match if `case-replace' and `case-fold-search'
  ;; are non-nil and FROM-STRING has no uppercase letters.
  ;; (Preserving case means that if the string matched is all caps, or capitalized,
  ;; then its replacement is upcased or capitalized.)

  ;; Ignore read-only matches if `query-replace-skip-read-only' is non-nil,
  ;; ignore hidden matches if `search-invisible' is nil, and ignore more
  ;; matches using `isearch-filter-predicate'.

  ;; If `replace-lax-whitespace' is non-nil, a space or spaces in the string
  ;; to be replaced will match a sequence of whitespace chars defined by the
  ;; regexp in `search-whitespace-regexp'.

  ;; Third arg DELIMITED (prefix arg if interactive), if non-nil, means replace
  ;; only matches surrounded by word boundaries.  A negative prefix arg means
  ;; replace backward.

  ;; Operates on the region between START and END (if both are nil, from point
  ;; to the end of the buffer).  Interactively, if Transient Mark mode is
  ;; enabled and the mark is active, operates on the contents of the region;
  ;; otherwise from point to the end of the buffer.

#+END_SRC
*** pandoc html to org                                             :pandoc:
**** 目标
+ 使用pandoc将网页转换为org
+ 过滤
+ 去除冗余信息

**** 设计
1. 语言： sh vs *elisp*
2. 步骤
   + 确定网页内容值得花费一番功夫
     - 内容质量
     - 内容格式
     - 待定的网页
       - roswiki
       - gazebo tutorial
       - gnu emacs manual

   + 获取url源码
   + 过滤尾部多余信息
     - 主要是正文后的评论等
     - 注：头部信息定义了javascript，对富文本不可或缺
     - div块，注意可以嵌套
   + pandoc 转换html为org
   + 去除html多余标签
     - 需要不断收集整理
   + org-mode格式化
   + org标题降级
   + 手动删除无用信息

**** 问题
div块暂时去除不了，嵌套问题，

**** pandoc url to org
#+BEGIN_SRC emacs-lisp
  ;; func: 将网页转换为org
  ;; @param: url
  ;; @param: org headings level 删除
  ;; note： <div>标签可能会嵌套，删除时需要细致
  ;;       在org-mode中调用

  (defun tagerill:url_to_org (url)
    "turn url to org"
    (interactive "surl: ")
    (setq current_level (org-current-level))
    (setq cmd (concat "pandoc -t org \"" url "\"")) ;url中可能含有特殊字符，会影响shell命令执行，所以使用引号括起
    (with-temp-buffer
      (org-mode)
      (if (equal 0 (call-process-shell-command cmd nil t nil))
          (progn
            (goto-char (point-min))
            (save-excursion
              (setq header_end (search-forward-regexp "\\(^\\)\\(* \\)"))) ;匹配以*号和空格开头的行，好不容易 "^* "即可
            (delete-region (point-min) (- header_end 2)) ;删除头部冗余信息

            ;; 替换\_为_,pandoc在转换网页为org-mode时，将_转换为\_,对我是多余的
            (goto-char (point-min))
            (while (search-forward "\\_" nil t) ; 这里需要进行转义，note
              (replace-match "_" nil t))
            ;; (mark-whole-buffer)

            ;; 删除所有#_BEGIN_HTML段

            (while (search-forward "#+BEGIN_HTML" nil t)
              (setq html_begin (- (point) 12))
              (setq html_end (search-forward "#+END_HTML"))
              (delete-region html_begin html_end))

            ;; 多余空行处理

            ;; div块处理

            ;; org headings降级
            (org-mode)
            (goto-char (point-min))
            (setq level_to_be_demote current_level)
            (while (search-forward-regexp "\\(^\\)\\(* \\)" nil t)
              (while (> level_to_be_demote 0)
                (org-demote-subtree)
                (setq level_to_be_demote (- level_to_be_demote 1)))
              (setq level_to_be_demote current_level)
              )
            (kill-ring-save (point-min) (point-max))
            (setq convert_result 1)
            )
        (setq convert_result 0)
        ))
    (if convert_result
        (save-excursion
          (yank))
    ))




  ;; (point-min)
  ;; Return the minimum permissible value of point in the current buffer.
  ;; This is 1, unless narrowing (a buffer restriction) is in effect.


  ;; (point-max)
  ;; Return the maximum permissible value of point in the current buffer.
  ;; This is (1+ (buffer-size)), unless narrowing (a buffer restriction)
  ;; is in effect, in which case it is less.

  ;; (format STRING &rest OBJECTS)
  ;; Format a string out of a format-string and arguments.
  ;; The first argument is a format control string.
  ;; The other arguments are substituted into it to make the result, a string.
  ;; The format control string may contain %-sequences meaning to substitute
  ;; the next available argument:
  ;; %s means print a string argument.  Actually, prints any object, with `princ'.
  ;; %d means print as number in decimal (%o octal, %x hex).
  ;; %X is like %x, but uses upper case.
  ;; %e means print a number in exponential notation.
  ;; %f means print a number in decimal-point notation.
  ;; %g means print a number in exponential notation
  ;;   or decimal-point notation, whichever uses fewer characters.
  ;; %c means print a number as a single character.
  ;; %S means print any object as an s-expression (using `prin1').

  ;; (goto-char POSITION)
  ;; Set point to POSITION, a number or marker.

  ;; (set-mark POS)
  ;; Set this buffer's mark to POS.  Don't use this function!
  ;; That is to say, don't use this function unless you want
  ;; the user to see that the mark has moved, and you want the previous
  ;; mark position to be lost.

  ;; (delete-region START END)
  ;; Delete the text between START and END.
  ;; If called interactively, delete the region between point and mark.


  ;; (other-buffer &optional BUFFER VISIBLE-OK FRAME)
  ;; Return most recently selected buffer other than BUFFER.


  ;; (search-forward-regexp REGEXP &optional BOUND NOERROR COUNT)

  ;; Search forward from point for regular expression REGEXP.
  ;; Set point to the end of the occurrence found, and return point.
  ;; An optional second argument bounds the search; it is a buffer position.
  ;; The match found must not extend after that position.
  ;; Optional third argument, if t, means if fail just return nil (no error).
  ;;   If not nil and not t, move to limit of search and return nil.
  ;; Optional fourth argument is repeat count--search for successive occurrences.


  ;; (replace-string FROM-STRING TO-STRING &optional DELIMITED START END BACKWARD)
  ;; Replace occurrences of FROM-STRING with TO-STRING.
  ;; This function is usually the wrong thing to use in a Lisp program.
  ;; What you probably want is a loop like this:
  ;;   (while (search-forward FROM-STRING nil t)
  ;;     (replace-match TO-STRING nil t))

  ;; (while TEST BODY...)
  ;; If TEST yields non-nil, eval BODY... and repeat.


  ;; (org-current-level)
  ;; Return the level of the current entry, or nil if before the first headline.
  ;; The level is the number of stars at the beginning of the headline.

  ;; (org-demote-subtree)
  ;; Demote the entire subtree.  See `org-demote'.

  ;; (org-demote)
  ;; Demote the current heading lower down the tree.
  ;; If the region is active in `transient-mark-mode', demote all headings
  ;; in the region.

  \_
#+END_SRC

+ 没有实现, (format)函数使用错误，返回nil
***** 结论
花费两个小时写这么一个不完整的函数，值么？ 不知道

*** org anchor  仅展开当前point entry的函数不会写

1. 目标
   + 锚的快速跳转（内部链接）
   + 在在ROS.org中跳转到指定锚
   + 保存现场
   + region 和 光标下单词
   + 增加前缀可以手动输入锚

2. 函数
   + region-begining
   + region-end
   + mark-active


#+BEGIN_SRC emacs-lisp
    (defun tagerill:jump-to-ros-anchor()
      "jump to anchor in ros.org
         verion 0.1"
      (interactive)
      (save-excursion  (tagerill:work-jump-push))
      (if (not mark-active)
          (progn (backward-word)
                 (push-mark)
                 (forward-word))
        )
      (setq target-anchor (buffer-substring (region-beginning)
                                            (region-end)))
      (find-file (expand-file-name "~/Tiger/Journal/ROS.org"))
      (end-of-buffer)
      (insert "[[" target-anchor "]]")
      (org-open-at-point)
      )
  (global-set-key "\C-zr" 'tagerill:jump-to-ros-anchor)
  ;; optenv


    (defun ded/org-show-next-heading-tidily ()
      "Show next entry, keeping other entries closed."
      (if (save-excursion (end-of-line) (outline-invisible-p))
          (progn (org-show-entry) (show-children))
        (outline-next-heading)
        (unless (and (bolp) (org-on-heading-p))
          (org-up-heading-safe)
          (hide-subtree)
          (error "Boundary reached"))
        (org-overview)
        (org-reveal t)
        (org-show-entry)
        (recenter-top-bottom)
        (show-children)
        (recenter-top-bottom)))

    (defun ded/org-show-previous-heading-tidily ()
      "Show previous entry, keeping other entries closed."
      (let ((pos (point)))
        (outline-previous-heading)
        (unless (and (< (point) pos) (bolp) (org-on-heading-p))
          (goto-char pos)
          (hide-subtree)
          (error "Boundary reached"))
        (org-overview)
        (org-reveal t)
        (org-show-entry)
        (recenter-top-bottom)
        (show-children)
        (recenter-top-bottom)))
    ;; optenv



    ;; mark-active is a variable defined in `C source code'.
    ;; Its value is nil
    ;; Local in buffer *Org Src journal.org[ emacs-lisp ]*; global value is the same.
    ;; Automatically becomes permanently buffer-local when set.


    ;; set-mark is a compiled Lisp function in `simple.el'.

    ;; (set-mark POS)

    ;; Set this buffer's mark to POS.  Don't use this function!
    ;; That is to say, don't use this function unless you want
    ;; the user to see that the mark has moved, and you want the previous
    ;; mark position to be lost.

    ;; Normally, when a new mark is set, the old one should go on the stack.
    ;; This is why most applications should use `push-mark', not `set-mark'.
#+END_SRC

*** 在region前后增加文本
+
  http://emacs.stackexchange.com/questions/5430/org-mode-doesnt-seem-to-be-exporting-listings-minted-correctly

#+BEGIN_SRC emacs-lisp
  (defun tag-word-or-region (text-begin text-end)
    "Surround current word or region with given text."
    (interactive "sStart tag: \nsEnd tag: ")
    (let (bds)
      (if (and transient-mark-mode mark-active)
          (progn
            (goto-char (region-end))
            (insert text-end)
            (goto-char (region-beginning))
            (insert text-begin))
        (progn
          (setq bds (bounds-of-thing-at-point 'symbol))
          (goto-char (cdr bds))
          (insert text-end)
          (goto-char (car bds))
          (insert text-begin)))))
#+END_SRC

*** Elisp 备份文件
#+BEGIN_SRC emacs-lisp

  ;; version 0.01
  ;; (defun file_backup()
  ;;   "backup current file"
  ;;   (interactive)
  ;;   (setq filename buffer-file-name)

  ;;   ;; (setq current_time
  ;;   ;;       (call-process-shell-command "date" nil t nil " +%y%m%d-%H-%M"))
  ;;   (setq current_time
  ;;         (format-time-string "%Y%m%d%H%M"))
  ;;   (setq backup_file (concat filename  "_" current_time ".backup"))
  ;;   ;; 调用cp命令，会直接覆盖以前的备份文件，可以加上时间标志
  ;;   ;; (call-process-shell-command "cp" nil nil nil filename backup_file)
  ;;   (write-file backup_file)
  ;;   )


  ;; version 0.1
  (defun tagerill:file_backup()
    "backup current file with timestamp and suffix"
    (interactive)
    (write-file
     (concat
      (buffer-file-name)
      "_"
      (format-time-string "%y-%m-%d-%H-%M")
      ".backup"
      )))
  (global-set-key "\C-cub" 'tagerill:file_backup)

#+END_SRC

1. call-process-shell-command 的返回值

   If BUFFER is 0, `call-process-shell-command' returns immediately
   with value nil.

   Otherwise it waits for COMMAND to terminate and returns a numeric
   exit status or a signal description string.

   所以将标准输出赋值给变量并不是意想的那么直接。

2. shell command VS elisp command
   + elisp command具有可移植性，优先
   + “继承” message

3. 自定义的elisp函数
   + 函数名前缀tagerill:
   + 快捷键前缀：C-c u

*** 获取当前路径相对于根目录(/)的相对路径

1. why: wine 启动目录是当前buffer所在路径，而文件名参数需要是相对路径

2. example

   对于路径 */home/ben/Wally/Journal/*   返回 *../../../../*

3. steps
   1) 获取 buffer 路径字符串，(pwd)

   2) 分割字符串

   3) 构造新的字符串并返回

4. code

   #+BEGIN_SRC emacs-lisp
     (defun buffer-relative-ws()
       """ Return the relative path to / of current buffer"""
       (let ((ws (pwd)) (len) (result ""))
         (message ws)
         (setq len (- (length (split-string ws "/" t)) 1))
         (while (> len 0)                    ; 0 is not nil(nil & [])
           (setq result (format "%s../" result))
           (setq len (- len 1))
           )
         result                              ; is this OK?
         ))
   #+END_SRC

5. test

   #+BEGIN_SRC emacs-lisp
     (setq org-file-apps '((auto-mode . emacs)
                           ("\\.mm\\'" . default)
                           ("\\.x?html?\\'" . default)
                           ;; ("\\.pdf\\'" . "evince %s")
                           ("\\.pdf\\'" . (call-process-shell-command
                                           (format
                                            "wine \'C:\\Program Files\\Foxit Software\\Foxit Reader\\FoxitReader.exe\' %s%s"
                                            (buffer-relative-ws) file)))
                           ("\\.caj\\'" . (call-process-shell-command (format
                                                                       "wine \'C:\\Program Files\\TTKN\\CAJViewer 7.1\\CAJViewer.exe\' %s%s"
                                                                       (buffer-relative-ws) file)))
                           ))
   #+END_SRC

   费了好大力气，才把 org-file-apps 定义好

** [[http://blog.csdn.net/yunjie2008/article/details/5684983][Programming in Emacs Lisp笔记（七）基础函数:car, cdr, cons]]         :blog:


基础函数:car, cdr, cons
Lisp中car，cdr和cons都是基础函数。cons用于构造lists，car和cdr用于分割lisp。

奇怪的命名
cons函数的名称并非没有含意：它是单词'construct'的缩写。car是短语'Contents
of the Address part of the Register'；cdr（'could-er'）是短语'Contents
of the Decrement part of the
Register'。这些短语说明了Lisp是在多么原始的机器上被开发的。

car和cdr
一个list的CAR是list中的第一个元素。(rose violet daisy
buttercup)的CAR就是rose。

执行下面的代码：

(car '(rose violet daisy buttercup))执行这个语句后，回显区将显示rose。
有一个更合理的car函数：first。

car并不从list移除第一个元素；它只返回第一个元素。car执行完后list并没有发生改变。car是一个无害的函数（'non-destructive'）。

CDR是list中的其余部分，cdr函数返回list中首元素后面的其它元素。因此'(rose
violet daisy buttercup)的CDR部分是(violet daisy buttercup)。

对：

(cdr '(rose violet daisy buttercup))求值将在回显区显示(violet daisy
butercup)
cdr也不从列表中移除元素。

附带说明一下：在这个例子中list前面加了单引号。如果不加，Lisp解释器把rose当作函数执行。在这个例子中我们并不需要那样。

cdr的一个更合理的名称是：rest。

当car和cdr应用于符号组成的列表时，比如(pine fir oak
maple)，函数car将返回列表中的pine元素，并且pine不会被括号包含。这个list的CDR也是一个list，(fir
oak maple)。

如果car和cdr应用于包含list的list，第一个元素也是list。car将返回list中的第一个list元素。

car和cdr是无害的，它们不修改list中的数据。这是非常重要的一点。

在第一章中曾说过：“在Lisp中某些原子类型，比如数组，可以被分隔成更小的部分；但这种机制与分割list的机制是不同的。这与Lisp的早期
概念有关，list中的原子是不可分隔的。”（car和cdr也并不修改list。）car和cdr是用于分割list的基础函数。但它们不能用于分割数
组或者访问数组中的一部分。数组被看作原子类型。另一个基础函数cons可以用于构造列表，但也不能用于数组。

cons
cons函数是构造list的函数。例：

(cons 'pine '(fir oak maple))执行时回显区将显示(pine fir oak
maple)。cons将新的元素放到列表的开头，它将新元素推入list中。***
构造一个listcons函数必须要有一个可以被插入的list参数。构造一个list时，至少要提供一个空的list。下面是一些构造list的语句：<src
lang="lisp">(cons 'buttercup ())  => (buttercup)(cons 'daisy
'(buttercup))  => (daisy buttercup)(cons 'violet '(daisy
buttercup))  => (violet daisy buttercup)(cons 'rose '(violet daisy
buttercup))  => (rose violet daisy
buttercup)</src>在第一个例子中，()是一个空的list并且用空list和buttercup构造了一个list。可以看到空list并没有显示在被构造的list中。
只能看到(buttercup)。空list不会被当作一个list元素，因为空list中没有任何元素。空list是不可见的。
检查list的长度：length
可以用函数length检查list中的元素数量：

(length '(buttercup))  => 1(length '(daisy buttercup))  =>
2(length (cons 'violet '(daisy buttercup)))  =>
3也可以将length应用于空list上：
(length ())  => 0当调用length函数而不传递参数给它时：

(length)你将得到一个错误信息：
Wrong number of arguments: #<subr length="">,
0</subr>这表示函数接收到了错误的参数个数，0，函数需要一定数量的参数。在这里length需要一个参数，参数应该是一个list。（一个list也是一个参数而不管list中有多少元素）
错误信息中的#是函数的名称。#

nthcdr
nthcdr是一个与cdr相关的函数。它用于多次获取list的CDR部分。

如果获取(pine fir oak maple)的CDR部分，将得到(fir oak
maple)。如果在这个结果上再重复操作将得到(oak
maple)。（如果你在原来的list上取CDR，将一直得到同样的结果，因为原来的list并没有被修改）如果继续下去，将得到一个空的list，这
时将不会显示为()，而是显示为nil。 例：

(cdr '(pine fir oak maple))  =>(fir oak maple)(cdr '(fir oak
maple))  => (oak maple)(cdr '(oak maple))  =>(maple)(cdr
'(maple))  => nil(cdr 'nil)  => nil(cdr ())  =>
nil或者用下面的方式：
(cdr (cdr '(pine fir oak maple)))  => (oak
maple)nthcdr函数与多次调用cdr类似。下面的例子中，参数2和一个list被传递给nthcdr，返回的值与原list相比，不含前面两个元素，相当于在list上执行了两次cdr。

(nthcdr 2 '(pine fir oak maple))  => (oak maple);; Leave the list as
it was.(nthcdr 0 '(pine fir oak maple))  => (pine fir oak maple);;
Return a copy without the first element.(nthcdr 1 '(pine fir oak
maple))  => (fir oak maple);; Return a copy of the list without three
elements.(nthcdr 3 '(pine fir oak maple))  => (maple);; Return a copy
lacking all four elements.(nthcdr 4 '(pine fir oak maple))  => nil;;
Return a copy lacking all elements.(nthcdr 5 '(pine fir oak maple))
=> nilnth
nthcdr重复取list的CDR部分。nth函数取nthcdr返回值的CAR部分。它返回list中的Nth元素。

如果nth没有被因为效率原因而用C定义，那么nth的定义将会是下面的样子：

(defun nth (n list)  "Returns the Nth element of LIST.N counts from
zero.  If LIST is not that long, nil is returned."  (car (nthcdr n
list)))（最初的nth在定义在Emacs
Lisp文件subr.el中，但后来在1980年被重新用C实现。）
元素计数从0开始而不是1。这就是说list的第一个元素CAR是第零个元素。

(nth 0 '("one" "two" "three"))  => "one"(nth 1 '("one" "two"
"three"))  =>
"two"注意：nth与nthcdr和cdr一样，也不修改原来的list，也是一个无害函数。
setcar
从命名上就可以猜想到，setcdr和setcar函数用于设置list的CAR或CDR部分为一个新值。与car和cdr不同，它们将修改原始的list。

例：

(setq animals '(antelope giraffe lion tiger))animals  => (antelope
giraffe lion tiger)(setcar animals 'hippopotamus)animals  =>
(hippopotamus giraffe lion
tiger)可以看到setcar函数并非像cons那样向list中添加元素；它将giraffe替换为hippopotamus；它修改了list。
setcdr
setcdr与setcar函数类似，它用于替换list中除首元素外的其它元素。

例：

(setq domesticated-animals '(horse cow sheep
goat))domesticated-animals  => (horse cow sheep goat)(setcdr
domesticated-animals '(cat dog))domesticated-animals  => (horse cat
dog)
* vim                                                                :vi:VIM:

** reference

+ [[https://github.com/vim/vim][GitHub]]
+ [[http://www.vim.org/index.php][Homepage]]
** evil                                                               :evil:

*** reference

+ [[https://bitbucket.org/lyro/evil/wiki/Home][Homepage]]
+ [[http://www.emacswiki.org/emacs/Evil][EmacsWiki]]
+ [[~/Wally/Reference/Manual/EvilMaunal.pdf][EvilMaunal.pdf]]
+ [[http://dnquark.com/blog/2012/02/emacs-evil-ecumenicalism/][emacs-evil-ecumenicalism]]
+ http://www.douban.com/group/topic/34775654/
+ [[https://github.com/edwtjo/evil-org-mode][Github: evil-org-mode]]

*** basic settings

#+BEGIN_SRC emacs-lisp
  ;; init-vi.el -- vim related setting

  (require 'evil)
  (evil-mode 1)
  (setq evil-default-state 'emacs)

  (define-key evil-insert-state-map "\C-d" 'evil-change-to-previous-state)
  (define-key evil-normal-state-map "\C-d" 'evil-force-normal-state)
  (define-key evil-replace-state-map "\C-d" 'evil-normal-state)
  (define-key evil-visual-state-map "\C-d" 'evil-exit-visual-state)

  (provide 'init-vi)
  ;; init-vi.el ends here

#+END_SRC
*** evil-org-mode

暂时不需要，仅在码代码时使用 vi。org-mode 中还是使用 Emacs 绑定。

** fundermental
*** installation                                                  :install:

- [[http://www.vim.org/download.php][download page]]
- https://github.com/yangyangwithgnu/use_vim_as_ide#6



1. basic
   - configure
   - make
   - make install

2. Enable features

   #+BEGIN_EXAMPLE
   ./configure --with-features=huge --enable-rubyinterp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config/ --enable-perlinterp --enable-gui=gtk2 --enable-cscope --prefix=/usr --enable-luainterp
   #+END_EXAMPLE

3. 重新 configure 之前需要 make disclean

   #+BEGIN_EXAMPLE
   configure: error: run `make distclean' and/or `rm auto/config.cache' and start over
   #+END_EXAMPLE

*** help

$ vim  --help

#+BEGIN_EXAMPLE
  VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Dec 23 2015 15:33:20)

  用法: vim [参数] [文件 ..]       编辑指定的文件
    或: vim [参数] -               从标准输入(stdin)读取文本
    或: vim [参数] -t tag          编辑 tag 定义处的文件
    或: vim [参数] -q [errorfile]  编辑第一个出错处的文件

  参数:
     --                   在这以后只有文件名
     -v                   Vi 模式 (同 "vi")
     -e                   Ex 模式 (同 "ex")
     -E                   Improved Ex mode
     -s                   安静(批处理)模式 (只能与 "ex" 一起使用)
     -d                   Diff 模式 (同 "vimdiff")
     -y                   容易模式 (同 "evim"，无模式)
     -R                   只读模式 (同 "view")
     -Z                   限制模式 (同 "rvim")
     -m                   不可修改(写入文件)
     -M                   文本不可修改
     -b                   二进制模式
     -l                   Lisp 模式
     -C                   兼容传统的 Vi: 'compatible'
     -N                   不完全兼容传统的 Vi: 'nocompatible'
     -V[N][fname]         Be verbose [level N] [log messages to fname]
     -D                   调试模式
     -n                   不使用交换文件，只使用内存
     -r                   列出交换文件并退出
     -r (跟文件名)                恢复崩溃的会话
     -L                   同 -r
     -T <terminal>        设定终端类型为 <terminal>
     -u <vimrc>           使用 <vimrc> 替代任何 .vimrc
     --noplugin           不加载 plugin 脚本
     -P[N]                打开 N 个标签页 (默认值: 每个文件一个)
     -o[N]                打开 N 个窗口 (默认值: 每个文件一个)
     -O[N]                同 -o 但垂直分割
     +                    启动后跳到文件末尾
     +<lnum>              启动后跳到第 <lnum> 行
     --cmd <command>      加载任何 vimrc 文件前执行 <command>
     -c <command>         加载第一个文件后执行 <command>
     -S <session>         加载第一个文件后执行文件 <session>
     -s <scriptin>        从文件 <scriptin> 读入正常模式的命令
     -w <scriptout>       将所有输入的命令追加到文件 <scriptout>
     -W <scriptout>       将所有输入的命令写入到文件 <scriptout>
     -x                   编辑加密的文件
     -X                   不连接到 X Server
     --remote <files>     如有可能，在 Vim 服务器上编辑文件 <files>
     --remote-silent <files>  同上，找不到服务器时不抱怨
     --remote-wait <files>  同 --remote 但会等待文件完成编辑
     --remote-wait-silent <files>  同上，找不到服务器时不抱怨
     --remote-tab[-wait][-silent] <files>  As --remote but use tab page per file
     --remote-send <keys> 送出 <keys> 到 Vim 服务器并退出
     --remote-expr <expr> 在 Vim 服务器上求 <expr> 的值并打印结果
     --serverlist         列出可用的 Vim 服务器名称并退出
     --servername <name>  发送到或成为 Vim 服务器 <name>
     --startuptime <file> Write startup timing messages to <file>
     -i <viminfo>         使用 <viminfo> 取代 .viminfo
     -h  或  --help       打印帮助(本信息)并退出
     --version            打印版本信息并退出

#+END_EXAMPLE
*** mark region



v：按字符选择。经常使用的模式，所以亲自尝试一下它。

V：按行选择。这在你想拷贝或者移动很多行的文本的时候特别有用。

CTRL＋v：按块选择。非常强大，只在很少的编辑器中才有这样的功能。你可以
选择一个矩形块，并且在这个矩形里面的文本会被高亮。

**** reference

- [[http://blog.csdn.net/lcj_cjfykx/article/details/9091569][VIM选择文本块/复制/粘贴]]

*** 宏                                                              :macro:

+ http://blog.csdn.net/yangzhongxuan/article/details/7001077

**** 录制与重复

vim中的宏实质就是把一个vim指令集存到了寄存器中，然后在调用寄存器中的指
令。

使用宏命令可以重复执行你所记录下的命令。

命令模式下按 q + <register> + 一系列命令 + q

- <register> 指用户自己定义的a-z中的一个寄存器
- q+<register> 开始记录命令
- q 完成记录，退出记录


执行这个宏可以用命令： @<register>
也可以加上执行次数： 10@a 执行10次
当你执行过一次@a之后，你可以用@@来重复执行@a

**** 修改宏

当你发现存在某个寄存器的命令宏是错误的，你除了可以重新写一遍命令宏之外，
还有如下修改方式：

1. 先用G（大写）到文件末尾，然后用o（小写）新加一行，不要编辑，用ESC退
   出到普通模式，其实就是为编辑宏找了个地方。

2. 使用命令 "ap 会看到寄存器a中的命令宏像文本一样出现在这一行，然后编辑
   这一行。编辑的时候与vim编辑其他的文件一样。编辑结束后用0（零）回到
   行首。

3. 然后用 "ay$ 将正确内容写到寄存器a中，最后删除这一行即可。

4. 当你需要向命令宏寄存器中增加内容时，可以用命令qA来向a寄存器增加内容，
   之后输入你想增加的内容，再使用q结束。

**** 保存和传递宏
1. 先建立一个宏。

2. 在任意一个文件的空白位置normal状态下，命令 "ap 即可以把宏的内容显示
   出来。
   比如说我的宏是：
   #+BEGIN_EXAMPLE
   "ohello th id<80>kb<80>kb<80>kbis is a a<80>kba<80>kbmaco of vim.^["
   #+END_EXAMPLE

3. 这段内容保存或传递。

4. 使用命令：
   #+BEGIN_EXAMPLE
   let @a="ohello th id<80>kb<80>kb<80>kbis is a a<80>kba<80>kbmaco of vim.^["
   #+END_EXAMPLE

5. 其他人用@a命令就可以使用你制作的宏了。
*** ESC                                                               :esc:

+ http://segmentfault.com/q/1010000000405321
+ http://www.v2ex.com/t/50291


- Capslock => ESC (Caps Lock和Esc没有互换的，对Vim都不是真爱。)
- imap kj <esc>
- 右ALT => ESC
- C-c => ESC
- inoremap jj <ESC>

- imap jj <ESC>
  namp ;; <Esc>
  vmap ;; <Esc>
- C-[ 默认

*** GUI                                                              :gvim:

vim是命令行的，Gvim会带图形界面。

编译时需要加上 --enable-gnome 类似选项。

*** [[http://blog.csdn.net/lcj_cjfykx/article/details/9091569][VIM选择文本块/复制/粘贴]] :blog:


在正常模式下（按ESC进入）按键v进入可视化模式，然后按键盘左右键或h,l键即可实现文本的选择。
 其它相关命令：
 v：按字符选择。经常使用的模式，所以亲自尝试一下它。

 V：按行选择。这在你想拷贝或者移动很多行的文本的时候特别有用。


CTRL＋v：按块选择。非常强大，只在很少的编辑器中才有这样的功能。你可以选择一个矩形块，并且在这个矩形里面的文本会被高亮。


值得注意的是如果VIM中使用自动换行，那么直到你按ENTER换行前，VIM都会将你之前输入的内容视为一行而不是你看到的好几行，按块选择时就会按VIM中的行来选择块。


在选择模式的时候使用上面所述的方向键和命令（motion）。比如，vwww，会高亮光标前面的三个词。Vjj
将会高亮当前行以及下面两行。


================================================================
 ================================================================

原文：[[http://hi.baidu.com/shadouyou/blog/item/7ccb234e5a75d1cfd0c86a55.html][http://hi.baidu.com/shadouyou/blog/item/7ccb234e5a75d1cfd0c86a55.html
]]

vi编辑器有3种模式：命令模式、输入模式、末行模式。掌握这三种模式十分重要：


命令模式：vi启动后默认进入的是命令模式，从这个模式使用命令可以切换到另外两种模式，同时无论在任何模式下只要按一下[Esc]键都可以返回命令模式。在命令模式中输入字幕“i”就可以进入vi的输入模式编辑文件。


输入模式：在这个模式中我们可以编辑、修改、输入等编辑工作，在编辑器最后一行显示一个“--INSERT--”标志着vi进入了输入模式。当我们完成修改输入等操作的时候我们需要保存文件，这时我们需要先返回命令模式，在进入末行模式保存。


末行模式：在命令模式输入“：”即可进入该模式，在末行模式中有好多好用的命令。

 4.编辑操作
 　　进入输入模式命令
 　　i插入命令 a附加命令 o打开命令 c修改命令
 　　r取代命令 s替换命令 Esc退出命令

 　　输入模式的操作
 　　Home光标到行首
 　　End 光标到行尾
 　　Page Up和Page Down上下翻页
 　　Delect删除光标位置的字符

 　　删除操作(命令模式使用)
 　　x删除光标处的单个字符
 　　dd删除光标所在行
 　　dw删除当前字符到单词尾包括空格的所有字符
 　　#x例如3x删除光标处向右的三个字符
 　　#dd例如3dd从当前行开始向下删除三行文本

 　　撤销操作
 　　u命令取消最近一次的操作，可以使用多次来恢复原有的操作
 　　U取消所有操作
 　　Ctrl+R可以恢复对使用u命令的操作

 　　复制操作
 　　yy命令复制当前整行的内容到vi缓冲区

yw复制当前光标所在位置到单词尾字符的内容到vi缓存区，相当于复制一个单词
 　　y$复制光标所在位置到行尾内容到缓存区
 　　y\^复制光标所在位置到行首内容到缓存区
 　　#yy例如：5yy就是复制5行
 　　#yw例如：2yw就是复制两个单词


如果要复制第m行到第n行之间的内容，可以在末行模式中输入m，ny例如：3，5y复制第三行到第五行内容到缓存区。

 5.查找和替换
 　　vi的查找和替换功能主要在末行模式完成：

 　　至上而下的查找
 　　/ 要查找的字符窜，其中/代表从光标所在位置起开始查找，例如：/ work

 　　至下而上的查找
 　　？要查找的字符窜 例如：/ work

 　　替换
 　　:s/old/new用new替换行中首次出现的old
 　　: s/old/new/g 用new替换行中所有出现的old
 　　:#,# s/old/new/g用new替换从第＃行到第＃行中出现的old
 　　：% s/old/new/g用new替换整篇中出现的old


如果替换的范围较大时，在所有的命令尾加一个c命令，强制每个替换需要用户进行确认，例如:s/old/new/c
或s/old/new/gc

 　　6恢复文件
 　　vi在编辑某一个文件时，会生成一个临时文件，这个文件以 . 开头并以
.swp结尾。正常退出该文件自动删除，如果意外退出例如忽然断电，该文件不会删除，我们在下次编辑时可以选择一下命令处理：

 　　O只读打开，不改变文件内容
 　　E继续编辑文件，不恢复.swp文件保存的内容
 　　R将恢复上次编辑以后未保存文件内容
 　　Q退出vi
 　　D删除.swp文件
 　　或者使用vi －r 文件名来恢复未保存的内容

 在GUI下：
 （1）可按i进入插入模式
 （2）使用鼠标拖动反选要粘贴的内容，按鼠标左键复制选定块到缓冲区

（3）然后将光标移到要粘贴处，按鼠标中键（两键鼠标可同时按左右键），粘贴缓冲区内容。

 在纯文本终端下：
 （1）选定文本块，使用v进入可视模式；移动光标键选定内容
 （2）复制选定块到缓冲区，用y；复制整行，用yy
 （3）剪切选定块到缓冲区，用d；剪切整行用dd
 （4）粘贴缓冲区中的内容，用p

 在同一编辑窗打开第二个文件，用:sp [filename]
 在多个编辑文件之间切换，用Ctrl+w

 命令前面加数字表示重复次数，加字母表示使用的缓冲区名称。
 获取帮助，用:help [内容或命令]
** guide
*** basic

- i → Insert 模式，按 ESC 回到 Normal 模式.
- n → 删当前光标所在的一个字符。
- :wq → 存盘 + 退出 (:w 存盘, :q 退出)   （陈皓注：:w 后可以跟文件名）
- dd → 删除当前行，并把删除的行存到剪贴板里
- p → 粘贴剪贴板
- hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。
- :help <command> → 显示相关命令的帮助。你也可以就输入 :help 而不跟命
  令。（陈皓注：退出帮助需要输入:q）

*** 插入模式

- a → 在光标后插入
- o → 在当前行后插入一个新行
- O → 在当前行前插入一个新行
- cw → 替换从光标所在位置后到一个单词结尾的字符

*** 光标移动

- 0 → 数字零，到行头
- ^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）
- $ → 到本行行尾
- g_ → 到本行最后一个不是blank字符的位置。
- /pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n
  键到下一个）
- NG → 到第 N 行
- gg → 到第一行。
- G → 到最后一行
- w → 到下一个单词的开头。
- e → 到下一个单词的结尾。
-  如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成
-  如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。
- % : 匹配括号移动，包括 (, {, [.
- * 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）
- fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。
- t, → 到逗号前的第一个字符。逗号可以变成其它字符。
- 3fa → 在当前行查找第三个出现的a。
- F 和 T → 和 f 和 t 一样，只不过是相反方向。

*** 区域选择

*** 拷贝粘贴

- P → 粘贴 (p/P都可以，p是表示在当前位置之后，P表示在当前位置之前)
- yy → 拷贝当前行当行于 ddP
- y  拷贝

*** 默认拷贝

- d (删除 )
- v (可视化的选择)
- gU (变大写)
- gu (变小写)

*** Undo/Redo

- u → undo
- <C-r> → redo

*** 打开/保存/退出/改变文件

- :e <path/to/file> → 打开一个文件
- :w → 存盘
- :saveas <path/to/file> → 另存为 <path/to/file>
- :x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)
- :q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。
- :bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。

*** 组合

<start position><command><end position>

0y$ 命令意味着：
- 0 → 先到行头
- y → 从这里开始拷贝
- $ → 拷贝到本行最后一个字符

你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。

你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。

*** 重复

- . → (小数点) 可以重复上一次的命令
- N<command> → 重复某个命令N次

*****
*** reference

- [[~/Wally/Reference/Guide/大家来学VIM简体.pdf][大家来学VIM简体.pdf]]
- [[http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/][Learning Vim Progressly]]
- [[http://coolshell.cn/articles/5426.html][酷壳： Learning Vim Progressly 翻译]]
** [[http://beiyuu.com/git-vim-tutorial/][Git时代的VIM不完全使用教程]]                          :guide:tutorial:blog:


最近整理了VIM的配置，换上插件管理的神器-----[[https://github.com/gmarik/vundle][Vundle ]]，由他引发的VIM生态
环境的改善，堪称完美。遂打算写一份简单的教程，分享Git时代VIM新世界的美
丽动人之处。 *对VIM有基础的同学，可直接跳至插件管理部分。*

*** VIM的模式

第一次使用VIM，会觉得无所适从，他并不像记事本，你敲什么键就显示什么，理解VIM的需要明白他的两种模式：
- 命令模式 (Command Mode) - 编辑模式 (Insert Mode)

命令模式下，可以做移动、编辑操作；编辑模式则用来输入。键入=i=,=o=,=s=,=a=等即可进入编辑模式，后面解释原因。

模式的设计是VIM和其他编辑器最不同的地方，优势和劣势也全基于此而生。

*** 基本操作

以下介绍的键盘操作，都是大小写敏感的，并且要在*命令模式*下完成，需注意：

**** 以字为单位的移动

-  =h= 向左移动一个字
-  =j= 向下移动一行
-  =k= 向上
-  =l= 向右

这四个键在右手最容易碰到几个位置，最为常用。

**** 以词为单位的移动

-  =w= 下一個word w(ord)
-  =W= 下一個word(跳过标点)
-  =b= 前一個word b(ackward)
-  =B= 前一个word(跳过标点)
-  =e= 跳到当前word的尾端 e(nd)

**** 行移动

-  =0= 跳到当前行的开头
-  =^= 跳到当前行第一个非空字符
-  =$= 跳到行尾

助记：0(第0个字符),=^=和=$=含义同正则表达式

**** 段落移动

-  ={= 上一段(以空白行分隔)
-  =}= 下一段(以空白行分隔)
-  =%= 跳到当前对应的括号上(适用各种配对符号)

**** 跳跃移动

-  =/xxxx= 搜索xxxx，然后可以用=n=下一个，=N=上一个移动
-  =#= 向前搜索光标当前所在的字
-  =*= 向后搜索光标当前所在的字
-  =fx= 在当前行移动到光标之后第一个字符x的位置 f(ind)x
-  =gd= 跳到光标所在位置词(word)的定义位置 g(o)d(efine)
-  =gg= 到文档顶部
-  =G= 到文档底部
-  =:x= 跳到第x行(x是行号)
-  =ctrl+d= 向下翻页 d(down)
-  =ctrl+u= 向上翻页 u(p)

**** 基本编辑

***** 修改

-  =i= 在光标当前位置向前插入 i(nsert)
-  =I= 在本行第一个字符前插入
-  =a= 在光标当前位置向后插入 a(fter)
-  =A= 在本行末尾插入
-  =o= 向下插入一行
-  =O= 向上插入一行
-  =:w= 保存
-  =:q= 退出
-  =:wq= 保存并退出

***** 删除

-  =x= 删除当前字符
-  =dd= 删除当前行 d(elete)
-  =dw= 删除当前光标下的词 d(elete)w(ord)

***** 复制粘贴

-  =yy= 复制当前行 y(ank)
-  =yw= 复制当前光标下的词 y(ank)w(ord)
-  =p= 粘贴 p(aste)
-  =P= 粘贴在当前位置之前

*** 进阶操作

限于篇幅，在这里我仅介绍下我非常常用的几个操作。

**** 重复操作

因为VIM所有的操作都是原子化的，所以把这些操作程序化就非常简单了：

-  =5w= 相当于按五次=w=键；
-  =6j= 下移6行，相当于按六次j；
-  =3J= 大写J,本来是将下一行与当前行合并，加上数量，就是重复操作3次；
-  =6dw=和=d6w= 结果是一样，就是删除6个word；
-  剩下的无数情况，自己类推吧。

**** 高效编辑

-  =di"= 光标在""之间，则删除""之间的内容
-  =yi(= 光标在()之间，则复制()之间的内容
-  =vi[= 光标在[]之间，则选中[]之间的内容
-  以上三种可以自由组合搭配，效率奇高，i(nner)
-  =dtx= 删除字符直到遇见光标之后的第一个=x=字符
-  =ytx= 复制字符直到遇见光标之后的第一个=x=字符

**** 标记和宏(macro)

-  =ma= 将当前位置标记为a，26个字母均可做标记，=mb=、=mc=等等；
-  ='a= 跳转到a标记的位置；
-  这是一组很好的文档内标记方法，在文档中跳跃编辑时很有用；
-  =qa=
   将之后的所有键盘操作录制下来，直到再次在命令模式按下=q=，并存储在=a=中；
-  =@a= 执行刚刚记录在=a=里面的键盘操作；
-  =@@= 执行上一次的macro操作；
-  宏操作是VIM最为神奇的操作之一，需要慢慢体会其强大之处；

VIM的基本操作，可以挖掘的东西非常多，不仅仅需要记忆，更需要自己去探索总结，熟练之后，效率会大幅度提升。后面会给出一些参考链接。

*** 插件管理

**** Vundle

终于到这篇Blog我最想讨论的部分了。VIM的强大不仅仅体现在操作的高效率，更有强大而充沛的插件做支援，插件丰富了之后，就面临查找和管理的问题。

在遇见[[https://github.com/gmarik/vundle][Vundle]]之前，我用[[https://github.com/tpope/vim-pathogen][Pathogen]]管理插件。Pathogen还算方便，只需要把相应插件，放在=bundle=目录下即可，不需要再像以前那样逐个放置单独的文件到相应目录，大大节省了劳动力，管理起来也一目了然，觉得还不错，至少比vimball那种需要执行命令安装的方式好一些。

我真希望我早些遇见Vundle。Vundle受到Pathogen和Vimball的启发，于是有了现在的模样。Vundle的逻辑是这样的：

-  在[[http://vim-scripts.org/vim/scripts.html][Vim
   Script]]选好你想要的插件；
-  在VIM的配置文件中写一句 =Bundle plugin_name=；
-  执行一下Vundle的初始化命令，插件就装好了；
-  升级和卸载也是同样的简单；

完美的世界！

**** Vundle的配置

[[https://github.com/gmarik/vundle][Vundle]]的安装很简单：

#+BEGIN_EXAMPLE
    git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
#+END_EXAMPLE

然后写配置文件=.vimrc=：

#+BEGIN_EXAMPLE
    set nocompatible    " be iMproved
    filetype off        " required!

    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()

    " let Vundle manage Vundle
    " required!
    Bundle 'gmarik/vundle'

    " vim-scripts repos
    Bundle 'vim-plugin-foo'
    Bundle 'vim-plugin-bar'

    filetype plugin indent on    " required!
#+END_EXAMPLE

其中=Bundle=后面的内容，就是插件的名字，插件维护在[[http://vim-scripts.org/vim/scripts.html][Vim-Script.org]]。

然后，打开VIM之后，可以输入以下命令：

#+BEGIN_EXAMPLE
    "安装插件:
    :BundleInstall

    "更新插件:
    :BundleInstall!

    "卸载不在列表中的插件:
    :BundleClean
#+END_EXAMPLE

现在大部分的插件都已经从[[http://www.vim.org/scripts/index.php][Vim.org]]迁移到了[[http://vim-scripts.org/vim/scripts.html][Vim-Script.org]]，而且很多作者也认领了自己的插件，直接在这个Github的项目下更新，一个比Vim.org更科学更有效的生态环境，就这样完美的形成了。

在此非常严重的感谢vim-scripts.org的创建者[[https://github.com/bronson][Scott
Bronson]]，和[[https://github.com/gmarik/vundle][Vundle]]的作者[[https://github.com/gmarik][gmarik]]。他们的创新和分享精神，让这个世界又美好了一些。

也感谢业界良心[[https://github.com/][Github]]。Vim-Scripts.org整站就是用[[https://pages.github.com/][Github
Pages]]建立维护的，对于个人来说，这是很好的选择，有兴趣的同学可以参看我之前的博客：[[http://beiyuu.com/github-pages/][使用Github
Pages建独立博客]]。

*** 插件介绍

有了Vundle，再装插件就是件享受的事情了。我常用的插件有：

#+BEGIN_EXAMPLE
    #相较于Command-T等查找文件的插件，ctrlp.vim最大的好处在于没有依赖，干净利落
    Bundle 'ctrlp.vim'

    #在输入()，""等需要配对的符号时，自动帮你补全剩余半个
    Bundle 'AutoClose'

    #神级插件，ZenCoding可以让你以一种神奇而无比爽快的感觉写HTML、CSS
    Bundle 'ZenCoding.vim'

    #在()、""、甚至HTML标签之间快速跳转；
    Bundle 'matchit.zip'

    #显示行末的空格；
    Bundle 'ShowTrailingWhitespace'

    #JS代码格式化插件；
    Bundle '_jsbeautify'

    #用全新的方式在文档中高效的移动光标，革命性的突破
    Bundle 'EasyMotion'

    #自动识别文件编码；
    Bundle 'FencView.vim'

    #必不可少，在VIM的编辑窗口树状显示文件目录
    Bundle 'The-NERD-tree'

    #NERD出品的快速给代码加注释插件，选中，`ctrl+h`即可注释多种语言代码；
    Bundle 'The-NERD-Commenter'

    #解放生产力的神器，简单配置，就可以按照自己的风格快速输入大段代码。
    Bundle 'UltiSnips'

    #让代码更加易于纵向排版，以=或,符号对齐
    Bundle 'Tabular'

    #迄今位置最好的自动VIM自动补全插件了吧
    #Vundle的这个写法，是直接取该插件在Github上的repo
    Bundle 'Valloric/YouCompleteMe'
#+END_EXAMPLE

以上插件可以在[[http://vim-scripts.org/vim/scripts.html][vim-script.org]]找到源码和文档，[[http://mattn.github.com/zencoding-vim/][ZenCoding]]和[[http://net.tutsplus.com/tutorials/other/vim-essential-plugin-easymotion/][EasyMotion]]演示点链接,你会心动的。

*** .vimrc配置

因为配置不断在更新，所以放上我的配置的链接：[[https://github.com/beiyuu/vimfiles/blob/master/_vimrc][.vimrc配置]]

*** 更多

VIM在一开始会觉得非常不习惯，一定要坚持下去，收获的会更多，不仅仅是在装大侠方面的哦~

关于VIM的使用，这篇博客仅仅介绍了很小的一部分，网络上还有大量朋友总结的心得，常学常有收获：

-  [[http://book.douban.com/subject/10599776/][Practical Vim]]，强烈推荐的一本系统介绍VIM的书籍
-  [[http://overapi.com/vim/][Vim Cheat Sheet]]，有VIM的各种助记图，可以作为桌面
-  [[http://www.vimer.cn/][Vimer的程序世界]]， 不错的站，博主持续钻研VIM各种技巧
-  [[http://hi.baidu.com/whqvzhjoixbbdwd/item/11315a5073667d0de6c4a5e9][网友狂人收集的vim资料链接]]
-  [[http://www.rayninfo.co.uk/vimtips.html][Best of Vim Tips]]
-  [[http://www.limboy.com/2009/05/30/vim-setting/][面向前端开发者和TextMate粉丝的vim配置]]
-  [[http://scmbob.org/vim_fdm.html][Vim代码折叠简介]]
-  [[http://blog.longwin.com.tw/2009/03/choose-vim-color-scheme-2009/][挑選 Vim 顏色(Color Scheme)]]
-  [[https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb][vimium]]，用VIM的操作习惯来控制Chrome的插件

** shell command                                                      :shell:

vim中执行shell命令，有以下几种形式

*** :!cmd

不退出vim，并执行shell命令command，将命令输出显示在vim的命令区域， 不
会改变当前编辑的文件的内容.

特别的可以运行

_:!bash 来启动一个bash shell并执行命令，不需要退出vim_

*** :r !command

将shell命令command的结果插入到当前行的下一行. e.g. r !date，读取系
统时间并插入到当前行的下一行。

*** :起始行号,结束行号 !command

将起始行号和结束行号指定的范围中的内容输入到shell命令command处理，
并将处理结果替换起始行号和结束行号指定的范围中的内容

e.g.
+ :62,72 !sort  :  将62行到72行的内容进行排序
+ :62 !tr [a-z] [A-Z]  : 可以只指定起始行, 将62行的小写字母转为大写字母
+ :. !tr [a-z] [A-Z]  :  当前光标所在行，除可以指定行号外，也可以用.表示

*** :起始行号,结束行号 w !command

将起始行号和结束行号所指定的范围的内容作为命令command的输入。不会改
变当前编辑的文件的内容

e.g.
- :62,72 w !sort  : 将62行到72行的内容进行排序，但排序的结果并不会直接
  输出到当前编辑的文件中，而是显示在vim敲命令的区域

- :62 w !bash  :  将会把第62行的内容作为bash命令来执行并显示结果，而且
  不会改变当前编辑的文件的内容

同样的 :. w !bash，将当前行的内容作为bash命令来执行

*** reference

- [[http://www.educity.cn/help/510677.html][vim中执行shell命令小结]]

*** [[http://www.educity.cn/help/510677.html][vim中执行shell命令小结]] :blog:

vim中执行shell命令，有以下几种形式

1):!command

不退出vim，并执行shell命令command，将命令输出显示在vim的命令区域，不会改变当前编辑的文件的内容

例如:!ls -l

特别的可以运行:!bash来启动一个bash shell并执行命令，不需要退出vim

2):r !command

将shell命令command的结果插入到当前行的下一行

例如:r !date，读取系统时间并插入到当前行的下一行。

3):起始行号,结束行号 !command

将起始行号和结束行号指定的范围中的内容输入到shell命令command处理，并将处理结果替换起始行号和结束行号指定的范围中的内容

例如:62,72 !sort，将62行到72行的内容进行排序

可以只指定起始行，例如:62 !tr [a-z] [A-Z]，将62行的小写字母转为大写字母

当前光标所在行，除可以指定行号外，也可以用.表示，例如:. !tr [a-z] [A-Z]，将当前行的小写转为大写

4):起始行号,结束行号 w !command

将起始行号和结束行号所指定的范围的内容作为命令command的输入。不会改变当前编辑的文件的内容

例如:62,72 w !sort，将62行到72行的内容进行排序，但排序的结果并不会直接输出到当前编辑的文件中，而是显示在vim敲命令的区域

特殊的可以下面这么用:62 w !bash，将会把第62行的内容作为bash命令来执行并显示结果，而且不会改变当前编辑的文件的内容

同样的:. w !bash，将当前行的内容作为bash命令来执行

例如52行内容为ls -l

那么输入:52 w !bash就跟执行!ls -l是一样的效果，如果你用的shell是bash shell

如果输入的是:52 !bash，那么会把第52行的内容也就是ls -l作为命令执行，同时命令的输出结果会替换第52行的内容，注意其中的区别。
** C++ IDE

https://github.com/yangyangwithgnu/use_vim_as_ide#6

*** 代码折叠

操作：za，打开或关闭当前折叠；zM，关闭所有折叠；zR，打开所有折叠。效果如下：

*** 接口和实现切换

这样，键入 ;ch 就能在实现文件和接口文件间切换，键入 ;sch 子窗口中将显示实现文件/接口文件。如下图所示：

*** 外部粘贴

http://www.cnblogs.com/xshang/p/3459179.html

ubuntu默认vim是不支持从外部文件与vim之间的粘帖复制，vim有自己的剪切版，
分别是”0-”9,”-,”8,”+,”:,”/,”%,”i,这些都是vim的寄存器，可以用
命令:reg查看。

要实现外部文件与vim之间的粘帖和复制，ubuntu需要安装vim-gnome,

 “+y表示从vim复制到系统剪切版，

“+p表示从外部文件(系统剪切版)粘帖到vim,

“+d表示剪切.

*** 代码跳转

g]

返回先前调用处，可以键入 vim 快捷键 ctrl-t 返回，如果想再次进入，可以
用前面介绍的方式，或者键入 ctrl-i。另外，注意，ctrl-o 以是一种返回快捷
键，但与 ctrl-t 的返回不同，前者是返回上次光标停留行、后者返回上个标签。

* IDE                                                             :EMACS:ide:

不要再折腾 Emacs IDE 了，干点实用的事情吧

脚踏实地，别玩些没用的！

** IDE General
*** smartparens                                               :smartparens:
**** reference

- [[https://github.com/Fuco1/smartparens][Github]]
- [[https://github.com/Fuco1/smartparens/wiki][Wiki]]
- https://ebzzry.github.io/emacs-pairs.html

**** add pairs
1. global
  #+BEGIN_EXAMPLE
    (sp-pair "\{" "\}") ;; latex literal brackets (included by default)
    (sp-pair "<#" "#>")
    (sp-pair "$" "$")   ;; latex inline math mode. Pairs can have same opening and closing string
  #+END_EXAMPLE
2. local
   #+BEGIN_EXAMPLE
   (sp-local-pair 'LaTeX-mode "\\\\left(" "\\\\right)" :insert "C-b l" :trigger "\\\\l(")
   #+END_EXAMPLE

3. :wrap
   #+BEGIN_EXAMPLE
     (sp-pair "(" ")" :wrap "C-(")
   #+END_EXAMPLE

**** remove pairs
#+BEGIN_EXAMPLE
  ;; the second argument is the closing delimiter, so you need to skip it with nil
  (sp-pair "\{" nil :actions :rem)
  (sp-pair "'" nil :actions :rem)
#+END_EXAMPLE

**** wrapping                                                       :wrap:

https://github.com/Fuco1/smartparens/wiki/Wrapping

#+BEGIN_SRC emacs-lisp
  (sp-local-pair 'org-mode "*" "*"
                 :wrap "*")
  (sp-local-pair 'org-mode "=" "="
                 :wrap "=")
  (sp-local-pair 'org-mode "/" "/"
                 :wrap "/")
  (sp-local-pair 'org-mode "\left(" "\n\\right)"
                 :trigger "\l(")
  (sp-local-pair 'org-mode "\left[" "\n\\right]"
                 :trigger "\l[")
  (sp-local-pair 'org-mode "\left{" "\n\\right}"
                 :trigger "\l{")
  (sp-local-pair 'org-mode "\\[" "\\]"
                 :trigger "\\[")
#+END_SRC

E=mc^2

**** wrap-region                                             :wrap_region:

+ [[https://github.com/rejeep/wrap-region.el][GitHub]]

Wrap Region is a minor mode for Emacs that wraps a region with
punctuations. For "tagged" markup modes, such as HTML and XML, it wraps
with tags.

***** Installation

I recommend installing via ELPA, but manual installation is simple as
well:

#+BEGIN_EXAMPLE
    (add-to-list 'load-path "/path/to/wrap-region")
    (require 'wrap-region)
#+END_EXAMPLE

***** Usage

Start =wrap-region-mode= using.

#+BEGIN_EXAMPLE
    (wrap-region-mode t)
#+END_EXAMPLE

or

#+BEGIN_EXAMPLE
    M-x wrap-region-mode
#+END_EXAMPLE

Now try selecting a region and press any of the following keys: ="=,
='=, =(=, ={=, =[=.

The above are the default wrappers. You can add more yourself:

#+BEGIN_EXAMPLE
    (wrap-region-add-wrapper "$" "$")
    (wrap-region-add-wrapper "{-" "-}" "#")
    (wrap-region-add-wrapper "/" "/" nil 'ruby-mode)
    (wrap-region-add-wrapper "/* " " */" "#" '(java-mode javascript-mode css-mode))
    (wrap-region-add-wrapper "`" "`" nil '(markdown-mode ruby-mode))
#+END_EXAMPLE

The same can be done with:

#+BEGIN_EXAMPLE
    (wrap-region-add-wrappers
     '(("$" "$")
       ("{-" "-}" "#")
       ("/" "/" nil ruby-mode)
       ("/* " " */" "#" (java-mode javascript-mode css-mode))
       ("`" "`" nil (markdown-mode ruby-mode))))
#+END_EXAMPLE

For more information, see comments in =wrap-region.el=.

***** Except modes

In some modes, such as =calc-mode= and =dired-mode=, you don't want to
have wrap region active since the key bindings will conflict. Wrap
region stores a list of modes (see =wrap-region-except-modes=) in which
wrap region will be inactive.

Some modes are added to the except list by default. See the list with:

#+BEGIN_EXAMPLE
    (describe-variable 'wrap-region-except-modes)
#+END_EXAMPLE

To add a new mode, do this:

#+BEGIN_EXAMPLE
    (add-to-list 'wrap-region-except-modes 'conflicting-mode)
#+END_EXAMPLE

***** customize

****** wrap-region-add-wrapper

(wrap-region-add-wrapper LEFT RIGHT &optional KEY MODE-OR-MODES)

Add new LEFT and RIGHT wrapper.

Optional KEY is the trigger key and MODE-OR-MODES is a single
mode or multiple modes that the wrapper should trigger in.

****** global minor mode

#+BEGIN_SRC emacs-lisp
  (require 'wrap-region)
  (wrap-region-global-mode t)
#+END_SRC

****** org-mode

#+BEGIN_SRC emacs-lisp
  (wrap-region-add-wrappers
   '(("*" "*" "*" org-mode)
     ("=" "=" "=" org-mode)
     ("/" "/" "/" org-mode)
     ("$" "$" "$" org-mode)))
#+END_SRC

***** smartparens 可以替代，而且似乎更强大，同类产品只择其一

**** [[https://ebzzry.github.io/emacs-pairs.html][Emacs and Pairs]]                                          :blog:guide:

In this post, I'll exclusively talk about /smartparens/ --- a package
that you wish you should have used, earlier, presuming you don't use it
yet. If you're new to it, read along; if not, this may be a good
refresher.

/smartparens/ is one of those packages that drastically improves, and
changes how one uses Emacs. It's like having cybernetic limbs --- it
makes you jump higher, and punch harder.

Take note, though, that the name is a misnomer, as it not only handles
parentheses. It handles just about anything that pairs, and it performs
those functions stellarly.

***** Installation

Installing smartparens is straightforward:

#+BEGIN_EXAMPLE
    M-x package-install RET smartparens RET
#+END_EXAMPLE

***** Configuration

Let's enable smartparens on startup, and hook it with some major hooks:

#+BEGIN_EXAMPLE
    (use-package smartparens-config
        :ensure smartparens
        :config
        (progn
          (show-smartparens-global-mode t)))

    (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
    (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
#+END_EXAMPLE

***** Usage

Managing paired characters like parentheses, braces, brackets, quotation
marks, angle brackets, and other conceivable pair-able characters has
always been a pain. Other packages solve that problem partially.
However, they it still miss several points. In the code snippets below,
the =_= symbol will be used to represent point:

****** Basics

In smartparens, when you input a pair-able character:

#+BEGIN_EXAMPLE
    (defn foo )
              ̅
#+END_EXAMPLE

the matching pair gets inserted, too, and point is positioned inside the
pair:

#+BEGIN_EXAMPLE
    (defn foo [])
               ̅
#+END_EXAMPLE

****** Navigation

******* Starts and Ends

If you have the expression:

#+BEGIN_EXAMPLE
    (let [x "foo bar baz ... blah"])
                             ̅
#+END_EXAMPLE

and you want to move point to the start of the string:

#+BEGIN_EXAMPLE
    (let [x "foo bar baz ... blah"])
             ̅
#+END_EXAMPLE

Execute =sp-beginning-of-sexp=. I bound it to C-M-a.

Conversely, to move point to the end of the expression:

#+BEGIN_EXAMPLE
    (let [x "foo bar baz ... blah"])
                                 ̅
#+END_EXAMPLE

Execute =sp-end-of-sexp=. I bound it to C-M-e.

******* Traversing Lists

If you have the expression:

#+BEGIN_EXAMPLE
    (defun format-date (format)
      (let ((system-time-locale "en_US.UTF-8"))
        (insert (format-time-string format)))) ̅
#+END_EXAMPLE

and you want to move point to *insert*:

#+BEGIN_EXAMPLE
    (defun format-date (format)
      (let ((system-time-locale "en_US.UTF-8"))
        (insert (format-time-string format))))
         ̅
#+END_EXAMPLE

Execute =sp-down-sexp=. I bound it to C-down.

If you have the expression:

#+BEGIN_EXAMPLE
    (str "foo" "bar baz qux")
        ̅
#+END_EXAMPLE

and you want to move point after *)*:

#+BEGIN_EXAMPLE
    (str "foo" "bar baz qux")
                             ̅
#+END_EXAMPLE

Execute =sp-up-sexp=. I bound it to C-up.

If you have the expression:

#+BEGIN_EXAMPLE
    (defn foo [bar] (let [x 0] x))
                    ̅
#+END_EXAMPLE

and you want to move point to *]*:

#+BEGIN_EXAMPLE
    (defn foo [bar] (let [x 0] x))
                  ̅
#+END_EXAMPLE

Execute =sp-backward-down-sexp=. I bound it to M-down.

If you have the expression:

#+BEGIN_EXAMPLE
    (insert (format-time-string format))
                               ̅
#+END_EXAMPLE

and you want to move point to *(format*:

#+BEGIN_EXAMPLE
    (insert (format-time-string format))
            ̅
#+END_EXAMPLE

Execute =sp-backward-up-sexp=. I bound it to M-up.

******* Block Movements

If you have the expression:

#+BEGIN_EXAMPLE
    (:require [clojure.string :as s])
              ̅
#+END_EXAMPLE

and you want to move point after *]*:

#+BEGIN_EXAMPLE
    (:require [clojure.string :as s])
                                    ̅
#+END_EXAMPLE

Execute =sp-forward-sexp=. I bound it to C-M-f

Conversely, to move it to *[*:

#+BEGIN_EXAMPLE
    (:require [clojure.string :as s])
              ̅
#+END_EXAMPLE

Execute =sp-backward-sexp=. I bound it to C-M-b.

******* Top-level-ish Traversal

If you have the expression:

#+BEGIN_EXAMPLE
    (defn blah
      "Returns blah of foo."
      [foo]                 ̅
      )
#+END_EXAMPLE

and you want to move point to *[*:

#+BEGIN_EXAMPLE
    (defn blah
      "Returns blah of foo."
      [foo]
      ̅)
#+END_EXAMPLE

Execute =sp-next-sexp=. I bound it to C-M-n.

Conversely, to move it back:

#+BEGIN_EXAMPLE
    (defn blah
      "Returns blah of foo."
      [foo]                 ̅
      )
#+END_EXAMPLE

Execute =sp-previous-sexp=. I bound it to C-M-p.

******* Free-form Movements

If you have the expression:

#+BEGIN_EXAMPLE
    (defn blah [] (let [x 0 y 1] (+ x 1)))
                   ̅
#+END_EXAMPLE

and you want to move point to *blah*:

#+BEGIN_EXAMPLE
    (defn blah [] (let [x 0 y 1] (+ x 1)))
          ̅
#+END_EXAMPLE

Execute, =sp-backward-symbol=. I bound it to C-S-b.

Conversely, if you have the expression:

#+BEGIN_EXAMPLE
    (defn blah [] (let [x 0 y 1] (+ x 1)))
                ̅
#+END_EXAMPLE

and you want to move point just after *(let*:

#+BEGIN_EXAMPLE
    (defn blah [] (let [x 0 y 1] (+ x 1)))
                      ̅
#+END_EXAMPLE

Execute =sp-forward-symbol=. I bound it to C-S-f.

What they do is that they navigate around expressions as if delimiters,
like parens, brackets, and braces do not exist.

****** Manipulation

******* Wrapping

If you have the expression:

#+BEGIN_EXAMPLE
    var mods = "vars";
               ̅
#+END_EXAMPLE

and you want *"vars"* to be surrounded by *[*, and *]*:

#+BEGIN_EXAMPLE
    var mods = ["vars"];
                ̅
#+END_EXAMPLE

Press C-M-Space followed by [, the whole region becomes surrounded by
matching *[*, and *]*. It also applies to keys like =(=, ={=, ="=, ='=,
=*=, =_=, etc, depending on the mode that you're using.

Alternatively, define wrapping functions:

#+BEGIN_EXAMPLE
    (defmacro def-pairs (pairs)
      `(progn
         ,@(loop for (key . val) in pairs
              collect
                `(defun ,(read (concat
                                "wrap-with-"
                                (prin1-to-string key)
                                "s"))
                     (&optional arg)
                   (interactive "p")
                   (sp-wrap-with-pair ,val)))))

    (def-pairs ((paren        . "(")
                (bracket      . "[")
                (brace        . "{")
                (single-quote . "'")
                (double-quote . "\"")
                (back-quote   . "`")))
#+END_EXAMPLE

I bound the first three functions to C-c (, C-c [, and C-c {,
respectively. So, if you have the expression:

#+BEGIN_EXAMPLE
    (defn foo args (let [x 0] (inc x)))
              ̅
#+END_EXAMPLE

and you want to surround *args* with *[ *and* ]*:

#+BEGIN_EXAMPLE
    (defn foo [args] (let [x 0] (inc x)))
               ̅
#+END_EXAMPLE

Press C-c [.

Sometimes, we inadvertently delete one of the pair characters --- this
results in an unbalanced expression. smartparens prevents us from doing
that. If you hit Backspace in this expression:

#+BEGIN_EXAMPLE
    var mods = ["vars"];
                ̅
#+END_EXAMPLE

Nothing will happen. smartparens saves us a lot of trouble, here.

******* Unwrapping

If you have the expression:

#+BEGIN_EXAMPLE
    (foo (bar x y z))
         ̅
#+END_EXAMPLE

and you want to unwrap the *bar* expression, removing the parentheses
around *foo*:

#+BEGIN_EXAMPLE
    foo (bar x y z)
        ̅
#+END_EXAMPLE

Execute =sp-backward-unwrap-sexp=. I bound it to M-[

Conversely, if you want to unwrap the *bar* expression, removing the
parentheses around *bar*:

#+BEGIN_EXAMPLE
    (foo bar x y z)
         ̅
#+END_EXAMPLE

Execute =sp-unwrap-sexp=. I bound it to M-].

******* Slurp and Barf

If you have the expression:

#+BEGIN_EXAMPLE
    [foo bar] baz
            ̅
#+END_EXAMPLE

and you want *baz* to be part of *foo* and *bar*:

#+BEGIN_EXAMPLE
    [foo bar baz]
            ̅
#+END_EXAMPLE

Execute =sp-forward-slurp-sexp=. I bound it to C-right.

Conversely, if you want to remove *baz*:

#+BEGIN_EXAMPLE
    [foo bar] baz
            ̅
#+END_EXAMPLE

Execute =sp-forward-barf-sexp=. I bound it to M-right.

If you have the expression:

#+BEGIN_EXAMPLE
    blah [foo bar]
                 ̅
#+END_EXAMPLE

and you want *blah* to be part of *foo* and *bar*:

#+BEGIN_EXAMPLE
    [blah foo bar]
                 ̅
#+END_EXAMPLE

Execute =sp-backward-slurp-sexp=. I bound it to C-left.

Conversely, if you want to remove *blah*:

#+BEGIN_EXAMPLE
    blah [foo bar]
                 ̅
#+END_EXAMPLE

Execute =sp-backward-barf-sexp=. I bound it to M-left.

******* Swapping

If you have the expression:

#+BEGIN_EXAMPLE
    "foo" "bar"
          ̅
#+END_EXAMPLE

and you want *"foo"* and *"bar"* to switch places:

#+BEGIN_EXAMPLE
    "bar" "foo"
          ̅
#+END_EXAMPLE

Execute =sp-transpose-sexp=. I bound it to C-M-t.

******* Killing

If you have the expression:

#+BEGIN_EXAMPLE
    (let [x "xxx" y "y yy yyy" z 0])
                   ̅
#+END_EXAMPLE

and you want to kill just *"y yy yyy"*:

#+BEGIN_EXAMPLE
    (let [x "xxx" y z 0])
                   ̅
#+END_EXAMPLE

Execute =sp-kill-sexp=. I bound it to C-M-k.

If you want to kill *"y yy yyy" z 0*:

#+BEGIN_EXAMPLE
    (let [x "xxx" y])
                   ̅
#+END_EXAMPLE

Execute =sp-kill-hybrid-sexp=. I bound it to C-k.

If you have the expression:

#+BEGIN_EXAMPLE
    (:require [clojure.string :as s])
                                    ̅
#+END_EXAMPLE

and you want to kill *[clojure.string :as s]*:

#+BEGIN_EXAMPLE
    (:require )
              ̅
#+END_EXAMPLE

Execute =sp-backward-kill-sexp=. I bound it to M-k

***** Keys

The following snippet summarizes the key bindings used in this article.
I use *bind-keys* to conveniently map my keys. I discussed about it, in
an [[emacs-hacks-2.html][earlier]] article.

#+BEGIN_EXAMPLE
    (bind-keys
     :map smartparens-mode-map
     ("C-M-a" . sp-beginning-of-sexp)
     ("C-M-e" . sp-end-of-sexp)

     ("C-<down>" . sp-down-sexp)
     ("C-<up>"   . sp-up-sexp)
     ("M-<down>" . sp-backward-down-sexp)
     ("M-<up>"   . sp-backward-up-sexp)

     ("C-M-f" . sp-forward-sexp)
     ("C-M-b" . sp-backward-sexp)

     ("C-M-n" . sp-next-sexp)
     ("C-M-p" . sp-previous-sexp)

     ("C-S-f" . sp-forward-symbol)
     ("C-S-b" . sp-backward-symbol)

     ("C-<right>" . sp-forward-slurp-sexp)
     ("M-<right>" . sp-forward-barf-sexp)
     ("C-<left>"  . sp-backward-slurp-sexp)
     ("M-<left>"  . sp-backward-barf-sexp)

     ("C-M-t" . sp-transpose-sexp)
     ("C-M-k" . sp-kill-sexp)
     ("C-k"   . sp-kill-hybrid-sexp)
     ("M-k"   . sp-backward-kill-sexp)
     ("C-M-w" . sp-copy-sexp)

     ("C-M-d" . delete-sexp)

     ("M-<backspace>" . backward-kill-word)
     ("C-<backspace>" . sp-backward-kill-word)
     ([remap sp-backward-kill-word] . backward-kill-word)

     ("M-[" . sp-backward-unwrap-sexp)
     ("M-]" . sp-unwrap-sexp)

     ("C-x C-t" . sp-transpose-hybrid-sexp)

     ("C-c ("  . wrap-with-parens)
     ("C-c ["  . wrap-with-brackets)
     ("C-c {"  . wrap-with-braces)
     ("C-c '"  . wrap-with-single-quotes)
     ("C-c \"" . wrap-with-double-quotes)
     ("C-c _"  . wrap-with-underscores)
     ("C-c `"  . wrap-with-back-quotes))
#+END_EXAMPLE

***** Conclusion

The plethora of commands in smartparens may be daunting at first, but
the investement in time in learning them, will be minimal compared to
benefits that you will reap.



*** Yasnippet: Yet another snippet extension                      :yasnippet:
**** Reference

+ [[https://github.com/capitaomorte/yasnippet][GitHub]]
+ [[http://capitaomorte.github.io/yasnippet/index.html][Document]]

**** What is yasnippet?

YASnippet is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates. Bundled
language templates include: C, C++, C\#, Perl, Python, Ruby, SQL, LaTeX,
HTML, CSS and more.

YASnippet是Emacs的一个模版系统.允许输入一个缩写，自动为你扩展为相应的
功能模版。捆绑的语言模版包括 C, C++, C\#, Perl, Python, Ruby, SQL,
LaTeX, HTML, CSS 等等。

**** 基本结构
Yasnippets模板存储要纯文本文件中，Yasnippet以子目录的这些文本文件以子
目录组织这些文件，子目录多是以主模式命名。

变量 *yas-snippet-dirs* 保存Yasnippet模板的路径名。 Yasnippet的默认路
径名是``/path/to/yasnippet/snippets'',目录名变量可以自定义

#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{lisp}
  (setq yas-snippet-dirs '("/default/path", "/your/own/path"))
  ;; OR，
  (setq yas-snippet-dirs (append yas-snippet-dirs
                                 '(/your/own/path)))
  \end{minted}
#+end_latex

命令 *yas-global-mode* *yas-reload-all*

**** Yasnippet配置

在Emacs初始化文件中进行以下配置，全局开启Yasnippet辅助模式。

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path
                "~/.emacs.d/plugins/yasnippet")
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC


也可以仅将Yasnippet与某些模式关联.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            '(lambda ()
               (yas-minor-mode)))
#+END_SRC

**** 命令
+ yas-new-snippet
+ yas-find-snippet
+ yas-visit-snippet-file
+ yas-expand /used interactively/
+ yas-expand-snippet /used in emacs-lisp code/
+ yas-load-snippet-buffer
+ yas-reload-all

**** yas-expand

Yasnippet扩展模板命令 *yas-expand* 默认绑定在TAB键，可自行修改，如下：

绑定于 *C-M-y*

#+BEGIN_SRC emacs-lisp
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "C-M-y") 'yas-expand)
#+END_SRC

**** 定义模板

*yas-new-snippet* 命令增加亲的自定义模板。在snippet缓冲区中可以看到以
下内容：

#+BEGIN_EXAMPLE
  # -*- mode: snippet -*-
  # name:
  # key:
  # binding: direct-keybinding
  # expand-env: ((some-var some-value))
  # type: command
  # --
#+END_EXAMPLE

1) name    菜单栏中Yasnippet显示的名字
2) key     是触发该模板的关键字
3) bindind和expanding-env   高级特性。
4) # --  后是模板meta内容。在模板中，$0,$1,$2 依次为tab光标停留的点。

注: 编辑完文件之后将其保存在对应主模式的子目录下。

文件名要有意义 key:comment

**** snippets
***** python header                                              :python:

#+begin_example
  # -*- mode: snippet; require-final-newline: nil -*-
  # name: py
  # key: py
  # binding: direct-keybinding
  # --
  #! /usr/bin/env python
  # -*- encoding:utf-8 -*-

  $0
#+end_example

snippet: header

***** yasnippet python ifm                                       :python:

#+BEGIN_SRC python
  if __name__ == '__main__':
      main()
#+END_SRC

***** doxygen cpp                                           :doxygen:cpp:

1. reference

   + [[https://app.yinxiang.com/shard/s52/nl/11551545/fe360834-1a0a-4475-adbb-f11faf65c292?title=%E5%9F%BA%E4%BA%8Edoxygen%E7%9A%84C%2B%2B%E6%B3%A8%E9%87%8A][基于doxygen的C++注释]]

2. yasnippet 自定义风格

   + key 要短
   + 文件名要有意义 key:comment

3. 头文件

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     # -*- mode: snippet; require-final-newline: nil -*-
     # name: doxygen for header file
     # key: dh
     # binding: direct-keybinding
     # --
     /*!
     ,* \file $1
     ,* \brief $2
     ,*
     ,* ${3:详细概述}
     ,*
     ,* \author Tagerill Wong
     ,* \version ${4:maj.min}
     ,* \date $5
     ,*/
     $0
     \end{minted}
   #+end_latex

   #+BEGIN_SRC cpp
     /*!
      ,* \file test.h
      ,* \brief test
      ,*
      ,* test
      ,*
      ,* \author Tagerill Wong
      ,* \version 1.0
      ,* \date 2015/12/05
      ,*/
     hello world!

   #+END_SRC

4. 命名空间

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     # -*- mode: snippet; require-final-newline: nil -*-
     # name: doxygen for namespace
     # key: dn
     # binding: direct-keybinding
     # --
     /// \brief $1
     ///
     /// ${2: 命名空间的详细概述}
     $0
     \end{minted}
   #+end_latex

   #+BEGIN_SRC cpp
     /// \brief namespace
     ///
     /// namespace

   #+END_SRC

5. 类

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     # -*- mode: snippet; require-final-newline: nil -*-
     # name: doxygen for class
     # key: dc
     # binding: direct-keybinding
     # --
     /// \brief $1
     ///
     /// ${2:详细说明}
     \end{minted}
   #+end_latex

   #+BEGIN_SRC cpp
     /// \brief class
     ///
     /// fds
   #+END_SRC

6. 函数

   #+begin_latex
     \begin{minted}[frame=leftline, mathescape]{text}
     # -*- mode: snippet; require-final-newline: nil -*-
     # name: doxygen for function
     # key: df
     # binding: direct-keybinding
     # --
     /// \brief $1
     ///
     /// ${2:详细说明, 不要标识，需要空行，可以多行}
     /// \param $3
     /// \return $4
     /// \see $5
     $0
     \end{minted}
   #+end_latex

   #+BEGIN_SRC cpp
     /// \brief func
     ///
     /// foo
     /// \param p1 comment
     /// \return commnet
     /// \see what

   #+END_SRC

7. 变量

   1) brief

      #+begin_latex
        \begin{minted}[frame=leftline, mathescape]{text}
        # -*- mode: snippet; require-final-newline: nil -*-
        # name: doxygen for variable, default brief, that is at the end
        # key: //
        # binding: direct-keybinding
        # --
        \\\< $0
        \end{minted}
      #+end_latex

      #+BEGIN_SRC cpp
        int foo;                        ///<
      #+END_SRC

      trick: *//* 使用快捷键生成注释符号，而且位置合适

   2) verbose

      #+begin_latex
        \begin{minted}[frame=leftline, mathescape]{text}
        # -*- mode: snippet; require-final-newline: nil -*-
        # name: doxygen for variable, verbose
        # key: dv
        # binding: direct-keybinding
        # --

        /// \brief $1
        ///
        /// ${2:详细说明}
        ///
        \end{minted}
      #+end_latex

      #+BEGIN_SRC cpp

        /// \brief varible for foo
        ///
        /// foo
        ///
      #+END_SRC

***** DONE babel块                                                :babel:
- state "done"       from "todo"       [2015-11-23 一 11:36]
clock: [2015-11-23 一 11:26]--[2015-11-23 一 11:36] =>  0:10

1. lang $0
2. :export [code | result | both | none]
3. :results [value | output]

*org-alias-list功能不够*

#+begin_example
  # -*- mode: snippet; require-final-newline: nil -*-
  # name: bbl
  # key: bbl
  # binding: direct-keybinding
  # --

  ,#+begin_src ${1:lang} :results ${2:[value | output]} :export ${3:[code | result | both | none]}
  $0
  ,#+end_src
#+end_example


#+begin_src sh :results output :export both
date +%m
#+end_src

#+results:
: 35

**** yasnippet elisp code

Emacs-Lisp code can be embedded inside the template, written inside
back-quotes *(`)*. The lisp forms are evaluated when the snippet is
being expanded. The evaluation is done in the same buffer as the
snippet being expanded.


Here's an example for c-mode` to calculate the header file guard
dynamically:

#+BEGIN_EXAMPLE
  #ifndef ${1:_`(upcase (file-name-nondirectory (file-name-sans-extension (buffer-file-name))))`_H_}
  #define $1

  $0

  #endif /* $1 */
#+END_EXAMPLE

**** routine

1. 表格 or 格式化文本?

   后者

2. elisp+keybinding or yasnippet

   yasnippet

   - 可以有默认值
   - 必要的时候可以使用 elisp 函数

3. snippet

   #+BEGIN_SRC snippet
     # -*- mode: snippet; require-final-newline: nil -*-
     # name: rt:RoutinesExpandingForOrg-agenda
     # key: rt
     # binding: direct-keybinding
     # --
     睡眠:${1:1:00}
     起床:${2:7:00}
     跑步:${3:5K}
     吉它:${4:0.5h}
     读书:${5:0.5h}
     Friends:${6:S01E01}
     Dota:${7:45m}
     早餐:${8:1}
     锻炼:${9:0+0}
     牛奶:${10:1}
   #+END_SRC

*** Projectile                                                 :projectile:

**** reference
+ [[http://tuhdo.github.io/helm-projectile.html][Emacs Minor Manual]]
+ [[https://github.com/bbatsov/projectile][GitHub]]

**** projectile

projectile is a *interaction library* for emacs. its goal is to
provide a nice set of features operating on a project level without
introducing external dependencies(when feasible). for instance -
finding project files has a portable implementation written in pure
emacs lisp without the use of gnu find (but for performance sake an
indexing mechanism backed by external commands exists as well).

projectile tries to be *practical* - portability is great, but if some
external tools could speed up some task substantially and the tools
are available, projectile will leverage them.

by default, *git*, mercurial, darcs and bazaar are considered
projects. so are lein, maven, sbt, scons, rebar and bundler. if you
want to mark a folder manually as a project just create an empty
*.projectile* file in it.


*note* :

after you have created a .projectile file in the directory of your
choice, projectile will only use it after you *restart emacs* from that
directory.

**** projectile-switch-project *C-c p p*
+ Switch to project (default action, bound to  *RET* ): Switch to a
  project and execute an action specified in
  projectile-switch-project-action variable.

+ Open Dired in project's directory ( *C-d* )

+ Open project root in vc-dir or magit ( *M-g* )

+ Switch to Eshell ( *M-e* ): Open a projectin Eshell.

+ Grep in projects ( *C-s* ; add prefix C-u to recursive grep): As you
  type the regexp in the mini buffer, the live grep results will be
  displayed incrementally.

+ Compile project ( *C-c* ): Run a compile command at the project
  root.

+ Remove project(s) ( *M-D* ): Delete marked projects from the list of
  known projects.

**** File management:  *helm-projectile-find-file* , C-c p f
This command lists all files in a project for users to narrow down to
wanted files. Some frequently used actions that cover open, rename,
copy, delete,search and other miscelaneous operations. Once you
mastered the actions of helm-projectile-find-file, you master the
actions of other commands as well since the actions of other commands
are just a subset of helm-projectile-find-file actions. All the key
bindings associated with actions are only available while a Helm
buffer is active. You can think of actions as an mini version of M-x:
only applicable commands are listed, and even those commands have key
bindings. Prefix argument can be applied, when possible.

***** Open
+ Find File (default action bound to  *RET* ): open files; if multiple
  files are marked, using either M-SPC to mark specific files or all
  marked using M-a, all marked files are opened

+ Find file other window ( *C-c o* ): Open file in other window. Very
  useful action and is used in many Helm commands.

+ Find file as root ( *C-c r* ): Another really useful action. With
  this command, you don't have to use Tramp syntax to open file as
  root. Just browse file to anywhere, and when needed, open it as root
  instantly.

+ Find file other frame (C-c C-o): Open file in another frame.

+ Find File in Dired: Open file directory in Dired.

+ Find file in hex dump: Open file using hexl.

+ View file: Open file for read-only.

+ Open file externally ( *C-c C-x* , add prefix C-u to choose a
  program): Open file using external applications. Once an application
  is selected, it is remembered as default application for the
  selected file type.

***** move and remove
+ Rename file(s) ( *M-R* ): Rename marked files. To mark files, press
  M-SPC. You must have two buffers side by side: one is a buffer that
  is running current helm-projectile-find-file command and another is
  destination buffer. When this action is executed, it copies marked
  files to the directory of destination buffers.

+ Serial rename files: Rename multiple files at once to the same name
  differentiated by the index at the end, and move files to a prompted
  directory. If there is a buffer in other window, default to the
  directory of that buffer.

+ Serial rename by symlinking files: Similar to Serial rename files
  but create symbolic links instead.

+ Serial rename by copying files: Similar to Serial rename files but
  copy files instead.

***** Copy and Delete

+ Copy file(s) (M-C): similar to Rename File(s) action but copy marked
  files. You can stay where you are and select any project files from
  anywhere to copy to somewhere! The files are always at your finger
  tips. This is demonstrated at the beginning: Copy files anywhere.

+ Delete File(s) (M-D or C-c d): similar to Rename File(s) action but
  delete marked files. You can stay where you are and delete any file
  anywhere in your project. This is demonstrated at the beginning:
  Delete files anywhere.

***** Search and Replace

+ Grep File(s) (C-s; add prefix C-u for recursive grep): grep current
  highlighted file or marked files. With prefix C-u, recursively grep
  parent directories of marked files. Remember, it only works on
  marked files, or the current file the highlight bar is on.

+ Zgrep (M-g z; add prefix C-u for recursive zgrep): Similar to grep
  but invokes grep on compressed or gzipped files.

+ Locate (C-x C-f, add C-u to specify locate db): Search using locate,
  the same as helm-locate.

***** Miscelaneous

+ Insert as org link (C-c @): Insert the current file that highlight
  bar is on as an Org link.

+ Ediff File (C-=): If only a file is marked (that is the line your
  Helm highlight bar is on), it prompts for another file to
  compare. If two files are marked, starts an Ediff session between
  two files. More than two files are marked, you are prompted for
  another file to compare again.
+ Ediff Merge File (C-c =): Start an Emerge session between selected
  files. Similar to Ediff file action: if one or more than two file
  are marked, prompts for another file. If exactly two files are
  selected, start an Emerge session.

+ Etags (M-.): Invoke Etags using Helm. You can switch back to
  helm-projectile-find-file by pressing C-c p f while inside a Helm
  Etags session. If exists a symbol at point, only lists matches that
  contain the symbol.

+ Switch to Eshell (M-e): Open Eshell in directory of the currently
  selected candidate. If selected candidate is a file, open the
  directory of that file; if selected candidate is a directory. open
  that directory.

+ Eshell command on file(s) (M-!): Run an Eshell command on a marked
  candidates. If Eshell aliases exist, provides completion for those
  aliases.

+ Symlink files(s) (M-S): Create symbolic link, using absolute
  path. If another buffer is available, choose the directory of that
  buffer as destination, similar to Rename files(s) action.

+ Relsymlink file(s): Create symbolic link, using relative path. If
  another buffer is available, choose the directory of that buffer as
  destination, similar to Rename files(s) action.

+ Hardlink file(s) (M-H): Create hard link. If another buffer is
  available, choose the directory of that buffer as destination,
  similar to Rename files(s) action.

+ Checksum File: Generate file checksum and insert the checksum
  kill-ring.

+ Print File (C-c p, add C-u to refresh): Print marked files.

**** Command:  *helm-projectile-find-file-in-known-projects* , C-c p F

This command is another one that can be used outside of any
project. When executed, it lists all files in all known
projects. Depends on your style, use this command or
helm-projectile-switch-project command, when you want to jump to a
file. Note that this command could be slow to show you the list of
files if there is a large number of files. To speed it up, it is
beneficial to enable caching. You will learn about caching at near the
end of this tutorial. With caching, Projectile won't have to build up
a list of files again; it simply reuses, and show you the list
instantly for selecting.

The action menu is the same as helm-projectile-find-file.

**** Command:  *helm-projectile-find-file-dwim* , C-c p g

Usage: Find file based on context at point (do what you mean):

+ If the command finds just a file, it switches to that file
  instantly. This works even if the filename is incomplete, but
  there's only a single file in the current project that matches the
  filename at point. For example, if there's only a single file named
  "projectile/projectile.el" but the current filename is
  "projectile/proj" (incomplete), the command still switches to
  "projectile/projectile.el" immediately because this is the only
  filename that matches.

+ If it finds a list of files, the list is displayed for selecting. A
  list of files is displayed when a filename appears more than one in
  the project or the filename at point is a prefix of more than two
  files in a project. For example, if `projectile-find-file' is
  executed on a path like "projectile/", it lists the content of that
  directory. If it is executed on a partial filename like
  "projectile/a", a list of files with character 'a' in that directory
  is presented.

+ If it finds nothing, display a list of all files in project for
  selecting.

**** Command:  *helm-projectile-find-dir* , C-c p d

Usage: List available directories in the current project.

Available actions:

+ Open Dired in project's directory: Open the directory in a Dired
  buffer.

+ Switch to Eshell (M-e): Open the directory in Eshell.

+ Grep in projects (C-s; add prefix C-u for recurse Grep): Run grep on
  selected directory.

**** Command:  *helm-projectile-recentf* , C-c p e

Usage: List recently visited files in current project. The command has
a subset of actions in helm-projectile-find-file, so once you mastered
the actions in helm-projectile-find-file, you can reuse your knowledge
here.

**** Command:  *helm-projectile-find-other-file* , C-c p a
Usage: Switch between files with the same name but different
extensions. With prefix argument C-u, enable flex-matching that match
any file that contains the name of current file. The command has a
subset of actions in helm-projectile-find-file, so once you mastered
the actions in helm-projectile-find-file, you don't need to learn
anything else.

Other file extensions can be customized with the variable
*projectile-other-file-alist* . The variable looks like this:
#+BEGIN_EXAMPLE
  '(("cpp" "h" "hpp" "ipp")
    ("ipp" "h" "hpp" "cpp")
    ("hpp" "h" "ipp" "cpp")
    ("cxx" "hxx" "ixx")
    ("ixx" "cxx" "hxx")
    ("hxx" "ixx" "cxx")
    ("c" "h")
    ("m" "h")
    ("mm" "h")
    ("h" "c" "cpp" "ipp" "hpp" "m" "mm")
    ("cc" "hh")
    ("hh" "cc")
    ("vert" "frag")
    ("frag" "vert")
    (nil "lock" "gpg")
    ("lock" "")
    ("gpg" ""))
#+END_EXAMPLE

**** Caching

Usage: In large projects, caching can significantly speedup file and
directory listings, making it display instantly. Caching is enabled
by:
#+BEGIN_EXAMPLE
(setq projectile-enable-caching t)
#+END_EXAMPLE

With caching enabled, even if you use Projectile on your home
directory with 30GB, it lists files instantly. Cache is a way to speed
up getting files because Projectile only needs to index your project
once and reuses this result future usages. In case if your project has
new files, you have to add C-u before executing any command to
invalidate the cache (except for helm-projectile-find-other-file and
projectile-find-other-file, C-u is reserved for different behaviour),
or using standalone command invalidate C-c p i to refresh the whole
cache.

+ Command: projectile-invalidate-cache, C-c p i

  Usage: As the command name suggests, it invalidates the current
  cache and retrieves everything as new.

+ Command: projectile-cache-current-file, C-c p z

  Usage: Add the file of current selected buffer to cache.

+ Command: projectile-purge-file-from-cache

  Usage: Remove a file from the cache. Once removed, you won't see it
  appear the next time using file related commands. If you delete a
  file, Projectile automatically removes the file from the cache.

+ Command: projectile-purge-dir-from-cache

  Usage: Remove a directory from the cache.

**** summary
|-----------+---------------------------------------------+--------------------------------------------------------------|
| C-c p h   | helm-projectile                             | Helm interface to projectile                                 |
| C-c p p   | helm-projectile-switch-project              | Switches to another projectile project                       |
| C-c p f   | helm-projectile-find-file                   | Lists all files in a project                                 |
| C-c p F   | helm-projectile-find-file-in-known-projects | Find file in all known projects                              |
| C-c p g   | helm-projectile-find-file-dwim              | Find file based on context at point                          |
| C-c p d   | helm-projectile-find-dir                    | Lists available directories in current project               |
| C-c p e   | helm-projectile-recentf                     | Lists recently opened files in current project               |
| C-c p a   | helm-projectile-find-other-file             | Switch between files with same name but different extensions |
| C-c p i   | projectile-invalidate-cache                 | Invalidate cache                                             |
| C-c p z   | projectile-cache-current-file               | Add the file of current selected buffer to cache             |
| C-c p b   | helm-projectile-switch-to-buffer            | List all open buffers in current project                     |
| C-c p s g | helm-projectile-grep                        | Searches for symbol starting from project root               |
| C-c p s a | helm-projectile-ack                         | Same as above but using ack                                  |
| C-c p s s | helm-projectile-ag                          | Same as above but using ag                                   |
|-----------+---------------------------------------------+--------------------------------------------------------------|

**** projectile: remove existing projects                     :projectile:
[[http://stackoverflow.com/questions/27643917/helm-projectile-how-to-remove-a-project-from-projectile][stackoverflow]]

The function /projectile-remove-known-project/ prompts for a project to
forget about. /projectile-remove-current-project-from-known-projects/
removes the active project.

known projects are stored in the file _~/.emacs.d/projectile-bookmarks.eld_.

note: c-p p p m-d 不起作用

**** ignore files
in /.projectile/

1. *-* ignore specified file or path
   #+BEGIN_EXAMPLE
     -/log
     -/tmp
     -/vendor
     -/public/uploads
   #+END_EXAMPLE

2. wild char
   #+BEGIN_EXAMPLE
     -tmp
     -*.rb
     -*.yml
     -models
   #+END_EXAMPLE

3. *+* ignore evertything except some specified /path/
   #+BEGIN_EXAMPLE
     +/src/foo
     +/tests/foo
   #+END_EXAMPLE

**** bookmark file : [[file:~/.emacs.d/elpa/projectile-20150517.1305/projectile.el::(defcustom%20projectile-known-projects-file][projectile-known-projects-file]]

show me the code

#+BEGIN_SRC emacs-lisp
  (defcustom projectile-known-projects-file
    (expand-file-name "projectile-bookmarks.eld"
                      user-emacs-directory)
    "Name and location of the Projectile's known projects file."
    :group 'projectile
    :type 'string)

  (setq projectile-known-projects-file
        (expand-file-name "mics/projectile-bookmarks.eld"
                          user-emacs-directory))
#+END_SRC

**** cache [[file:~/.emacs.d/elpa/projectile-20150517.1305/projectile.el::(defcustom%20projectile-cache-file][projectile-cache-file]]

#+BEGIN_SRC emacs-lisp
  (setq projectile-cache-file
        (expand-file-name "misc/projectile.cache"
                          user-emacs-directory))

#+END_SRC




**** DONE ignore .git or others svn,  only .projectile
- State "DONE"       from "TODO"       [2015-12-16 三 19:17] \\
  在源码中搜索 .git

#+BEGIN_SRC emacs-lisp
(setq projectile-project-root-files-bottom-up '(".projectile"))
#+END_SRC

/projectile-add-known-project/ 非 interactive

instead

|projectile-cache-current-file   | C-c p z|

**** setting

***** v1.0
#+BEGIN_SRC emacs-lisp
  (require 'projectile)
  (require 'helm-projectile)
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)

  (setq projectile-indexing-method 'alien)

  (setq projectile-switch-project-action 'helm-projectile)

  (setq projectile-enable-caching t)
#+END_SRC

***** v1.1 disable projectile-global-mode or not!!!

#+BEGIN_SRC emacs-lisp
  (require 'projectile)
  (require 'helm-projectile)
  ;; (projectile-global-mode)
  (add-hook 'c++-mode-hook 'projectile-mode)
  (add-hook 'c-mode-hook 'projectitle-mode)
  (add-hook 'python-mode-hook 'projectile-mode)

  (setq projectile-completion-system 'helm)
  (helm-projectile-on)
  (setq projectile-indexing-method 'alien)
  (setq projectile-switch-project-action 'helm-projectile)
  (setq projectile-enable-caching t)
#+END_SRC

***** v1.2 ignore git etc
#+BEGIN_SRC emacs-lisp
  (require 'projectile)
  (require 'helm-projectile)
  (projectile-global-mode)
  ;; (add-hook 'c++-mode-hook 'projectile-mode)
  ;; (add-hook 'c-mode-hook 'projectitle-mode)
  ;; (add-hook 'python-mode-hook 'projectile-mode)

  (setq projectile-completion-system 'helm)
  (helm-projectile-on)
  (setq projectile-indexing-method 'alien)
  (setq projectile-switch-project-action 'helm-projectile)
  (setq projectile-enable-caching t)
  (setq projectile-project-root-files ".projectile")
#+END_SRC

*** folding: hs-minor-mode                                        :folding:

emacs has a minor mode called hs-minor-mode that allows users to fold
and hide blocks of text. blocks are defined by regular expressions
which match the start and end of a text region. for example, anything
in between { and } is a block. the regular expressions are defined in
hs-special-modes-alist.

setup for c/c++:
#+begin_example
(add-hook 'c-mode-common-hook   'hs-minor-mode)
#+end_example

default key bindings:

|-------------+------------------+------------------------------------------------------------------|
| c-c @ c-c   | hs-toggle-hiding | toggle hiding/showing of a block                                 |
| c-c @ c-h   | hs-hide-block    | select current block at point and hide it                        |
| c-c @ c-l   | hs-hide-level    | hide all block with indentation levels below this block          |
| c-c @ c-s   | hs-show-block    | select current block at point and show it.                       |
| c-c @ c-m-h | hs-hide-all      | hide all top level blocks, displaying only first and last lines. |
| c-c @ c-m-s | hs-show-all      | show everything                                                  |
|-------------+------------------+------------------------------------------------------------------|

*** narrowing                                                   :narrowing:
|---------+----------------------------------+--------------------------------------------|
| c-x n d | command: narrow-to-defun         | narrow buffer to current function at point |
| c-x n r | command: narrow-to-regionc-x n n | narrow buffer to active region             |
| c-x n w | command: widen                   | widen buffer                               |
|---------+----------------------------------+--------------------------------------------|

*** sr-speed-bar

To open sr-speedbar, execute the command sr-speedbar-open or
 *sr-speedbar-toggle* .

To close sr-speedbar, execute the command sr-speedbar-close or
sr-speedbar-toggle again.

shortcuts
+ Use SPC to open the children of a node.

+ RET to open the node in another window. If node is a file, open that
  file; if node is a directory, enter that directory; if node is a tag
  in a file, jump to the location of that tag in the file.

+ U to go up parent directory.

+ n or p moves to next or previous node.

+ M-n or M-p moves to next or previous node at the current level.

+ b switches to buffer list using Speedbar presentation. You can also
  open children of each buffer.

+ f switches back to file list.


Best is to use sr-speedbar-toggle only, for simplicity.

sr-speedbar gives the following improvements:

+ Automatically switches directory tree - when you switch buffer - to
  the default-directory of current buffer.

+ Use an Emacs window instead of frame, make it easier to use.

+ C-x 1 deletes every window except Speedbar, so you won't have to
  open again.

+ You can prevent C-x o to jump to sr-speedbar window by setting
  sr-speedbar-skip-other-window-p to `t`. You can still move to
  sr-speedbar window using either the mouse or windmove.

*** helm-company
+ https://github.com/yasuyk/helm-company

*** ecb: Emacs Code Browser                                             :ecb:

**** ecb intro

+ homepage: http://ecb.sourceforge.net/
+ git: https://github.com/alexott/ecb/
+ blog: http://blog.csdn.net/a593796769/article/details/9000055
+ blog(en): https://truongtx.me/2013/03/10/ecb-emacs-code-browser/


1. what
   ecb, stands for emacs code browser, tranforms your emacs from a
   text editor to a real ide for coding. once activated, it can
   display many useful information that help you program more
   effectively. the ecb’s informational windows can contain:

   + a directory tree,
   + a list of source files in the current directory,
   + a list of functions/classes/methods/… in the current file, (ecb
     uses the semantic bovinator, or imenu, or etags, for getting this
     list so all languages supported by any of these tools are
     automatically supported by ecb too)
   + a history of recently visited files,
   + the speedbar and
   + output from compilation (the “compilation” window) and other
     modes like help, grep, etc. or whatever the user defines to be
     displayed in that window.

2. 配置
   #+begin_example
     (require 'ecb)
     ;; (require 'ecb-autoloads) ;; mepla安装似乎不需要
     (setq stack-trace-on-error nil)
     (setq ecb-auto-activate t
           ecb-tip-of-the-day nil)
   #+end_example

   注：cedet的配置必须在ecb之前，不然ecb就会调用自带的cedt！

**** basic configures

1. Layout
   + (setq ecb-layout-name "layout-name")
   + layouts:
     http://ecb.sourceforge.net/docs/Changing-the-ECB-layout.html

2. Show source files in directories buffer

   (setq ecb-show-sources-in-directories-buffer 'always)

3. compile window

   By default, ECB hides the compilation window. Everytime I compile,
   it displays the compilation message to the same window as the
   buffer that I’m editing. This is really annoying because I want to
   see all the messages so that I can fix the error in my code
   easily. To keep a persistent compile window in ECB, add this to
   your .emacs

  (setq ecb-compile-window-height 12)

4. keybinds
   #+BEGIN_EXAMPLE
     ;;; activate and deactivate ecb
     (global-set-key (kbd "C-x C-;") 'ecb-activate)
     (global-set-key (kbd "C-x C-'") 'ecb-deactivate)
     ;;; show/hide ecb window
     (global-set-key (kbd "C-;") 'ecb-show-ecb-windows)
     (global-set-key (kbd "C-'") 'ecb-hide-ecb-windows)
     ;;; quick navigation between ecb windows
     (global-set-key (kbd "C-)") 'ecb-goto-window-edit1)
     (global-set-key (kbd "C-!") 'ecb-goto-window-directories)
     (global-set-key (kbd "C-@") 'ecb-goto-window-sources)
     (global-set-key (kbd "C-#") 'ecb-goto-window-methods)
     (global-set-key (kbd "C-$") 'ecb-goto-window-compilation)
   #+END_EXAMPLE

5. window restore

   Personally, I don’t like those function ecb-deactivate,
   ecb-show-ecb-windows, ecb-hide-ecb-windows since I usually have to
   open multiple windows in Emacs. When deactivate or hide ECB window,
   it does not automatically restore the window layout and switch to
   the buffer that I’m editing. Similar problem happens when I try to
   show ecb window again.

**** [[https://truongtx.me/2013/03/10/ecb-emacs-code-browser/][Install and Config ECB on Emacs]]                                :blog:

Install and Config ECB on Emacs

Introduction

ECB, stands for Emacs Code Browser, tranforms your emacs from a text editor to a real IDE for coding. Once activated, it can display many
useful information that help you program more effectively. The ECB’s informational windows can contain:

  * a directory tree,
  * a list of source files in the current directory,
  * a list of functions/classes/methods/… in the current file, (ECB uses the Semantic Bovinator, or Imenu, or etags, for getting this list
    so all languages supported by any of these tools are automatically supported by ECB too)
  * a history of recently visited files,
  * the Speedbar and
  * output from compilation (the “compilation” window) and other modes like help, grep, etc. or whatever the user defines to be displayed in
    that window.

For more information, please visit ECB Homepage.

Screenshot

Here is the ECB screenshot from my Emacs

ECB Scre

Installation

ECB requires CEDET version 1.0+, which is included in Emacs version 24.

You can install ECB manually by cloning the package and add it to your load-path. However, there is another convinience method, that is to
use package.el. If you haven’t known it yet, have a look at this post Emacs Package Manager. To install it, M-x and type in list-package
RET, C-s and search for ecb, RET and select Install. After that, add this to your .emacs or init.el file

;;; activate ecb
(require 'ecb)
(require 'ecb-autoloads)

Now, everything you need to run ECB is to type M-x ecb-activate RET and ECB is now ready for you to use. When you want to stop it, just
execute the command ecb-deactivate.

Some Basic Configurations

To set the layout for ECB, add this to your .emacs

(setq ecb-layout-name "layout-name")

Replace layout-name with the name of the layout you want. For a list of ECB layouts, follow this link ECB Layouts.

Show source files in directories buffer

(setq ecb-show-sources-in-directories-buffer 'always)

By default, ECB hides the compilation window. Everytime I compile, it displays the compilation message to the same window as the buffer that
I’m editing. This is really annoying because I want to see all the messages so that I can fix the error in my code easily. To keep a
persistent compile window in ECB, add this to your .emacs

(setq ecb-compile-window-height 12)

Some key bindings for quick interation with ECB, replace them with the key bindings that you want.

;;; activate and deactivate ecb
(global-set-key (kbd "C-x C-;") 'ecb-activate)
(global-set-key (kbd "C-x C-'") 'ecb-deactivate)
;;; show/hide ecb window
(global-set-key (kbd "C-;") 'ecb-show-ecb-windows)
(global-set-key (kbd "C-'") 'ecb-hide-ecb-windows)
;;; quick navigation between ecb windows
(global-set-key (kbd "C-)") 'ecb-goto-window-edit1)
(global-set-key (kbd "C-!") 'ecb-goto-window-directories)
(global-set-key (kbd "C-@") 'ecb-goto-window-sources)
(global-set-key (kbd "C-#") 'ecb-goto-window-methods)
(global-set-key (kbd "C-$") 'ecb-goto-window-compilation)

Some of My Functions

Personally, I don’t like those function ecb-deactivate, ecb-show-ecb-windows, ecb-hide-ecb-windows since I usually have to open multiple
windows in Emacs. When deactivate or hide ECB window, it does not automatically restore the window layout and switch to the buffer that I’m
editing. Similar problem happens when I try to show ecb window again. Because of that, I wrote those functions to replace the ECB built in
three functions ecb-deactivate, ecb-show-ecb-windows, ecb-hide-ecb-windows.

;;; replacement for built-in ecb-deactive, ecb-hide-ecb-windows and
;;; ecb-show-ecb-windows functions
;;; since they hide/deactive ecb but not restore the old windows for me
(defun tmtxt/ecb-deactivate ()
  "deactive ecb and then split emacs into 2 windows that contain 2 most recent buffers"
  (interactive)
  (ecb-deactivate)
  (split-window-right)
  (switch-to-next-buffer)
  (other-window 1))
(defun tmtxt/ecb-hide-ecb-windows ()
  "hide ecb and then split emacs into 2 windows that contain 2 most recent buffers"
  (interactive)
  (ecb-hide-ecb-windows)
  (split-window-right)
  (switch-to-next-buffer)
  (other-window 1))
(defun tmtxt/ecb-show-ecb-windows ()
  "show ecb windows and then delete all other windows except the current one"
  (interactive)
  (ecb-show-ecb-windows)
  (delete-other-windows))

After that, bind them with a key sequence for quick interaction with ECB

(global-set-key (kbd "C-x C-'") 'tmtxt/ecb-deactivate)
(global-set-key (kbd "C-;") 'tmtxt/ecb-show-ecb-windows)
(global-set-key (kbd "C-'") 'tmtxt/ecb-hide-ecb-windows)

*** check
**** flymake
+ http://flymake.sourceforge.net/


Flymake is implemented as an Emacs minor mode. It runs the syntax
check tool in the background, passing it a temporary copy of the
current buffer, and parses the output for known error/warning message
patterns. Flymake then highlights erroneous lines (that is, lines for
which at least one error or warning has been reported), and displays
an overall buffer status in the mode line.

Unfortunately, this project is outdated and last change was 3 years ago.

**** flycheck
+ http://www.emacswiki.org/emacs/Flycheck
+ https://github.com/flycheck/flycheck


Flycheck is a modern on-the-fly syntax checking extension, and a
modern alternative to Flymake. It supports 39 languages with 65 syntax
checkers out of the box.


1. Install and enable Flycheck

   To get started with Flycheck, enable it by adding the following to
   your init file:
   (add-hook 'after-init-hook #'global-flycheck-mode)

   If you don’t know where your init file is take a look at the value
   of the variable user-init-file with C-h v user-init-file.

2. Install syntax checker tools

   Next you need to install syntax checking tools for the major modes
   you are using. For instance, for

   + Python Pylint:   $ pip install pylint

   + C/C++

     1) c/c++-clang (syntax and type check with Clang) or c/c++-gcc
        (syntax and type check with  *GCC* ), and

     2) c/c++-cppcheck (style and error check with  *cppcheck* ).

   + Emacs Lisp

     1) emacs-lisp (syntax check with the built-in Emacs byte compiler)

     2) eemacs-lisp-checkdoc (code and documentation check with checkdoc)

   + shell

     1) Syntax check with one of the following checkers, depending on
        the shell used for the current Sh Mode buffer,
        + sh-bash (for Bash)
        + sh-posix-dash or sh-posix-bash (for POSIX shell scripts, using Dash or Bash respectively)
        + sh-zsh (for Zsh)

     2) sh-shellcheck (code and style check using ShellCheck)

   + TeX/LaTeX
     + tex-chktex (style check using ChkTeX), or

     + tex-lacheck (style check using Lacheck)

   + XML
     + xml-xmlstarlet (using XMLStarlet), or

     + xml-xmllint (using xmllint)

   + YAML
     + yaml-jsyaml (using js-yaml), or

     + yaml-ruby (using Ruby’s YAML parser)

   See Supported languages, for a complete list of all languages that
   Flycheck supports.

3. Check syntax in a buffer

   Now switch to a Python or Ruby Mode buffer and run M-x
   flycheck-verify-setup to check whether Flycheck is correctly setup.

   If everything is fine Flycheck will now check syntax using these
   tools, when you visit a buffer in any of these languages. Syntax
   checking happens automatically when you save the buffer or make any
   changes. Flycheck highlights errors and warnings in the buffer,
   indicates them in the fringe, and reports their numbers in the mode
   line.

   You can also manually check a buffer with C-c ! c (flycheck-buffer).

4. Navigate and list errors

   Use C-c ! n (flycheck-next-error) and C-c ! p
   (flycheck-previous-error) to navigate between error locations. If
   you keep the point at an error location, Flycheck will show the
   error message in the echo area after a short delay. You can also
   hover error locations with the mouse and see the error message in a
   tooltip.

   To get an overview of all errors and warnings in the current
   buffer, type C-c ! l (flycheck-list-errors) to pop up a list of all
   errors in your current buffer. The error list updates automatically
   when you fix errors or introduce new ones, or when you switch to
   another buffer.

5. check warning
   +
     http://stackoverflow.com/questions/15552349/flycheck-how-to-disable-warnning-while-edit-emacs-lisp-scripts


   e.g.
   + The first line should be of the form: ";;; package --- Summary"
   +

   These are Checkdoc warnings. To disable these, add
   emacs-lisp-checkdoc to the option flycheck-disabled-checkers,
   either with the following code in your init file,  or via the
   customize interface with M-x customize-variable RET
   flycheck-disabled-checkers.

   #+BEGIN_EXAMPLE
     (with-eval-after-load 'flycheck
       (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
   #+END_EXAMPLE

**** emacs-flymake
*** auto-complete                                            :autocomplete:
+ emacswiki: http://emacswiki.org/emacs/autocomplete
+ git: https://github.com/auto-complete/auto-complete
+ manual: http://auto-complete.org/doc/manual.html

**** auto-complete-c-headers
+ https://github.com/mooz/auto-complete-c-headers

*** IDE 快捷键
**** Basic Movements
|---------+--------------------|
| C-M-f   | forward-sexp       |
| C-M-b   | backwward-sexp     |
| C-M-k   | kill-sexp          |
| C-M-SPC | mark-sexp          |
| C-M-a   | beginning-of-defun |
| C-M-e   | end-of-defun       |
| C-M-h   | mark-defun         |
|---------+--------------------|

**** function-args
|-------+-----------------|
| M-i   | fa-show         |
| M-j   | fa-jump         |
| M-n/h | cycle overloads |
| M-u   | dismiss hint    |
| M-o   | moo-complete    |
|-------+-----------------|

**** senator
|-----------+------------------------------|
| C-c , n   | senator-next-tag             |
| C-c , p   | senator-previous-tag         |
| C-c , u   | senator-go-up-reference      |
| C-c , M-w | senator-copy                 |
| C-c , C-w | senator-kill-tag             |
| C-c , C-y | senator-yank-tag             |
| C-c , C-r | senator-copy-tag-to-register |
|-----------+------------------------------|

**** projectile
|-----------+-------------------------------------------|
| C-c p p   | switch visited projects                   |
|-----------+-------------------------------------------|
| RET       | switch to project                         |
| C-d       | open dired                                |
| M-g       | open project root in magit                |
| M-e       | switch to eshell                          |
| C-s       | grep in project                           |
| C-c       | compile                                   |
|-----------+-------------------------------------------|
| M-D       | Delete marked projects from the list      |
| M-SPC     | mark specific file                        |
| C-c o     | open file in other window                 |
| C-c r     | find file as root                         |
| C-c C-o   | open file n another frame                 |
| C-c C-x   | open file externally                      |
|-----------+-------------------------------------------|
| C-c p f   | jump to file                              |
| C-c p d   | jump to directory                         |
| C-c p b   | list buffers local to current project     |
| C-c p e   | jump to recently visited files in peoject |
| C-c p g s | grep in project                           |
| C-c p a   | switch between .c and .h                  |
| C-c p c   | compile, default make                     |
|-----------+-------------------------------------------|

**** folding
|-------------+--------------------------------------------|
| C-c @ C-c   | Command: hs-toggle-hiding                  |
|             | Toggle hiding/showing of a block           |
|-------------+--------------------------------------------|
| C-c @ C-h   | Command: hs-hide-block                     |
|             | Select current block at point and hide it  |
|-------------+--------------------------------------------|
| C-c @ C-l   | Command: hs-hide-level                     |
|             | Hide all block with indentation levels     |
|             | below this block                           |
|-------------+--------------------------------------------|
| C-c @ C-s   | Command: hs-show-block                     |
|             | Select current block at point and show it. |
|-------------+--------------------------------------------|
| C-c @ C-M-h | Command: hs-hide-all                       |
|             | Hide all top level blocks, displaying      |
|             | only first and last lines.                 |
|-------------+--------------------------------------------|
| C-c @ C-M-s | Command: hs-show-all                       |
|             | Show everything                            |
|-------------+--------------------------------------------|

**** narrowing
|---------+--------------------------------------------|
| C-x n d | Command: narrow-to-defun                   |
| C-x n r | Command: narrow-to-region                  |
| C-x n n | Narrow buffer to active region             |
| C-x n w | Command: widen                             |
|---------+--------------------------------------------|

**** compile
|------+-----------------------------------------------------------|
| C-o  | Display matched location, but do not switch point to      |
|      | matched buffer                                            |
|------+-----------------------------------------------------------|
| M-n  | Move to next error message, but do not visit error        |
|      | location                                                  |
|------+-----------------------------------------------------------|
| M-p  | Move to next previous message, but do not visit error     |
|      | location                                                  |
|------+-----------------------------------------------------------|
| M-g n | Move to next error message, visit error location          |
|------+-----------------------------------------------------------|
| M-g p | Move to previous error message, visit error location      |
|------+-----------------------------------------------------------|
| RET  | Visit location of error at poiint                         |
|------+-----------------------------------------------------------|
| M-{  | Move point to the next error message or match occurring   |
|      | in a different file                                       |
|------+-----------------------------------------------------------|
| M-}  | Move point to the previous error message or match         |
|      | occurring in a different file                             |
|------+-----------------------------------------------------------|
| q    | Quit *compilation* buffer                                 |
|------+-----------------------------------------------------------|

**** gdb
*** man                                                               :man:
1. Command:  *man*

   To read the documentation for symbol at point or a man entry of
   your choice, invoke M-x man.

2. Command:  *helm-man-woman*

   If you use Helm, you should be able to use the command
   helm-man-woman, which is bound to C-c h m if you follow my Helm
   guide.

** [[http://tuhdo.github.io/c-ide.html][Emacs C++ IDE]]
*** IDE
**** Emacs VS Vim

Emacs 更熟悉

Vim 慢慢来

**** IDE & project
**** 目标

- [ ] 头文件与源文件之间跳转
- [ ] 浏览Linux内核树
- [ ] 交互式大纲显示文件结构
- [ ] 以文件浏览器形式显示静态大纲树
- [ ] 符号引用
- [ ] 代码补全
- [ ] 头文件补全
- [ ] 在底部显示函数接口和变量定义
- [ ] 跳转到当前函数头
- [ ] 编译支持
- [ ] 编译输出
- [ ] GDB调试
- [ ] 查看手册

**** 头文件与源文件之间跳转

*** 功能分析

+ [X] 头文件和源文件之间的跳转(switch between .h and .c/.cpp)
  - helm-gtags-dwim 项目中跳转

+ [ ] 利用gtag在源文件之间跳转 (helm-gtags)

+ [ ] 交互式大纲 (function-args /moo-jump-local/)

+ [X] 文件目录树 (ecb, 不用 speedbar)
  - ecb

+ [ ] 符号引用

+ [ ] 代码补全 (helm窗口)

+ [ ] 头文件补全

+ [ ] 底边栏显示函数接口和变量定义

+ [ ] 顶部显示当前位置函数

+ [ ] 编译支持

+ [ ] 编译输出的可视化

+ [ ] GDB调试

+ [ ] man帮助手册

*** 基本操作

|-----------+--------------------+----------------------|
| C-M-f     | forward-sexp       | 前向匹配             |
| C-M-b     | backward-sexp      | 后向匹配             |
| C-M-k     | kill-sexp          | 删除匹配之间的区域   |
| C-M-SPC/@ | mark-sexp          | 选中匹配区域         |
| C-M-a     | beginning-of-defun | 将光标移至函数起始处 |
| C-M-e     | end-of-defun       | 将光标移至函数结尾处 |
| C-M-h     | mark-defun         | 选中函数定义         |
|-----------+--------------------+----------------------|

*** gtags                                                           :gtags:
**** intro: [[http://www.gnu.org/software/global/][GNU GLOBAL]]    :gtags:

GNU GLOBAL is a source code tagging system that works the same way
across diverse environments, such as Emacs editor, Vi editor, Less
viewer, Bash shell, various web browsers, etc.

首先在项目根目录下使用 *gtags* 命令生成标签数据库文件
+ /GTAGS/: definition database
+ /GRTAGS/: reference database
+ /GPATH/: path name database

e.g
#+begin_latex
  \begin{minted}[frame=leftline, mathescape]{text}
  linux-stable $ du -h G*
  8.7M    GPATH
  318M    GRTAGS
  127M    GTAGS
  \end{minted}
#+end_latex

***** installation

http://www.gnu.org/software/global/download.html

#+BEGIN_EXAMPLE
$ ./configure & make & make install
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  $ gtags --version
  gtags (GNU GLOBAL) 6.5.2
#+END_EXAMPLE

**** shortcuts                                                  :shortcut:

|---------+----------------------------------|
| C-c g a | helm-gtags-tags-in-this-function |
| C-j     | helm-gtags-select                |
| C-c g . | helm-gtags-dwim                  |
| C-c g , | helm-gtags-pop-stack             |
| C-c g < | helm-gtags-previous-history      |
| C-c g > | helm-gtags-next-history          |
| C-c g f | helm-gtags-find-files            |
| C-c g s | helm-gtags-find-symbol           |
| C-c g r | helm-gtags-find-reference        |
|---------+----------------------------------|

**** helm-gtags

#+BEGIN_SRC emacs-lisp
  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-cg"
   helm-gtags-suggested-key-mapping t
   )

  (require 'helm-gtags)
  ;; Enable helm-gtags-mode
  (add-hook 'dired-mode-hook 'helm-gtags-mode)
  (add-hook 'eshell-mode-hook 'helm-gtags-mode)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)

  (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  ;; (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c g h") 'helm-gtags-show-stack)
  (define-key helm-gtags-mode-map (kbd "C-c g p") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c g n") 'helm-gtags-next-history)
#+END_SRC

Note： 快捷键绑定以 *C-c g* 打头

**** ggtags

#+BEGIN_SRC emacs-lisp
  (require 'ggtags)
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                (ggtags-mode 1))))

  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

  (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC

ggtags 没有 helm-gtags 好用，可能会破坏当前 buffer 窗口布局， /弃用/

**** helm-gtags-dwim M-. （跳转定义、引用、头文件）

M-. runs the command *helm-gtags-dwim*

It is bound to *M-.*.

(helm-gtags-dwim)

Find by context. Here is
- on include statement then jump to included file
- on symbol definition then jump to its references
- on reference point then jump to its definition.

**** helm-gtags-pop-stack M-, (跳回)
**** helm-gtags-select （浏览project中的所有标签）

设置绑定在 C-j 上，不好， C-j 应该是回车与换行

[[/home/ben/Wally/Journal/Figures/scrot/22666kXD.png]]

**** helm-gtags-tags-in-this-function 本函数中的所有标签
**** tag history

|-----------------------------+---------|
| helm-gtags-show-stack       | C-c g h |
| helm-gtags-previous-history | C-c g p |
| helm-gtags-next-history     | C-c g n |
|-----------------------------+---------|
*** sr-speedbar                                                  :speedbar:

1. shortcut
   |---------+-------------------------------------------------------------------------------------------------|
   |         | sr-speedbar-open OR  sr-speedbar-toggle                                                         |
   | SPC     | open the children of a node.                                                                    |
   | RET     | open the node in another window.                                                                |
   |         | If node is a file  open that file;                                                              |
   |         | if node is a directory ,  enter that directory;                                                 |
   |         | if node is a tag in a file ,  jump to the location of that tag in the file.                     |
   | U       | go up parent directory.                                                                         |
   | n/p     | moves to next or previous node.                                                                 |
   | M-n/M-p | moves to next or previous node at the current level.                                            |
   | b       | switches to buffer list using Speedbar presentation. You can also open children of each buffer. |
   | f       | switches back to file list.                                                                     |
   |---------+-------------------------------------------------------------------------------------------------|

2. Improvements compared to speedbar
   1) Automatically switches directory tree - when you switch buffer -
      to the default-directory of current buffer.
   2) Use an Emacs window instead of frame, make it easier to use.
   3) C-x 1 deletes every window except Speedbar, so you won't have to
      open again.
   4) You can prevent C-x o to jump to sr-speedbar window by setting
      sr-speedbar-skip-other-window-p to `t`. You can still move to
      sr-speedbar window using either the mouse or windmove.

3. 结论

   *ecb完全可以取代之，弃*

*** company-mode: [[http://company-mode.github.io/][general completion]] :company:

**** intro

Company stands for /complete anything/ and is a modular in-buffer
completion mechanism.

+ *Back-ends* are single functions.
+ A visualization (*front-end*) is also a single function.

/Company-mode/ 比 /Auto-complete/ 用着更习惯。

**** settings

#+BEGIN_SRC emacs-lisp
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

**** shortcut                                                   :shortcut:

|-----------+-----------------------|
| M-p/n     | move to previous/next |
| M-<digit> | move to n-th          |
| Return    | select                |
| TAB       |                       |
| *C-s/r*   | search                |
| *C-w*     | see the source        |
|-----------+-----------------------|

*** [[https://github.com/abo-abo/function-args][fucntion-args]]

1. intro

   function-args is a GNU Emacs package for /showing an inline
   arguments hint/ for the C/C++ function at point.

2. moo-jump-local: 本地标签跳转

   Select a tag to jump to from tags defined in current buffer.

   弹出 helm 窗口，能够跳转至 /函数定义/, /头文件引用/ 和 /宏/ 处。
   不支持变量的定义与引用跳转。

   *使用 ECB 能够完全取代*

3. fa-show M-i

   |-------+-------------------------------------|
   | M-i   | fa-show                             |
   | M-n/h | cycle overloaded functions          |
   | M-u   | dismiss the hint                    |
   | M-j   | fa-jump  (*when fa-show is active*) |
   |-------+-------------------------------------|

4. moo-complete M-o

   It's essentially a c++-specific version of
   semantic-ia-complete-symbol. It behaves better, because it accounts
   more for function overloading and inheritance. Also it's prettier
   (type parts are fontified) and faster (helm is used for
   completion). You can invoke it with M-o by default.

*** CEDET: [[http://cedet.sourceforge.net/][Collection of Emacs Development Tools]] :cedet:

**** why cedet?

1. Elisp写成，便于移植
2. /动态/ 相对gtags静态
3. disadvantages: slow,  but still fast
4. 内置于Emacs，安装配置简单


#+BEGIN_SRC cpp
  #include <boost/asio.hpp>
  #include <iostream>

  struct s{
    int ab;
    bool b;
  };

  int main(int argc, char *argv[])
  {
    s ss;
    return 0;
  }

#+END_SRC

*Note: 在 org source buffer 中无效*

**** cedet源码安装（ 内置的cedet足够用了 ）

***** 编译错误
#+BEGIN_EXAMPLE
  Wrong type argument: stringp, nil
  make: *** [autoloads] 错误 255
#+END_EXAMPLE

原因：可能因为版本问题，官网上测试的Ubuntu和Emacs版本都低于当前使用版
本

***** 解决

****** 放弃，使用Emacs内置的cedet

****** 使用git版

1) git clone http://git.code.sf.net/p/cedet/git cedet

2) place the checked out cedet directory in your ~/.emacs.d.

3) make

   #+BEGIN_EXAMPLE
     cd cedet
     make # wait for it to complete
     cd contrib
     make
   #+END_EXAMPLE

4) setting

   #+BEGIN_EXAMPLE
     (load-file (concat user-emacs-directory "/cedet/cedet-devel-load.el"))
     (load-file (concat user-emacs-directory "cedet/contrib/cedet-contrib-load.el"))
   #+END_EXAMPLE


****** 使用bzr版
1) bzr checkout

   bzr://cedet.bzr.sourceforge.net/bzrroot/cedet/code/trunk cedet

2) place the checked out cedet directory in your ~/.emacs.d.

3) make

   #+BEGIN_EXAMPLE
     cd cedet
     make # wait for it to complete
     cd contrib
     make
   #+END_EXAMPLE

4) setting

   #+BEGIN_EXAMPLE
     (load-file (concat user-emacs-directory "/cedet/cedet-devel-load.el"))
     (load-file (concat user-emacs-directory "cedet/contrib/cedet-contrib-load.el"))
   #+END_EXAMPLE

5) error:Cannot unload builtin CEDET since it is already loaded

   - 原因：可能在load-file之前已经有其它包启用了内置的cedet
   - 解决
     - (setq load-path (remove-if (lambda (x) (string-match-p "cedet" x)) load-path))
     - 将cedet-bzr配置提前

**** cedet git 版与内置版冲突解决

使用 git 版的 cedet, 在 load 配置文件时与内置 cedet 矛盾

#+BEGIN_EXAMPLE
error:Cannot unload builtin CEDET since it is already loaded
#+END_EXAMPLE

解决： 将 cedet 的加载配置放在前面

*每次折腾 Emacs C++ IDE 都好烦人！！！*

**** semantic(语义)                                             :semantic:

***** intro

Semantic is a package that provides language-aware editing commands
based on /source code parsers/. Parsing is a process of analyzing source
code based on programming language syntax. Emacs understands your
source code through this process to provides features such as
contextual /code completion/, /code navigation/.

***** setup

#+BEGIN_EXAMPLE
  (require 'cc-mode)
  (require 'semantic)

  (global-semanticdb-minor-mode 1)
  (global-semantic-idle-scheduler-mode 1)

  (semantic-mode 1)
#+END_EXAMPLE

***** command: semantic-mode

This command activates semantic-mode. In Semantic mode, Emacs parses
the buffers you visit for their semantic content.

Notice that at the bottom, Emacs prints messages like this:

#+begin_latex
\begin{minted}[frame=leftline, mathescape]{text}
Parsing stl_list.h (LL)...done
\end{minted}
#+end_latex

This is common behavior of Semantic:  when you perform a jump to a
symbol or perform a completion, Semantic tries to be accurate by
parsing all the included files and all the included files in the
included files and so on, until it reaches the end:

You may worry that this process takes a long time. Sometimes, it
does. However, this is just a one time process. Once it is parsed,
Semantic will cache the parsing result for future use. The next time
you perform some action on the parsed code, such as code completion,
you will get your desired output instantly.

***** Command: global-semanticdb-minor-mode

As mentioned above, Semantic caches parsing result for future use. To
do that, /semanticdb-minor-mode/ must be activated. In Semantic DB mode,
Semantic parsers store results in a database, which can be saved for
future Emacs sessions. The cache is saved in directory specified by
semanticdb-default-save-directory variable. The default directory is
*~/.emacs.d/semanticdb* .

***** Command: global-semantic-idle-scheduler-mode

When /semantic-idle-scheduler-mode/ is enabled, Emacs periodically
checks to see if the buffer is out of date, and reparses while the
user is idle (not typing). When this mode is off, a buffer is only
reparsed when user explicitly issue some command.

With semantic-idle-scheduler-mode, Emacs keeps track live changes of
your source code.

***** Add more system include paths

By default, Semantic automatically includes some default system
include paths such as /usr/include, /usr/local/include… You can view
the list of include paths in
*semantic-dependency-system-include-path*. To add more include paths,
for example Boost include paths, use the function
/semantic-add-system-include/ like this:

#+BEGIN_EXAMPLE
(semantic-add-system-include "/usr/include/boost" 'c++-mode)
(semantic-add-system-include "~/linux/kernel")
(semantic-add-system-include "~/linux/include")
#+END_EXAMPLE

***** shortcuts                                                :shortcut:

|   | semantic-ia-fast-jump |
|   | semantic-ia-complete-symbol  |

** C++IDE                                                              :cpp:
*** Emacs C++ IDE
**** 目标

1) 头文件与源文件之间跳转
2) 浏览Linux内核树
3) 交互式大纲显示文件结构
4) 以文件浏览器形式显示静态大纲树
5) 符号引用
6) 代码补全
7) 头文件补全
8) 在底部显示函数接口和变量定义
9) 跳转到当前函数头
10) 编译支持
11) 编译输出
12) GDB调试
13) 查看手册

**** function-args

|-----+--------------|
| M-o | moo-complete |
| M-i | fa-show      |
| M-J | fa-jump      |
|-----+--------------|

**** senator

Senator: SEmatic NavigaTOR.

|---------+--------------------------|
| C-c n   | senator-next-tag         |
| C-c p   | senator-previous-tag     |
| C-c u   | senator-go-up-reference  |
| C-c g   | semantic-symref          |
| C-c M-w | senator-copy-tag         |
| C-c C-w | senator-kill-tag         |
| C-c C-y | senator-yank-tag         |
| C-c r   | senator-copy-to-register |
|         | senator-fold-code-toggle |
|---------+--------------------------|
**** company-c-header
https://github.com/randomphrase/company-c-headers
1. install: MEPLE
2. setting:
   #+BEGIN_EXAMPLE
   (add-to-list 'company-backends 'company-c-headers)
   #+END_EXAMPLE
3. Note: If you want to complete C++ header files, you have to add its
   paths since by default company-c-headers only includes these two
   system include paths: /usr/include/ and /usr/local/include/. To
   enable C++ header completion for standard libraries, you have to
   add its path, for example, like this:
   #+BEGIN_EXAMPLE
   (add-to-list 'company-c-headers-path-system "/usr/include/c++/4.8/")
   #+END_EXAMPLE

**** 代码折叠
Emacs has a minor mode called hs-minor-mode that allows users to fold and
hide blocks of text. Blocks are defined by regular expressions which match
the start and end of a text region. For example, anything in between { and }
is a block. The regular expressions are defined in hs-special-modes-alist.

Setup for C/C++:

(add-hook 'c-mode-common-hook   'hs-minor-mode)

Default key bindings:
|-------------+--------------------------------------------|
| C-c @ C-c   | Command: hs-toggle-hiding                  |
|             | Toggle hiding/showing of a block           |
|-------------+--------------------------------------------|
| C-c @ C-h   | Command: hs-hide-block                     |
|             | Select current block at point and hide it  |
|-------------+--------------------------------------------|
| C-c @ C-l   | Command: hs-hide-level                     |
|             | Hide all block with indentation levels     |
|             | below this block                           |
|-------------+--------------------------------------------|
| C-c @ C-s   | Command: hs-show-block                     |
|             | Select current block at point and show it. |
|-------------+--------------------------------------------|
| C-c @ C-M-h | Command: hs-hide-all                       |
|             | Hide all top level blocks, displaying      |
|             | only first and last lines.                 |
| C-c @ C-M-s | Command: hs-show-all                       |
|             | Show everything                            |
|-------------+--------------------------------------------|
**** smartparens
smartparens is a minor mode that provides many features for manipulating
pairs. Pair can be simple as parentheses or brackets, or can be programming
tokens such as if … fi or if … end in many languages. The most basic and
essential feature is automatic closing of a pair when user inserts an
opening one.

#+BEGIN_EXAMPLE
  ;; Package: smartparens
  (require 'smartparens-config)
  (show-smartparens-global-mode +1)
  (smartparens-global-mode 1)

  ;; when you press RET, the curly braces automatically
  ;; add another newline
  (sp-with-modes '(c-mode c++-mode)
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "ret")))
    (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                              ("* ||\n[i]" "RET"))))
#+END_EXAMPLE

For complete documentation, please refer to [[https://github.com/Fuco1/smartparens/wiki#information-for-new-users][Smartparens manual]].
**** narrowing
Narrowing means making only a text portion in current buffer visible.
Narrowing is useful when you want to perform text editing on a small part of
the buffer without affecting the others. For example, you want to delete all
printf statements in current functions, using flush-lines command. But if
you do so, you will also delete printf outside the current function, which
is undesirable. By narrowing, you can safely remove all those printf and be
certain that nothing else is changed accidentally.

Default key bindings:

|---------+--------------------------------------------|
| C-x n d | Command: narrow-to-defun                   |
| C-x n r | Command: narrow-to-region                  |
| C-x n n | Narrow buffer to active region             |
| C-x n w | Command: widen                             |
|---------+--------------------------------------------|
**** indentation
**** compile
Compilation mode turns each error message in the buffer into a hyperlink.
You can click on each error, or execute a key binding like RET to jump to
the location of that error.
|------+-------------------------------------------------------------------|
| C-o  | Display matched location, but do not switch point to matched      |
|      | buffer                                                            |
|------+-------------------------------------------------------------------|
| M-n  | Move to next error message, but do not visit error location       |
|------+-------------------------------------------------------------------|
| M-p  | Move to next previous message, but do not visit error location    |
|------+-------------------------------------------------------------------|
| M-g  | Move to next error message, visit error location                  |
| n    |                                                                   |
|------+-------------------------------------------------------------------|
| M-g  | Move to previous error message, visit error location              |
| p    |                                                                   |
|------+-------------------------------------------------------------------|
| RET  | Visit location of error at poiint                                 |
|------+-------------------------------------------------------------------|
| M-{  | Move point to the next error message or match occurring in a      |
|      | different file                                                    |
|------+-------------------------------------------------------------------|
| M-}  | Move point to the previous error message or match occurring in a  |
|      | different file                                                    |
|------+-------------------------------------------------------------------|
| q    | Quit *compilation* buffer                                         |
|------+-------------------------------------------------------------------|
**** TODO debug

*** gtags                                                           :gtags:
+ C-c g a helm-gtags-tags-in-this-function
+ C-j helm-gtags-select
+ C-c g . helm-gtags-dwim
+ C-c g , helm-gtags-pop-stack
+ C-c g < helm-gtags-previous-history
+ C-c g > helm-gtags-next-history
+ C-c g f helm-gtags-find-files
+ C-c g s helm-gtags-find-symbol
+ C-c g r helm-gtags-find-reference

http://tuhdo.github.io/c-ide.html#orgheadline37

GNU Global has an environment variable named *GTAGSLIBPATH*. This
variable holds GTAGS database of _external libraries_ that your project
depends on but not inside your project. For example, your project may
rely on *system headers* such as stdio.h, stdlib.h… but these headers
are internal to your project.

However, remember that you can *only jump to tag definitions* of
external dependencies, and nothing else (such as files or
references).

But, again, once you are inside the external
library, you can start jumping around sicne it becomes your current
project.

#+BEGIN_EXAMPLE
export GTAGSLIBPATH=$HOME/.gtags/
#+END_EXAMPLE

*** cedet


**** senator
Senator is a part of CEDET. Senator stands for SEmantic
NAvigaTOR. Senator provides some useful commands for operating on
semantic tags in SemanticDB.

+ C-c , n (注意逗号)

  runs senator-next-tag, navigate to the next Semantic tag.

+ C-c , p

  runs senator-previous-tag, navigate to the previous Semantic tag.

+ C-c , u

  runs senator-go-to-up-reference, move up one reference level from
  current tag. An upper reference level of a tag is the source that
  defines the tag or includes the tag. This is incredibly useful when
  you want to jump from a function declaration in a class to its
  definition, or jump to the class that a function belongs to,
  quickly.

+ C-c , M-w

  runs senator-copy-tag, take the current tag, and place it in the tag
  ring.

+ C-c , C-w

  runs senator-kill-tag, take the current tag, place it in the tag
  ring, and kill it. Killing the tag removes the text for that tag,
  and places it into the kill ring. Retrieve that text with C-y.

+ C-c , C-y

  runs senator-yank-tag, yank a tag from the tag ring. The form the
  tag takes is different depending on where it is being yanked to. For
  example, in previous example with C-c , C-w, when you run C-y, it
  yanks the whole thing including function interface and its body. C-c
  , C-y only yanks the function interface.

**** ede
**** Command: global-semantic-idle-summary-mode

This mode, when enabled, displays function interface in the minibuffer:

It works well for C but not C++, since C++ can overload function and
semantic-idle-summary-mode can only display one interface at a
time. Since this mode is part of Semantic, it also relies on
SemanticDB that is created from parsing source files.

Setup:
#+BEGIN_EXAMPLE
(global-semantic-idle-summary-mode 1)
#+END_EXAMPLE

**** Command: global-semantic-stickyfunc-mode

When enable, this mode shows the function point is currently in at the
first line of the current buffer. This is useful when you have a very
long function that spreads more than a screen, and you don't have to
scroll up to read the function name and then scroll down to original
position.

Setup:
#+BEGIN_EXAMPLE
(add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
#+END_EXAMPLE

One of the problem with current semantic-stickyfunc-mode is that it
does not display all parameters that are scattered on multiple
lines. This package handles that problem:
semantic-stickyfunc-enhance. Extra: stock semantic-stickyfunc-mode
does not include assigned values to function parameters of
Python. This package also fixed that problem. You can click the link
to see demos.

You can install the package via MELPA and load it: https://github.com/tuhdo/semantic-stickyfunc-enhance
#+BEGIN_EXAMPLE
(require 'stickyfunc-enhance)
#+END_EXAMPLE

**** Emacs ede
+ http://www.gnu.org/software/emacs/manual/html_node/ede/index.html#Top
+
*** company-c-header
company-c-headers provides auto-completion for C/C++ headers using
Company. After installing from MELPA, set it up:

#+BEGIN_EXAMPLE
(add-to-list 'company-backends 'company-c-headers)
#+END_EXAMPLE

IMPORTANT: If you want to complete C++ header files, you have to add
its paths since by default company-c-headers only includes these two
system include paths: /usr/include/ and /usr/local/include/. To enable
C++ header completion for standard libraries, you have to add its
path, for example, like this:

#+BEGIN_EXAMPLE
(add-to-list 'company-c-headers-path-system "/usr/include/c++/4.8/")
#+END_EXAMPLE

After that, you can complete C++ header files. To complete project
local, use company-c-headers-path-user and put it in .dir-locals.el.

*** emacs clang                                                     :clang:

#+BEGIN_SRC emacs-lisp
  (setq company-backends (delete 'company-semantic company-backends))
  (define-key c-mode-map (kbd "C-<tab>") 'company-complete)
  (define-key c++-mode-map (kbd "C-<tab>" 'company-complete)
#+END_SRC

*** cedet qt
+ http://sourceforge.net/p/cedet/mailman/message/28257793/
+ http://www.emacswiki.org/emacs/SemanticLibraryParsing
+ http://alexott.blogspot.com/2009/02/cedet-qt.html
+ http://www.emacswiki.org/emacs/QtMode

*** QT Assistant
http://qt-project.org/doc/qt-4.8-snapshot/assistant-manual.html
https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0CB4QFjAA&url=http%3A%2F%2Fblog.morpheuz.cc%2F01%2F07%2F2008%2Fqt-assistant-emacs%2F&ei=XKwLVb-hHpDtoASky4GQCQ&usg=AFQjCNEiIgBsGpZWAMByiSqhyJ_4HOu1fA&sig2=9BHnXLzV3e3dZt3tWiALng

1. 思路1：从Emacs中启动Qt Assistant
   + call-process-shell-command

   #+BEGIN_EXAMPLE
   (defun assistant ()
   "runs qt assistant"
   (interactive)
   (call-process-shell-command "assistant" nil "assistant")
   )
   (global-set-key [f11] 'assistant)
   #+END_EXAMPLE

2. 思路2： 传递 (current-word) 给 assistant 的参数

** PythonIDE                                                        :python:
*** pyflakes                                                     :pyflakes:
+ https://pypi.python.org/pypi/pyflakes
+ https://github.com/pyflakes/pyflakes/


a simple program which checks python source files for errors.

pyflakes analyzes programs and detects various errors. it works by
parsing the source file, not importing it, so it is safe to use on
modules with side effects. it's also much faster.

install: pip install --upgrade pyflakes

*** pymacs
+ https://github.com/pinard/Pymacs
+ http://www.emacswiki.org/emacs/PyMacs


Pymacs is a powerful tool which, once started from Emacs, allows
both-way communication between Emacs Lisp and Python. Pymacs aims
Python as an extension language for Emacs rather than the other way
around, and this asymmetry is reflected in some design choices. Within
Emacs Lisp code, one may load and use Python modules. Python functions
may themselves use Emacs services, and handle Emacs Lisp objects kept
in Emacs Lisp space.

*** emacs-for-python
+ https://github.com/gabrielelanaro/emacs-for-python
+ http://gabrielelanaro.github.io/emacs-for-python/
+

*** elpy
+ https://github.com/jorgenschaefer/elpy
+ http://elpy.readthedocs.org/en/latest/introduction.html


1. indentation blocks
   + C-down (elpy-nav-next-iblock)
   + C-up (elpy-nav-previous-iblock)
   + C-left (elpy-nav-backward-iblock)
   + C-right (elpy-nav-forward-iblock)

   + M-down (elpy-nav-move-iblock-down)
   + M-up (elpy-nav-move-iblock-up)
   + M-left (elpy-nav-move-iblock-left)
   + M-right (elpy-nav-move-iblock-right)

2. project
   1) C-c C-f (elpy-find-file)

   2) C-c C-s (elpy-rgrep-symbol)
      Search the files in the current project for a string

   3) M-x elpy-set-project-root

3. completion
   M-TAB (elpy-company-backend) C-M-i

4. navigation
   + M-. (elpy-goto-definition)
   + M-* (pop-tag-mark)

5. interactive python
   + C-c C-z (elpy-shell-switch-to-shell)
   + C-c C-c (elpy-shell-send-region-or-buffer)
   + C-M-x (python-shell-send-defun)

6. syntax checking
   + C-c C-n (elpy-flymake-next-error)
   + C-c C-p (elpy-flymake-previous-error)
   + C-c C-v (elpy-check)

7. documentation
   + C-c C-d (elpy-doc)

8. refactoring
   + C-c C-e (elpy-multiedit-python-symbol-at-point)
   + C-c C-r (elpy-refactor)

*** Python
#+BEGIN_SRC latex
参考：
\begin{itemize}
\item \href{http://www.emacswiki.org/emacs/PythonProgrammingInEmacs}{EmacsWiki:Python programming in Emacs}
\item \href{http://www.emacswiki.org/emacs/ProgrammingWithPythonModeDotEl}{EmacsWiki:python-mode}
\item \href{http://blog.csdn.net/max__payne/article/details/6365324}{CSDN blog}
\item \href{https://launchpad.net/python-mode}{python-mode项目主页}
\end{itemize}

\begin{enumerate}
\item Python programming in Emacs

  Emacs中进行Python编程主要有两种主模式：Emacs默认的python-mode，和第三方插件python-mode.el。两者都能为Python编程提供诸多便捷，工欲善其事，必先利其器，择一熟练使用则好，过分纠结使用哪一个反而舍本逐末。

\item Python-mode安装配置\footnote{TODO:Python-mode的更多特性}
\begin{verbatim}
(add-to-list 'load-path "/PATH/TO/PYTHON-MODE")
(setq py-install-directory "/PATH/TO/PYTHON-MODE")
(require 'python-mode)
;;窗口布局
(setq py-split-window-on-execute t)
(setq py-switch-buffers-on-execute-p t)
\end{verbatim}


\item Python-mode按键绑定

  更多详见Emacs帮助文档，甚至这样更方便。

  \begin{tabular}{l|l}
    \hline
    C-c C-c & py-execute-buffer \\
    C-c | & py-execute-region \\
    C-c TAB & py-indent-region \\
    C-c ! & py-shell \\
    C-c C-v & py-version \\
    C-c C-k & py-mark-block-or-clause \\
    C-c C-e & py-help-at-point \\
    \hline
    C-M-a & py-begining-of-def-or-class\\
    C-M-d & py-down \\
    C-M-e & py-end-of-def-or-class \\
    C-M-h & py-mark-def-or-class \\
    C-M-i & completion-at-point \\
    C-M-u & py-up \\
    C-M-x & py-execute-def-or-class \\
    \hline
  \end{tabular}
\end{enumerate}

#+END_SRC

*** [[http://clojure.iteye.com/blog/1724910][Emacs配置Python IDE]]                                              :blog:


最近要学习Python编程，正好也在学习Emacs。所以借助Google到处乱搜一气，终于完成Emacs下的Python
IDE配置。

Emacs的Python IDE配置需要用到如下插件：

1、[[http://rope.sourceforge.net/ropemacs.html][Ropemacs]]:
一个python在emacs中的重构插件。它依赖于rope和pymacs（也就是说，要装它先要装好rope和pymacs）。

2、python-mode和[[http://www.rwdev.eu/articles/emacspyeng][python-completion]]：分别是Emacs中的python模式和自动补全提示插件。

3、[[https://github.com/akaihola/flymake-python][flymake-python]]：emacs中python语法检测工具。

4、auto-complete：自动补全插件。

5、Yasnippet：snippet补全插件，国人编写，享誉国际的插件。

6、cedet：Emacs开发环境工具集合。emacs23之后似乎就内置其中了。

7、ecb：代码浏览的插件。使你的Emacs看起来和真正的IDE一样。


以上工具不提供链接的可以通过Emacs内置的package安装工具。执行M+x
“package-list-packages” 来进行安装。其他的可以看说明文档进行安装。

最省力的安装是，直接安装别人整合好的一个配置[[https://github.com/gabrielelanaro/emacs-for-python][emacs-for-python]]
直接下载下来，并在.emacs文件中添加：

#+BEGIN_EXAMPLE
     (load-file "~/.emacs.d/emacs-for-python/epy-init.el")
#+END_EXAMPLE


如果要配置代码错误检测，添加：

#+BEGIN_EXAMPLE
     (epy-setup-checker "pyflakes %f")
#+END_EXAMPLE


（不过我觉得还是自己一个个安装比较好，不然哪天来个emacs-for-clojure，后天在来个emacs-for-ruby之类的难保里面的package没有重复冲突的）

*** [[http://blog.sina.com.cn/s/blog_a15aa56901017u0c.html][配置Emacs下的Python开发环境]]                                      :blog:

**** 特性

在Linux论坛上总有人问Python用什么IDE比较好，然后总会有人回答说Emacs。最近开始学Python，也花了点时间研究怎么配置Emacs，发现没有想象中的那么麻烦。这篇文章大致上来自于[[http://hide1713.wordpress.com/2009/01/30/setup-perfect-python-environment-in-emacs/][Lei
Chen博客文章的翻译]]，完成以后的Emacs具有以下特性:

- 自动完成同一个文件内的变量、函数
- 自动完成python库中的名称
- 代码重构
- 模板展开功能
- 在线帮助系统
- 即时语法检测

其他特性还包括自动缩进，括号匹配，语法高亮，代码折叠等等。其中最有用的莫过于自动完成了，貌似很少有python编辑器可以做到这一点。而即时语法检测让emacs下的python代码书写变得像Eclipse一样，一旦有错误立刻就会高亮标记出来。

**** 如何安装

首先你得在home目录下有一个.emacs配置文件，并且有一个用来放插件的文件夹（比如说~/.emacs.d/）

1. 下载auto-completion.el到.emacs.d，并且在.emacs中添加如下几行：

   #+BEGIN_EXAMPLE
       (require ‘auto-complete)
       (global-auto-complete-mode t)
   #+END_EXAMPLE

2. 下载yasnippet到.emacs.d并且编辑.emacs:

   #+BEGIN_EXAMPLE
       (require ‘yasnippet) (yas/initialize) (yas/load-directory “~/.emacs.d/snippets”)
   #+END_EXAMPLE

3. 下载python-mode.el并且放到.emacs.d中。我们会在之后的配置中用到它
4. 设置Rope, Ropemacs

   我们需要使用最新的development版的rope和ropemacs，否则在emacs中不能找到rope-completion函数。通过如下步骤安装：

   #+BEGIN_EXAMPLE
       sudo apt-get install mercurial python-setuptools
       mkdir /tmp/rope && cd /tmp/rope
       hg clone http://bitbucket.org/agr/rope
       hg clone http://bitbucket.org/agr/ropemacs
       hg clone http://bitbucket.org/agr/ropemode
       sudo easy_install rope
       ln -s ../ropemode/ropemode ropemacs/
       sudo easy_install ropemacs
   #+END_EXAMPLE

5. 到 http://pymacs.progiciels-bpi.ca/archives/ 下载 pymacs并安装
6. 安装pyflacks以进行自动语法检查：

   #+BEGIN_EXAMPLE
       sudo apt-get install pyflakes
   #+END_EXAMPLE

7. 把所有东西放到一块儿
8. 在你的.emacs.d中创建一个init_python.el，并且加入以下内容：

   #+BEGIN_EXAMPLE
       (autoload 'python-mode "python-mode" "Python Mode." t)
       (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
       (add-to-list 'interpreter-mode-alist '("python" . python-mode))
       (require 'python-mode)
       (add-hook 'python-mode-hook
             (lambda ()
        (set-variable 'py-indent-offset 4)
        ;(set-variable 'py-smart-indentation nil)
        (set-variable 'indent-tabs-mode nil)
        (define-key py-mode-map (kbd "RET") 'newline-and-indent)
        ;(define-key py-mode-map [tab] 'yas/expand)
        ;(setq yas/after-exit-snippet-hook 'indent-according-to-mode)
        (smart-operator-mode-on)
        ))
       ;; pymacs
       (autoload 'pymacs-apply "pymacs")
       (autoload 'pymacs-call "pymacs")
       (autoload 'pymacs-eval "pymacs" nil t)
       (autoload 'pymacs-exec "pymacs" nil t)
       (autoload 'pymacs-load "pymacs" nil t)
       ;;(eval-after-load "pymacs"
       ;;  '(add-to-list 'pymacs-load-path YOUR-PYMACS-DIRECTORY"))
       (pymacs-load "ropemacs" "rope-")
       (setq ropemacs-enable-autoimport t)
       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       ;;; Auto-completion
       ;;;  Integrates:
       ;;;   1) Rope
       ;;;   2) Yasnippet
       ;;;   all with AutoComplete.el
       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       (defun prefix-list-elements (list prefix)
         (let (value)
           (nreverse
            (dolist (element list value)
             (setq value (cons (format "%s%s" prefix element) value))))))
       (defvar ac-source-rope
         '((candidates
            . (lambda ()
                (prefix-list-elements (rope-completions) ac-target))))
         "Source for Rope")
       (defun ac-python-find ()
         "Python `ac-find-function'."
         (require 'thingatpt)
         (let ((symbol (car-safe (bounds-of-thing-at-point 'symbol))))
           (if (null symbol)
               (if (string= "." (buffer-substring (- (point) 1) (point)))
                   (point)
                 nil)
             symbol)))
       (defun ac-python-candidate ()
         "Python `ac-candidates-function'"
         (let (candidates)
           (dolist (source ac-sources)
             (if (symbolp source)
                 (setq source (symbol-value source)))
             (let* ((ac-limit (or (cdr-safe (assq 'limit source)) ac-limit))
                    (requires (cdr-safe (assq 'requires source)))
                    cand)
               (if (or (null requires)
                       (>= (length ac-target) requires))
                   (setq cand
                         (delq nil
                               (mapcar (lambda (candidate)
                                         (propertize candidate 'source source))
                                       (funcall (cdr (assq 'candidates source)))))))
               (if (and (> ac-limit 1)
                        (> (length cand) ac-limit))
                   (setcdr (nthcdr (1- ac-limit) cand) nil))
               (setq candidates (append candidates cand))))
           (delete-dups candidates)))
       (add-hook 'python-mode-hook
                 (lambda ()
                        (auto-complete-mode 1)
                        (set (make-local-variable 'ac-sources)
                             (append ac-sources '(ac-source-rope) '(ac-source-yasnippet)))
                        (set (make-local-variable 'ac-find-function) 'ac-python-find)
                        (set (make-local-variable 'ac-candidate-function) 'ac-python-candidate)
                        (set (make-local-variable 'ac-auto-start) nil)))
       ;;Ryan's python specific tab completion
       (defun ryan-python-tab ()
         ; Try the following:
         ; 1) Do a yasnippet expansion
         ; 2) Do a Rope code completion
         ; 3) Do an indent
         (interactive)
         (if (eql (ac-start) 0)
             (indent-for-tab-command)))
       (defadvice ac-start (before advice-turn-on-auto-start activate)
         (set (make-local-variable 'ac-auto-start) t))
       (defadvice ac-cleanup (after advice-turn-off-auto-start activate)
         (set (make-local-variable 'ac-auto-start) nil))
       (define-key py-mode-map "\t" 'ryan-python-tab)
       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       ;;; End Auto Completion
       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       ;; Auto Syntax Error Hightlight
       (when (load "flymake" t)
         (defun flymake-pyflakes-init ()
           (let* ((temp-file (flymake-init-create-temp-buffer-copy
                'flymake-create-temp-inplace))
           (local-file (file-relative-name
          temp-file
          (file-name-directory buffer-file-name))))
             (list "pyflakes" (list local-file))))
         (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pyflakes-init)))
       (add-hook 'find-file-hook 'flymake-find-file-hook)
       (provide 'init_python)
   #+END_EXAMPLE

9. 在你的.emacs文件中添加：(load-library “init_python”)

**** 使用说明

1. 代
   码自动展开。比如说在编辑C/C++头文件的时候键入once然后按tab，则会自动展开#ifndef
   __FILE_H__这样的宏。这个功能是YASnippet提供的，在emacs的菜单中可以看到它的所有宏。展开以后再按tab键可以在已展开的代码
   之间切换位置。
2. 自动完成代码。函数名输入到一半按tab键会调用Rope和Ropemacs的功能自动完成库文件中的函数、变量名
3. C-c d 显示python的doc string
4. C-c C-c 运行当前的文件
5. C-c ! 打开python shell

事
实上init_python.el做的事情是通过使用auto_complete.el中的功能，把YASnippet和Rope的功能结合到了
一块儿，实现了类似TexMate的自动完成等功能。其中YASnippet可以自定义模板，很是实用。Rope的功能还在研究中。

* Miscellaneous
*** Emacs plugins recommanded

[[https://www.zhihu.com/question/21943533][有哪些是必备的emacs扩展？]]


我的另一个诀窍就是一旦发觉一个好的插件,立即调查原作者,务必把他所有开发的使用的工具调查清楚

- [X] company 取代auto-complete,更新很频繁
- [X] yasnippet 代码模板,关键是 _可内嵌lisp代码执行，太强悍了!接下来唯一的限制就是你的想象力了_
- [ ] js2-mode javascript开发神器(sublime之流和它根本不是一个数量级的)
- [ ] evil-mode 把emacs变成vim，基本vim有的它都有了比如text object，最酷的是可以写lisp自定义text object
- [ ] evil-leader 很简单的一个plugin,但是用好的话,让你效率成倍提升.
- [ ] evil-matchit 在成对的tag跳来跳去, vim的matchit移植版但更强大 (我写的)
- [ ] evil-nerd-commenter  , 按行注释代码, nerd-comment的移植版 (我写的)
- [X] helm
- [ ] web-mode, 通吃html所有相关
- [X] windows-numbering.el 子窗口跳转的终极方案,我用过所有的编辑器,没有比这个跟好的了.
- [ ] smex ,不用再记快捷键了
- [X] org-mode gtd工具,神级别的软件,和git,vim,emacs是一个档次的
- [X] winner-mode, undo窗口layout很有用
- [ ] gnus,让我又爱又恨,界面有点费解,但是有些killer feature, forward邮件,快速发邮件,添加附件不错,问题是Emacs其他插件太牛逼,比如和yasnippet结合用,和company-mode,和evil等等,所以gnus要伴我终生了.
- [X] ido, 类似于helm,和helm各有千秋我都用,五五开,不过helm有个让我爱死的设置,可以选择何时使用ido,helm或者两者都不用.开源真的不错呃,世界级高手都是惺惺相惜的.不像那些专有软件,菜鸟开发,即使是同一个公司,还要互相往死里掐.
- [ ] imenu 显示当前文件函数列表,可以直接跳转到那去,完全可配置,支持所有语言
- [X] flymake 实时语法检查,通吃所有语言
- [X] flyspell 拼写检查,爱死了,是我见过的所有拼写检查最强大,如果你知道如何配置.
- [ ] elisp 也许最好的插件就是Lisp语言本身,强大,简单易学,其语法看似诡异,于是自动过滤了菜鸟.
- [ ] keysnail - firefox模拟成Emacs,我用过的同类软件中最好的,细节无可挑剔
- [ ] percol - python开发的命令行工具,天才的作品,我现在的工作流主要就
  靠它,没有它我效率要大大降低.
*** 输入特殊字符

- 特殊字符以 C-x 8 为按键前缀
- 默认定义了一些数学符号和欧洲字母
- 可以定义自己需要的，但是要注意
  - 必要而简洁的，不要增加记忆的负担
  - 遵循规范，即全局按键绑定前缀为 C-x 8

**** help C-x 8 C-h

#+BEGIN_EXAMPLE
  C-x 8 SPC        
  C-x 8 !         ¡
  C-x 8 "         Prefix Command
  C-x 8 $         ¤
  C-x 8 '         Prefix Command
  C-x 8 *         Prefix Command
  C-x 8 +         ±
  C-x 8 ,         Prefix Command
  C-x 8 -         ­
  C-x 8 .         ·
  C-x 8 /         Prefix Command
  C-x 8 1         Prefix Command
  C-x 8 3         Prefix Command
  C-x 8 <         «
  C-x 8 =         ¯
  C-x 8 >         »
  C-x 8 ?         ¿
  C-x 8 C         ©
  C-x 8 L         £
  C-x 8 P         ¶
  C-x 8 R         ®
  C-x 8 S         §
  C-x 8 Y         ¥
  C-x 8 ^         Prefix Command
  C-x 8 _         Prefix Command
  C-x 8 `         Prefix Command
  C-x 8 c         ¢
  C-x 8 m         µ
  C-x 8 o         °
  C-x 8 u         µ
  C-x 8 x         ×
  C-x 8 |         ¦
  C-x 8 ~         Prefix Command

  C-x 8 ~ SPC     ~
  C-x 8 ~ A       Ã
  C-x 8 ~ D       Ð
  C-x 8 ~ N       Ñ
  C-x 8 ~ O       Õ
  C-x 8 ~ T       Þ
  C-x 8 ~ a       ã
  C-x 8 ~ d       ð
  C-x 8 ~ n       ñ
  C-x 8 ~ o       õ
  C-x 8 ~ t       þ
  C-x 8 ~ ~       ¬

  C-x 8 ` SPC     `
  C-x 8 ` A       À
  C-x 8 ` E       È
  C-x 8 ` I       Ì
  C-x 8 ` O       Ò
  C-x 8 ` U       Ù
  C-x 8 ` a       à
  C-x 8 ` e       è
  C-x 8 ` i       ì
  C-x 8 ` o       ò
  C-x 8 ` u       ù

  C-x 8 _ a       ª
  C-x 8 _ o       º

  C-x 8 ^ SPC     ^
  C-x 8 ^ 1       ¹
  C-x 8 ^ 2       ²
  C-x 8 ^ 3       ³
  C-x 8 ^ A       Â
  C-x 8 ^ E       Ê
  C-x 8 ^ I       Î
  C-x 8 ^ O       Ô
  C-x 8 ^ U       Û
  C-x 8 ^ a       â
  C-x 8 ^ e       ê
  C-x 8 ^ i       î
  C-x 8 ^ o       ô
  C-x 8 ^ u       û

  C-x 8 3 /       Prefix Command

  C-x 8 1 /       Prefix Command

  C-x 8 / /       ÷
  C-x 8 / A       Å
  C-x 8 / E       Æ
  C-x 8 / O       Ø
  C-x 8 / a       å
  C-x 8 / e       æ
  C-x 8 / o       ø

  C-x 8 , ,       ¸
  C-x 8 , C       Ç
  C-x 8 , c       ç

  C-x 8 ' SPC     '
  C-x 8 ' '       ´
  C-x 8 ' A       Á
  C-x 8 ' E       É
  C-x 8 ' I       Í
  C-x 8 ' O       Ó
  C-x 8 ' U       Ú
  C-x 8 ' Y       Ý
  C-x 8 ' a       á
  C-x 8 ' e       é
  C-x 8 ' i       í
  C-x 8 ' o       ó
  C-x 8 ' u       ú
  C-x 8 ' y       ý

  C-x 8 " SPC     "
  C-x 8 " "       ¨
  C-x 8 " A       Ä
  C-x 8 " E       Ë
  C-x 8 " I       Ï
  C-x 8 " O       Ö
  C-x 8 " U       Ü
  C-x 8 " a       ä
  C-x 8 " e       ë
  C-x 8 " i       ï
  C-x 8 " o       ö
  C-x 8 " s       ß
  C-x 8 " u       ü
  C-x 8 " y       ÿ

  C-x 8 * SPC      
  C-x 8 * !       ¡
  C-x 8 * $       ¤
  C-x 8 * +       ±
  C-x 8 * -       ­
  C-x 8 * .       ·
  C-x 8 * <       «
  C-x 8 * =       ¯
  C-x 8 * >       »
  C-x 8 * ?       ¿
  C-x 8 * C       ©
  C-x 8 * L       £
  C-x 8 * P       ¶
  C-x 8 * R       ®
  C-x 8 * S       §
  C-x 8 * Y       ¥
  C-x 8 * c       ¢
  C-x 8 * m       µ
  C-x 8 * o       °
  C-x 8 * u       µ
  C-x 8 * x       ×
  C-x 8 * |       ¦

  C-x 8 3 / 4     ¾

  C-x 8 1 / 2     ½
  C-x 8 1 / 4     ¼
#+END_EXAMPLE

**** reference

- http://lifegoo.pluskid.org/wiki/EmacsTip.html

*** Emacs X Widgets                                              :xwidgets:

- [[https://www.emacswiki.org/emacs/EmacsXWidgets][EmacsWiki]]
- http://www.newsmth.net/nForum/#!article/Emacs/110932


#+BEGIN_QUOTE 水木清华
 XWidget Branch has been merged into Emacs 25.1  这意味着离在 Emacs 里
 嵌入 webkit 浏览器不远了!  看到这个消息比较激动, 开始还怀疑是不是我理
 解错了, 现在的 Emacs 维护者 John Wiegley 在邮件列表有对 push 的人评
 论: Yes, thank you!  A momentous moment! reddit 的网友评论表示以后就
 在 Emacs 家住了, 不走了!   Emacs 内能嵌入非纯文本的浏览器并结合 Emacs
 lisp 的编程操控能力, 能让 Emacs 的使用提升很大的一个台阶. 这里有人小
 试了一把自己从 Emacs 源码的对应分支编译的: http://emacsist.com/10699
#+END_QUOTE

#+BEGIN_QUOTE  [[http://zhidao.baidu.com/link?url=JCKxUHevLyUgH2vzRp_ngL7-fSoFOdDDtEzmFVLidqTqLMFYIxJHbyHXq47o2oPbM1CSSnrg56_o0xn_I16kba][百度知道]]
chromium和苹果的safari用的是都是各自维护的webkit内核，遨游用webkit内核，
但是你懂的，就开发团队而言，有google支持的chromium显然更牛B。

360、QQ、搜狗、chrome用的是开源软件chromium，在此基础上自行修改封装的闭源软件。
就速度而言，当然是每个小时发布一个新版本的chromium最快
#+END_QUOTE

The xwidget patch enables embedding of gtk widgets inside emacs
buffers.

* FAQ                                                             :FAQ:EMACS:
** 怎样才能语法加亮

将以下写到.emacs文件:

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

** 在Windows版的Emacs下怎样使用ispell?

Win32有一个native的ispell v4，但很不好用，建议装一个cygwin的ispell-3.2.06

** Windows版的Emacs为什么不能显示图片?

使用cvs版的ntemacs,在.emacs中加入:

#+BEGIN_SRC emacs-lisp
(auto-image-file-mode t)
#+END_SRC

** 设置打开文件的缺省路径

#+BEGIN_SRC emacs-lisp
(setq default-directory "~")
#+END_SRC

** ".emacs"在哪里？

+ Unix/Linux ~/.emacs 如果没有，自己创建一个。

  #+BEGIN_EXAMPLE
  touch .emacs.
  #+END_EXAMPLE

+ Windows 在根目录下创建一个名为".emacs"的文件, 如果创建不了的话也可以
  用"_emacs"作为文件名. 主目录由windows的环境变量HOME指定，如果没有设
  定HOME环境变量，一般为C:\

** 下载的el文件怎么用？

把文件放到load-path中去，然后按照文件头上的注释说明做。
~/site-lisp 一般默认在load-path中. 增加load-path例:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/path/to/yours")
#+END_SRC

** 怎么进行矩形区域操作？(类似UltraEdit的列模式) 怎么在每一行前插入相同文字？

x-10-3-1

** 总有个带小尾巴~的文件出现(自动备份文件)，怎么办？

小尾巴文件是备份，可以干掉它或者按文件名分类放到指定目录中去。详细见x-8-8

** 我想把一个命令绑定到某个按键组合上，怎么表示组合键？

x-8-6

** 怎么转换文件格式？(DOS <--> UNIX)

C-x f (函数 set-buffer-file-coding-system )

** 查找和替换的时候怎么输入回车之类的特殊字符？

C-q之后输入该特殊字符例如: ^M是C-q C-m，回车是C-q C-j，TAB是C-q TAB

** M-x shell进入shell-mode出现乱码？怎么修改颜色和字体？

在.emacs中加入:

#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

更多选项请: M-x customize-group ansi-colors

** windows下插入、浏览图片时emacs崩溃

windows版本的emacs的图片支持dll是用mingw编译的，因此如果你的emacs是用
VC编译的，则可能出现意想不到的问题。建议选择用[[http://ntmacs.sf.net][mingw编译的emacs]]

** 如何跳到某一行?

"M-x goto-line", 推荐绑定在 "M-g" 键上, Emacs22默认把它绑定在 M-g g 上。

** 如何插入当前时间?

一个例子:

#+BEGIN_SRC emacs-lisp
(defun my-insert-date ()
  (interactive)
  (insert (format-time-string "%Y/%m/%d %H:%M:%S" (current-time))))

(global-set-key (kbd "C-c m d") 'my-insert-date)
#+END_SRC

** 修改 .emacs 后即时生效(不重启)?

有几种方法:

1. M-x eval-last-sexp(or C-x C-e)
2. M-x eval-region
3. M-x eval-buffer

** 如何redo？

undo(绑定到 C-/)的过程中，进行一下其它动作，比如 C-f 移动一下光标，随
后继续undo(C-/)就是redo。或者使用redo.el

** 如何自动换行?

设置 (toggle-truncate-lines t)

** 为何 M-w 无效？

如果是windows系统，很可能是QQ热键拦截

** Chinese Related

Emacs与其他程序间为什么不能拷贝、粘贴

在~/.emacs加入这句话

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

** Emacs中新开buffer不使用默认字体怎么办

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
 '(font . "-*-SimSun-medium-r-normal-*-12-*"))
#+END_SRC

** XEmacs怎样保存中文

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'gb2312)
#+END_SRC

** 怎样使Emacs支持GBK和GB18030

Emacs21/22不支持GBK和GB18030。

如果你用的是Emacs21/22, 请 [[http://mule-gbk.sourceforge.net][mule-gbk]] ，按照里面的README进行安装。这样可以使
Emacs21/22支持GBK。

** 无法使Emacs21/22支持GB18030。

Emacs23/24支持GBK和GB18030.

** 怎样在文件中指定编码

Emacs具有自动识别文件编码的功能，不过很多编码方案都是类似的，没有什么算法能区分这些编码方案，因此，Emacs的自动识别不是万能的，有时候Emacs会
误判文件的编码。

只有文件的作者最清楚文件采用的是什么编码，因此我们提倡在文件中指定编码。在文件中指定编码的方法有两种:

1. 在文件的第一行(对于脚本文件可以是第二行)加上:

   #+BEGIN_EXAMPLE
   -*- coding: gb2312; -*-
   #+END_EXAMPLE

   对于源程序文件可以在前面加注释符号，如

   #+BEGIN_EXAMPLE
    /*     -*- coding: gb2312; -*-     */       /* C语言程序 */
    //      -*- coding: gb2312; -*-             // C++语言程序
   #+END_EXAMPLE

2. 在文件的末尾使用文件变量(Local Variables), 例如在 TeX 文件末尾，可以加上:

   #+BEGIN_EXAMPLE
    %% Local Variables:           % 是 Tex 文件的注释符号，
    %% coding: gbk                  可以根据情况换成其它注释符号，
    %% End:                         普通文本也可以不加注释符号。
   #+END_EXAMPLE

** TeX

Windows下不能使用LaTeX-preview

使用CVS的GNU Emacs或XEmacs就可以了

** Emacs能象vimsuite那样加载类似CJK的模板么?

可以，使用template.el扩展可以加载任何格式的模板

** 怎样把C/C++文件重新排版

选择文本块,ESC C-\,M-X c-set-style,可以设置不同的缩进风格

c/c++, java 自动补全功能?

c/c++ - ecb java - jde

Both kind of SLOW, though.

** 如何在Emacs中编写调试c/c++程序

M-x c-mode/ M-x cc-mode

M-x compile

M-x gdb

Gnus, Mail, Web

** mew怎样使用SMTP验证?

#+BEGIN_SRC emacs-lisp
(setq mew-smtp-auth-list (quote ("CRAM-MD5" "LOGIN" "PLAIN")))
#+END_SRC

** 怎样使mew在pop取信时将信件保留在服务器上?

#+BEGIN_SRC emacs-lisp
(setq mew-pop-delete nil)
#+END_SRC

** gnus怎样使用通讯录?

可以用 bbdb

Download

** 获取最新版本的GNU Emacs源码

最新源码可以使用cvs方式:

#+BEGIN_EXAMPLE
cvs -z3 -d:pserver:anonymous@cvs.savannah.gnu.org:/sources/emacs co emacs
#+END_EXAMPLE

** windows用户可以用cygnus下的cvs(推荐), 也可以装一个WinCVS

bzr branch --stacked http://bzr.savannah.gnu.org/r/emacs/trunk

- 从官方 bzr 库镜像而来

  git clone git://repo.or.cz/emacs.git
  git clone http://repo.or.cz/r/emacs.git

- 从 repo.or.cz 的 git 库镜像而来

  git clone git://github.com/emacsmirror/emacs.git
  git clone http://github.com/emacsmirror/emacs.git

  git clone git://gitorious.org/emacsmirror/emacs.git
  git clone http://git.gitorious.org/emacsmirror/emacs.git

可以给 git clone 加 --depth 1 参数以加快速度，见 git help clone。

** Windows用户如何获取GNU Emacs编译版本

+ [[http://ourcomments.org/cgi-bin/emacsw32-dl-latest.pl][一个更新较快的站点]]
+ [[http://ntemacs.sourceforge.net/][下载NTemacs的最新CVS版]]

** Mac用户如何获取GNU Emacs编译版本

+ [[http://aquamacs.org/][AquaEmacs]]
+ [[http://emacsformacosx.com/][GNU Emacs For Mac OS X]]
+ [[https://github.com/railwaycat/emacs-mac-port][Emacs Mac Port]]

** 推荐Emacs入门书籍

+ Sams Teach Yourself Emacs in 24 Hours
+ 《学习GNU Emacs》

** 推荐Emacs Lisp入门书籍

+ GNU Emacs Lisp编程入门涵盖了入门需要的几乎所有知识，写给没用过Emacs，没学过lisp；但是用过编辑器，会写程序的人看的入门书。这本书最好用
  info看，一边看一边就可以试。在info里面显示为Emacs Lisp Intro。
+ GNU Emacs Manual 速查手册，info里面显示为Elisp。
+ 《Writing GNU Emacs Extensions》by Bob Glickstein, O'REILLY

** 网络资源

+ [[http://www.dotemacs.de/][一个收集大量Emacs配置文件的网站]]
+ [[http://emacser.com][Emacs中文网]]: 含有多位Emacser的高质量的文章
+ [[http://emacser.com/dea.htm][DEA]]: ahei的Emacs配置大全
+ QQ群: 59134186 18096422. 入群最好把名字改为水木ID吧
* project
** yasnippet

#+include: ~/.emacs.d/elpa/yasnippet-20150323.311/README.md
#+include: ~/.emacs.d/elpa/yasnippet-20150323.311/ChangeLog.org

*** org-mode

#+include: ~/.emacs.d/elpa/yasnippet-20150323.311/snippets/org-mode

**** [[~/.emacs.d/elpa/yasnippet-20150323.311/snippets/org-mode/rt:RoutinesExpandingForOrg-agenda][rt:RoutinesExpandingForOrg-agenda]]

#+BEGIN_SRC snippet
  # -*- mode: snippet; require-final-newline: nil -*-
  # name: rt:RoutinesExpandingForOrg-agenda
  # key: rt
  # binding: direct-keybinding
  # --
  睡眠:${1:1:00}
  起床:${2:7:00}
  跑步:${3:5K}
  吉它:${4:0.5h}
  读书:${5:0.5h}
  Friends:${6:S01E01}
  Dota:${7:45m}
  早餐:${8:1}
  锻炼:${9:0+0}
  牛奶:${10:1}
#+END_SRC

**** \b

#+BEGIN_SRC snippet
# -*- mode: snippet; require-final-newline: nil -*-
# name: \b:latex-begin-end-block
# key: \b
# binding: direct-keybinding
# --
\begin{${1:array}}
$0
\end{$1}
#+END_SRC

**** \l

#+BEGIN_SRC snippet
# -*- mode: snippet; require-final-newline: nil -*-
# name: \l:latex-left-and-right-block
# key: \l
# binding: direct-keybinding
# --
\left${1:[}
$0
\right$1
#+END_SRC

**** mb

#+BEGIN_SRC snippet
# -*- mode: snippet; require-final-newline: nil -*-
# name: mb:latex-mathbf
# key: mb
# binding: direct-keybinding
# --
\mathbf{$0}
#+END_SRC

**** mi

#+BEGIN_SRC snippet
# -*- mode: snippet; require-final-newline: nil -*-
# name: mi:latex-mathit
# key: mi
# binding: direct-keybinding
# --
\mathit{$0}
#+END_SRC

**** mr

#+BEGIN_SRC snippet
# -*- mode: snippet; require-final-newline: nil -*-
# name: mr:latexmathrm
# key: mr
# binding: direct-keybinding
# --
\mathrm{$0}
#+END_SRC

*** cpp-mode

*** python-mode
** .emacs.d

#+include: ~/.emacs.d/README.md
#+include: ~/.emacs.d/ChangeLog.txt
#+include: ~/.emacs.d/init.el
#+include: ~/.emacs.d/lisp/emets.el :src emacs-lisp
#+include: ~/.emacs.d/.projectile

*** Notes
**** 0 is not nil(nil & [])

#+BEGIN_EXAMPLE
  (while (> len 0)  ...) ; 0 is not nil(nil & [])
#+END_EXAMPLE

*** TODOs

+ [ ] [[file:Project/emets/lisp/emets.el::(defun%20emets-insert-current-date()][合并 insert-time, 结合使用前缀和 HELM 选择不同格式的时间]]
+ [ ] [[file:Project/emets/lisp/init-org.el::(setq%20org-reverse-note-order%20t)][使用 mapcar 定义 org-refile-targets]]
+ [ ] [[file:Project/emets/lisp/init-org.el::%3B%3B%20(add-to-list%20'org-latex-classes%20'("beamer"][beamer documentclass in org-mode]]
+ [ ] [[file:Project/emets/lisp/init-org.el::%3B%3B%20ox-freemind][ox-freemind]]
